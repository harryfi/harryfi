using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity.Migrations;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Dynamic;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Services.Protocols;
using System.Xml.Schema;
using EntityFramework.Extensions;
using System.Threading;
using System.Threading.Tasks;
using Erasoft.Function;

using MasterOnline.Models;
using MasterOnline.Services;
using MasterOnline.Utils;

using MasterOnline.ViewModels;
using PagedList;

//ADD BY NURUL 29/1/2019
using System.Drawing;
using System.ComponentModel;
using System.Windows.Forms;
//END ADD BY NURUL 29/1/2019 

//add by calvin 7 april 2019
using Hangfire;
using Hangfire.SqlServer;
using CsvHelper;
//end add by calvin 7 april 2019

// add by fauzi 
using System.Configuration;
using System.Data;
using System.Net;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Text.RegularExpressions;
// end

using Spire.Xls;

namespace MasterOnline.Controllers
{
    [SessionCheck]

    public class ManageController : Controller
    {
        public MoDbContext MoDbContext { get; set; }
        public ErasoftContext ErasoftDbContext { get; set; }
        DatabaseSQL EDB;
        string dbPathEra = "";
        string dbSourceEra = "";

        string EDBConnID = "";
        string usernameLogin;
        public ManageController()
        {
            MoDbContext = new MoDbContext("");
            usernameLogin = "";
            var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            if (sessionData?.Account != null)
            {
                dbPathEra = sessionData.Account.DatabasePathErasoft;
                dbSourceEra = sessionData.Account.DataSourcePath;

                if (sessionData.Account.UserId == "admin_manage")
                    ErasoftDbContext = new ErasoftContext();
                else
                    ErasoftDbContext = new ErasoftContext(dbSourceEra, dbPathEra);

                EDB = new DatabaseSQL(sessionData.Account.DatabasePathErasoft);
                EDBConnID = EDB.GetConnectionString("ConnID");
                usernameLogin = sessionData.Account.Username;

            }
            else
            {
                if (sessionData?.User != null)
                {
                    var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                    dbPathEra = accFromUser.DatabasePathErasoft;
                    dbSourceEra = accFromUser.DataSourcePath;
                    ErasoftDbContext = new ErasoftContext(dbSourceEra, dbPathEra);

                    EDB = new DatabaseSQL(accFromUser.DatabasePathErasoft);
                    EDBConnID = EDB.GetConnectionString("ConnID");
                    usernameLogin = sessionData.User.Username;
                }
            }
            if (usernameLogin.Length > 20)
                usernameLogin = usernameLogin.Substring(0, 17) + "...";

        }

        [HttpGet]
        [Route("manage/keepsession")]
        public JsonResult KeepSessionAlive()
        {
            return new JsonResult { Data = "Success", JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        protected override void Dispose(bool disposing)
        {
            MoDbContext.Dispose();
            ErasoftDbContext?.Dispose();
        }

        // Function Tambahan (START)

        int? ParseInt(string val)
        {
            int i;
            return int.TryParse(val, out i) ? (int?)i : null;
        }

        // Function Tambahan (END)

        // =============================================== Dashboard (START)

        [Route("manage/home")]
        public ActionResult Index()
        {
            var vm = new SubsViewModel()
            {
                ListSubs = MoDbContext.Subscription.ToList()
            };
            return View(vm);
        }

        public ActionResult DashboardPartial(string selDate)
        {
            var selectedDate = (selDate != "" ? DateTime.ParseExact(selDate, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today.Date);

            var selectedMonth = (selDate != "" ? DateTime.ParseExact(selDate, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture).Month : DateTime.Today.Month);
            //#if (DEBUG || Debug_AWS)
            //            var vm = new DashboardViewModel()
            //            {
            //                ListPesanan = ErasoftDbContext.SOT01A.Where(p => 0 == 1).ToList(),
            //                ListPesananDetail = ErasoftDbContext.SOT01B.Where(p => 0 == 1).ToList(),
            //                ListFaktur = ErasoftDbContext.SIT01A.Where(p => 0 == 1).ToList(),
            //                ListFakturDetail = ErasoftDbContext.SIT01B.Where(p => 0 == 1).ToList(),
            //                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
            //                ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3" && 0 == 1).ToList(),
            //                ListAkunMarketplace = ErasoftDbContext.ARF01.Where(p => 0 == 1).ToList(),
            //                ListMarket = MoDbContext.Marketplaces.Where(p => 0 == 1).ToList(),
            //                ListBarangUntukCekQty = ErasoftDbContext.STF08A.Where(p => 0 == 1).ToList(),
            //                ListStok = ErasoftDbContext.STT01B.Where(p => 0 == 1).ToList()
            //            };
            //#else
            var vm = new DashboardViewModel()
            {
                //ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.TGL.Value.Month == selectedMonth && p.TGL.Value.Year == selectedDate.Year && (p.STATUS_TRANSAKSI == "0" || p.STATUS_TRANSAKSI == "01" || p.STATUS_TRANSAKSI == "02" || p.STATUS_TRANSAKSI == "03" || p.STATUS_TRANSAKSI == "04")).ToList(),
                //ListFaktur = ErasoftDbContext.SIT01A.Where(p => p.TGL.Month == selectedMonth && p.TGL.Year == selectedDate.Year).ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                listBarangCount = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Count(),
                ListAkunMarketplace = ErasoftDbContext.ARF01.ToList(),
                ListMarket = MoDbContext.Marketplaces.ToList(),
                //remark by calvin 8 juli 2019
                //ListBarangUntukCekQty = ErasoftDbContext.STF08A.ToList(),
                //end remark by calvin 8 juli 2019
                //ListStok = ErasoftDbContext.STT01B.ToList()
            };
            //#endif
            //var listNoPesanan = vm.ListPesanan.Where(p => (p.STATUS_TRANSAKSI == "0" || p.STATUS_TRANSAKSI == "01" || p.STATUS_TRANSAKSI == "02" || p.STATUS_TRANSAKSI == "03" || p.STATUS_TRANSAKSI == "04")).Select(p => p.NO_BUKTI).ToList();
            //vm.ListPesananDetail = ErasoftDbContext.SOT01B.Where(p => listNoPesanan.Contains(p.NO_BUKTI)).ToList();
            //var listNoFaktur = vm.ListFaktur.Select(p => p.NO_BUKTI).ToList();
            //vm.ListFakturDetail = ErasoftDbContext.SIT01B.Where(p => listNoFaktur.Contains(p.NO_BUKTI)).ToList();

            //change by calvin 17 september 2019
            //// Pesanan
            //vm.JumlahPesananHariIni = vm.ListPesanan?.Where(p => p.TGL?.Date == selectedDate).Count();
            //// change by nurul 12/10/2018   vm.NilaiPesananHariIni = vm.ListPesanan?.Where(p => p.TGL?.Date == selectedDate).Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiPesananHariIni = vm.ListPesanan?.Where(p => p.TGL?.Date == selectedDate).Sum(p => p.NETTO);
            //vm.JumlahPesananBulanIni = vm.ListPesanan?.Where(p => p.TGL?.Month == selectedMonth).Count();
            //// change by nurul 12/10/2018   vm.NilaiPesananBulanIni = vm.ListPesanan?.Where(p => p.TGL?.Month == selectedMonth).Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiPesananBulanIni = vm.ListPesanan?.Where(p => p.TGL?.Month == selectedMonth).Sum(p => p.NETTO);

            //// Faktur
            //vm.JumlahFakturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Count();
            //// change by nurul 12/10/2018   vm.NilaiFakturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiFakturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Sum(p => p.NETTO);
            //vm.JumlahFakturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Count();
            //// change by nurul 12/10/2018   vm.NilaiFakturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiFakturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Sum(p => p.NETTO);


            //// Retur
            //vm.JumlahReturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Count();
            //// change by nurul 12/10/2018   vm.NilaiReturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiReturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Sum(p => p.NETTO);
            //vm.JumlahReturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Count();
            //// change by nurul 12/10/2018   vm.NilaiReturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiReturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Sum(p => p.NETTO);

            var ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.TGL.Value.Month == selectedMonth && p.TGL.Value.Year == selectedDate.Year && (p.STATUS_TRANSAKSI == "0" || p.STATUS_TRANSAKSI == "01" || p.STATUS_TRANSAKSI == "02" || p.STATUS_TRANSAKSI == "03" || p.STATUS_TRANSAKSI == "04"));
            var ListFaktur = ErasoftDbContext.SIT01A.Where(p => p.TGL.Month == selectedMonth && p.TGL.Year == selectedDate.Year && p.STATUS == "1");

            // Pesanan
            vm.JumlahPesananHariIni = ListPesanan.Where(p => System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Count();
            // change by nurul 12/10/2018   vm.NilaiPesananHariIni = vm.ListPesanan?.Where(p => p.TGL?.Date == selectedDate).Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiPesananHariIni = ListPesanan.Where(p => System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiPesananHariIni = ListPesanan.Where(p => System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Sum(p => (double?)(p.BRUTO)) ?? 0;
            vm.JumlahPesananBulanIni = ListPesanan.Where(p => p.TGL.Value.Month == selectedMonth).Count();
            // change by nurul 12/10/2018   vm.NilaiPesananBulanIni = vm.ListPesanan?.Where(p => p.TGL?.Month == selectedMonth).Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiPesananBulanIni = ListPesanan.Where(p => p.TGL.Value.Month == selectedMonth).Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiPesananBulanIni = ListPesanan.Where(p => p.TGL.Value.Month == selectedMonth).Sum(p => (double?)(p.BRUTO)) ?? 0;

            // Faktur
            vm.JumlahFakturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Count();
            // change by nurul 12/10/2018   vm.NilaiFakturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiFakturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiFakturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "2").Sum(p => (double?)(p.BRUTO)) ?? 0;
            vm.JumlahFakturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Count();
            // change by nurul 12/10/2018   vm.NilaiFakturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiFakturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiFakturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "2").Sum(p => (double?)(p.BRUTO)) ?? 0;


            // Retur
            vm.JumlahReturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Count();
            // change by nurul 12/10/2018   vm.NilaiReturHariIni = vm.ListFaktur?.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiReturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiReturHariIni = ListFaktur.Where(p => p.TGL == selectedDate && p.JENIS_FORM == "3").Sum(p => (double?)(p.BRUTO)) ?? 0;
            vm.JumlahReturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Count();
            // change by nurul 12/10/2018   vm.NilaiReturBulanIni = vm.ListFaktur?.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Sum(p => p.BRUTO - p.NILAI_DISC);
            //vm.NilaiReturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Sum(p => (double?)(p.NETTO)) ?? 0;
            vm.NilaiReturBulanIni = ListFaktur.Where(p => p.TGL.Month == selectedMonth && p.JENIS_FORM == "3").Sum(p => (double?)(p.BRUTO)) ?? 0;
            //end change by calvin 17 september 2019

            if (vm.ListAkunMarketplace.Count > 0)
            {
                foreach (var marketplace in vm.ListAkunMarketplace)
                {
                    var idMarket = Convert.ToInt32(marketplace.NAMA);
                    var namaMarket = vm.ListMarket.Single(m => m.IdMarket == idMarket).NamaMarket;

                    //change by calvin 17 september 2019
                    //var jumlahPesananToday = vm.ListPesanan?
                    //    .Where(p => p.CUST == marketplace.CUST && p.TGL?.Date == selectedDate).Count();
                    //// change by nurul 12/10/2018   var nilaiPesananToday = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL == selectedDate).Sum(p => p.BRUTO - p.NILAI_DISC))}";
                    //var nilaiPesananToday = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL?.Date == selectedDate).Sum(p => p.NETTO))}";


                    //var jumlahPesananMonth = vm.ListPesanan?

                    //    .Where(p => p.CUST == marketplace.CUST && p.TGL?.Month == selectedMonth).Count();
                    //// change by nurul 12/10/2018   var nilaiPesananMonth = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL?.Month == selectedMonth).Sum(p => p.BRUTO - p.NILAI_DISC))}";
                    //var nilaiPesananMonth = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL?.Month == selectedMonth).Sum(p => p.NETTO))}";
                    var jumlahPesananToday = ListPesanan
                        .Where(p => p.CUST == marketplace.CUST && System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Count();
                    // change by nurul 12/10/2018   var nilaiPesananToday = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL == selectedDate).Sum(p => p.BRUTO - p.NILAI_DISC))}";
                    //var nilaiPesananToday = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", ListPesanan.Where(p => p.CUST == marketplace.CUST && System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Sum(p => (double?)(p.NETTO)) ?? 0)}";
                    var nilaiPesananToday = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", ListPesanan.Where(p => p.CUST == marketplace.CUST && System.Data.Entity.DbFunctions.TruncateTime(p.TGL.Value) == selectedDate).Sum(p => (double?)(p.BRUTO)) ?? 0)}";


                    var jumlahPesananMonth = ListPesanan

                        .Where(p => p.CUST == marketplace.CUST && p.TGL.Value.Month == selectedMonth).Count();
                    // change by nurul 12/10/2018   var nilaiPesananMonth = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListPesanan?.Where(p => p.CUST == marketplace.CUST && p.TGL?.Month == selectedMonth).Sum(p => p.BRUTO - p.NILAI_DISC))}";
                    //var nilaiPesananMonth = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", ListPesanan.Where(p => p.CUST == marketplace.CUST && p.TGL.Value.Month == selectedMonth).Sum(p => (double?)(p.NETTO)) ?? 0)}";
                    var nilaiPesananMonth = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", ListPesanan.Where(p => p.CUST == marketplace.CUST && p.TGL.Value.Month == selectedMonth).Sum(p => (double?)(p.BRUTO)) ?? 0)}";
                    //end change by calvin 17 september 2019

                    vm.ListPesananPerMarketplace.Add(new PesananPerMarketplaceModel()
                    {
                        NamaMarket = $"{namaMarket} ({marketplace.PERSO})",
                        JumlahPesananHariIni = jumlahPesananToday.ToString(),
                        NilaiPesananHariIni = nilaiPesananToday,
                        JumlahPesananBulanIni = jumlahPesananMonth.ToString(),
                        NilaiPesananBulanIni = nilaiPesananMonth
                    });
                }
            }

            //change by calvin 8 juli 2019
            //foreach (var barang in vm.ListBarang)
            //{
            //    var listBarangTerpesan = vm.ListPesananDetail.Where(b => b.BRG == barang.BRG).ToList();

            //    if (listBarangTerpesan.Count > 0)
            //    {
            //        var qtyBarang = listBarangTerpesan.Where(b => b.TGL_INPUT?.Month >= (selectedMonth - 3) &&
            //                                                      b.TGL_INPUT?.Month <= selectedMonth).Sum(b => b.QTY);
            //        vm.ListBarangLaku.Add(new PenjualanBarang
            //        {
            //            KodeBrg = barang.BRG,
            //            NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            //            Qty = qtyBarang,
            //            Laku = true
            //        });
            //    }
            //}

            //remark by nurul 20/9/2019 -- sudah tidak dipakai, karna udh pake pie chart 
            //string sSQL = "SELECT TOP 10 A.BRG,B.NAMA + ' ' + ISNULL(B.NAMA2,'') AS NAMA,A.SUM_QTY AS QTY FROM ( ";
            //sSQL += "SELECT BRG, SUM(QTY)SUM_QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI=B.NO_BUKTI WHERE MONTH(B.TGL_INPUT) >= " + (selectedMonth - 3).ToString() + " AND MONTH(B.TGL_INPUT) <= " + (selectedMonth).ToString() + " AND B.BRG <> 'NOT_FOUND' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY BRG ";
            //sSQL += ") A LEFT JOIN STF02 B ON A.BRG = B.BRG WHERE TYPE ='3' ORDER BY SUM_QTY DESC ";
            //var ListBarangAndQtyInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>(sSQL).ToList();
            //foreach (var item in ListBarangAndQtyInPesanan)
            //{
            //    vm.ListBarangLaku.Add(new PenjualanBarang
            //    {
            //        KodeBrg = item.BRG,
            //        NamaBrg = item.NAMA,
            //        Qty = item.QTY,
            //        Laku = true
            //    });
            //}
            //end remark by nurul 20/9/2019 -- sudah tidak dipakai, karna udh pake pie chart 

            //end change by calvin 8 juli 2019

            //Change by calvin 8 juli 2019, barang tidak laku sudah tidak dipakai
            //foreach (var barang in vm.ListBarang.Where(b => b.Tgl_Input?.Month >= (selectedMonth - 3) && b.Tgl_Input?.Month <= selectedMonth))
            //{
            //    var barangTerpesan = vm.ListPesananDetail.FirstOrDefault(b => b.BRG == barang.BRG);
            //    var stokBarang = vm.ListStok.FirstOrDefault(b => b.Kobar == barang.BRG);

            //    if (barangTerpesan == null)
            //    {
            //        vm.ListBarangTidakLaku.Add(new PenjualanBarang
            //        {
            //            KodeBrg = barang.BRG,
            //            NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            //            Qty = Convert.ToDouble(stokBarang?.Qty),
            //            Laku = false
            //        });
            //    }
            //}
            //CHANGE BY NURUL 19/9/2019, UBAH QUERY 
            //sSQL = "SELECT B.BRG,B.NAMA + ' ' + ISNULL(B.NAMA2, '') AS NAMA,ISNULL(A.QTY,0) AS QTY FROM( ";
            //sSQL += "SELECT DISTINCT BRG, QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI=B.NO_BUKTI WHERE MONTH(B.TGL_INPUT) >= " + (selectedMonth - 3).ToString() + " AND MONTH(B.TGL_INPUT) <= " + (selectedMonth).ToString() + " AND B.BRG <> 'NOT_FOUND' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') ";
            //sSQL += ") A RIGHT JOIN STF02 B ON A.BRG = B.BRG WHERE ISNULL(A.BRG, '') = '' AND TYPE ='3'";
            //var ListBarangAndQtyNotInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>(sSQL).ToList();
            //foreach (var item in ListBarangAndQtyNotInPesanan)
            //{
            //    vm.ListBarangTidakLaku.Add(new PenjualanBarang
            //    {
            //        KodeBrg = item.BRG,
            //        NamaBrg = item.NAMA,
            //        Qty = item.QTY,
            //        Laku = false
            //    });
            //}            
            //end change by calvin 8 juli 2019
            string sSQL = "select COUNT(ID) AS COUNT_TRANSAKSI from (";
            sSQL += "select distinct A.brg,A.id from stf02 A LEFT join (";
            sSQL += "SELECT DISTINCT BRG FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI ";
            sSQL += "WHERE A.TGL >= '" + (selectedDate.AddMonths(-1)).ToString("yyyy-MM-dd") + "' AND A.TGL <= '" + (selectedDate).ToString("yyyy-MM-dd") + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND B.BRG <> 'NOT_FOUND' ";
            sSQL += ")B on A.brg=B.brg WHERE ISNULL(B.BRG, '') = '' AND A.TYPE='3')A";
            var ListBarangAndQtyNotInPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL).Single();
            vm.BarangTidakLakuCount = ListBarangAndQtyNotInPesanan.COUNT_TRANSAKSI;
            //END CHANGE BY NURUL 19/9/2019 

            //add by nurul 20/9/2019, tambah query get count barang minimum stok 
            sSQL = "SELECT COUNT(BRG) AS COUNT_TRANSAKSI FROM ( ";
            sSQL += "SELECT DISTINCT A.BRG, A.NAMA, A.QOH, A.QOO , A.SISA, A.MINI, A.SELISIH FROM ( ";
            sSQL += "SELECT B.BRG, (isnull(B.NAMA, '') + ' ' + ISNULL(B.NAMA2, '')) AS NAMA, ISNULL(QOH,0) QOH, ISNULL(QOO,0) QOO, (ISNULL(QOH,0) - ISNULL(QOO,0)) AS SISA,B.MINI, ((ISNULL(QOH,0) - ISNULL(QOO,0)) - B.MINI) AS SELISIH FROM ";
            sSQL += "STF02 B LEFT JOIN ( ";
            sSQL += "SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH, ";
            sSQL += "SUM(CASE WHEN JENIS = 'QOO' THEN JUMLAH ELSE 0 END) QOO ";
            sSQL += "FROM ( ";
            sSQL += "	SELECT        'QOH' AS JENIS, BRG, JUMLAH = ISNULL(SUM(QAWAL + (QM1 + QM2 + QM3 + QM4 + QM5 + QM6 + QM7 + QM8 + QM9 + QM10 + QM11 + QM12) ";
            sSQL += "	    - (QK1 + QK2 + QK3 + QK4 + QK5 + QK6 + QK7 + QK8 + QK9 + QK10 + QK11 + QK12)), 0) ";
            sSQL += "	FROM            STF08A(NOLOCK) INNER JOIN ";
            sSQL += "		STF18(NOLOCK) ON STF08A.GD = STF18.KODE_GUDANG ";
            sSQL += "	WHERE        STF08A.TAHUN = YEAR('" + (selectedDate).ToString("yyyy-MM-dd") + "') AND STF18.QOH_SALES = 0 ";
            sSQL += "	GROUP BY BRG ";
            sSQL += "	UNION ALL ";
            sSQL += "	SELECT        'QOO' AS JENIS, B.BRG, JUMLAH = ISNULL(SUM(ISNULL(QTY, 0)), 0) ";
            sSQL += "	FROM            SOT01A A(NOLOCK) INNER JOIN ";
            sSQL += "		SOT01B B(NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN ";
            sSQL += "		SIT01A C(NOLOCK) ON A.NO_BUKTI = C.NO_SO ";
            sSQL += "	WHERE        A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND ISNULL(C.NO_BUKTI, '') = '' ";
            sSQL += "	GROUP BY B.BRG)A ";
            sSQL += "GROUP BY BRG ";
            sSQL += ")A ";
            sSQL += "ON A.BRG = B.BRG WHERE B.TYPE = '3' )A ";
            sSQL += "WHERE A.SISA <= A.MINI ";
            sSQL += ")A ";
            var ListBarangMinStok = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL).Single();
            vm.BarangDibawahMinStokCount = ListBarangMinStok.COUNT_TRANSAKSI;
            //end add by nurul 20/9/2019

            return PartialView(vm);
        }

        //add by nurul 12/7/2019
        public class getLastDate
        {
            public int week { get; set; }
        }
        public class listDataLine
        {
            public string NOBUK { get; set; }
            public double NETTO { get; set; }
        }
        public class SUM_Netto
        {
            public double TOTAL_NETTO { get; set; }
        }
        public class COUNT_List
        {
            public int COUNT_TRANSAKSI { get; set; }
        }
        public class CEK_NULL
        {
            public int JUMLAH { get; set; }
        }
        public ActionResult RefreshDashboardLine(string tgl)
        {
            var selectedDate = (tgl != "" ? DateTime.ParseExact(tgl, "dd/MM/yyyy",
                    CultureInfo.InvariantCulture) : DateTime.Today.Date);

            var selectedMonth = (tgl != "" ? DateTime.ParseExact(tgl, "dd/MM/yyyy",
                CultureInfo.InvariantCulture).Month : DateTime.Today.Month);

            var vm = new DashboardViewModel()
            {
            };

            string[] minggu1 = { "01", "02", "03", "04", "05", "06", "07" };
            string[] minggu2 = { "08", "09", "10", "11", "12", "13", "14" };
            string[] minggu3 = { "15", "16", "17", "18", "19", "20", "21" };
            string[] minggu4 = { "22", "23", "24", "25", "26", "27", "28" };
            List<string> minggu5 = new List<string>();
            var lastday = new DateTime(selectedDate.Year, selectedDate.Month, 1).AddMonths(1).AddDays(-1);
            if (Convert.ToInt32(lastday.Day) > 28)
            {
                for (int y = 29; y <= Convert.ToInt32(lastday.Day); y++)
                {
                    minggu5.Add(Convert.ToString(y));
                }
            }

            bool isSunday = selectedDate.DayOfWeek == 0;
            var dayOfweek = isSunday == false ? (int)selectedDate.DayOfWeek : 7;
            DateTime startWk = selectedDate.AddDays(((int)(dayOfweek) * -1) + 1);
            List<DateTime> endday = new List<DateTime>();
            for (int i = 0; i <= 6; i++)
            {
                endday.Add(startWk.AddDays(i).Date);
            }
            #region pesanan

            //change by nurul 11/9/2019, tuning 
            //var pesananTahunIni = ErasoftDbContext.SOT01A.Where(a => a.TGL.Value.Year == selectedDate.Year).ToList();
            string ssql = "";

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') ";
            //var cekpesananTahunIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if(cekpesananTahunIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        //var cekjumlahPesanan = pesananTahunIni.Where(a => a.TGL.Value.Month == i).Count();
            //        //var NilaiPesanan = pesananTahunIni.Where(a => a.TGL.Value.Month == i).Sum(p => p.NETTO);

            //        string SSQL1 = "";
            //        SSQL1 += "SELECT ISNULL(SUM(NETTO),0) TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + " AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') ";
            //        var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL1).Single();
            //        string SSQL2 = "";
            //        SSQL2 += "SELECT COUNT(RECNUM) AS COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + " AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') ";
            //        var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL2).Single();

            //        vm.ListdashboardPesananTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //            Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //        });
            //    }
            //}
            //else
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        vm.ListdashboardPesananTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = "0",
            //            Nilai = "0"
            //        });
            //    }
            //}
            {
                ssql = "";
                //ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY MONTH(TGL)";
                ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY MONTH(TGL)";
                var dsBulanan = EDB.GetDataSet("CString", "BULANAN", ssql);
                for (int i = 1; i < 13; i++)
                {
                    var getData = dsBulanan.Tables[0].Select("BULAN = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardPesananTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardPesananTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //CHANGE BY CALVIN 18 SEPTEMBER 2019
            //for (int i = 0; i < endday.Count(); i++)
            //{
            //    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
            //    var dayName = endday[i].DayOfWeek;
            //    //CHANGE BY NURUL 11/9/2019, TUNING 
            //    //var sSQLPesanan = "SELECT A.NOBUK, A.NETTO FROM (SELECT NO_BUKTI AS NOBUK, NETTO AS NETTO FROM SOT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' )A";
            //    //var ListPesananMingguini = ErasoftDbContext.Database.SqlQuery<listDataLine>(sSQLPesanan).ToList();
            //    //var cekjumlahpesanan = ListPesananMingguini.Count();
            //    //var NilaiPesanan = ListPesananMingguini.Sum(a => a.NETTO);

            //    string SSQL3 = "";
            //    SSQL3 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //    var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL3).Single();
            //    string SSQL4 = "";
            //    SSQL4 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //    var cekjumlahpesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL4).Single();

            //    vm.ListdashboardPesananMingguan.Add(new DashboardMingguanModel()
            //    {
            //        No = dayName.ToString() + " " + getdate,
            //        Jumlah = cekjumlahpesanan.COUNT_TRANSAKSI.ToString(),
            //        Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //    });
            //}
            {
                var firstDateOfWeek = endday.First();
                var lastDateOfWeek = endday.Last();
                ssql = "";
                //ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                var dsTuning = EDB.GetDataSet("CString", "HARIAN", ssql);
                for (int i = 0; i < endday.Count(); i++)
                {
                    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
                    var dayName = endday[i].DayOfWeek;
                    var getData = dsTuning.Tables[0].Select("TAHUN = '" + endday[i].Year + "' AND BULAN = '" + endday[i].Month + "' AND HARI = '" + endday[i].Day + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardPesananMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardPesananMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //var pesananBulanIni = ErasoftDbContext.SOT01A.Where(a => a.TGL.Value.Year == selectedDate.Year && a.TGL.Value.Month == selectedMonth).ToList();
            //CHANGE BY CALVIN 18 SEPTEMBER 2019
            //ssql = "";
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SOT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') ";
            //var cekpesananBulanIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if (cekpesananBulanIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            //var cekjumlahPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu1.Last())).Count();
            //            //var NilaiPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu1.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                //No = "MingguKe-" + i,
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            //var cekjumlahPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu2.Last())).Count();
            //            //var NilaiPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu2.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            //var cekjumlahPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu3.Last())).Count();
            //            //var NilaiPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu3.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            //var cekjumlahPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu4.Last())).Count();
            //            //var NilaiPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu4.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //            var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                //var cekjumlahPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu5.Last())).Count();
            //                //var NilaiPesanan = pesananBulanIni.Where(a => a.TGL.Value.Month == selectedMonth && a.TGL.Value.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Value.Day <= Convert.ToInt32(minggu5.Last())).Sum(a => a.NETTO);
            //                string SSQL5 = "";
            //                SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //                var NilaiPesanan = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //                string SSQL6 = "";
            //                SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SOT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')";
            //                var cekjumlahPesanan = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //                vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = cekjumlahPesanan.COUNT_TRANSAKSI.ToString(),
            //                    Nilai = NilaiPesanan.TOTAL_NETTO.ToString()
            //                });
            //            }
            //        }
            //    }

            //}
            //else
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = "0",
            //                    Nilai = "0"
            //                });
            //            }
            //        }
            //    }
            //}
            {
                var adaMinggu5 = minggu5.Count() > 0;
                ssql = "";
                //ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;

                if (adaMinggu5)
                {
                    ssql += "UNION ALL" + System.Environment.NewLine;
                    //ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                    ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SOT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')" + System.Environment.NewLine;
                }

                var dsTuning = EDB.GetDataSet("CString", "TUNING", ssql);
                for (int i = 1; i < 6; i++)
                {
                    string noModel = "";
                    switch (i)
                    {
                        case 1:
                            {
                                noModel = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 2:
                            {
                                noModel = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 3:
                            {
                                noModel = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 4:
                            {
                                noModel = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 5:
                            {
                                if (adaMinggu5)
                                {
                                    noModel = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                                }
                            }
                            break;
                    }
                    var getData = dsTuning.Tables[0].Select("MINGGU = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
                        {
                            No = noModel,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        if (noModel != "")
                        {
                            vm.ListdashboardPesananBulanan.Add(new DashboardBulananModel()
                            {
                                No = noModel,
                                Jumlah = "0",
                                Nilai = "0"
                            });
                        }
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            #endregion
            #region faktur
            //var fakturTahunIni = ErasoftDbContext.SIT01A.Where(a => a.TGL.Year == selectedDate.Year && a.JENIS_FORM == "2").ToList();

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            //ssql = "";
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '2' ";
            //var cekfakturTahunIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if(cekfakturTahunIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        //var cekjumlahFaktur = fakturTahunIni.Where(a => a.TGL.Month == i).Count();
            //        //var NilaiFaktur = fakturTahunIni.Where(a => a.TGL.Month == i).Sum(p => p.NETTO);

            //        string SSQL1 = "";
            //        SSQL1 += "SELECT ISNULL(SUM(NETTO),0) TOTAL_NETTO FROM SIT01A WHERE JENIS_FORM = '2' AND YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + "";
            //        var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL1).Single();
            //        string SSQL2 = "";
            //        SSQL2 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE JENIS_FORM = '2' AND YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + " ";
            //        var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL2).Single();

            //        vm.ListdashboardFakturTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //            Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //        });
            //    }
            //}
            //else
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        vm.ListdashboardFakturTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = "0",
            //            Nilai = "0"
            //        });
            //    }
            //}
            {
                ssql = "";
                //ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '2' AND STATUS = '1' GROUP BY MONTH(TGL)";
                ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '2' AND STATUS = '1' GROUP BY MONTH(TGL)";
                var dsBulanan = EDB.GetDataSet("CString", "BULANAN", ssql);
                for (int i = 1; i < 13; i++)
                {
                    var getData = dsBulanan.Tables[0].Select("BULAN = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardFakturTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardFakturTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            //for (int i = 0; i < endday.Count(); i++)
            //{
            //    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
            //    var dayName = endday[i].DayOfWeek;
            //    //var sSQLFaktur = "SELECT A.NOBUK, A.NETTO FROM (SELECT NO_BUKTI AS NOBUK, NETTO AS NETTO FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '2' )A";
            //    //var ListFakturMingguini = ErasoftDbContext.Database.SqlQuery<listDataLine>(sSQLFaktur).ToList();
            //    //var cekjumlahFaktur = ListFakturMingguini.Count();
            //    //var NilaiFaktur = ListFakturMingguini.Sum(a => a.NETTO);
            //    string SSQL3 = "";
            //    SSQL3 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '2'";
            //    var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL3).Single();
            //    string SSQL4 = "";
            //    SSQL4 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '2'";
            //    var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL4).Single();

            //    vm.ListdashboardFakturMingguan.Add(new DashboardMingguanModel()
            //    {
            //        No = dayName.ToString() + " " + getdate,
            //        Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //        Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //    });
            //}
            {
                var firstDateOfWeek = endday.First();
                var lastDateOfWeek = endday.Last();
                ssql = "";
                //ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1' GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1' GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                var dsTuning = EDB.GetDataSet("CString", "HARIAN", ssql);
                for (int i = 0; i < endday.Count(); i++)
                {
                    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
                    var dayName = endday[i].DayOfWeek;
                    var getData = dsTuning.Tables[0].Select("TAHUN = '" + endday[i].Year + "' AND BULAN = '" + endday[i].Month + "' AND HARI = '" + endday[i].Day + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardFakturMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardFakturMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            ////var fakturBulanIni = ErasoftDbContext.SIT01A.Where(a => a.TGL.Year == selectedDate.Year && a.TGL.Month == selectedMonth && a.JENIS_FORM == "2").ToList();
            //ssql = "";
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND JENIS_FORM = '2' ";
            //var cekfakturBulanIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if (cekfakturBulanIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            //var cekjumlahFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Day <= Convert.ToInt32(minggu1.Last())).Count();
            //            //var NilaiFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Day <= Convert.ToInt32(minggu1.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND JENIS_FORM = '2'";
            //            var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND JENIS_FORM = '2'";
            //            var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            //var cekjumlahFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Day <= Convert.ToInt32(minggu2.Last())).Count();
            //            //var NilaiFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Day <= Convert.ToInt32(minggu2.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND JENIS_FORM = '2'";
            //            var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND JENIS_FORM = '2'";
            //            var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            //var cekjumlahFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Day <= Convert.ToInt32(minggu3.Last())).Count();
            //            //var NilaiFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Day <= Convert.ToInt32(minggu3.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND JENIS_FORM = '2'";
            //            var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND JENIS_FORM = '2'";
            //            var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            //var cekjumlahFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Day <= Convert.ToInt32(minggu4.Last())).Count();
            //            //var NilaiFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Day <= Convert.ToInt32(minggu4.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND JENIS_FORM = '2'";
            //            var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND JENIS_FORM = '2'";
            //            var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                //var cekjumlahFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Day <= Convert.ToInt32(minggu5.Last())).Count();
            //                //var NilaiFaktur = fakturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Day <= Convert.ToInt32(minggu5.Last())).Sum(a => a.NETTO);
            //                string SSQL5 = "";
            //                SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND JENIS_FORM = '2'";
            //                var NilaiFaktur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //                string SSQL6 = "";
            //                SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND JENIS_FORM = '2'";
            //                var cekjumlahFaktur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //                vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = cekjumlahFaktur.COUNT_TRANSAKSI.ToString(),
            //                    Nilai = NilaiFaktur.TOTAL_NETTO.ToString()
            //                });
            //            }
            //        }
            //    }

            //}
            //else
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = "0",
            //                    Nilai = "0"
            //                });
            //            }
            //        }
            //    }
            //}
            {
                var adaMinggu5 = minggu5.Count() > 0;
                ssql = "";
                //ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;

                if (adaMinggu5)
                {
                    ssql += "UNION ALL" + System.Environment.NewLine;
                    //ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                    ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND JENIS_FORM = '2' AND STATUS = '1'" + System.Environment.NewLine;
                }

                var dsTuning = EDB.GetDataSet("CString", "TUNING", ssql);
                for (int i = 1; i < 6; i++)
                {
                    string noModel = "";
                    switch (i)
                    {
                        case 1:
                            {
                                noModel = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 2:
                            {
                                noModel = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 3:
                            {
                                noModel = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 4:
                            {
                                noModel = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 5:
                            {
                                if (adaMinggu5)
                                {
                                    noModel = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                                }
                            }
                            break;
                    }
                    var getData = dsTuning.Tables[0].Select("MINGGU = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
                        {
                            No = noModel,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        if (noModel != "")
                        {
                            vm.ListdashboardFakturBulanan.Add(new DashboardBulananModel()
                            {
                                No = noModel,
                                Jumlah = "0",
                                Nilai = "0"
                            });
                        }
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            #endregion
            #region retur
            ////var returTahunIni = ErasoftDbContext.SIT01A.Where(a => a.TGL.Year == selectedDate.Year && a.JENIS_FORM == "3").ToList();
            //ssql = "";
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '3' ";
            //var cekreturTahunIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if(cekreturTahunIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        //var cekjumlahRetur = returTahunIni.Where(a => a.TGL.Month == i).Count();
            //        //var NilaiRetur = returTahunIni.Where(a => a.TGL.Month == i).Sum(p => p.NETTO);

            //        string SSQL1 = "";
            //        SSQL1 += "SELECT ISNULL(SUM(NETTO),0) TOTAL_NETTO FROM SIT01A WHERE JENIS_FORM = '3' AND YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + "";
            //        var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL1).Single();
            //        string SSQL2 = "";
            //        SSQL2 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE JENIS_FORM = '3' AND YEAR(TGL) = " + selectedDate.Year + " AND MONTH(TGL) = " + i + " ";
            //        var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL2).Single();

            //        vm.ListdashboardReturTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //            Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //        });
            //    }
            //}
            //else
            //{
            //    for (int i = 1; i < 13; i++)
            //    {
            //        vm.ListdashboardReturTahunan.Add(new DashboardTahunanModel()
            //        {
            //            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
            //            Jumlah = "0",
            //            Nilai = "0"
            //        });
            //    }
            //}
            {
                ssql = "";
                //ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '3' GROUP BY MONTH(TGL)";
                ssql = "SELECT MONTH(TGL) BULAN, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND JENIS_FORM = '3' GROUP BY MONTH(TGL)";
                var dsBulanan = EDB.GetDataSet("CString", "BULANAN", ssql);
                for (int i = 1; i < 13; i++)
                {
                    var getData = dsBulanan.Tables[0].Select("BULAN = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardReturTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardReturTahunan.Add(new DashboardTahunanModel()
                        {
                            No = CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i - 1],
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            //for (int i = 0; i < endday.Count(); i++)
            //{
            //    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
            //    var dayName = endday[i].DayOfWeek;
            //    //var sSQLRetur = "SELECT A.NOBUK, A.NETTO FROM (SELECT NO_BUKTI AS NOBUK, NETTO AS NETTO FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '3' )A";
            //    //var ListReturMingguini = ErasoftDbContext.Database.SqlQuery<listDataLine>(sSQLRetur).ToList();
            //    //var cekjumlahRetur = ListReturMingguini.Count();
            //    //var NilaiRetur = ListReturMingguini.Sum(a => a.NETTO);
            //    string SSQL3 = "";
            //    SSQL3 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '3'";
            //    var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL3).Single();
            //    string SSQL4 = "";
            //    SSQL4 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + endday[i].Year + "' AND MONTH(TGL) = '" + endday[i].Month + "' AND DAY(TGL) = '" + endday[i].Day + "' AND JENIS_FORM = '3'";
            //    var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL4).Single();

            //    vm.ListdashboardReturMingguan.Add(new DashboardMingguanModel()
            //    {
            //        No = dayName.ToString() + " " + getdate,
            //        Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //        Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //    });
            //}
            {
                var firstDateOfWeek = endday.First();
                var lastDateOfWeek = endday.Last();
                ssql = "";
                //ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND JENIS_FORM = '3' GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                ssql = "SELECT YEAR(TGL) TAHUN, MONTH(TGL) BULAN, DAY(TGL) HARI, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + firstDateOfWeek.ToString("yyyy-MM-dd") + " 00:00:00.000' AND TGL <= '" + lastDateOfWeek.ToString("yyyy-MM-dd") + " 23:59:59.999' AND JENIS_FORM = '3' GROUP BY YEAR(TGL),MONTH(TGL),DAY(TGL)";
                var dsTuning = EDB.GetDataSet("CString", "HARIAN", ssql);
                for (int i = 0; i < endday.Count(); i++)
                {
                    var getdate = endday[i].ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
                    var dayName = endday[i].DayOfWeek;
                    var getData = dsTuning.Tables[0].Select("TAHUN = '" + endday[i].Year + "' AND BULAN = '" + endday[i].Month + "' AND HARI = '" + endday[i].Day + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardReturMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        vm.ListdashboardReturMingguan.Add(new DashboardMingguanModel()
                        {
                            No = dayName.ToString() + " " + getdate,
                            Jumlah = Convert.ToString(0),
                            Nilai = Convert.ToString(0)
                        });
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            //CHANGE BY CALVIN 18 SEPTEMBER 2019, TUNING
            ////var ReturBulanIni = ErasoftDbContext.SIT01A.Where(a => a.TGL.Year == selectedDate.Year && a.TGL.Month == selectedMonth && a.JENIS_FORM == "3").ToList();
            //ssql = "";
            //ssql += "SELECT COUNT(RECNUM) JUMLAH FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND JENIS_FORM = '3' ";
            //var cekReturBulanIni = ErasoftDbContext.Database.SqlQuery<CEK_NULL>(ssql).Single();
            //if (cekReturBulanIni.JUMLAH > 0)
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            //var cekjumlahRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Day <= Convert.ToInt32(minggu1.Last())).Count();
            //            //var NilaiRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu1.First()) && a.TGL.Day <= Convert.ToInt32(minggu1.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND JENIS_FORM = '3'";
            //            var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu1.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu1.Last()) + "' AND JENIS_FORM = '3'";
            //            var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            //var cekjumlahRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Day <= Convert.ToInt32(minggu2.Last())).Count();
            //            //var NilaiRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu2.First()) && a.TGL.Day <= Convert.ToInt32(minggu2.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND JENIS_FORM = '3'";
            //            var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu2.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu2.Last()) + "' AND JENIS_FORM = '3'";
            //            var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            //var cekjumlahRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Day <= Convert.ToInt32(minggu3.Last())).Count();
            //            //var NilaiRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu3.First()) && a.TGL.Day <= Convert.ToInt32(minggu3.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND JENIS_FORM = '3'";
            //            var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu3.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu3.Last()) + "' AND JENIS_FORM = '3'";
            //            var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            //var cekjumlahRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Day <= Convert.ToInt32(minggu4.Last())).Count();
            //            //var NilaiRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu4.First()) && a.TGL.Day <= Convert.ToInt32(minggu4.Last())).Sum(a => a.NETTO);
            //            string SSQL5 = "";
            //            SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND JENIS_FORM = '3'";
            //            var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //            string SSQL6 = "";
            //            SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu4.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu4.Last()) + "' AND JENIS_FORM = '3'";
            //            var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //                Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                //var cekjumlahRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Day <= Convert.ToInt32(minggu5.Last())).Count();
            //                //var NilaiRetur = ReturBulanIni.Where(a => a.TGL.Month == selectedMonth && a.TGL.Day >= Convert.ToInt32(minggu5.First()) && a.TGL.Day <= Convert.ToInt32(minggu5.Last())).Sum(a => a.NETTO);
            //                string SSQL5 = "";
            //                SSQL5 += "SELECT ISNULL(SUM(NETTO),0) AS TOTAL_NETTO FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND JENIS_FORM = '3'";
            //                var NilaiRetur = ErasoftDbContext.Database.SqlQuery<SUM_Netto>(SSQL5).Single();
            //                string SSQL6 = "";
            //                SSQL6 += "SELECT COUNT(RECNUM) COUNT_TRANSAKSI FROM SIT01A WHERE YEAR(TGL) = '" + selectedDate.Year + "' AND MONTH(TGL) = '" + selectedMonth + "' AND DAY(TGL) >= '" + Convert.ToInt32(minggu5.First()) + "' AND DAY(TGL) <= '" + Convert.ToInt32(minggu5.Last()) + "' AND JENIS_FORM = '3'";
            //                var cekjumlahRetur = ErasoftDbContext.Database.SqlQuery<COUNT_List>(SSQL6).Single();

            //                vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = cekjumlahRetur.COUNT_TRANSAKSI.ToString(),
            //                    Nilai = NilaiRetur.TOTAL_NETTO.ToString()
            //                });
            //            }
            //        }
            //    }

            //}
            //else
            //{
            //    for (int i = 1; i < 6; i++)
            //    {
            //        if (i == 1)
            //        {
            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 2)
            //        {
            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 3)
            //        {
            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 4)
            //        {
            //            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //            {
            //                No = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                Jumlah = "0",
            //                Nilai = "0"
            //            });
            //        }
            //        else if (i == 5)
            //        {
            //            if (minggu5.Count() > 0)
            //            {
            //                vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
            //                {
            //                    No = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year,
            //                    Jumlah = "0",
            //                    Nilai = "0"
            //                });
            //            }
            //        }
            //    }
            //}
            {
                var adaMinggu5 = minggu5.Count() > 0;
                ssql = "";
                //ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "SELECT '1' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu1.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "SELECT '2' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu2.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "SELECT '3' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu3.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "UNION ALL" + System.Environment.NewLine;
                //ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                ssql += "SELECT '4' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu4.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;

                if (adaMinggu5)
                {
                    ssql += "UNION ALL" + System.Environment.NewLine;
                    //ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(NETTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                    ssql += "SELECT '5' MINGGU, COUNT(RECNUM) AS COUNT_TRANSAKSI, ISNULL(SUM(ISNULL(BRUTO,0)),0) TOTAL_NETTO FROM SIT01A (NOLOCK) WHERE TGL >= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.First() + " 00:00:00.000' AND TGL <= '" + selectedDate.Year + "-" + selectedMonth + "-" + minggu5.Last() + " 23:59:59.999' AND JENIS_FORM = '3'" + System.Environment.NewLine;
                }

                var dsTuning = EDB.GetDataSet("CString", "TUNING", ssql);
                for (int i = 1; i < 6; i++)
                {
                    string noModel = "";
                    switch (i)
                    {
                        case 1:
                            {
                                noModel = minggu1.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu1.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 2:
                            {
                                noModel = minggu2.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu2.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 3:
                            {
                                noModel = minggu3.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu3.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 4:
                            {
                                noModel = minggu4.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu4.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                            }
                            break;
                        case 5:
                            {
                                if (adaMinggu5)
                                {
                                    noModel = minggu5.First() + "/" + selectedMonth + "/" + selectedDate.Year + " - " + minggu5.Last() + "/" + selectedMonth + "/" + selectedDate.Year;
                                }
                            }
                            break;
                    }
                    var getData = dsTuning.Tables[0].Select("MINGGU = '" + i + "'").FirstOrDefault();
                    if (getData != null)
                    {
                        vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
                        {
                            No = noModel,
                            Jumlah = Convert.ToString(getData["COUNT_TRANSAKSI"]),
                            Nilai = Convert.ToString(getData["TOTAL_NETTO"])
                        });
                    }
                    else
                    {
                        if (noModel != "")
                        {
                            vm.ListdashboardReturBulanan.Add(new DashboardBulananModel()
                            {
                                No = noModel,
                                Jumlah = "0",
                                Nilai = "0"
                            });
                        }
                    }
                }
            }
            //END CHANGE BY CALVIN 18 SEPTEMBER 2019

            #endregion

            return PartialView("TableDashboardLinePartial", vm);
        }
        //end add by nurul 12/7/2019

        public ActionResult RefreshDashboardBaranglakuPartial(string drTgl, string sdTgl)
        {

            var Drtgl = (drTgl != "" ? DateTime.ParseExact(drTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today.AddMonths(-3));
            var Sdtgl = (sdTgl != "" ? DateTime.ParseExact(sdTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today);
            var tempDrtgl = Drtgl.ToString("yyyy-MM-dd") + " 00:00:00.000";
            var tempSdtgl = Sdtgl.ToString("yyyy-MM-dd") + " 23:59:59.999";

            var vm = new DashboardViewModel()
            {
                ////ListPesananDetail = ErasoftDbContext.SOT01B.ToList(),
                ////ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            };

            string sSQL = "SELECT TOP 10 A.BRG,B.NAMA + ' ' + ISNULL(B.NAMA2,'') AS NAMA,A.SUM_QTY AS QTY FROM ( ";
            sSQL += "SELECT BRG, SUM(QTY)SUM_QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE B.TGL_INPUT >= '" + tempDrtgl + "' AND B.TGL_INPUT <= '" + tempSdtgl + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND BRG <> 'NOT_FOUND' GROUP BY BRG ";
            //sSQL += ") A LEFT JOIN STF02 B ON A.BRG = B.BRG ORDER BY SUM_QTY DESC ";
            sSQL += ") A LEFT JOIN STF02 B ON A.BRG = B.BRG WHERE B.TYPE = '3' ORDER BY SUM_QTY DESC ";
            var ListBarangAndQtyInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>(sSQL).ToList();
            foreach (var item in ListBarangAndQtyInPesanan)
            {
                vm.ListBarangLaku.Add(new PenjualanBarang
                {
                    KodeBrg = item.BRG,
                    NamaBrg = item.NAMA,
                    Qty = item.QTY,
                    Laku = true
                });
            }

            //if (vm.ListBarang != null && vm.ListPesananDetail != null)
            //{
            //    foreach (var barang in vm.ListBarang)
            //    {
            //        var listBarangTerpesan = vm.ListPesananDetail.Where(b => b.BRG == barang.BRG).ToList();

            //        if (listBarangTerpesan.Count > 0)
            //        {
            //            //var qtyBarang = listBarangTerpesan.Where(b => b.TGL_INPUT?.Month >= (selectedMonth - 3) &&
            //            //                                              b.TGL_INPUT?.Month <= selectedMonth).Sum(b => b.QTY);
            //            var qtyBarang = listBarangTerpesan.Where(b => b.TGL_INPUT >= Drtgl &&
            //                                                          b.TGL_INPUT <= Sdtgl).Sum(b => b.QTY);
            //            vm.ListBarangLaku.Add(new PenjualanBarang
            //            {
            //                KodeBrg = barang.BRG,
            //                NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            //                Qty = qtyBarang,
            //                Laku = true
            //            });
            //        }

            //    }
            //}

            return PartialView("TableDashboardBarangLakuPartial", vm);
        }
        public class listFaktur
        {
            public string Market { get; set; }
            public int Jumlah { get; set; }
            public double Nilai { get; set; }
        }
        public ActionResult RefreshDashboardFakturPartial(string drTgl, string sdTgl)
        {

            var Drtgl = (drTgl != "" ? DateTime.ParseExact(drTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today.AddMonths(-1));
            var Sdtgl = (sdTgl != "" ? DateTime.ParseExact(sdTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today);
            var tempDrtgl = Drtgl.ToString("yyyy-MM-dd");
            var tempSdtgl = Sdtgl.ToString("yyyy-MM-dd");
            //change by nurul 13/9/2019, tuning
            //var vm = new DashboardViewModel()
            //{
            //    //ListFaktur = ErasoftDbContext.SIT01A.Where(p => p.TGL >= Drtgl && p.TGL <= Sdtgl).ToList(),
            //    //ListAkunMarketplace = ErasoftDbContext.ARF01.ToList(),
            //    //ListMarket = MoDbContext.Marketplaces.ToList(),
            //};
            //if (vm.ListAkunMarketplace.Count > 0)
            //{
            //    foreach (var marketplace in vm.ListAkunMarketplace)
            //    {
            //        var idMarket = Convert.ToInt32(marketplace.NAMA);
            //        var namaMarket = vm.ListMarket.Single(m => m.IdMarket == idMarket).NamaMarket;
            //        var jmlFaktur = vm.ListFaktur?
            //            .Where(p => p.CUST == marketplace.CUST && p.TGL >= Drtgl && p.TGL <= Sdtgl).Count();
            //        //var nilaiFaktur = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", vm.ListFaktur?.Where(p => p.CUST == marketplace.CUST && p.TGL >= Drtgl && p.TGL <= Sdtgl).Sum(p => p.NETTO))}";
            //        var nilaiFaktur = vm.ListFaktur?.Where(p => p.CUST == marketplace.CUST && p.TGL >= Drtgl && p.TGL <= Sdtgl).Sum(p => p.NETTO);

            //        vm.ListFakturPerMarketplace.Add(new FakturPerMarketplaceModel()
            //        {
            //            NamaMarket = $"{namaMarket} ({marketplace.PERSO})",
            //            JumlahFaktur = jmlFaktur.ToString(),
            //            NilaiFaktur = Convert.ToString(nilaiFaktur)
            //        });
            //    }
            //}

            string sSql = "";
            //sSql += "SELECT SI.CUST,(ISNULL(MO.NAMAMARKET,'')  + ' (' + ISNULL(AR.PERSO,'') + ')') Market, SUM(SI.NETTO) AS Nilai, COUNT(SI.RECNUM) AS Jumlah ";
            sSql += "SELECT SI.CUST,(ISNULL(MO.NAMAMARKET,'')  + ' (' + ISNULL(AR.PERSO,'') + ')') Market, SUM(SI.BRUTO) AS Nilai, COUNT(SI.RECNUM) AS Jumlah ";
            sSql += "FROM SIT01A SI LEFT JOIN ARF01 AR ON SI.CUST = AR.CUST LEFT JOIN ";
            sSql += "MO..MARKETPLACE MO ON AR.NAMA = MO.IDMARKET ";
            sSql += "WHERE SI.TGL >= '" + tempDrtgl + "' AND SI.TGL <= '" + tempSdtgl + "' AND SI.STATUS = '1' AND SI.JENIS_FORM = '2' ";
            sSql += "GROUP BY SI.CUST, MO.NAMAMARKET, AR.PERSO ";
            var ListFakturPerMarket = ErasoftDbContext.Database.SqlQuery<listFaktur>(sSql).ToList();
            var vm = new DashboardViewModel()
            {
            };
            if (ListFakturPerMarket.Count() > 0)
            {
                foreach (var faktur in ListFakturPerMarket)
                {
                    vm.ListFakturPerMarketplace.Add(new FakturPerMarketplaceModel()
                    {
                        NamaMarket = faktur.Market,
                        JumlahFaktur = faktur.Jumlah.ToString(),
                        NilaiFaktur = Convert.ToString(faktur.Nilai)
                    });
                }
            }
            //end change by nurul 13/9/2019, tuning
            return PartialView("TableDashboardFakturPartial", vm);
        }

        //add by nurul 2/9/2019
        public class listBrgMinStok
        {
            public string JENIS { get; set; }
            public string BRG { get; set; }
            public string NAMA { get; set; }
            public string NAMA2 { get; set; }
            public double QOH { get; set; }
            public double QOO { get; set; }
            public double SISA { get; set; }
            public double MINI { get; set; }
            public double QTY_JUAL { get; set; }
            public double SELISIH { get; set; }

            public double HJUAL { get; set; }
            public int? ID { get; set; }
            public string KET_SORT1 { get; set; }
            public string KET_SORT2 { get; set; }
            public string LINK_GAMBAR_1 { get; set; }
        }
        public ActionResult RefreshDashboardBarangMinStok(string drTgl, string sdTgl)
        {

            var Drtgl = (drTgl != "" ? DateTime.ParseExact(drTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today.AddMonths(-1));
            var Sdtgl = (sdTgl != "" ? DateTime.ParseExact(sdTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today);
            var tempDrtgl = Drtgl.ToString("yyyy-MM-dd") + " 00:00:00.000";
            var tempSdtgl = Sdtgl.ToString("yyyy-MM-dd") + " 23:59:59.999";

            var vmError = new DashboardViewModel() { };

            if (Convert.ToDateTime(drTgl) > Convert.ToDateTime(sdTgl))
            {
                vmError.Errors.Add("Dari Tanggal tidak boleh lebih besar dari S/d Tanggal !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //remark by nurul 2/1/2020
            //if (Convert.ToDateTime(drTgl).Year != Convert.ToDateTime(sdTgl).Year)
            //{
            //    vmError.Errors.Add("Dari Tanggal dan S/d Tanggal harus dalam tahun yang sama !");
            //    return Json(vmError, JsonRequestBehavior.AllowGet);
            //}
            //end remark by nurul 2/1/2020

            var vm = new DashboardViewModel()
            {
            };

            try
            {
                ErasoftDbContext.Database.ExecuteSqlCommand("DROP TABLE #A; DROP TABLE #B;");
            }
            catch (Exception)
            {

            }

            string sSql1 = "";
            sSql1 += "SELECT C.NO_BUKTI, D.BRG into #B FROM SOT01A C(NOLOCK) INNER JOIN SOT01B D(NOLOCK) ON C.NO_BUKTI = D.NO_BUKTI WHERE C.TGL BETWEEN '" + tempDrtgl + "' AND '" + tempSdtgl + "' AND C.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04'); " + System.Environment.NewLine;
            sSql1 += "SELECT B.BRG, B.NAMA, ISNULL(QOH,0) QOH, ISNULL(QOO,0) QOO, (ISNULL(QOH,0) - ISNULL(QOO,0)) AS SISA,B.MINI INTO #A FROM (SELECT BRG, (isnull(NAMA, '') + ' ' + ISNULL(NAMA2, '')) AS NAMA,MINI FROM STF02(NOLOCK) WHERE TYPE='3') B LEFT JOIN 	( SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH, 	SUM(CASE WHEN JENIS = 'QOO' THEN JUMLAH ELSE 0 END) QOO 	FROM [QOH_QOO_ALL_ITEM]	GROUP BY BRG 	) A ON A.BRG = B.BRG WHERE (ISNULL(QOH,0) - ISNULL(QOO,0)) <= B.MINI; " + System.Environment.NewLine;

            sSql1 += "SELECT JENIS, BRG, NAMA, QOH, QOO , SISA, MINI, QTY_JUAL, (MINI - SISA) AS SELISIH FROM ";
            sSql1 += "( ";
            //1. CARI YANG BARANG NYA ADA PENJUALAN DAN SISA KURANG DR MINIMAL STOK
            sSql1 += "SELECT 'ADA' AS JENIS, A.BRG, A.NAMA, A.QOH, A.QOO , A.SISA, A.MINI, D.QTY AS QTY_JUAL FROM #B B  ";
            sSql1 += "  INNER JOIN #A A  ON A.BRG=B.BRG ";
            sSql1 += "  LEFT JOIN SIT01A C(NOLOCK) ON B.NO_BUKTI= C.NO_SO ";
            sSql1 += "  LEFT JOIN (SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL BETWEEN '" + tempDrtgl + "' AND '" + tempSdtgl + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY B.BRG)D ON A.BRG=D.BRG ";
            sSql1 += "  GROUP BY A.BRG,A.NAMA, A.QOH, A.QOO , A.SISA, A.MINI,D.QTY ";

            sSql1 += "UNION ALL ";
            //2. KALAU YANG PERTAMA KURANG DR 10 RECORD, MAKA CARI YANG BARANG NYA TIDAK ADA PENJUALAN DAN SISA KURANG DR MINIMAL STOK 
            sSql1 += "SELECT 'TIDAK ADA' AS JENIS, A.BRG, A.NAMA, A.QOH, A.QOO , A.SISA, A.MINI, 0 AS QTY_JUAL FROM  ( ";
            sSql1 += "  SELECT * FROM #A WHERE SISA <= MINI AND BRG NOT IN( ";
            sSql1 += "      SELECT A.BRG FROM #B B ";
            sSql1 += "      INNER JOIN #A A  ON A.BRG=B.BRG ";
            sSql1 += "      LEFT JOIN SIT01A C(NOLOCK) ON B.NO_BUKTI= C.NO_SO ";
            sSql1 += "      LEFT JOIN (SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL BETWEEN '" + tempDrtgl + "' AND '" + tempSdtgl + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY B.BRG)D ON A.BRG=D.BRG ";
            sSql1 += "  GROUP BY A.BRG ";
            sSql1 += ") )A ";
            sSql1 += "GROUP BY A.BRG,A.NAMA, A.QOH, A.QOO , A.SISA, A.MINI ";
            sSql1 += ")A ";
            //DI UNION ALL ORDER BY QTY_JUAL DESC, SELISIH (MIN-SISA) ASC, TAKE 10
            sSql1 += "ORDER BY JENIS ASC, QTY_JUAL DESC, SELISIH DESC ";
            sSql1 += "OFFSET 0 ROWS ";
            sSql1 += "FETCH NEXT 10 ROWS ONLY ";

            var ListBarangMinStokInPesanan = ErasoftDbContext.Database.SqlQuery<listBrgMinStok>(sSql1).ToList();
            foreach (var item in ListBarangMinStokInPesanan)
            {
                vm.ListBarangMiniStok.Add(new PenjualanBarang
                {
                    KodeBrg = item.BRG,
                    NamaBrg = item.NAMA,
                    QtySales = Convert.ToDouble(item.QTY_JUAL),
                    Qty = Convert.ToDouble(item.SISA),
                    Min = Convert.ToDouble(item.MINI),
                    Selisih = item.SELISIH
                });
            }

            return PartialView("TableDashboardBarangMinStokPartial", vm);
        }
        public ActionResult RefreshDashboardBarangTidaklaku(string drTgl, string sdTgl)
        {

            var Drtgl = (drTgl != "" ? DateTime.ParseExact(drTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today.AddMonths(-1));
            var Sdtgl = (sdTgl != "" ? DateTime.ParseExact(sdTgl, "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture) : DateTime.Today);
            var tempDrtgl = Drtgl.ToString("yyyy-MM-dd") + " 00:00:00.000";
            var tempSdtgl = Sdtgl.ToString("yyyy-MM-dd") + " 23:59:59.999";

            var vm = new DashboardViewModel()
            {
            };

            string sSql1 = "";
            sSql1 += "SELECT A.BRG, A.NAMA, A.QOH, A.QOO , A.SISA FROM  ";
            sSql1 += "(SELECT B.BRG, (isnull(B.NAMA, '') + ' ' + ISNULL(B.NAMA2, '')) AS NAMA, ISNULL(QOH,0) QOH, ISNULL(QOO,0) QOO, (ISNULL(QOH,0) - ISNULL(QOO,0)) AS SISA FROM ";
            sSql1 += "STF02 B LEFT JOIN ";
            sSql1 += "	( SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH, ";
            sSql1 += "	SUM(CASE WHEN JENIS = 'QOO' THEN JUMLAH ELSE 0 END) QOO ";
            sSql1 += "	FROM (";
            sSql1 += "		SELECT        'QOH' AS JENIS, BRG, JUMLAH = ISNULL(SUM(QAWAL + (QM1 + QM2 + QM3 + QM4 + QM5 + QM6 + QM7 + QM8 + QM9 + QM10 + QM11 + QM12) ";
            sSql1 += "                         - (QK1 + QK2 + QK3 + QK4 + QK5 + QK6 + QK7 + QK8 + QK9 + QK10 + QK11 + QK12)), 0) ";
            sSql1 += "		FROM            STF08A(NOLOCK) INNER JOIN ";
            sSql1 += "                         STF18(NOLOCK) ON STF08A.GD = STF18.KODE_GUDANG ";
            sSql1 += "		WHERE        STF08A.TAHUN = YEAR(SYSDATETIME()) AND STF18.QOH_SALES = 0 ";
            sSql1 += "		GROUP BY BRG ";
            sSql1 += "		UNION ALL ";
            sSql1 += "		SELECT        'QOO' AS JENIS, B.BRG, JUMLAH = ISNULL(SUM(ISNULL(QTY, 0)), 0) ";
            sSql1 += "		FROM            SOT01A A(NOLOCK) INNER JOIN ";
            sSql1 += "                         SOT01B B(NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN ";
            sSql1 += "                         SIT01A C(NOLOCK) ON A.NO_BUKTI = C.NO_SO ";
            sSql1 += "		WHERE        A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND ISNULL(C.NO_BUKTI, '') = '' ";
            sSql1 += "		GROUP BY B.BRG)A ";
            sSql1 += "	GROUP BY BRG  ";
            sSql1 += "	) A  ";
            //sSql1 += "LEFT JOIN STF02 B ON A.BRG = B.BRG WHERE B.TYPE = '3' ";
            sSql1 += "ON A.BRG = B.BRG WHERE B.TYPE = '3' ";
            sSql1 += ") A  ";
            sSql1 += "left join  ";
            sSql1 += "(SELECT DISTINCT BRG FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL BETWEEN '" + tempDrtgl + "' AND '" + tempSdtgl + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04'))B ";
            sSql1 += "ON B.BRG=A.BRG ";
            sSql1 += "WHERE ISNULL(B.BRG, '') = '' ";
            sSql1 += "GROUP BY A.BRG,A.NAMA, A.QOH, A.QOO , A.SISA ";
            sSql1 += "ORDER BY A.QOH DESC, A.BRG ASC ";
            sSql1 += "OFFSET 0 ROWS ";
            sSql1 += "FETCH NEXT 10 ROWS ONLY ";

            var ListBarangTidakLakuInPesanan = ErasoftDbContext.Database.SqlQuery<listBrgMinStok>(sSql1).ToList();
            foreach (var item in ListBarangTidakLakuInPesanan)
            {
                vm.ListBarangTidakLaku.Add(new PenjualanBarang
                {
                    KodeBrg = item.BRG,
                    NamaBrg = item.NAMA,
                    Qoh = Convert.ToDouble(item.QOH),
                    Qty = Convert.ToDouble(item.SISA)
                });
            }

            return PartialView("TableDashboardBarangTidaklakuPartial", vm);
        }
        //end add by nurul 2/9/2019

        //add by nurul 18/11/2019, dashboard arus kas 
        public class SUM_NettoSIPB
        {
            public double TOTAL { get; set; }
        }
        public ActionResult RefreshDashboardArusKas(string bulan, string tahun)
        {
            try
            {
                var vm = new DashboardViewModel() { };
                if (bulan != "" && tahun != "")
                {
                    string sSQL1 = "select isnull(sum(isnull(netto,0)),0) as TOTAL from sit01a where month(tgl)='" + bulan + "' and year(tgl)='" + tahun + "'";
                    var TotalPenjualan = ErasoftDbContext.Database.SqlQuery<SUM_NettoSIPB>(sSQL1).Single();
                    sSQL1 = "select isnull(sum(isnull(netto,0)),0) as TOTAL from pbt01a where month(tgl)='" + bulan + "' and year(tgl)='" + tahun + "'";
                    var TotalPembelian = ErasoftDbContext.Database.SqlQuery<SUM_NettoSIPB>(sSQL1).Single();
                    vm.totalSI = TotalPenjualan.TOTAL;
                    vm.totalPB = TotalPembelian.TOTAL;
                    vm.selisih = TotalPenjualan.TOTAL - TotalPembelian.TOTAL;
                }
                return PartialView("TableDashboardArusKas", vm);
            }
            catch (Exception ex)
            {
                return new EmptyResult();
            }
        }
        //end add by nurul 18/11/2019, dashboard arus kas 

        // =============================================== Dashboard (END)

        // =============================================== Menu Manage (START)

        public async void GetPesanan(string connectionID, string username)
        {

            int bliAcc = 0;
            var kdBli = MoDbContext.Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BLIBLI");
            var listBliShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBli.IdMarket.ToString()).ToList();
            if (listBliShop.Count > 0)
            {
                bliAcc = 1;
                foreach (ARF01 tblCustomer in listBliShop)
                {
                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                    {
                        var bliApi = new BlibliController();

                        BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                            API_client_password = tblCustomer.API_CLIENT_P,
                            API_client_username = tblCustomer.API_CLIENT_U,
                            API_secret_key = tblCustomer.API_KEY,
                            token = tblCustomer.TOKEN,
                            mta_username_email_merchant = tblCustomer.EMAIL,
                            mta_password_password_merchant = tblCustomer.PASSWORD,
                            idmarket = tblCustomer.RecNum.Value,
                            versiToken = tblCustomer.KD_ANALISA
                        };

                        await bliApi.GetOrderList(iden, BlibliController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
                    }
                }
            }
        }
        public async System.Threading.Tasks.Task<ActionResult> RefreshPesananDibayarMarketplace(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            //add by Tri call market place api getorder
            var connectionID = Guid.NewGuid().ToString();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string username = "";
            if (sessionData?.User != null)
            {
                //var accId = MoDbContext.User.Single(u => u.Username == sessionData.User.Username).AccountId; // remark by fauzi 17 Juli 2020
                var accId = MoDbContext.User.Single(u => u.Email == sessionData.User.Email).AccountId;
                username = MoDbContext.Account.Single(a => a.AccountId == accId).Username;
            }
            else
            {
                username = sessionData?.Account?.Username;
            }
            var Marketplaces = MoDbContext.Marketplaces.ToList();

            //REMARK BY CALVIN 5 APRIL 2019
            ////remark by calvin 13 desember 2018, testing
            //var kdBli = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BLIBLI");
            //var listBliShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBli.IdMarket.ToString()).ToList();
            //if (listBliShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listBliShop)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
            //        {
            //            var bliApi = new BlibliController();

            //            BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
            //            {
            //                merchant_code = tblCustomer.Sort1_Cust,
            //                API_client_password = tblCustomer.API_CLIENT_P,
            //                API_client_username = tblCustomer.API_CLIENT_U,
            //                API_secret_key = tblCustomer.API_KEY,
            //                token = tblCustomer.TOKEN,
            //                mta_username_email_merchant = tblCustomer.EMAIL,
            //                mta_password_password_merchant = tblCustomer.PASSWORD,
            //                idmarket = tblCustomer.RecNum.Value
            //            };

            //            await bliApi.GetOrderList(iden, BlibliController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);

            //            //add by calvin 8 nov 2018, update status so di MO jika sudah ada order complete dari blibli
            //            await bliApi.GetOrderList(iden, BlibliController.StatusOrder.Completed, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //            //end add by calvin 8 nov 2018
            //        }
            //    }
            //}
            //var kdEL = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "ELEVENIA");
            //var listELShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdEL.IdMarket.ToString()).ToList();
            //if (listELShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listELShop)
            //    {
            //        var elApi = new EleveniaController();
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);

            //        //add by calvin 8 nov 2018, update status so di MO jika sudah ada order complete dari elevenia
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.Completed, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.ConfirmPurchase, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //        //end add by calvin 8 nov 2018
            //    }
            //}
            //var kdBL = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
            //var listBLShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBL.IdMarket.ToString()).ToList();
            //if (listBLShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listBLShop)
            //    {
            //        var blApi = new BukaLapakController();
            //        blApi.cekTransaksi(tblCustomer.CUST, tblCustomer.EMAIL, tblCustomer.API_KEY, tblCustomer.TOKEN, connectionID);
            //    }

            //}

            //var kdLzd = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var listLzdShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLzd.IdMarket.ToString()).ToList();
            //if (listLzdShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listLzdShop)
            //    {
            //        var lzdApi = new LazadaController();
            //        lzdApi.GetOrders(tblCustomer.CUST, tblCustomer.TOKEN, connectionID);
            //    }
            //}
            ////end remark by calvin 13 desember 2018, testing

            //var kdTokped = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
            //var listTokPed = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdTokped.IdMarket.ToString()).ToList();
            //if (listTokPed.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listTokPed)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
            //        {
            //            var tokopediaApi = new TokopediaController();

            //            TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData
            //            {
            //                merchant_code = tblCustomer.Sort1_Cust, //FSID
            //                API_client_password = tblCustomer.API_CLIENT_P, //Client ID
            //                API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
            //                API_secret_key = tblCustomer.API_KEY, //Shop ID 
            //                token = tblCustomer.TOKEN,
            //                idmarket = tblCustomer.RecNum.Value
            //            };
            //            //TokopediaController.TokopediaAPIData idenTest = new TokopediaController.TokopediaAPIData
            //            //{
            //            //    merchant_code = "13072", //FSID
            //            //    API_client_username = "36bc3d7bcc13404c9e670a84f0c61676", //Client ID
            //            //    API_client_password = "8a76adc52d144a9fa1ef4f96b59b7419", //Client Secret
            //            //    API_secret_key = "2619296", //Shop ID 
            //            //    token = "pmgdpFANTcC0PM9tVzrwmw"
            //            //};
            //            //await tokopediaApi.GetActiveItemList(iden, connectionID, tblCustomer.CUST, tblCustomer.PERSO, tblCustomer.RecNum ?? 0);
            //            await tokopediaApi.GetOrderList(iden, TokopediaController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO, 1);
            //            //await tokopediaApi.GetOrderList(idenTest, TokopediaController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //            //await tokopediaApi.GetCategoryTree(idenTest);
            //            //await tokopediaApi.GetOrderList(iden, TokopediaController.StatusOrder.Completed, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //            //await tokopediaApi.GetOrderList(idenTest, TokopediaController.StatusOrder.Completed, connectionID, "", "");
            //        }
            //    }
            //}

            //var kdShopee = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "SHOPEE");
            //var listShopeeShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
            //if (listShopeeShop.Count > 0)
            //{
            //    var shopeeApi = new ShopeeController();
            //    foreach (ARF01 tblCustomer in listShopeeShop)
            //    {
            //        ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData();
            //        iden.merchant_code = tblCustomer.Sort1_Cust;
            //        await shopeeApi.GetOrderByStatus(iden, ShopeeController.StatusOrder.READY_TO_SHIP, connectionID, tblCustomer.CUST, tblCustomer.PERSO, 0);
            //    }
            //}

            ////add by calvin 14 nov 2018, update qoh setelah get pesanan
            //var TEMP_ALL_MP_ORDER_ITEMs = ErasoftDbContext.Database.SqlQuery<TEMP_ALL_MP_ORDER_ITEM>("SELECT * FROM TEMP_ALL_MP_ORDER_ITEM WHERE CONN_ID = '" + connectionID + "'").ToList();


            //List<string> listBrg = new List<string>();
            //foreach (var item in TEMP_ALL_MP_ORDER_ITEMs)
            //{
            //    listBrg.Add(item.BRG);
            //}
            //updateStockMarketPlace(listBrg);
            //ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM TEMP_ALL_MP_ORDER_ITEM WHERE CONN_ID = '" + connectionID + "'");
            ////end add by calvin 14 nov 2018, update qoh setelah get pesanan
            //END REMARK BY CALVIN 5 APRIL 2019

            //Change by nurul 9/5/2019
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.AsNoTracking().Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
            //    ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = Marketplaces,
            //};

            //return PartialView("TablePesananSudahDibayarPartial", vm);

            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " AND ";
                            sSQLmarket += " AND ";
                            sSQLpembeli += " AND ";
                            sSQLnetto += " AND ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";

                    }
                }
            }

            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.STATUS_TRANSAKSI AS [STATUS] ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //ADD BY NURUL 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '01' AND ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //END ADD BY NURUL 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='01' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLpembeli + ") ) ";
            }
            string sSQLSelect2 = "";
            //ADD BY NURUL 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //END ADD BY NURUL 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            //IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listPesanan, pagenumber + 1, 10, totalCount);
            return PartialView("TablePesananSudahDibayarPartial", pageOrders);
            //end change by nurul 9/5/2019
        }

        public class sumPesanan
        {
            public int COUNT_TRANSAKSI { get; set; }
            public double bruto { get; set; }
        }
        [Route("manage/order")]
        //public ActionResult Pesanan()
        public async System.Threading.Tasks.Task<ActionResult> Pesanan()
        {
            //add by Tri call market place api getorder
            var connectionID = Guid.NewGuid().ToString();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string username = "";
            if (sessionData?.User != null)
            {
                //var accId = MoDbContext.User.Single(u => u.Username == sessionData.User.Username).AccountId; // remark by fauzi 17 Juli 2020
                var accId = MoDbContext.User.Single(u => u.Email == sessionData.User.Email).AccountId;
                username = MoDbContext.Account.Single(a => a.AccountId == accId).Username;
            }
            else
            {
                username = sessionData?.Account?.Username;
            }
            var Marketplaces = MoDbContext.Marketplaces.ToList();
            var List_ARF01 = ErasoftDbContext.ARF01.ToList();
            //remark by calvin 2 april 2019, dipindah ke recurring saat login
            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //{
            //var kdBli = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BLIBLI");
            //var listBliShop = List_ARF01.Where(m => m.NAMA == kdBli.IdMarket.ToString()).ToList();
            //if (listBliShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listBliShop)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
            //        {
            //            var bliApi = new BlibliController();

            //            BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
            //            {
            //                merchant_code = tblCustomer.Sort1_Cust,
            //                API_client_password = tblCustomer.API_CLIENT_P,
            //                API_client_username = tblCustomer.API_CLIENT_U,
            //                API_secret_key = tblCustomer.API_KEY,
            //                token = tblCustomer.TOKEN,
            //                mta_username_email_merchant = tblCustomer.EMAIL,
            //                mta_password_password_merchant = tblCustomer.PASSWORD,
            //                idmarket = tblCustomer.RecNum.Value
            //            };

            //            await bliApi.GetOrderList(iden, BlibliController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);

            //            //add by calvin 8 nov 2018, update status so di MO jika sudah ada order complete dari blibli
            //            await bliApi.GetOrderList(iden, BlibliController.StatusOrder.Completed, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //            //end add by calvin 8 nov 2018
            //        }
            //    }
            //}
            //var kdEL = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "ELEVENIA");
            //var listELShop = List_ARF01.Where(m => m.NAMA == kdEL.IdMarket.ToString()).ToList();
            //if (listELShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listELShop)
            //    {
            //        var elApi = new EleveniaController();
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO);

            //        //add by calvin 8 nov 2018, update status so di MO jika sudah ada order complete dari elevenia
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.Completed, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //        await elApi.GetOrder(tblCustomer.API_KEY, EleveniaController.StatusOrder.ConfirmPurchase, connectionID, tblCustomer.CUST, tblCustomer.PERSO);
            //        //end add by calvin 8 nov 2018
            //    }
            //}


            //var kdBL = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
            //var listBLShop = List_ARF01.Where(m => m.NAMA == kdBL.IdMarket.ToString()).ToList();
            //if (listBLShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listBLShop)
            //    {
            //        var blApi = new BukaLapakControllerJob();
            //        if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
            //            blApi.cekTransaksi(tblCustomer.CUST, tblCustomer.EMAIL, tblCustomer.API_KEY, tblCustomer.TOKEN, dbPathEra, usernameLogin);
            //    }
            //}

            //var kdLzd = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var listLzdShop = List_ARF01.Where(m => m.NAMA == kdLzd.IdMarket.ToString()).ToList();
            //if (listLzdShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listLzdShop)
            //    {
            //        var lzdApi = new LazadaControllerJob();
            //        if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
            //            lzdApi.GetOrdersUnpaid(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, usernameLogin);
            //    }
            //}

            //var kdTokped = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
            //var listTokPed = List_ARF01.Where(m => m.NAMA == kdTokped.IdMarket.ToString()).ToList();
            //if (listTokPed.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listTokPed)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
            //        {
            //            var tokopediaApi = new TokopediaController();

            //            TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData
            //            {
            //                merchant_code = tblCustomer.Sort1_Cust, //FSID
            //                API_client_password = tblCustomer.API_CLIENT_P, //Client ID
            //                API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
            //                API_secret_key = tblCustomer.API_KEY, //Shop ID 
            //                token = tblCustomer.TOKEN,
            //                idmarket = tblCustomer.RecNum.Value
            //            };
            //            await tokopediaApi.GetOrderList(iden, TokopediaController.StatusOrder.Paid, connectionID, tblCustomer.CUST, tblCustomer.PERSO,1);
            //        }
            //    }
            //}

            //var kdShopee = Marketplaces.Single(m => m.NamaMarket.ToUpper() == "SHOPEE");
            //var listShopeeShop = List_ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
            //if (listShopeeShop.Count > 0)
            //{
            //    var shopeeApi = new ShopeeControllerJob();
            //    foreach (ARF01 tblCustomer in listShopeeShop)
            //    {
            //        ShopeeControllerJob.ShopeeAPIData iden = new ShopeeControllerJob.ShopeeAPIData();
            //        iden.merchant_code = tblCustomer.Sort1_Cust;
            //        iden.DatabasePathErasoft = dbPathEra;
            //        iden.username = usernameLogin;
            //        await shopeeApi.GetOrderByStatus(iden, ShopeeControllerJob.StatusOrder.UNPAID, tblCustomer.CUST, tblCustomer.PERSO, 0,0,0);
            //    }
            //}

            //    //add by calvin 14 nov 2018, update qoh setelah get pesanan
            //    var TEMP_ALL_MP_ORDER_ITEMs = ErasoftDbContext.Database.SqlQuery<TEMP_ALL_MP_ORDER_ITEM>("SELECT * FROM TEMP_ALL_MP_ORDER_ITEM WHERE CONN_ID = '" + connectionID + "'").ToList();
            //    List<string> listBrg = new List<string>();
            //    foreach (var item in TEMP_ALL_MP_ORDER_ITEMs)
            //    {
            //        listBrg.Add(item.BRG);
            //    }
            //    updateStockMarketPlace(listBrg);
            //    ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM TEMP_ALL_MP_ORDER_ITEM WHERE CONN_ID = '" + connectionID + "'");
            ////end add by calvin 14 nov 2018, update qoh setelah get pesanan
            //}
            //end remark by calvin 2 april 2019

            //change by nurul 6/8/2019
            //var vm = new PesananViewModel()
            //{
            //    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
            //    //remark by nurul 3/7/2019
            //    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    //ListPelanggan = List_ARF01,
            //    //ListMarketplace = Marketplaces,
            //    //end remark by nurul 3/7/2019
            //    ListSubs = MoDbContext.Subscription.ToList(),
            //    //add by nurul 26/9/2018
            //    //ListBarangMarket = ErasoftDbContext.STF02H.ToList()
            //    //end add 
            //    //add by nurul 10/4/2019
            //    DataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1),
            //    //end add by nurul 10/4/2019
            //    //add by nurul 1/8/2019
            //    ListPesanan = ErasoftDbContext.SOT01A.Take(1).ToList()
            //};

            //return View(vm);
            var dataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1);
            var ceklistPesanan = ErasoftDbContext.SOT01A.Take(1).ToList();

            //add by nurul 2/12/2019, penambahan dashboard pesanan
            var getBelumBayar = ErasoftDbContext.Database.SqlQuery<sumPesanan>("select COUNT(RECNUM) AS COUNT_TRANSAKSI, isnull(sum(isnull(BRUTO,0)),0) as bruto  from sot01a(nolock) where status_transaksi='0' ").Single();
            var JumlahBelumBayar = getBelumBayar.COUNT_TRANSAKSI;
            var NilaiBelumBayar = getBelumBayar.bruto;
            var getSudahBayar = ErasoftDbContext.Database.SqlQuery<sumPesanan>("select COUNT(RECNUM) AS COUNT_TRANSAKSI, isnull(sum(isnull(BRUTO,0)),0) as bruto  from sot01a(nolock) where status_transaksi='01' ").Single();
            var JumlahSudahBayar = getSudahBayar.COUNT_TRANSAKSI;
            var NilaiSudahBayar = getSudahBayar.bruto;
            var getSiapKirim = ErasoftDbContext.Database.SqlQuery<sumPesanan>("select COUNT(RECNUM) AS COUNT_TRANSAKSI, isnull(sum(isnull(BRUTO,0)),0) as bruto  from sot01a(nolock) where status_transaksi='03' and status_kirim ='2'").Single();
            var JumlahSiapkirim = getSiapKirim.COUNT_TRANSAKSI;
            var NilaiSiapkirim = getSiapKirim.bruto;
            var getBatal = ErasoftDbContext.Database.SqlQuery<sumPesanan>("select COUNT(RECNUM) AS COUNT_TRANSAKSI, isnull(sum(isnull(BRUTO,0)),0) as bruto  from sot01a(nolock) where status_transaksi='11' ").Single();
            var JumlahBatal = getBatal.COUNT_TRANSAKSI;
            var NilaiBatal = getBatal.bruto;
            //end add by nurul 2/12/2019, penambahan dashboard pesanan

            //if (dataUsaha.JTRAN_RETUR != "1" && ceklistPesanan.Count() == 0)
            //{
            //    var vm = new PesananViewModel()
            //    {
            //        //ListSubs = MoDbContext.Subscription.ToList(),
            //        //DataUsaha = dataUsaha,
            //        //ListPesanan = ceklistPesanan
            //    };
            //    return PartialView("AktivasiPesananStokKeMarketplace", vm);
            //}
            //else
            //{
            var vm = new PesananViewModel
            {
                ListSubs = MoDbContext.Subscription.ToList(),
                DataUsaha = dataUsaha,
                ListPesanan = ceklistPesanan,
                //add by nurul 2/12/2019, penambahan dashboard pesanan
                JumlahPesananBelumBayar = JumlahBelumBayar,
                NilaiPesananBelumBayar = NilaiBelumBayar,
                JumlahPesananSudahBayar = JumlahSudahBayar,
                NilaiPesananSudahBayar = NilaiSudahBayar,
                JumlahPesananSiapKirim = JumlahSiapkirim,
                NilaiPesananSiapKirim = NilaiSiapkirim,
                JumlahPesananBatal = JumlahBatal,
                NilaiPesananBatal = NilaiBatal
                //end add by nurul 2/12/2019, penambahan dashboard pesanan
            };
            return View(vm);
            //}
            //end change by nurul 6/8/2019


        }

        [Route("manage/penjualan/faktur")]
        public ActionResult Faktur()
        {
            var vm = new FakturViewModel()
            {
                //remark by nurul 3/7/2019
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").OrderByDescending(f => f.TGL).ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                //ListNFaktur = ErasoftDbContext.ART03B.ToList(),
                ListSubs = MoDbContext.Subscription.ToList(),
                //ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => 0 == 1).ToList()
                //end remark by nurul 3/7/2019
            };

            return View(vm);
        }

        [Route("manage/penjualan/retur")]
        public ActionResult ReturFaktur()
        {
            var vm = new FakturViewModel()
            {
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "3").OrderByDescending(f => f.TGL).ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return View(vm);
        }

        [Route("manage/pembelian/invoice")]
        public ActionResult Invoice()
        {
            var vm = new InvoiceViewModel()
            {
                //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1").OrderByDescending(f => f.TGL).ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListSubs = MoDbContext.Subscription.ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListNInvoice = ErasoftDbContext.APT03B.ToList()
            };

            return View(vm);
        }

        [Route("manage/pembelian/retur")]
        public ActionResult ReturInvoice()
        {
            var vm = new InvoiceViewModel()
            {
                //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").OrderByDescending(f => f.TGL).ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return View(vm);
        }

        [Route("manage/akunting/jurnal")]
        public ActionResult Jurnal()
        {
            var vm = new JurnalViewModel()
            {
                //ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
                //ListRekening = ErasoftDbContext.GLFREKs.ToList(),
                //ListJurnalDetail = ErasoftDbContext.GLFTRAN2.ToList()
            };

            return View(vm);
        }

        [Route("manage/bantuan")]
        public ActionResult Bantuan()
        {
            return View();
        }

        [Route("manage/master/barang")]
        public ActionResult Barang()
        {
            var barangVm = new BarangViewModel()
            {
                //remark by calvin 22 april 2019
                //ListStf02S = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListStf02S = ErasoftDbContext.STF02.Where(a => a.SUP == "").ToList(),

                //ingat ganti saat publish, by calvin
                //ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "" && (p.BRG == "01.CMO00.00" || p.BRG == "01.LIP00.00" || p.BRG == "JPTTEST2")).ToList(),
                //ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),

                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                ListHargaJualPermarketView = ErasoftDbContext.STF02H.Where(p => 0 == 1).OrderBy(p => p.IDMARKET).ToList(),
                //ListCategoryBlibli = MoDbContext.CategoryBlibli.Where(p => string.IsNullOrEmpty(p.PARENT_CODE)).ToList(),
                //remark by nurul 3/7/2019
                //DataUsaha = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1)
                //end remark by nurul 3/7/2019
                //end remark by calvin 22 april 2019
            };

            return View(barangVm);
        }

        ////add by calvin 21 desember 2018, shopee 
        //public ActionResult MenuBarang()
        //{
        //    var barangVm = new BarangViewModel()
        //    {
        //        ListStf02S = ErasoftDbContext.STF02.ToList(),
        //        ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
        //        ListHargaJualPermarketView = ErasoftDbContext.STF02H.OrderBy(p => p.IDMARKET).ToList(),
        //        //ListCategoryBlibli = MoDbContext.CategoryBlibli.Where(p => string.IsNullOrEmpty(p.PARENT_CODE)).ToList(),
        //        DataUsaha = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1),
        //        StatusLog = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_PER_ITEM>("SELECT * FROM API_LOG_MARKETPLACE_PER_ITEM WHERE 0 = 1").ToList(),
        //        Stok = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList()
        //    };

        //    return View(barangVm);
        //}

        //add by nurul 29/8/2018
        [Route("manage/master/Menubarang")]
        public ActionResult MenuBarang()
        {
            var barangVm = new BarangViewModel()
            {
                //remark by nurul 3/7/2019
                ////change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList(),
                //ListStf02S = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                //ListHargaJualPermarketView = ErasoftDbContext.STF02H.Where(p => 0 == 1).OrderBy(p => p.IDMARKET).ToList(),
                ////ListCategoryBlibli = MoDbContext.CategoryBlibli.Where(p => string.IsNullOrEmpty(p.PARENT_CODE)).ToList(),
                //DataUsaha = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1),
                //StatusLog = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_PER_ITEM>("SELECT * FROM API_LOG_MARKETPLACE_PER_ITEM WHERE 0 = 1").ToList(),
                //Stok = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList()
                //end remark by nurul 3/7/2019
            };

            return View(barangVm);
        }
        //end add by nurul

        //add by calvin 15 mei 2019
        public ActionResult RefreshTableLog(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            //change by nurul 1/11/2019
            //var listMarketplace = (from c in MoDbContext.Marketplaces select c).ToList();

            //var QueryHangfireLog = (from a in ErasoftDbContext.API_LOG_MARKETPLACE
            //                        join b in ErasoftDbContext.ARF01
            //                        on a.CUST equals b.CUST
            //                        where a.REQUEST_ATTRIBUTE_5 == "HANGFIRE"
            //                        && a.REQUEST_STATUS == "FAILED"
            //                        && (a.REQUEST_RESULT.Contains(search) || a.REQUEST_ACTION.Contains(search) || a.REQUEST_ATTRIBUTE_3.Contains(search))
            //                        orderby a.REQUEST_DATETIME descending
            //                        select new API_LOG_MARKETPLACE_HANGFIRE
            //                        {
            //                            Marketplace = b.NAMA,
            //                            AkunMarketplace = b.PERSO,
            //                            REQUEST_ACTION = a.REQUEST_ACTION,
            //                            REQUEST_CATEGORY = a.REQUEST_ATTRIBUTE_3,
            //                            REQUEST_DATETIME = a.REQUEST_DATETIME,
            //                            REQUEST_RESULT = a.REQUEST_RESULT,
            //                            REQUEST_EXCEPTION = a.REQUEST_EXCEPTION,
            //                            REQUEST_ID = a.REQUEST_ID
            //                        });
            //var HangfireLog = QueryHangfireLog.Skip(pagenumber * 10).Take(10).ToList();
            //foreach (var item in HangfireLog)
            //{
            //    item.Marketplace = listMarketplace.Where(p => (p.IdMarket ?? 0).ToString() == item.Marketplace).FirstOrDefault()?.NamaMarket;
            //}
            //var totalLHangfireLog = QueryHangfireLog.Count();

            string[] getkata = search.Split(' ');
            string sSQLakun = "";
            string sSQLmarket = "";
            string sSQLaction = "";
            string sSQLatribut_3 = "";
            string sSQLresult = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLakun += " ( b.PERSO like '%" + getkata[i] + "%' )";
                            sSQLmarket += " ( c.NamaMarket like '%" + getkata[i] + "%' )";
                            sSQLaction += " ( a.REQUEST_ACTION like '%" + getkata[i] + "%' )";
                            sSQLatribut_3 += " ( a.REQUEST_ATTRIBUTE_3 like '%" + getkata[i] + "%' )";
                            sSQLresult += " ( a.REQUEST_RESULT like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLakun += " ( b.PERSO like '%" + getkata[i] + "%'";
                                sSQLmarket += " ( c.NamaMarket like '%" + getkata[i] + "%'";
                                sSQLaction += " ( a.REQUEST_ACTION like '%" + getkata[i] + "%' ";
                                sSQLatribut_3 += " ( a.REQUEST_ATTRIBUTE_3 like '%" + getkata[i] + "%' ";
                                sSQLresult += " ( a.REQUEST_RESULT like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLakun += " and b.PERSO like '%" + getkata[i] + "%' )";
                                sSQLmarket += " and c.NamaMarket like '%" + getkata[i] + "%' )";
                                sSQLaction += " and a.REQUEST_ACTION like '%" + getkata[i] + "%' )";
                                sSQLatribut_3 += " and a.REQUEST_ATTRIBUTE_3 like '%" + getkata[i] + "%' )";
                                sSQLresult += " and a.REQUEST_RESULT like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLakun += " and b.PERSO like '%" + getkata[i] + "%' ";
                                sSQLmarket += " and c.NamaMarket like '%" + getkata[i] + "%' ";
                                sSQLaction += " and a.REQUEST_ACTION like '%" + getkata[i] + "%' ";
                                sSQLatribut_3 += " and a.REQUEST_ATTRIBUTE_3 like '%" + getkata[i] + "%' ";
                                sSQLresult += " and a.REQUEST_RESULT like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT c.NamaMarket as Marketplace,b.PERSO as AkunMarketplace,a.REQUEST_ACTION as REQUEST_ACTION,a.REQUEST_ATTRIBUTE_3 as REQUEST_CATEGORY,a.REQUEST_DATETIME as REQUEST_DATETIME,a.REQUEST_RESULT as REQUEST_RESULT,a.REQUEST_EXCEPTION as REQUEST_EXCEPTION,a.REQUEST_ID as REQUEST_ID ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(a.REQUEST_ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "from API_LOG_MARKETPLACE a inner join arf01 b on a.cust=b.cust ";
            sSQL2 += "left join mo..marketplace c on b.nama=c.idmarket ";
            sSQL2 += "where a.REQUEST_ATTRIBUTE_5 = 'HANGFIRE' and a.REQUEST_STATUS = 'FAILED' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLakun + " or " + sSQLmarket + " or " + sSQLaction + " or " + sSQLatribut_3 + " or " + sSQLresult + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalLHangfireLog = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalLHangfireLog.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY a.REQUEST_DATETIME desc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var HangfireLog = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_HANGFIRE>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 1/11/2019

            IPagedList<API_LOG_MARKETPLACE_HANGFIRE> pageOrders = new StaticPagedList<API_LOG_MARKETPLACE_HANGFIRE>(HangfireLog, pagenumber + 1, 10, totalLHangfireLog.JUMLAH);

            return PartialView("TableMarketPlaceLog", pageOrders);
        }

        [Route("manage/master/marketplacelog")]
        public ActionResult MarketPlaceLog(int? page = 1, string search = "")
        {
            return View("MarketPlaceLog");
        }
        //end add by calvin

        [Route("manage/ganti-password")]
        public ActionResult GantiPassword()
        {
            return View();
        }

        [Route("manage/security/user")]
        public ActionResult SecUserMenu(int? userId)
        {
            var secuserVm = new SecurityUserViewModel()
            {
                User = MoDbContext.User.SingleOrDefault(u => u.UserId == userId),
                ListForms = MoDbContext.FormMoses.Where(f => f.Show).ToList(),
                ListSec = MoDbContext.SecUser.Where(s => s.UserId == userId).ToList(),
                ListUser = MoDbContext.User.ToList(),
            };

            Session["UserId"] = secuserVm.User?.UserId;

            return View(secuserVm);
        }

        [Route("manage/master/kategori-barang")]
        public ActionResult KategoriBarang(int? page = 1, string search = "")
        {
            var kategoriVm = new KategoriBarangViewModel()
            {
                ListKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "1" && (k.KET.Contains(search) || k.KODE.Contains(search))).OrderByDescending(k => k.RecNum).ToList()
            };

            ViewData["currentPage"] = page;
            ViewData["searchParam"] = search;

            return View(kategoriVm);
        }

        [Route("manage/master/merk-barang")]
        public ActionResult MerkBarang(int? page = 1, string search = "")
        {
            var merkVm = new MerkBarangViewModel()
            {
                //ListMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL == "2" && (m.KET.Contains(search) || m.KODE.Contains(search))).OrderBy(m => m.KET).ToList()
            };

            ViewData["searchParam"] = search;
            ViewData["currentPage"] = page;

            return View(merkVm);
        }
        //add by nurul 1/7/2019
        public ActionResult RefreshTableMerk(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( KET like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( KODE like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( KET like '%" + getkata[i] + "%'";
                                sSQLkode += " ( KODE like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and KET like '%" + getkata[i] + "%' )";
                                sSQLkode += " and KODE like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and KET like '%" + getkata[i] + "%' ";
                                sSQLkode += " and KODE like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //var stf02e = (from p in ErasoftDbContext.STF02E
            //              where p.LEVEL == "2" &&
            //              (p.KET.Contains(search) || p.KODE.Contains(search))
            //              orderby p.KET
            //              select p);
            //var ListStf02e = stf02e.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = stf02e.Count();

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(recnum) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02E ";
            sSQL2 += "where LEVEL = '2' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY KET ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStf18 = ErasoftDbContext.Database.SqlQuery<STF02E>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<STF02E> pageOrders = new StaticPagedList<STF02E>(ListStf18, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableMerkPartial", pageOrders);
        }
        //end add by nurul 1/7/2019

        #region OTNIEL
        //add by otniel 9/9/2020
        [Route("manage/transfer/transfermarketplacetoftp")]
        public ActionResult TransferMarketplaceToFTP()
        {
            var custVm = new CustomerViewModel()
            {
                //ListCustomer = ErasoftDbContext.ARF01.ToList(),
                ListSubs = MoDbContext.Subscription.ToList()
            };

            return View(custVm);
        }
        public ActionResult RefreshTableTransferMarketplace(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLemail = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( C.NamaMarket like '%" + getkata[i] + "%' )";
                            sSQLemail += " ( A.EMAIL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( C.NamaMarket like '%" + getkata[i] + "%'";
                                sSQLemail += " ( A.EMAIL like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and C.NamaMarket like '%" + getkata[i] + "%' )";
                                sSQLemail += " and A.EMAIL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and C.NamaMarket like '%" + getkata[i] + "%' ";
                                sSQLemail += " and A.EMAIL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.CUST AS KODE, ISNULL(C.NamaMarket,'') AS NAMA, A.EMAIL AS EMAIL, A.PERSO AS PERSO, A.ATTR5_AREA AS KODE_SAP ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM ARF01 A ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON A.NAMA = C.IdMarket ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLemail + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY C.NamaMarket ASC, A.EMAIL ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<TransferMarketplace>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<TransferMarketplace> pageOrders = new StaticPagedList<TransferMarketplace>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableMarketplaceToFTP", pageOrders);
        }
        public ActionResult SaveKodeFTPMarketplace(string kodecust, string kodesap)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();

                if (kodesap != null && kodecust != null)
                {
                    var vmError = new CustomerViewModel() { };
                    var cekKodeSap = ErasoftDbContext.ARF01.Where(x => x.Attr5_Area == kodesap).ToList();
                    if (cekKodeSap.Count > 0)
                    {
                        vmError.Errors.Add("Kode SAP ( " + kodesap + " ) sudah ada yang menggunakan !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    var dataPesanan = ErasoftDbContext.ARF01.Where(p => p.CUST == kodecust).SingleOrDefault();
                    dataPesanan.Attr5_Area = kodesap.ToString();
                    ErasoftDbContext.SaveChanges();
                    var successCount = listSuccess.Count();
                    return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Kode Sap Kosong." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                string errormsg = ex.ToString();
                return new JsonResult { Data = new { mo_error = "Gagal memproses rubah Kode SAP Marketplace. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //end by otniel 9/9/2020

        //add by otniel 9/9/2020
        [Route("manage/transfer/transferbarangtoftp")]
        public ActionResult TransferBarangToFTP()
        {
            var barangVm = new BarangViewModel();

            return View(barangVm);
        }
        public ActionResult RefreshTableTransferToFTPBarang(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLemail = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( A.BRG like '%" + getkata[i] + "%' )";
                            sSQLemail += " ( A.NAMA like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( A.BRG like '%" + getkata[i] + "%'";
                                sSQLemail += " ( A.NAMA like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and A.BRG like '%" + getkata[i] + "%' )";
                                sSQLemail += " and A.NAMA like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and A.BRG like '%" + getkata[i] + "%' ";
                                sSQLemail += " and A.NAMA like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.BRG AS BRG, ISNULL(A.NAMA,'') AS NAMA, A.BRG_SAP AS BRG_SAP ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.BRG) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02 A ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLemail + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.NAMA ASC, A.BRG ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<TableTransferToFTPBarang>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<TableTransferToFTPBarang> pageOrders = new StaticPagedList<TableTransferToFTPBarang>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableTransferBarangToFTP", pageOrders);
        }
        public ActionResult SaveBrgFTPMarketplace(string brg, string brgsap)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();

                if (brg != null && brgsap != null)
                {
                    var vmError = new CustomerViewModel() { };
                    var cekKodeSap = ErasoftDbContext.STF02.Where(x => x.BRG_SAP == brgsap).ToList();
                    if (cekKodeSap.Count > 0)
                    {
                        vmError.Errors.Add("Kode SAP ( " + brgsap + " ) sudah ada yang menggunakan !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    var dataPesanan = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                    dataPesanan.BRG_SAP = brgsap.ToString();
                    ErasoftDbContext.SaveChanges();
                    var successCount = listSuccess.Count();
                    return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Barang Kosong." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                string errormsg = ex.ToString();
                return new JsonResult { Data = new { mo_error = "Gagal memproses rubah barang SAP. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //end by otniel 9/9/2020

        //add by otniel 10/9/2020
        [Route("manage/transfer/transfertoftpparameterlinkftp")]
        public ActionResult TransferToFTPParameterLinkFtp()
        {
            var linkftpVm = ErasoftDbContext.LINKFTP.FirstOrDefault();

            return View(linkftpVm);
        }

        [HttpPost]
        public ActionResult SaveLinkFtp(LINKFTP dataVm)
        {
            if (!ModelState.IsValid)
            {
                return View("TransferToFTPParameterLinkFtp", dataVm);
            }

            var linkFtpDb = ErasoftDbContext.LINKFTP.FirstOrDefault(s => s.IP == dataVm.IP);

            if (linkFtpDb == null)
            {
                ErasoftDbContext.LINKFTP.Add(dataVm);
                ErasoftDbContext.SaveChanges();
            }
            else
            {
                ErasoftDbContext.LINKFTP.Remove(linkFtpDb);
                ErasoftDbContext.SaveChanges();

                linkFtpDb.IP = dataVm.IP;
                linkFtpDb.LOGIN = dataVm.LOGIN;
                var key = Helper.GeneratePassword(10);
                var encodingPassString = Helper.EncodePassword(dataVm.PASSWORD, key);
                linkFtpDb.PASSWORD = encodingPassString;
                linkFtpDb.STATUS_FTP = dataVm.STATUS_FTP;
                linkFtpDb.PPN = dataVm.PPN;
                linkFtpDb.KODE_TRANSAKSI = dataVm.KODE_TRANSAKSI;
                linkFtpDb.JAM1 = dataVm.JAM1;
                linkFtpDb.JAM2 = dataVm.JAM2;
                //linkFtpDb.JAM3 = dataVm.JAM3;
                //linkFtpDb.JAM4 = dataVm.JAM4;
                //linkFtpDb.JAM5 = dataVm.JAM5;
                ErasoftDbContext.LINKFTP.Add(dataVm);
                ErasoftDbContext.SaveChanges();
            }
            ModelState.Clear();
            return Json(dataVm, JsonRequestBehavior.AllowGet);
        }
        //end by otniel 10/9/2020
        #endregion

        [Route("manage/master/marketplace")]
        public ActionResult Pelanggan()
        {
            var custVm = new CustomerViewModel()
            {
                //ListCustomer = ErasoftDbContext.ARF01.ToList(),
                ListSubs = MoDbContext.Subscription.ToList()
            };

            return View(custVm);
        }

        [Route("manage/master/pembeli")]
        public ActionResult Buyer()
        {
            var vm = new BuyerViewModel()
            {
                //remark 17/9/2019 by Tri, tuning
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList()
                //end remark 17/9/2019 by Tri, tuning
            };

            return View(vm);
        }

        //public ActionResult BuyerPopup()
        //{
        //    return View();
        //}
        public ActionResult BuyerPopUp1()
        {
            var vm = new BuyerViewModel()
            {
                ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList()
            };

            return View(vm);
        }

        //add by nurul 26/6/2019
        public ActionResult RefreshTableBuyerPopUp(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLemail = "";
            string sSQLalamat = "";
            string sSQLhp = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( NAMA like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( BUYER_CODE like '%" + getkata[i] + "%' )";
                            sSQLemail += " ( EMAIL like '%" + getkata[i] + "%' )";
                            sSQLalamat += " ( AL like '%" + getkata[i] + "%' )";
                            sSQLhp += " ( TLP like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( NAMA like '%" + getkata[i] + "%'";
                                sSQLkode += " ( BUYER_CODE like '%" + getkata[i] + "%'";
                                sSQLemail += " ( EMAIL like '%" + getkata[i] + "%'";
                                sSQLalamat += " ( AL like '%" + getkata[i] + "%'";
                                sSQLhp += " ( TLP like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' )";
                                sSQLkode += " and BUYER_CODE like '%" + getkata[i] + "%' )";
                                sSQLemail += " and EMAIL like '%" + getkata[i] + "%' )";
                                sSQLalamat += " and AL like '%" + getkata[i] + "%' )";
                                sSQLhp += " and TLP like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' ";
                                sSQLkode += " and BUYER_CODE like '%" + getkata[i] + "%' ";
                                sSQLemail += " and EMAIL like '%" + getkata[i] + "%' ";
                                sSQLalamat += " and AL like '%" + getkata[i] + "%' ";
                                sSQLhp += " and TLP like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //var arf01c = (from p in ErasoftDbContext.ARF01C
            //              where (p.BUYER_CODE.Contains(search) || p.NAMA.Contains(search) || p.EMAIL.Contains(search) || p.AL.Contains(search) || p.TLP.Contains(search))
            //              orderby p.NAMA
            //              select p);
            //var ListArf01c = arf01c.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = arf01c.Count();

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM ARF01C ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLemail + " or " + sSQLalamat + " or " + sSQLhp + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY NAMA ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<ARF01C>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<ARF01C> pageOrders = new StaticPagedList<ARF01C>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            //return PartialView("TableBarang1Partial", barangVm);
            return PartialView("TableBuyerPopUp", pageOrders);
        }
        //end add by nurul 26/6/2019


        // =============================================== Menu Manage (END)

        // =============================================== Bagian Pembeli (START)

        //add by nurul 30/4/2019
        public ActionResult RefreshTableBuyer(int? page, string search = "")
        {
            //change 5/9/2019 by Tri, sort berdasarkan frekuensi beli
            //int pagenumber = (page ?? 1) - 1;
            //ViewData["searchParam"] = search;
            //ViewData["LastPage"] = page;
            ////change by calvin 22 april 2019
            ////var barangVm = new BarangViewModel()
            ////{
            //////change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList(),
            ////ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),
            ////};
            //var arf01c = (from p in ErasoftDbContext.ARF01C
            //              where (p.NAMA.Contains(search) || p.EMAIL.Contains(search))
            //              orderby p.BUYER_CODE
            //              select p);

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            ////var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //var totalCount = arf01c.Count();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount)
            //{
            //    pagenumber = pagenumber - 1;
            //    //if (pagenumber == 0)
            //    //{
            //    //    pagenumber = 1;
            //    //}
            //}

            //var ListArf01c = arf01c.Skip(pagenumber * 10).Take(10).ToList();
            ////var totalCount = arf01c.Count();
            ////end change by calvin 22 april 2019

            //IPagedList<ARF01C> pageOrders = new StaticPagedList<ARF01C>(ListArf01c, pagenumber + 1, 10, totalCount);
            ////return PartialView("TableBarang1Partial", barangVm);
            //return PartialView("TableBuyerPartial", pageOrders);

            //change by nurul 26/9/2019, contain search
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLprov = "";
            string sSQLkota = "";
            string sSQLemail = "";
            string sSQLtlp = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( nama like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( c.buyer_code like '%" + getkata[i] + "%' )";
                            sSQLprov += " ( NamaProv like '%" + getkata[i] + "%' )";
                            sSQLkota += " ( NamaKabKot like '%" + getkata[i] + "%' )";
                            sSQLemail += " ( email like '%" + getkata[i] + "%' )";
                            sSQLtlp += " ( tlp like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( nama like '%" + getkata[i] + "%'";
                                sSQLkode += " ( c.buyer_code like '%" + getkata[i] + "%'";
                                sSQLprov += " ( NamaProv like '%" + getkata[i] + "%'";
                                sSQLkota += " ( NamaKabKot like '%" + getkata[i] + "%'";
                                sSQLemail += " ( email like '%" + getkata[i] + "%'";
                                sSQLtlp += " ( tlp like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and nama like '%" + getkata[i] + "%' )";
                                sSQLkode += " and c.buyer_code like '%" + getkata[i] + "%' )";
                                sSQLprov += " and NamaProv like '%" + getkata[i] + "%' )";
                                sSQLkota += " and NamaKabKot like '%" + getkata[i] + "%' )";
                                sSQLemail += " and email like '%" + getkata[i] + "%' )";
                                sSQLtlp += " and tlp like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and nama like '%" + getkata[i] + "%' ";
                                sSQLkode += " and c.buyer_code like '%" + getkata[i] + "%' ";
                                sSQLprov += " and NamaProv like '%" + getkata[i] + "%' ";
                                sSQLkota += " and NamaKabKot like '%" + getkata[i] + "%' ";
                                sSQLemail += " and email like '%" + getkata[i] + "%' ";
                                sSQLtlp += " and tlp like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            //sSQLSelect += "select c.buyer_code, nama, C.KODEPROV, NamaProv AS PROV, C.KODEKABKOT, NamaKabKot AS KABKOT, email, tlp, c.recnum, count(a.pemesan) frekuensi, isnull(sum(a.netto), 0) nilai ";
            sSQLSelect += "select c.buyer_code, nama, C.KODEPROV, NamaProv AS PROV, C.KODEKABKOT, NamaKabKot AS KABKOT, email, tlp, c.recnum, COUNT(PEMESAN) FREKUENSI, ISNULL(SUM(NILAI), 0) NILAI ";
            string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH FROM ( ";
            sSQLCount += "SELECT COUNT(distinct c.buyer_code) AS JUMLAH ";
            string sSQL2 = "";
            //sSQL2 += "from arf01c c left join sot01a a on c.buyer_code = a.pemesan ";
            //sSQL2 += "left join mo..Provinsi prov on prov.KodeProv=c.KODEPROV ";
            //sSQL2 += "left join mo..KabupatenKota kab on kab.KodeKabKot = c.KODEKABKOT ";
            string sSQL4 = "FROM ARF01C C LEFT JOIN ( ";
            sSQL4 += "SELECT ISNULL(A.PEMESAN, ISNULL(B.PEMESAN, '')) PEMESAN, ISNULL(B.BRUTO, ISNULL(A.BRUTO, 0)) NILAI ";
            sSQL4 += "FROM SOT01A A FULL OUTER JOIN SIT01A B ON A.NO_BUKTI = B.NO_SO LEFT JOIN SIT01A  R ON B.NO_BUKTI = R.NO_REF AND R.JENIS_FORM = '3' WHERE ISNULL(A.STATUS_TRANSAKSI, '') <> '0' ";
            sSQL4 += "AND ISNULL(A.STATUS_TRANSAKSI, '') <> '11' AND ISNULL(B.JENIS_FORM, '2') = '2' AND ISNULL(B.STATUS, '') <> '2' AND ISNULL(R.NO_BUKTI, '') = '' ";
            sSQL4 += ") AS QRY ON C.BUYER_CODE = QRY.PEMESAN ";
            sSQL4 += "left join mo..Provinsi prov on prov.KodeProv=c.KODEPROV ";
            sSQL4 += "left join mo..KabupatenKota kab on kab.KodeKabKot = c.KODEKABKOT ";
            sSQL2 += sSQL4;
            sSQLCount += sSQL4;

            if (search != "")
            {
                sSQL2 += "WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLprov + " or " + sSQLkota + " or " + sSQLemail + " or " + sSQLtlp + " ) ";
                sSQLCount += "WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLprov + " or " + sSQLkota + " or " + sSQLemail + " or " + sSQLtlp + " ) ";
            }
            sSQL2 += "group by c.buyer_code, nama, C.KODEPROV, NamaProv , C.KODEKABKOT, NamaKabKot , email, tlp, pemesan, c.recnum ";
            string SSQL3 = ")A";
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQLSelect + sSQL2 + SSQL3).Single();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount).Single();

            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            //sSQLSelect2 += "order by sum(a.netto) desc ";
            sSQLSelect2 += "order by sum(QRY.NILAI) desc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPembeli = ErasoftDbContext.Database.SqlQuery<mdlPembeli>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlPembeli> pageOrders = new StaticPagedList<mdlPembeli>(listPembeli, pagenumber + 1, 10, totalCount.JUMLAH);

            //end change by nurul 26/9/2019, contain search 

            return PartialView("TableBuyerPartial", pageOrders);
            //end change 5/9/2019 by Tri, sort berdasarkan frekuensi beli
        }
        //end add by nurul 30/4/2019

        [HttpPost]
        public ActionResult SavePembeli(BuyerViewModel dataBuyer)
        {
            if (!ModelState.IsValid)
            {
                dataBuyer.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataBuyer, JsonRequestBehavior.AllowGet);
            }

            if (dataBuyer.Pembeli.RecNum == null)
            {
                //var listPembeli = ErasoftDbContext.ARF01C.OrderBy(m => m.RecNum).ToList();
                var listPembeli = ErasoftDbContext.ARF01C.OrderByDescending(m => m.RecNum).FirstOrDefault();
                var noPembeli = "";

                if (listPembeli == null)
                {
                    noPembeli = "000001";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ARF01C, RESEED, 0)");
                }
                else
                {
                    var lastRecNum = listPembeli.RecNum;
                    lastRecNum++;

                    noPembeli = lastRecNum.ToString().PadLeft(6, '0');
                }

                dataBuyer.Pembeli.BUYER_CODE = noPembeli;
                ErasoftDbContext.ARF01C.Add(dataBuyer.Pembeli);
            }
            else
            {
                var buyerInDb = ErasoftDbContext.ARF01C.Single(c => c.RecNum == dataBuyer.Pembeli.RecNum);

                buyerInDb.NAMA = dataBuyer.Pembeli.NAMA;
                buyerInDb.AL = dataBuyer.Pembeli.AL;
                buyerInDb.KODEPROV = dataBuyer.Pembeli.KODEPROV;
                buyerInDb.KODEKABKOT = dataBuyer.Pembeli.KODEKABKOT;
                buyerInDb.KODEPOS = dataBuyer.Pembeli.KODEPOS;
                buyerInDb.PERSO = dataBuyer.Pembeli.PERSO;
                buyerInDb.EMAIL = dataBuyer.Pembeli.EMAIL;
                buyerInDb.TLP = dataBuyer.Pembeli.TLP;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //var partialVm = new BuyerViewModel()
            //{
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ThenByDescending(x => x.TGL_INPUT).ToList()
            //};

            //return PartialView("TableBuyerPartial", partialVm);

            //change by nurul 30/4/2019
            //return PartialView("TableBarang1Partial", partialVm);
            dataBuyer.Errors = null;
            return Json(dataBuyer, JsonRequestBehavior.AllowGet);
            //end change by nurul 30/4/2019
        }
        //add by nurul 5/12/2018
        [HttpPost]
        public ActionResult SaveBuyerPopUp(BuyerViewModel dataBuyer)
        {
            if (!ModelState.IsValid)
            {
                //dataBuyer.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                //return Json(dataBuyer, JsonRequestBehavior.AllowGet);
                return View("BuyerPopup1", dataBuyer);
            }

            if (dataBuyer.Pembeli.RecNum == null)
            {
                var listPembeli = ErasoftDbContext.ARF01C.OrderBy(m => m.RecNum).ToList();
                var noPembeli = "";

                if (listPembeli.Count == 0)
                {
                    noPembeli = "000001";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ARF01C, RESEED, 0)");
                }
                else
                {
                    var lastRecNum = listPembeli.Last().RecNum;
                    lastRecNum++;

                    noPembeli = lastRecNum.ToString().PadLeft(6, '0');
                }

                dataBuyer.Pembeli.BUYER_CODE = noPembeli;
                ErasoftDbContext.ARF01C.Add(dataBuyer.Pembeli);
            }
            else
            {
                var buyerInDb = ErasoftDbContext.ARF01C.Single(c => c.RecNum == dataBuyer.Pembeli.RecNum);

                buyerInDb.NAMA = dataBuyer.Pembeli.NAMA;
                buyerInDb.AL = dataBuyer.Pembeli.AL;
                buyerInDb.KODEPROV = dataBuyer.Pembeli.KODEPROV;
                buyerInDb.KODEKABKOT = dataBuyer.Pembeli.KODEKABKOT;
                buyerInDb.KODEPOS = dataBuyer.Pembeli.KODEPOS;
                buyerInDb.PERSO = dataBuyer.Pembeli.PERSO;
                buyerInDb.EMAIL = dataBuyer.Pembeli.EMAIL;
                buyerInDb.TLP = dataBuyer.Pembeli.TLP;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //change by nurul 26/6/2019
            //var partialVm = new BuyerViewModel()
            //{
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ThenByDescending(x => x.TGL_INPUT).ToList()
            //};

            //return PartialView("TableBuyerPopUp", partialVm);
            dataBuyer.Errors = null;
            return Json(dataBuyer, JsonRequestBehavior.AllowGet);
            //end change by nurul 26/6/2019
        }
        //end add

        [HttpPost]
        public ActionResult SavePembeliPopup(BuyerViewModel dataBuyer)
        {
            if (!ModelState.IsValid)
            {
                return View("BuyerPopup", dataBuyer);
            }

            if (dataBuyer.Pembeli.RecNum == null)
            {
                ErasoftDbContext.ARF01C.Add(dataBuyer.Pembeli);
            }
            else
            {
                var buyerInDb = ErasoftDbContext.ARF01C.Single(c => c.BUYER_CODE == dataBuyer.Pembeli.BUYER_CODE);

                buyerInDb.NAMA = dataBuyer.Pembeli.NAMA;
                buyerInDb.AL = dataBuyer.Pembeli.AL;
                buyerInDb.KODEPROV = dataBuyer.Pembeli.KODEPROV;
                buyerInDb.KODEKABKOT = dataBuyer.Pembeli.KODEKABKOT;
                buyerInDb.KODEPOS = dataBuyer.Pembeli.KODEPOS;
                buyerInDb.PERSO = dataBuyer.Pembeli.PERSO;
                buyerInDb.EMAIL = dataBuyer.Pembeli.EMAIL;
                buyerInDb.TLP = dataBuyer.Pembeli.TLP;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            return new EmptyResult();
        }

        public ActionResult EditPembeli(int recNum)
        {
            try
            {
                var buyerVm = new BuyerViewModel()
                {
                    Pembeli = ErasoftDbContext.ARF01C.Single(c => c.RecNum == recNum),
                    //remark 17/9/2019 by Tri, tuning
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList()
                    //end remark 17/9/2019 by Tri, tuning
                };

                return Json(buyerVm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditPembeliPopup(string kodePembeli)
        {
            try
            {
                var buyerVm = new BuyerViewModel()
                {
                    Pembeli = ErasoftDbContext.ARF01C.SingleOrDefault(c => c.BUYER_CODE == kodePembeli),
                    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList()
                };

                ViewData["Editing"] = 1;

                return View("BuyerPopup", buyerVm);
            }
            catch (Exception e)
            {
                return JsonErrorMessage(e.Message);
            }
        }

        public ActionResult DeletePembeli(int buyerId)
        {
            //try
            //{
            var buyerInDb = ErasoftDbContext.ARF01C.Single(c => c.RecNum == buyerId);
            //ADD BY NURUL 30/7/2018
            var vmError = new StokViewModel() { };

            var cekFaktur = ErasoftDbContext.SIT01A.Count(k => k.PEMESAN == buyerInDb.BUYER_CODE);
            var cekPesanan = ErasoftDbContext.SOT01A.Count(k => k.PEMESAN == buyerInDb.BUYER_CODE);

            if (cekFaktur > 0 || cekPesanan > 0)
            {
                vmError.Errors.Add("Pembeli sudah dipakai di transaksi !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //END ADD                                
            ErasoftDbContext.ARF01C.Remove(buyerInDb);
            ErasoftDbContext.SaveChanges();

            var partialVm = new BuyerViewModel()
            {
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ThenByDescending(x => x.TGL_INPUT).ToList()
                Errors = null
            };

            //return PartialView("TableBuyerPartial", partialVm);
            return Json(partialVm, JsonRequestBehavior.AllowGet);
            //}
            //catch (Exception)
            //{
            //    return View("Error");
            //}
        }

        // =============================================== Bagian Pembeli (END)

        // =============================================== Bagian Customer (START)

        [HttpGet]
        //change by nurul 21/2/2019
        //public ActionResult CekJumlahMarketplace(string uname)
        public ActionResult CekJumlahMarketplace(long accId)
        {
            var jumlahAkunMarketplace = ErasoftDbContext.ARF01
                .GroupBy(m => m.NAMA)
                .Select(g => new
                {
                    NamaMarket = g.FirstOrDefault().NAMA,
                    Jumlah = g.Select(o => o.NAMA).Distinct().Count()
                });

            var accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accId);

            if (accInDb == null)
            {
                var accIdByUser = MoDbContext.User.FirstOrDefault(u => u.AccountId == accId)?.AccountId;
                accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accIdByUser);
            }

            var accSubs = MoDbContext.Subscription.FirstOrDefault(s => s.KODE == accInDb.KODE_SUBSCRIPTION);
            var jumlahSemuaAkun = 0;
            var namaMarketTerpakai = new List<int>();

            foreach (var market in jumlahAkunMarketplace)
            {
                namaMarketTerpakai.Add(Convert.ToInt32(market.NamaMarket));
                jumlahSemuaAkun += market.Jumlah;
            }

            var valSubs = new ValidasiSubs()
            {
                JumlahMarketplace = jumlahSemuaAkun,
                JumlahMarketplaceMax = accSubs?.JUMLAH_MP,
                ListNamaMarketTerpakai = namaMarketTerpakai,
                //add by nurul 12/2/2019
                SudahSampaiBatasTanggal = (accInDb?.TGL_SUBSCRIPTION <= DateTime.Today.Date)
                //end add by nurul 12/2/2019
            };

            return Json(valSubs, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public string GetCategoryLazada()
        {
            var lzd = new LazadaController();
            lzd.GetCategoryLzd();
            return "";
        }
        [HttpGet]
        public async System.Threading.Tasks.Task<string> GetCategoryBlibli()
        {
            var idmarket = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI").IdMarket.ToString();
            var custInDb = ErasoftDbContext.ARF01.Where(c => c.NAMA == idmarket).ToList();
            foreach (var customer in custInDb)
            {
                #region BLIBLI get token
                if (!string.IsNullOrEmpty(customer.API_CLIENT_P) && !string.IsNullOrEmpty(customer.API_CLIENT_U))
                {
                    var BliApi = new BlibliController();
                    BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                    {
                        API_client_username = customer.API_CLIENT_U,
                        API_client_password = customer.API_CLIENT_P,
                        API_secret_key = customer.API_KEY,
                        mta_username_email_merchant = customer.EMAIL,
                        mta_password_password_merchant = customer.PASSWORD,
                        merchant_code = customer.Sort1_Cust,
                        token = customer.TOKEN,
                        idmarket = customer.RecNum.Value,
                        versiToken = customer.KD_ANALISA
                    };
                    await BliApi.GetCategoryTree(data);
                    //BliApi.GetCategoryTree(data);
                }
                #endregion
            }
            return "";
        }
        [HttpGet]
        public async System.Threading.Tasks.Task<string> GetMasterCategoryElevenia()
        {
            var idmarket = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA").IdMarket.ToString();
            var listELShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == idmarket).ToList();
            if (listELShop.Count > 0)
            {
                var elApi = new EleveniaController();
                foreach (ARF01 tblCustomer in listELShop)
                {
                    if (Convert.ToString(tblCustomer.API_KEY) != "")
                    {
                        await elApi.GetCategoryElevenia(Convert.ToString(tblCustomer.API_KEY));
                        break;
                    }
                }
            }
            return "";
        }
        [HttpGet]
        public async System.Threading.Tasks.Task<string> GetMasterAttributeElevenia()
        {
            var idmarket = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA").IdMarket.ToString();
            var listELShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == idmarket).ToList();
            if (listELShop.Count > 0)
            {
                var elApi = new EleveniaController();
                foreach (ARF01 tblCustomer in listELShop)
                {
                    if (Convert.ToString(tblCustomer.API_KEY) != "")
                    {
                        await elApi.GetAttribute(Convert.ToString(tblCustomer.API_KEY));
                        break;
                    }
                }
            }
            return "";
        }


        [HttpPost]
        public ActionResult SaveCustomer(CustomerViewModel customer, string api_client_username, string api_client_password)
        {
            if (!ModelState.IsValid)
            {
                customer.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(customer, JsonRequestBehavior.AllowGet);
            }
            ////add by nurul 15/8/2018
            //if (customer.Customers.NAMA.Equals(MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "TOKOPEDIA").IdMarket.ToString()))
            //{
            //    customer.Errors.Add("Akun anda harus official store di Tokopedia. Silahkan hubungi kami apabila anda sudah official store!");
            //    return Json(customer, JsonRequestBehavior.AllowGet);
            //}
            ////end add
            string kdCustomer = "";
            var versiBlibli = customer.Customers.KD_ANALISA;
            if (customer.Customers.RecNum == null)
            {
                var listCustomer = ErasoftDbContext.ARF01.ToList();
                var noCust = "";

                if (listCustomer.Count == 0)
                {
                    noCust = "000001";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ARF01, RESEED, 0)");
                }
                else
                {
                    var lastRecNum = listCustomer.Last().RecNum;
                    lastRecNum++;

                    noCust = lastRecNum.ToString().PadLeft(6, '0');
                }
                kdCustomer = noCust;
                customer.Customers.CUST = noCust;
                //add by Tri, not null hidden field > blank
                //customer.Customers.AL = "";
                //customer.Customers.KODEKABKOT = "";
                //customer.Customers.KODEPOS = "";
                //customer.Customers.KODEPROV = "";
                //customer.Customers.TLP = "";
                //end add by Tri, not null hidden field > blank

                //add by nurul 14/1/2019 'validasi email dan marketplace sama 
                var vmError = new CustomerViewModel() { };

                //var cekEmailMP = ErasoftDbContext.ARF01.Where(a => a.NAMA == customer.Customers.NAMA && a.EMAIL == customer.Customers.EMAIL).ToList();
                var cekEmailMP = ErasoftDbContext.ARF01.Where(a => a.NAMA == customer.Customers.NAMA && a.EMAIL == customer.Customers.EMAIL && a.NAMA != "18").ToList();
                int nm = Convert.ToInt32(customer.Customers.NAMA);
                var getMP = MoDbContext.Marketplaces.SingleOrDefault(a => a.IdMarket == nm).NamaMarket;
                if (cekEmailMP.Count > 0)
                {
                    vmError.Errors.Add("Email sudah digunakan untuk Marketplace ( " + getMP + " ) !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by nurul 14/1/2019
                //add by nurul, tambah validasi duplikat nama akun jika offline
                var cekNamaAkunOffline = ErasoftDbContext.ARF01.Where(a => a.PERSO == customer.Customers.PERSO && a.NAMA == customer.Customers.NAMA && a.NAMA == "18").ToList();
                if (cekNamaAkunOffline.Count > 0)
                {
                    //if (cekNamaAkunOffline.Where(a => a.NAMA == customer.Customers.NAMA).Count() > 0)
                    //{
                    //vmError.Errors.Add("Email sudah digunakan untuk Marketplace ( " + getMP + " ) !");
                    vmError.Errors.Add("Nama Akun ( " + customer.Customers.PERSO + " ) untuk Marketplace Offline sudah ada !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                    //}
                }
                //add by nurul, tambah validasi duplikat nama akun jika offline

                //add by fauzi handle field password tidak dipakai untuk marketplace SHOPIFY karena lengthnya 20. jadi menggunakan field API_CLIENT_P dengan lenght 
                if (getMP.ToUpper() == "SHOPIFY")
                {

                    if (!string.IsNullOrWhiteSpace(customer.Customers.PASSWORD))
                    {
                        customer.Customers.PASSWORD = "";
                    }
                    customer.Customers.TLP = ".";
                }
                //end 

                //add by fauzi handle field password tidak dipakai untuk marketplace 82Cart
                if (getMP.ToUpper() == "82CART")
                {

                    if (!string.IsNullOrWhiteSpace(customer.Customers.PASSWORD))
                    {
                        customer.Customers.PASSWORD = "";
                    }
                }
                //end 

                if (getMP.ToUpper() == "BLIBLI")
                {
                    if (customer.Customers.KD_ANALISA == "2")
                    {
                        customer.Customers.API_CLIENT_P = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk";
                        customer.Customers.API_CLIENT_U = "mta-api-pterasoftteknologiindonesia-40eb0";
                    }
                }

                ErasoftDbContext.ARF01.Add(customer.Customers);
                ErasoftDbContext.SaveChanges();

                var listBarang = ErasoftDbContext.STF02.ToList();
                var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == noCust);

                //tuning 10 Maret 2019
                //foreach (var barang in listBarang)
                //{
                //    var dataHarga = new STF02H()
                //    {
                //        BRG = barang.BRG,
                //        IDMARKET = Convert.ToInt32(cust.RecNum),
                //        AKUNMARKET = cust.PERSO,
                //        HJUAL = 0,
                //        USERNAME = barang.USERNAME
                //    };

                //    ErasoftDbContext.STF02H.Add(dataHarga);
                //}
                string sSQL = "insert into stf02h(brg, idmarket, akunmarket, username, hjual, display)";
                sSQL += "select a.brg, " + cust.RecNum + ", '" + cust.PERSO + "', 'auto_create_pelanggan', 0, 0  from stf02 a left join stf02h b on a.brg = b.brg and b.idmarket=" + cust.RecNum + " where isnull(b.idmarket,0)=0";
                EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                //end tuning 10 Maret 2019
            }
            else
            {
                var custInDb = ErasoftDbContext.ARF01.Single(c => c.RecNum == customer.Customers.RecNum);

                //add by nurul 14/1/2019 'validasi email dan marketplace sama 
                var vmError = new CustomerViewModel() { };

                //var cekEmailMP = ErasoftDbContext.ARF01.Where(a => a.NAMA == customer.Customers.NAMA && a.EMAIL == customer.Customers.EMAIL && a.RecNum != customer.Customers.RecNum).ToList();
                var cekEmailMP = ErasoftDbContext.ARF01.Where(a => a.NAMA == customer.Customers.NAMA && a.EMAIL == customer.Customers.EMAIL && a.RecNum != customer.Customers.RecNum && a.NAMA != "18").ToList();
                int nm = Convert.ToInt32(customer.Customers.NAMA);
                var getMP = MoDbContext.Marketplaces.SingleOrDefault(a => a.IdMarket == nm).NamaMarket;
                if (cekEmailMP.Count > 0)
                {
                    vmError.Errors.Add("Email sudah digunakan untuk Marketplace ( " + getMP + " ) !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by nurul 14/1/2019
                //add by nurul, tambah validasi duplikat nama akun jika offline
                var cekNamaAkunOffline = ErasoftDbContext.ARF01.Where(a => a.PERSO == customer.Customers.PERSO && a.NAMA == customer.Customers.NAMA && a.NAMA == "18" && a.RecNum != customer.Customers.RecNum).ToList();
                if (cekNamaAkunOffline.Count > 0)
                {
                    //if (cekNamaAkunOffline.Where(a => a.NAMA == customer.Customers.NAMA).Count() > 0)
                    //{
                    //vmError.Errors.Add("Email sudah digunakan untuk Marketplace ( " + getMP + " ) !");
                    vmError.Errors.Add("Nama Akun ( " + customer.Customers.PERSO + " ) untuk Marketplace Offline sudah ada !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                    //}
                }
                //add by nurul, tambah validasi duplikat nama akun jika offline

                //add by fauzi handle field password tidak dipakai untuk marketplace SHOPIFY karena lengthnya 20. jadi menggunakan field API_CLIENT_P dengan lenght 
                if (getMP.ToUpper() == "SHOPIFY")
                {
                    if (!string.IsNullOrWhiteSpace(customer.Customers.PASSWORD))
                    {
                        customer.Customers.PASSWORD = "";
                    }
                    customer.Customers.TLP = ".";
                }
                //end 

                //add by fauzi handle field password tidak dipakai untuk marketplace 82cart
                if (getMP.ToUpper() == "82CART")
                {
                    if (!string.IsNullOrWhiteSpace(customer.Customers.PASSWORD))
                    {
                        customer.Customers.PASSWORD = "";
                    }
                }
                //end 



                custInDb.TOP = customer.Customers.TOP;
                custInDb.AL = customer.Customers.AL;
                custInDb.KODEPROV = customer.Customers.KODEPROV;
                custInDb.KODEKABKOT = customer.Customers.KODEKABKOT;
                custInDb.KODEPOS = customer.Customers.KODEPOS;
                custInDb.PERSO = customer.Customers.PERSO;
                custInDb.EMAIL = customer.Customers.EMAIL;
                custInDb.PASSWORD = customer.Customers.PASSWORD;
                custInDb.TLP = customer.Customers.TLP;
                //add by Tri, add api key
                custInDb.API_KEY = customer.Customers.API_KEY;

                //change by calvin 16 september 2019. jika shopee jgn ubah sort1_cust
                //custInDb.Sort1_Cust = customer.Customers.Sort1_Cust;
                if (customer.Customers.NAMA != "17")
                {
                    custInDb.Sort1_Cust = customer.Customers.Sort1_Cust;
                }
                //end change by calvin 16 september 2019

                kdCustomer = custInDb.CUST;
                //end add by Tri, add api key
                custInDb.API_CLIENT_U = customer.Customers.API_CLIENT_U;
                custInDb.API_CLIENT_P = customer.Customers.API_CLIENT_P;
                if (!string.IsNullOrEmpty(customer.Customers.TOKEN))
                    custInDb.TOKEN = customer.Customers.TOKEN;

                //add by nurul 16/7/2020
                if (getMP.ToUpper() == "BLIBLI")
                {
                    custInDb.KD_ANALISA = customer.Customers.KD_ANALISA;
                    if (customer.Customers.KD_ANALISA == "2")
                    {
                        custInDb.API_CLIENT_P = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk";
                        custInDb.API_CLIENT_U = "mta-api-pterasoftteknologiindonesia-40eb0";
                        customer.Customers.API_CLIENT_P = custInDb.API_CLIENT_P;
                        customer.Customers.API_CLIENT_U = custInDb.API_CLIENT_U;
                    }
                }
                //end add by nurul 16/7/2020

                kdCustomer = custInDb.CUST;

                //ADD BY CALVIN 21 MEI 2019, JIKA BLIBLI DI EDIT, KOSONGKAN REFRESH_TOKEN, AGAR TOKEN DIAMBIL YANG BARU
                if (customer.Customers.NAMA == "16")
                {
                    custInDb.STATUS_API = "0";
                    custInDb.REFRESH_TOKEN = "";
                }
                //END ADD BY CALVIN 21 MEI 2019

                //add by calvin 23 september 2019, untuk cek apakah ada barang yg belum digenerate
                string sSQL = "insert into stf02h(brg, idmarket, akunmarket, username, hjual, display)";
                sSQL += "select brg, " + custInDb.RecNum + ", '" + custInDb.PERSO + "', 'auto_create_pelanggan', 0, 0  from stf02 a left join stf02h b on a.brg = b.brg and b.idmarket=" + custInDb.RecNum + " where isnull(b.idmarket,0)=0";
                EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                //end add by calvin 23 september 2019, untuk cek apakah ada barang yg belum digenerate
            }

            ErasoftDbContext.SaveChanges();
            var Marketplaces = MoDbContext.Marketplaces.ToList();
            //add by Tri call bl/lzd api get access key
            if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK").IdMarket.ToString()))
            {
                var getKey = new BukaLapakController().GetAccessKey(kdCustomer, customer.Customers.EMAIL, customer.Customers.PASSWORD);
            }
            //else if (customer.Customers.NAMA.Equals(MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString()))
            //{
            //    var getToken = new LazadaController().GetToken(kdCustomer, customer.Customers.API_KEY);
            //}
            #region Elevenia get deliveryTemp
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA").IdMarket.ToString()))
            {
                var elApi = new EleveniaController();
                elApi.GetDeliveryTemp(Convert.ToString(customer.Customers.RecNum), Convert.ToString(customer.Customers.API_KEY));
            }
            #endregion
            #region BLIBLI get category dan attribute
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI").IdMarket.ToString()))
            {
                if (versiBlibli != "2")
                {
                    if (!string.IsNullOrEmpty(customer.Customers.API_CLIENT_P) && !string.IsNullOrEmpty(customer.Customers.API_CLIENT_U))
                    {
                        var BliApi = new BlibliController();
                        BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                        {
                            API_client_username = customer.Customers.API_CLIENT_U,
                            API_client_password = customer.Customers.API_CLIENT_P,
                            API_secret_key = customer.Customers.API_KEY,
                            mta_username_email_merchant = customer.Customers.EMAIL,
                            mta_password_password_merchant = customer.Customers.PASSWORD,
                            merchant_code = customer.Customers.Sort1_Cust,
                            idmarket = customer.Customers.RecNum.Value,
                            versiToken = customer.Customers.KD_ANALISA
                        };
                        Task.Run(() => BliApi.GetToken(data, true, true).Wait());
                        //BliApi.GetPickupPoint(data);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(customer.Customers.API_CLIENT_P) && !string.IsNullOrEmpty(customer.Customers.API_CLIENT_U))
                    {
                        var BliApi = new BlibliController();
                        BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                        {
                            API_client_username = customer.Customers.API_CLIENT_U,
                            API_client_password = customer.Customers.API_CLIENT_P,
                            API_secret_key = customer.Customers.API_KEY,
                            mta_username_email_merchant = customer.Customers.EMAIL,
                            mta_password_password_merchant = customer.Customers.PASSWORD,
                            merchant_code = customer.Customers.Sort1_Cust,
                            idmarket = customer.Customers.RecNum.Value,
                            versiToken = customer.Customers.KD_ANALISA
                        };
                        Task.Run(() => BliApi.GetCategoryPerUser(data));
                    }
                }
            }
            #endregion
            #region JD ID get Category
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "JD.ID").IdMarket.ToString()))
            {
                if (!string.IsNullOrEmpty(customer.Customers.TOKEN) && !string.IsNullOrEmpty(customer.Customers.API_CLIENT_U) && !string.IsNullOrEmpty(customer.Customers.API_KEY))
                {
                    var jdAPI = new JDIDController();
                    JDIDAPIData dataJD = new JDIDAPIData
                    {
                        no_cust = kdCustomer,
                        email = customer.Customers.EMAIL,
                        accessToken = customer.Customers.TOKEN,
                        appKey = customer.Customers.API_KEY,
                        appSecret = customer.Customers.API_CLIENT_U,
                        DatabasePathErasoft = dbPathEra,
                    };
                    //Task.Run(() => jdAPI.checkAPICustomerShop(dataJD)).Wait();
                    jdAPI.JDID_checkAPICustomerShop(dataJD);
                }

            }

            #endregion
            #region tokped
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "TOKOPEDIA").IdMarket.ToString()))
            {
                TokopediaController.TokopediaAPIData dataTokped = new TokopediaController.TokopediaAPIData
                {
                    merchant_code = customer.Customers.Sort1_Cust, //FSID
                    API_client_password = customer.Customers.API_CLIENT_P, //Client Secret
                    API_client_username = customer.Customers.API_CLIENT_U, //Client ID
                    API_secret_key = customer.Customers.API_KEY, //Shop ID 
                    idmarket = customer.Customers.RecNum.Value,
                };
                TokopediaController tokopediaApi = new TokopediaController();
                Task.Run(() => tokopediaApi.GetToken(dataTokped)).Wait();
            }
            #endregion

            #region shopify
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPIFY").IdMarket.ToString()))
            {
                ShopifyController.ShopifyAPIData dataShopify = new ShopifyController.ShopifyAPIData
                {
                    no_cust = kdCustomer, //no ID Customer
                    account_store = customer.Customers.PERSO, //account store name
                    API_password = customer.Customers.API_CLIENT_P, //API Password
                    API_key = customer.Customers.API_KEY, //API Key
                    email = customer.Customers.EMAIL, //recnum
                    DatabasePathErasoft = dbPathEra,
                };
                ShopifyController shopifyApi = new ShopifyController();
                Task.Run(() => shopifyApi.Shopify_GetAccount(dataShopify)).Wait();
            }
            #endregion

            #region 82Cart
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "82CART").IdMarket.ToString()))
            {
                EightTwoCartController.E2CartAPIData data82Cart = new EightTwoCartController.E2CartAPIData
                {
                    no_cust = kdCustomer, //no ID Customer
                    account_store = customer.Customers.PERSO, //account store name
                    API_password = customer.Customers.API_CLIENT_P, //API Password
                    API_key = customer.Customers.API_KEY, //API Key
                    API_credential = customer.Customers.Sort1_Cust,
                    API_url = customer.Customers.PERSO,
                    email = customer.Customers.EMAIL, //recnum
                    DatabasePathErasoft = dbPathEra,
                };
                EightTwoCartController api82Cart = new EightTwoCartController();
                Task.Run(() => api82Cart.E2Cart_GetCustomer(data82Cart)).Wait();
            }
            #endregion



            //end add by Tri call bl/lzd api get access key
            ModelState.Clear();

            var partialVm = new CustomerViewModel()
            {
                ListCustomer = ErasoftDbContext.ARF01.AsNoTracking().ToList(),
                kodeCust = kdCustomer
            };
            if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString()))
            {
                partialVm.marketplace = "LAZADA";
                return Json(partialVm, JsonRequestBehavior.AllowGet);
            }
            else if (customer.Customers.NAMA.Equals(Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE").IdMarket.ToString()))
            {
                partialVm.marketplace = "SHOPEE";
                return Json(partialVm, JsonRequestBehavior.AllowGet);
            }
            else
            {
                customer.Errors = null;
                return Json(customer, JsonRequestBehavior.AllowGet);
                //return PartialView("TableCustomerPartial", partialVm);
            }
        }

        public ActionResult EditCustomer(int recNum)
        {
            try
            {
                var custVm = new CustomerViewModel()
                {
                    Customers = ErasoftDbContext.ARF01.Single(c => c.RecNum == recNum),
                    ListCustomer = ErasoftDbContext.ARF01.ToList()
                };

                return Json(custVm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteCustomer(int recNum)
        {
            var custInDb = ErasoftDbContext.ARF01.Single(c => c.RecNum == recNum);
            if (custInDb != null)
            {
                var pesanan = ErasoftDbContext.SOT01A.Where(m => m.CUST == custInDb.CUST).ToList();
                if (pesanan.Count > 0)
                {
                    //sudah ada pesanan, tidak boleh delete
                    return JsonErrorMessage("Akun ini sudah memiliki transaksi, tidak bisa dihapus");
                }
                else
                {
                    var faktur = ErasoftDbContext.SIT01A.Where(m => m.CUST == custInDb.CUST).ToList();
                    if (faktur.Count > 0)
                    {
                        //sudah ada faktur, tidak boleh delete
                        return JsonErrorMessage("Akun ini sudah memiliki transaksi, tidak bisa dihapus");
                    }
                    else
                    {
                        ErasoftDbContext.ARF01.Remove(custInDb);
                        ErasoftDbContext.STF02H.RemoveRange(ErasoftDbContext.STF02H.Where(h => h.IDMARKET == recNum));

                        ErasoftDbContext.SaveChanges();
                    }
                }
            }
            //ErasoftDbContext.ARF01.Remove(custInDb);
            //ErasoftDbContext.STF02H.RemoveRange(ErasoftDbContext.STF02H.Where(h => h.IDMARKET == recNum));

            //ErasoftDbContext.SaveChanges();

            //var partialVm = new CustomerViewModel()
            //{
            //    //ListCustomer = ErasoftDbContext.ARF01.ToList()
            //    Errors = null
            //};

            //return Json(partialVm, JsonRequestBehavior.AllowGet);
            //return PartialView("TableCustomerPartial", partialVm);
            return null;
        }

        [HttpGet]
        public ActionResult GetProvinsi()
        {
            var prov = MoDbContext.Provinsi.ToList();

            return Json(prov, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetKabKot(string kodeProv)
        {
            var kabkot = MoDbContext.KabupatenKota.Where(k => k.KodeProv == kodeProv).ToList();

            return Json(kabkot, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 16/7/2019
        public ActionResult RefreshTableCustomer(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLemail = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( C.NamaMarket like '%" + getkata[i] + "%' )";
                            sSQLemail += " ( A.EMAIL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( C.NamaMarket like '%" + getkata[i] + "%'";
                                sSQLemail += " ( A.EMAIL like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and C.NamaMarket like '%" + getkata[i] + "%' )";
                                sSQLemail += " and A.EMAIL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and C.NamaMarket like '%" + getkata[i] + "%' ";
                                sSQLemail += " and A.EMAIL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //string sSQLSelect = "";
            //sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NAMA AS KODE, ISNULL(C.NamaMarket,'') AS NAMA, A.EMAIL AS EMAIL, A.STATUS_API AS STATUS_API, A.PERSO AS PERSO ";
            //string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            //string sSQL2 = "";
            //sSQL2 += "FROM ARF01 A ";
            //sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON A.NAMA = C.IdMarket ";
            //if (search != "")
            //{
            //    sSQL2 += "WHERE C.NamaMarket LIKE '%" + search + "%' OR A.EMAIL LIKE '%" + search + "%' ";
            //}

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY C.NamaMarket ASC, A.EMAIL ASC ";
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            //var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlCustomer>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NAMA AS KODE, ISNULL(C.NamaMarket,'') AS NAMA, A.EMAIL AS EMAIL, A.STATUS_API AS STATUS_API, A.TIDAK_HIT_UANG_R AS TIDAK_HIT_UANG_R, A.TGL_EXPIRED AS TGL_EXPIRED, A.PERSO AS PERSO ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM ARF01 A ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON A.NAMA = C.IdMarket ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLemail + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY C.NamaMarket ASC, A.EMAIL ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlCustomer>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<mdlCustomer> pageOrders = new StaticPagedList<mdlCustomer>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableCustomerPartial", pageOrders);
        }
        //end add by nurul 16/7/2019

        // =============================================== Bagian Customer (END)

        // =============================================== Bagian Barang (START)
        public ActionResult RefreshTableMenuBarang(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            //if (getkata.Length > 0)
            //{
            //    if (search != "")
            //    {
            //        for (int i = 0; i < getkata.Length; i++)
            //        {
            //            if (getkata.Length == 1)
            //            {
            //                sSQLnama += " ( (ISNULL(a.NAMA,'') + ' ' + ISNULL(a.NAMA2,'')) like '%" + getkata[i] + "%' )";
            //                sSQLkode += " ( a.BRG like '%" + getkata[i] + "%' )";
            //                sSQLkategori += " ( a.KET_SORT1 like '%" + getkata[i] + "%' )";
            //                sSQLmerk += " ( a.KET_SORT2 like '%" + getkata[i] + "%' )";
            //                sSQLharga += " ( a.HJUAL like '%" + getkata[i] + "%' )";
            //            }
            //            else
            //            {
            //                if (getkata[i] == getkata.First())
            //                {
            //                    sSQLnama += " ( (ISNULL(a.NAMA,'') + ' ' + ISNULL(a.NAMA2,'')) like '%" + getkata[i] + "%'";
            //                    sSQLkode += " ( a.BRG like '%" + getkata[i] + "%'";
            //                    sSQLkategori += " ( a.KET_SORT1 like '%" + getkata[i] + "%' ";
            //                    sSQLmerk += " ( a.KET_SORT2 like '%" + getkata[i] + "%' ";
            //                    sSQLharga += " ( a.HJUAL like '%" + getkata[i] + "%' ";
            //                }
            //                else if (getkata[i] == getkata.Last())
            //                {
            //                    sSQLnama += " and (ISNULL(a.NAMA,'') + ' ' + ISNULL(a.NAMA2,'')) like '%" + getkata[i] + "%' )";
            //                    sSQLkode += " and a.BRG like '%" + getkata[i] + "%' )";
            //                    sSQLkategori += " and a.KET_SORT1 like '%" + getkata[i] + "%' )";
            //                    sSQLmerk += " and a.KET_SORT2 like '%" + getkata[i] + "%' )";
            //                    sSQLharga += " and a.HJUAL like '%" + getkata[i] + "%' )";
            //                }
            //                else
            //                {
            //                    sSQLnama += " and (ISNULL(a.NAMA,'') + ' ' + ISNULL(a.NAMA2,'')) like '%" + getkata[i] + "%' ";
            //                    sSQLkode += " and a.BRG like '%" + getkata[i] + "%' ";
            //                    sSQLkategori += " and a.KET_SORT1 like '%" + getkata[i] + "%' ";
            //                    sSQLmerk += " and a.KET_SORT2 like '%" + getkata[i] + "%' ";
            //                    sSQLharga += " and a.HJUAL like '%" + getkata[i] + "%' ";
            //                }
            //            }
            //        }
            //    }
            //}

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                            sSQLkategori += " and ";
                            sSQLmerk += " and ";
                            sSQLharga += " and ";
                        }


                        sSQLkode += " ( a.BRG like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( (ISNULL(a.NAMA,'') + ' ' + ISNULL(a.NAMA2,'')) like '%" + getkata[i] + "%' ) ";
                        sSQLkategori += " ( a.KET_SORT1 like '%" + getkata[i] + "%' ) ";
                        sSQLmerk += "  ( a.KET_SORT2 like '%" + getkata[i] + "%' ) ";
                        sSQLharga += " ( a.HJUAL like '%" + getkata[i] + "%' ) ";

                    }
                }
            }

            //var Stf02S = (from p in ErasoftDbContext.STF02
            //              where ((p.TYPE == "3") &&
            //                (
            //                    (p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search)
            //                ))
            //              orderby p.NAMA
            //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 });
            //var ListStf02S = Stf02S.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = Stf02S.Count();

            //string kodeBarang = "";
            //foreach (var item in ListStf02S)
            //{
            //    kodeBarang += "'" + item.BRG + "'" + ",";
            //}
            //kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //var result = new List<TableMenuBarang1PartialViewModel>();
            //foreach (var item in ListStf02S)
            //{
            //    var resultItem = new TableMenuBarang1PartialViewModel()
            //    {
            //        BRG = item.BRG,
            //        HJUAL = item.HJUAL,
            //        ID = item.ID,
            //        KET_SORT1 = item.KET_SORT1,
            //        KET_SORT2 = item.KET_SORT2,
            //        LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //        NAMA = item.NAMA,
            //        NAMA2 = item.NAMA2,
            //        QOH = 0,
            //        QOO = 0
            //    };
            //    var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //    if (getQOH != null)
            //    {
            //        resultItem.QOH = getQOH.JUMLAH;
            //    }
            //    var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //    if (getQOO != null)
            //    {
            //        resultItem.QOO = getQOO.JUMLAH;
            //    }
            //    result.Add(resultItem);
            //}

            string sSQLSelect = "";
            sSQLSelect += "select brg, NAMA, NAMA2, HJUAL, ID, KET_SORT1, KET_SORT2, LINK_GAMBAR_1, QOH, QOO from (";
            sSQLSelect += "select a.brg,a.NAMA, a.NAMA2, ISNULL(a.HJUAL, 0) HJUAL, ISNULL(a.ID, 0) ID, a.KET_SORT1, a.KET_SORT2, a.LINK_GAMBAR_1, ";
            sSQLSelect += "SUM(CASE WHEN b.JENIS = 'QOH' THEN b.JUMLAH ELSE 0 END) QOH, SUM(CASE WHEN b.JENIS = 'QOO' THEN b.JUMLAH ELSE 0 END) QOO ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH FROM ( ";
            string sSQL2 = "";
            sSQL2 += "FROM stf02 a left join ";
            sSQL2 += "[QOH_QOO_ALL_ITEM] b on a.brg=b.brg ";
            sSQL2 += "where a.type='3' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }
            sSQL2 += "group by a.brg,a.NAMA, a.NAMA2,a.HJUAL,a.ID,a.KET_SORT1,a.KET_SORT2, a.LINK_GAMBAR_1)b ";
            string SSQL3 = ")A ";
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQLSelect + sSQL2 + SSQL3).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            //add by nurul 15/5/2020
            //sSQLSelect2 += "ORDER BY a.NAMA ASC,a.brg asc ";
            switch (filter)
            {
                case "stok":
                    {
                        if (filtervalue == "asc")
                        {
                            sSQLSelect2 += "ORDER BY QOH ASC, NAMA ASC,brg asc ";
                        }
                        else
                        {
                            sSQLSelect2 += "ORDER BY QOH DESC, NAMA ASC,brg asc ";
                        }
                    }
                    break;
                case "qty_pesanan":
                    {
                        if (filtervalue == "asc")
                        {
                            sSQLSelect2 += "ORDER BY QOO ASC, NAMA ASC,brg asc ";
                        }
                        else
                        {
                            sSQLSelect2 += "ORDER BY QOO DESC, NAMA ASC,brg asc ";
                        }
                    }
                    break;
                case "qty_jual":
                    {
                        if (filtervalue == "asc")
                        {
                            sSQLSelect2 += "ORDER BY (QOH-QOO) ASC, NAMA ASC,brg asc ";
                        }
                        else
                        {
                            sSQLSelect2 += "ORDER BY (QOH-QOO) DESC, NAMA ASC,brg asc ";
                        }
                    }
                    break;
                default:
                    {
                        sSQLSelect2 += "ORDER BY NAMA ASC,brg asc ";
                    }
                    break;
            }
            //end add by nurul 15/5/2020

            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var result = ErasoftDbContext.Database.SqlQuery<TableMenuBarang1PartialViewModel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<TableMenuBarang1PartialViewModel> pageOrders = new StaticPagedList<TableMenuBarang1PartialViewModel>(result, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableMenuBarang1Partial", pageOrders);
        }

        public ActionResult RefreshTableBarang(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( (ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'')) like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( BRG like '%" + getkata[i] + "%' )";
                            sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%' )";
                            sSQLmerk += " ( KET_SORT2 like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( (ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'')) like '%" + getkata[i] + "%'";
                                sSQLkode += " ( BRG like '%" + getkata[i] + "%'";
                                sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " ( KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and (ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'')) like '%" + getkata[i] + "%' )";
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' )";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and (ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'')) like '%" + getkata[i] + "%' ";
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            ////change by calvin 22 april 2019
            ////var barangVm = new BarangViewModel()
            ////{
            //////change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList(),
            ////ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),
            ////};

            ////remark by calvin 26 april 2019
            ////var smartSearch = search.Split(' ');

            //var Stf02S = (from p in ErasoftDbContext.STF02
            //              where ((p.PART == null ? "" : p.PART) == "") &&
            //              (
            //                (
            //                    (p.NAMA + " " + p.NAMA2).Contains(search) || p.BRG.Contains(search)
            //                )
            //              //remark by calvin 26 april 2019
            //              //||
            //              //(
            //              //    smartSearch.Any(val => (p.NAMA + " " + p.NAMA2).Contains(val))  || smartSearch.Any(val => p.BRG.Contains(val))
            //              //)
            //              //end remark by calvin 26 april 2019
            //              )
            //              orderby p.NAMA
            //              select p);

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = Stf02S.Count();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //var ListStf02S = Stf02S.Skip(pagenumber * 10).Take(10).ToList();
            ////end change by calvin 22 april 2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02 ";
            sSQL2 += "WHERE ISNULL(PART,'')='' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY NAMA ASC,brg asc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStf02S = ErasoftDbContext.Database.SqlQuery<STF02>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 


            IPagedList<STF02> pageOrders = new StaticPagedList<STF02>(ListStf02S, pagenumber + 1, 10, totalCount.JUMLAH);
            //return PartialView("TableBarang1Partial", barangVm);
            return PartialView("TableBarang1Partial", pageOrders);
        }

        public ActionResult RefreshTableBarangKosong(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //CHANGE BY NURUL 25/9/2019
            //var listQOH = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE JENIS='QOH' AND JUMLAH <= 0").ToList();
            //var listKodeBarang = listQOH.Select(p => p.BRG).ToList();

            //string kodeBarang = "";
            //foreach (var item in listKodeBarang)
            //{
            //    kodeBarang += "'" + item + "'" + ",";
            //}
            //kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);

            //var listQOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE JENIS='QOO' AND BRG IN (" + kodeBarang + ")").ToList();

            //var Stf02S = (from p in ErasoftDbContext.STF02
            //              where
            //              (
            //                (p.TYPE == "3")
            //                &&
            //                ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //                &&
            //                listKodeBarang.Contains(p.BRG)
            //              )
            //              orderby p.NAMA
            //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 });
            //var ListStf02S = Stf02S.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = Stf02S.Count();

            //var result = new List<TableMenuBarang1PartialViewModel>();
            //foreach (var item in ListStf02S)
            //{
            //    var resultItem = new TableMenuBarang1PartialViewModel()
            //    {
            //        BRG = item.BRG,
            //        HJUAL = item.HJUAL,
            //        ID = item.ID,
            //        KET_SORT1 = item.KET_SORT1,
            //        KET_SORT2 = item.KET_SORT2,
            //        LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //        NAMA = item.NAMA,
            //        NAMA2 = item.NAMA2,
            //        QOH = 0,
            //        QOO = 0
            //    };
            //    var getQOH = listQOH.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //    if (getQOH != null)
            //    {
            //        resultItem.QOH = getQOH.JUMLAH;
            //    }
            //    var getQOO = listQOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //    if (getQOO != null)
            //    {
            //        resultItem.QOO = getQOO.JUMLAH;
            //    }
            //    result.Add(resultItem);
            //}

            //ADD BY NURUL 2/10/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( BRG like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' )";
                            sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%' )";
                            sSQLmerk += " ( KET_SORT2 like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( BRG like '%" + getkata[i] + "%'";
                                sSQLnama += " ( (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%'";
                                sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%'";
                                sSQLmerk += "( KET_SORT2 like '%" + getkata[i] + "%'";
                                sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' )";
                                sSQLnama += " and (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' )";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' ";
                                sSQLnama += " and (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 2/10/2019

            string SSQL = "";
            string SSQL3 = "";
            string sSQL2 = "SELECT COUNT(BRG) AS COUNT_TRANSAKSI  ";
            string SSQL1 = "SELECT QOH,QOO,BRG, NAMA, NAMA2, HJUAL, ID, KET_SORT1, KET_SORT2, LINK_GAMBAR_1 ";
            SSQL += "FROM ( ";
            SSQL += "SELECT SUM(CASE WHEN A.JENIS = 'QOH' THEN A.JUMLAH ELSE 0 END) QOH, ";
            SSQL += "	SUM(CASE WHEN A.JENIS = 'QOO' THEN A.JUMLAH ELSE 0 END) QOO, ";
            SSQL += "	B.BRG, ISNULL(B.NAMA,'') NAMA, ISNULL(B.NAMA2,'') NAMA2, B.HJUAL, B.ID, B.KET_SORT1, B.KET_SORT2, B.LINK_GAMBAR_1 ";
            SSQL += "FROM ";
            SSQL += "STF02 B LEFT JOIN ";
            SSQL += "[QOH_QOO_ALL_ITEM] A ";
            //SSQL += "INNER JOIN STF02 B ON A.BRG=B.BRG ";
            SSQL += "ON A.BRG=B.BRG ";
            SSQL += "WHERE B.TYPE='3' ";
            SSQL += "GROUP BY B.BRG,B.NAMA,B.NAMA2, B.HJUAL, B.ID, B.KET_SORT1, B.KET_SORT2, B.LINK_GAMBAR_1 ";
            SSQL += ")A ";
            SSQL += "WHERE (QOH-QOO) <= 0 ";
            if (search != "")
            {
                //SSQL += "AND BRG LIKE '%" + search + "%' OR (ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'')) LIKE '%" + search + "%' OR KET_SORT1 LIKE '%" + search + "%' OR KET_SORT2 LIKE '%" + search + "%' ";
                SSQL += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }
            SSQL3 += "ORDER BY (QOH-QOO) ASC, BRG ASC ";
            SSQL3 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            SSQL3 += "FETCH NEXT 10 ROWS ONLY ";

            var result = new List<TableMenuBarang1PartialViewModel>();
            var ListBarangKosong = ErasoftDbContext.Database.SqlQuery<listBrgMinStok>(SSQL1 + SSQL + SSQL3).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL2 + SSQL).Single();
            foreach (var item in ListBarangKosong)
            {
                result.Add(new TableMenuBarang1PartialViewModel
                {
                    BRG = item.BRG,
                    HJUAL = item.HJUAL,
                    ID = item.ID,
                    KET_SORT1 = item.KET_SORT1,
                    KET_SORT2 = item.KET_SORT2,
                    LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
                    NAMA = item.NAMA,
                    NAMA2 = item.NAMA2,
                    QOH = item.QOH,
                    QOO = item.QOO,
                });
            }
            //END CHANGE BY NURUL 25/9/2019

            IPagedList<TableMenuBarang1PartialViewModel> pageOrders = new StaticPagedList<TableMenuBarang1PartialViewModel>(result, pagenumber + 1, 10, totalCount.COUNT_TRANSAKSI);
            return PartialView("TableBarangKosongPartial", pageOrders);
        }
        public class listQtyPesanan
        {
            public string BRG { get; set; }
            public string NAMA { get; set; }
            public double QTY { get; set; }
        }
        public class listBrgNotInPesanan
        {
            public string JENIS { get; set; }
            public string BRG { get; set; }
            public string NAMA { get; set; }
            public string NAMA2 { get; set; }
            public double HJUAL { get; set; }
            public int ID { get; set; }
            public string KET_SORT1 { get; set; }
            public string KET_SORT2 { get; set; }
            public string LINK_GAMBAR_1 { get; set; }
            public double QOH { get; set; }
            public double QOO { get; set; }
            public double QTY { get; set; }
        }
        public ActionResult RefreshTableBarangTidakLaku(string param, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //add by nurul 16/1/2019
            string dr = (param.Split(';')[param.Split(';').Length - 2]);
            string sd = (param.Split(';')[param.Split(';').Length - 1]);
            string tgl1 = (dr.Split('/')[dr.Split('/').Length - 3]);
            string bln1 = (dr.Split('/')[dr.Split('/').Length - 2]);
            string thn1 = (dr.Split('/')[dr.Split('/').Length - 1]);
            string drtanggal = thn1 + '-' + bln1 + '-' + tgl1 + " 00:00:00.000";
            string tgl2 = (sd.Split('/')[sd.Split('/').Length - 3]);
            string bln2 = (sd.Split('/')[sd.Split('/').Length - 2]);
            string thn2 = (sd.Split('/')[sd.Split('/').Length - 1]);
            string sdtanggal = thn2 + '-' + bln2 + '-' + tgl2 + " 23:59:59.999";
            //end add by nurul

            //remark by calvin 24 mei 2019
            //var qohqoo = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList();
            ////change by nurul 16/1/2019 -- stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl >= dateadd(month, -3, getdate())) b on c.brg = b.brg where isnull(b.brg, '') = ''").ToList();
            ////change by nurul 18/1/2019 -- var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "') b on c.brg = b.brg where isnull(b.brg, '') = ''").ToList();
            //var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "') b on c.brg = b.brg where isnull(b.brg, '') = '' and c.[type] = '3'").ToList();
            ////end change by nurul

            //foreach (var barang in stf02Filter)
            //{
            //    var getQoh = 0d;
            //    var getQoo = 0d;
            //    var cekQoh = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOH");
            //    var cekQoo = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOO");
            //    if (cekQoh != null)
            //    {
            //        getQoh = cekQoh.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoh = 0;
            //    }
            //    if (cekQoo != null)
            //    {
            //        getQoo = cekQoo.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoo = 0;
            //    }
            //    //add by nurul 12/4/2019
            //    //var cekQtySales = ErasoftDbContext.SIT01B.Where(b => b.BRG == barang.KodeBrg).ToList().Count();
            //    double sales = 0;
            //    var cekQtySales = ErasoftDbContext.Database.SqlQuery<SOT01B>("select * from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "' and b.brg = '" + barang.KodeBrg + "'").ToList();
            //    //var cekQtySales = ErasoftDbContext.SIT01B.Where(b => b.BRG == barang.KodeBrg).ToList();
            //    foreach (var jual in cekQtySales)
            //    {
            //        sales = sales + jual.QTY;
            //    }
            //    //end add by nurul 12/4/2019
            //    listBarangTidakLaku.Add(new PenjualanBarang
            //    {

            //        KodeBrg = barang.KodeBrg,
            //        NamaBrg = barang.NamaBrg,
            //        Kategori = barang.Kategori,
            //        Merk = barang.Merk,
            //        HJual = barang.HJual,
            //        Qoh = getQoh,
            //        Qoo = getQoo,
            //        //add by nurul 12/4/2019
            //        QtySales = sales
            //        //end add by nurul 12/4/2019
            //    });
            //}
            ////foreach (var barang in ErasoftDbContext.STF02.ToList())
            ////{
            ////    var barangTerpesan = ErasoftDbContext.SOT01B.FirstOrDefault(b => b.BRG == barang.BRG);

            ////    // Kalo barangTerpesan == null tandanya ga laku
            ////    if (barangTerpesan == null)
            ////    {
            ////        listBarangTidakLaku.Add(new PenjualanBarang
            ////        {
            ////            KodeBrg = barang.BRG,
            ////            NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            ////            Kategori = barang.KET_SORT1,
            ////            Merk = barang.KET_SORT2,
            ////            HJual = barang.HJUAL,
            ////            Laku = false,
            ////            //add by nurul 21/11/2018
            ////            //Stok = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList(),
            ////        });
            ////    }
            ////}

            ////return PartialView("TableBarangTidakLakuPartial", listBarangTidakLaku.OrderBy(b => b.NamaBrg).ToList());
            //return PartialView("TableBarangTidakLakuPartial", listBarangTidakLaku.OrderByDescending(b => b.QtySales).ToList());
            //end remark by calvin 24 mei 2019

            //add by calvin 24 mei 2019
            //note by calvin 24 mei 2019 : hanya cari dari pesanan, confirm by pak dani

            //change by nurul 4/9/2019, order by qoh desc

            //ADD BY NURUL 2/10/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.BRG like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' )";
                            sSQLkategori += " ( A.KET_SORT1 like '%" + getkata[i] + "%' )";
                            sSQLmerk += " ( A.KET_SORT2 like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.BRG like '%" + getkata[i] + "%'";
                                sSQLnama += " ( (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%'";
                                sSQLkategori += " ( A.KET_SORT1 like '%" + getkata[i] + "%'";
                                sSQLmerk += "( A.KET_SORT2 like '%" + getkata[i] + "%'";
                                sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.BRG like '%" + getkata[i] + "%' )";
                                sSQLnama += " and (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and A.KET_SORT1 like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and A.KET_SORT2 like '%" + getkata[i] + "%' )";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.BRG like '%" + getkata[i] + "%' ";
                                sSQLnama += " and (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and A.KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and A.KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 2/10/2019

            //sSql += "select * from (  ";
            //sSql += "	select st2.brg, ";
            //sSql += "   st2.NAMA, st2.NAMA2, ISNULL(st2.HJUAL, 0) HJUAL, ISNULL(st2.ID, 0) ID, st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, ";
            //sSql += "	ISNULL(QOH,0) QOH ";
            //sSql += "	FROM ";
            //sSql += "	STF02 ST2 LEFT JOIN ";
            //sSql += "	(SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH ";
            //sSql += "	FROM (	";
            //sSql += "		SELECT        'QOH' AS JENIS, BRG, JUMLAH = ISNULL(SUM(QAWAL + (QM1 + QM2 + QM3 + QM4 + QM5 + QM6 + QM7 + QM8 + QM9 + QM10 + QM11 + QM12) ";
            //sSql += "                         - (QK1 + QK2 + QK3 + QK4 + QK5 + QK6 + QK7 + QK8 + QK9 + QK10 + QK11 + QK12)), 0) ";
            //sSql += "		FROM            STF08A(NOLOCK) INNER JOIN    ";
            //sSql += "                         STF18(NOLOCK) ON STF08A.GD = STF18.KODE_GUDANG ";
            //sSql += "		WHERE        STF08A.TAHUN = YEAR(SYSDATETIME()) AND STF18.QOH_SALES = 0   ";
            //sSql += "		GROUP BY BRG ";
            //sSql += "		)A ";
            //sSql += "		GROUP BY BRG	)ST ";
            //sSql += "	ON ST.BRG = ST2.BRG where st2.TYPE = '3' ";
            //sSql += "group by st2.brg,st2.NAMA, st2.NAMA2,st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1,st.qoh)a ";
            //sSql += "	left join ( 	";
            //sSql += "		select distinct sob.brg ";
            //sSql += "		from sot01a soa inner join sot01b sob on soa.no_bukti = sob.no_bukti ";
            //sSql += "		where soa.tgl >= '" + drtanggal + "' and soa.tgl <= '" + sdtanggal + "' and soa.status_transaksi IN ('0', '01', '02', '03', '04') and sob.brg<> 'NOT_FOUND'	";
            //sSql += "		group by sob.brg ";
            //sSql += "   )so on 	a.brg = so.brg ";
            //sSql += "	where isnull(so.brg ,'') = '' ";
            string sSql = "";
            string sSQL2 = "SELECT COUNT(BRG) AS COUNT_TRANSAKSI  from ( ";
            string sSql3 = "select * from ( ";
            //barang tidak laku
            sSql += "select a.jenis,a.brg,a.NAMA, a.NAMA2, a.HJUAL, a.ID, a.KET_SORT1, a.KET_SORT2, a.LINK_GAMBAR_1 , QOH, QOO , 0 AS QTY from ( ";
            sSql += "   select 'Tidak Laku' as jenis,st2.brg, ";
            sSql += "   st2.NAMA, st2.NAMA2, ISNULL(st2.HJUAL, 0) HJUAL, ISNULL(st2.ID, 0) ID, st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, SUM(CASE WHEN ST.JENIS = 'QOH' THEN ST.JUMLAH ELSE 0 END) QOH, SUM(CASE WHEN ST.JENIS = 'QOO' THEN ST.JUMLAH ELSE 0 END) QOO ";
            sSql += "   FROM ";
            sSql += "   STF02 ST2 LEFT JOIN [QOH_QOO_ALL_ITEM] ST ";
            sSql += "   ON ST.BRG = ST2.BRG where st2.TYPE = '3' ";
            sSql += "   group by st2.brg,st2.NAMA, st2.NAMA2,st2.HJUAL,st2.ID,st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1)a ";
            sSql += "   left join ( ";
            sSql += "   select distinct sob.brg ";
            sSql += "   from sot01a soa inner join sot01b sob on soa.no_bukti = sob.no_bukti ";
            sSql += "   where soa.tgl >= '" + drtanggal + "' and soa.tgl <= '" + sdtanggal + "' and soa.status_transaksi IN ('0', '01', '02', '03', '04') and sob.brg<> 'NOT_FOUND' ";
            sSql += "   group by sob.brg ";
            sSql += "   )so on 	a.brg = so.brg ";
            sSql += "where isnull(so.brg ,'') = '' AND ISNULL(A.BRG,'')<>'NOT_FOUND' ";
            sSql += "group by a.jenis,a.brg,a.NAMA, a.NAMA2, a.HJUAL, a.ID, a.KET_SORT1, a.KET_SORT2, a.LINK_GAMBAR_1 , QOH, QOO ";
            //union all dengan barang laku 
            sSql += "UNION ALL ";
            sSql += "SELECT 'Laku' as jenis,st2.brg, st2.NAMA, st2.NAMA2, ISNULL(st2.HJUAL, 0) HJUAL, ISNULL(st2.ID, 0) ID, st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, ";
            sSql += "   SUM(CASE WHEN ST.JENIS = 'QOH' THEN ST.JUMLAH ELSE 0 END) QOH, SUM(CASE WHEN ST.JENIS = 'QOO' THEN ST.JUMLAH ELSE 0 END) QOO, SO.QTY ";
            sSql += "   FROM ";
            sSql += "   STF02 ST2 INNER JOIN ";
            sSql += "   (SELECT BRG, QTY FROM ( SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A (nolock) A INNER JOIN SOT01B (nolock) B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL between '" + drtanggal + "' AND '" + sdtanggal + "' and A.status_transaksi IN ('0', '01', '02', '03', '04') GROUP BY B.BRG ) A) SO ";
            sSql += "   ON ST2.BRG=SO.BRG ";
            sSql += "   INNER JOIN [QOH_QOO_ALL_ITEM] ST ON ST2.BRG=ST.BRG ";
            sSql += "   WHERE ST2.TYPE='3' AND ISNULL(ST2.BRG,'')<>'NOT_FOUND' ";
            sSql += "GROUP BY st2.brg,st2.NAMA, st2.NAMA2,st2.HJUAL,st2.ID,st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, SO.QTY ";
            sSql += ")A ";
            if (search != "")
            {
                sSql += " where ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }
            string sSql1 = "";
            sSql1 += "	GROUP BY A.JENIS,A.brg,A.NAMA, A.NAMA2,A.HJUAL,A.ID,A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1,A.QOH,A.QOO, A.QTY 	";
            sSql1 += "  ORDER BY ";
            sSql1 += "          CASE WHEN A.JENIS='TIDAK LAKU' THEN A.QOH END  DESC, ";
            sSql1 += "          CASE WHEN A.JENIS='LAKU' THEN A.QTY END ASC, ";
            sSql1 += "          A.BRG ASC ";
            sSql1 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSql1 += "FETCH NEXT 10 ROWS ONLY; ";

            var result = new List<TableMenuBarang1PartialViewModel>();
            var ListBarangTidaklaku = ErasoftDbContext.Database.SqlQuery<listBrgNotInPesanan>(sSql3 + sSql + sSql1).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL2 + sSql).Single();
            foreach (var item in ListBarangTidaklaku)
            {
                result.Add(new TableMenuBarang1PartialViewModel
                {
                    JENIS = item.JENIS,
                    BRG = item.BRG,
                    HJUAL = item.HJUAL,
                    ID = item.ID,
                    KET_SORT1 = item.KET_SORT1,
                    KET_SORT2 = item.KET_SORT2,
                    LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
                    NAMA = item.NAMA,
                    NAMA2 = item.NAMA2,
                    QOH = item.QOH,
                    QOO = item.QOO,
                    QtySales = item.QTY
                });
            }

            //remark by nurul, ganti ke sql query brg tidak laku union all barang laku 
            //var result = new List<TableMenuBarang1PartialViewModel>();
            //var ListBarangAndQtyInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>("SELECT BRG, NAMA, QTY FROM ( SELECT B.BRG, ISNULL(C.NAMA,'') + ' ' + ISNULL(C.NAMA2,'') AS NAMA, SUM(B.QTY) QTY FROM SOT01A (nolock) A INNER JOIN SOT01B (nolock) B ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN STF02 (nolock) C ON B.BRG = C.BRG WHERE A.TGL between '" + drtanggal + "' AND '" + sdtanggal + "' and A.status_transaksi IN ('0', '01', '02', '03', '04') AND C.TYPE='3' GROUP BY B.BRG,C.NAMA,C.NAMA2 ) A WHERE A.NAMA LIKE '%" + search + "%' OR A.BRG LIKE '%" + search + "%' ORDER BY QTY ASC").ToList();
            ////var listBarangInPesanan = ListBarangAndQtyInPesanan.Select(p => p.BRG).ToList();
            ////var totalCountInPesanan = listBarangInPesanan.Count();
            //var totalCountInPesanan = ListBarangAndQtyInPesanan.Count();
            //var totalCount0Pesanan = 0;

            //#region cari yang 0 pesanannya
            //{
            //    //var Stf02S = (from p in ErasoftDbContext.STF02
            //    //              where
            //    //              (
            //    //                (p.TYPE == "3")
            //    //                &&
            //    //                ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //    //              //&&
            //    //              //!listBarangInPesanan.Contains(p.BRG)
            //    //              )
            //    //              orderby p.NAMA
            //    //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 });
            //    //var sudahFilter = Stf02S.ToList().Where(p => !listBarangInPesanan.Contains(p.BRG)).OrderBy(p => p.NAMA).ToList();
            //    //var ListStf02S = sudahFilter.Skip(pagenumber * 10).Take(10).ToList();
            //    //totalCount0Pesanan = sudahFilter.Count();


            //    var listBrgNotInPesanan = ErasoftDbContext.Database.SqlQuery<listBrgNotInPesanan>(sSql).ToList();
            //    var ListBrg10 = ErasoftDbContext.Database.SqlQuery<listBrgNotInPesanan>(sSql + sSql1).ToList();
            //    totalCount0Pesanan = listBrgNotInPesanan.Count();

            //    if (ListBrg10.Count() > 0)
            //    {
            //        string kodeBarang = "";
            //        foreach (var item in ListBrg10)
            //        {
            //            kodeBarang += "'" + item.BRG + "'" + ",";
            //        }
            //        kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //        var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //        foreach (var item in ListBrg10)
            //        {
            //            var resultItem = new TableMenuBarang1PartialViewModel()
            //            {
            //                BRG = item.BRG,
            //                HJUAL = item.HJUAL,
            //                ID = item.ID,
            //                KET_SORT1 = item.KET_SORT1,
            //                KET_SORT2 = item.KET_SORT2,
            //                LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //                NAMA = item.NAMA,
            //                NAMA2 = item.NAMA2,
            //                QOH = 0,
            //                QOO = 0,
            //                QtySales = 0
            //            };
            //            var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //            if (getQOH != null)
            //            {
            //                resultItem.QOH = getQOH.JUMLAH;
            //            }
            //            var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //            if (getQOO != null)
            //            {
            //                resultItem.QOO = getQOO.JUMLAH;
            //            }
            //            result.Add(resultItem);
            //        }
            //    }

            //    //if (ListStf02S.Count() > 0)
            //    //{
            //    //    string kodeBarang = "";
            //    //    foreach (var item in ListStf02S)
            //    //    {
            //    //        kodeBarang += "'" + item.BRG + "'" + ",";
            //    //    }
            //    //    kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //    //    var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //    //    foreach (var item in ListStf02S)
            //    //    {
            //    //        var resultItem = new TableMenuBarang1PartialViewModel()
            //    //        {
            //    //            BRG = item.BRG,
            //    //            HJUAL = item.HJUAL,
            //    //            ID = item.ID,
            //    //            KET_SORT1 = item.KET_SORT1,
            //    //            KET_SORT2 = item.KET_SORT2,
            //    //            LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //    //            NAMA = item.NAMA,
            //    //            NAMA2 = item.NAMA2,
            //    //            QOH = 0,
            //    //            QOO = 0,
            //    //            QtySales = 0
            //    //        };
            //    //        var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //    //        if (getQOH != null)
            //    //        {
            //    //            resultItem.QOH = getQOH.JUMLAH;
            //    //        }
            //    //        var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //    //        if (getQOO != null)
            //    //        {
            //    //            resultItem.QOO = getQOO.JUMLAH;
            //    //        }
            //    //        result.Add(resultItem);
            //    //    }
            //    //}

            //}
            ////end change by nurul 4/9/2019, order by qoh desc
            //#endregion
            //var jumlahResult0Pesanan = result.Count();
            //if (jumlahResult0Pesanan < 10)
            //{
            //    var jumlahSkip = (pagenumber * 10) - totalCount0Pesanan;

            //    var GetBRGFrom_ListBarangAndQtyInPesanan = (from p in ListBarangAndQtyInPesanan where (p.NAMA.Contains(search) || p.BRG.Contains(search)) orderby p.QTY ascending select p);
            //    var ListGetBRGFrom_ListBarangAndQtyInPesanan = GetBRGFrom_ListBarangAndQtyInPesanan.Skip(jumlahSkip < 0 ? 0 : jumlahSkip).Take(10 - jumlahResult0Pesanan).ToList();

            //    var ListBRG_in_ListGetBRGFrom_ListBarangAndQtyInPesanan = ListGetBRGFrom_ListBarangAndQtyInPesanan.Select(p => p.BRG).ToList();
            //    var ListStf02S = (from p in ErasoftDbContext.STF02
            //                      where
            //                      (
            //                        (p.TYPE == "3")
            //                        &&
            //                        ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //                        &&
            //                        ListBRG_in_ListGetBRGFrom_ListBarangAndQtyInPesanan.Contains(p.BRG)
            //                      )
            //                      orderby p.NAMA
            //                      select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 }).ToList();

            //    string kodeBarang = "";
            //    foreach (var item in ListBRG_in_ListGetBRGFrom_ListBarangAndQtyInPesanan)
            //    {
            //        kodeBarang += "'" + item + "'" + ",";
            //    }
            //    kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //    var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //    foreach (var inPesanan in ListGetBRGFrom_ListBarangAndQtyInPesanan)
            //    {
            //        var item = ListStf02S.Where(p => p.BRG == inPesanan.BRG).FirstOrDefault();
            //        if (item != null)
            //        {
            //            var resultItem = new TableMenuBarang1PartialViewModel()
            //            {
            //                BRG = item.BRG,
            //                HJUAL = item.HJUAL,
            //                ID = item.ID,
            //                KET_SORT1 = item.KET_SORT1,
            //                KET_SORT2 = item.KET_SORT2,
            //                LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //                NAMA = item.NAMA,
            //                NAMA2 = item.NAMA2,
            //                QOH = 0,
            //                QOO = 0,
            //                QtySales = inPesanan.QTY
            //            };
            //            var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //            if (getQOH != null)
            //            {
            //                resultItem.QOH = getQOH.JUMLAH;
            //            }
            //            var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //            if (getQOO != null)
            //            {
            //                resultItem.QOO = getQOO.JUMLAH;
            //            }
            //            result.Add(resultItem);
            //        }
            //    }
            //}
            //remark by nurul, ganti ke sql query brg tidak laku union all barang laku 

            IPagedList<TableMenuBarang1PartialViewModel> pageOrders = new StaticPagedList<TableMenuBarang1PartialViewModel>(result, pagenumber + 1, 10, totalCount.COUNT_TRANSAKSI);

            return PartialView("TableBarangTidakLakuPartial", pageOrders);
            //end add by calvin 24 mei 2019
        }
        public class BarangDibawahMinimumStokContent
        {
            public string BRG { get; set; }
            public double QOH { get; set; }
            public double QOO { get; set; }
            public double SELISIH { get; set; }
        }
        public ActionResult RefreshTableBarangDibawahMinimumStok(string order, string param, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            //add by nurul 6/5/2019
            string dr = (param.Split(';')[param.Split(';').Length - 2]);
            string sd = (param.Split(';')[param.Split(';').Length - 1]);
            string tgl1 = (dr.Split('/')[dr.Split('/').Length - 3]);
            string bln1 = (dr.Split('/')[dr.Split('/').Length - 2]);
            string thn1 = (dr.Split('/')[dr.Split('/').Length - 1]);
            string drtanggal = thn1 + '-' + bln1 + '-' + tgl1 + " 00:00:00.000";
            string tgl2 = (sd.Split('/')[sd.Split('/').Length - 3]);
            string bln2 = (sd.Split('/')[sd.Split('/').Length - 2]);
            string thn2 = (sd.Split('/')[sd.Split('/').Length - 1]);
            string sdtanggal = thn2 + '-' + bln2 + '-' + tgl2 + " 23:59:59.999";
            //end add by nurul 

            //REMARK BY CALVIN 28 MEI 2019
            //var listBarangMiniStok = new List<PenjualanBarang>();
            //var qohqoo = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList();

            //var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.MINI as Min, c.HJUAL as HJual from stf02 c right join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "') b on c.brg = b.brg where c.[type] = '3'").ToList();

            ////change by nurul 18/1/2019 -- foreach (var barang in ErasoftDbContext.STF02.ToList())
            ////change by nurul 6/5/2019 -- foreach (var barang in ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList())
            //foreach (var barang in stf02Filter)
            //{

            //    var barangUtkCek = ErasoftDbContext.STF08A.ToList().FirstOrDefault(b => b.BRG == barang.KodeBrg);
            //    var qtyOnHand = 0d;
            //    var getQoh = 0d;
            //    var getQoo = 0d;
            //    var cekQoh = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOH");
            //    var cekQoo = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOO");
            //    if (cekQoh != null)
            //    {
            //        getQoh = cekQoh.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoh = 0;
            //    }
            //    if (cekQoo != null)
            //    {
            //        getQoo = cekQoo.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoo = 0;
            //    }

            //    //add by nurul 12/4/2019
            //    //var cekQtySales = ErasoftDbContext.SIT01B.Where(b => b.BRG == barang.BRG).ToList().Count();
            //    double sales = 0;
            //    var cekQtySales = ErasoftDbContext.SOT01B.Where(b => b.BRG == barang.KodeBrg).ToList();
            //    foreach (var jual in cekQtySales)
            //    {
            //        sales = sales + jual.QTY;
            //    }
            //    //end add by nurul 12/4/2019

            //    if (barangUtkCek != null)
            //    {
            //        //qtyOnHand = barangUtkCek.QAwal + barangUtkCek.QM1 + barangUtkCek.QM2 + barangUtkCek.QM3 + barangUtkCek.QM4
            //        //            + barangUtkCek.QM5 + barangUtkCek.QM6 + barangUtkCek.QM7 + barangUtkCek.QM8 + barangUtkCek.QM9
            //        //            + barangUtkCek.QM10 + barangUtkCek.QM11 + barangUtkCek.QM12 - barangUtkCek.QK1 - barangUtkCek.QK2
            //        //            - barangUtkCek.QK3 - barangUtkCek.QK4 - barangUtkCek.QK5 - barangUtkCek.QK6 - barangUtkCek.QK7
            //        //            - barangUtkCek.QK8 - barangUtkCek.QK9 - barangUtkCek.QK10 - barangUtkCek.QK11 - barangUtkCek.QK12;
            //        qtyOnHand = GetQOHSTF08A(barang.KodeBrg, "ALL");

            //        if (qtyOnHand < barang.Min)
            //        {
            //            listBarangMiniStok.Add(new PenjualanBarang
            //            {
            //                KodeBrg = barang.KodeBrg,
            //                //NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            //                NamaBrg = barang.NamaBrg,
            //                Kategori = barang.Kategori,
            //                Merk = barang.Merk,
            //                HJual = barang.HJual,
            //                //add by nurul 21/11/2018
            //                //Stok = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList(),
            //                Qoh = getQoh,
            //                Qoo = getQoo,
            //                Min = barang.Min,
            //                //add by nurul 12/4/2019
            //                QtySales = sales
            //                //end add by nurul 12/4/2019
            //            });
            //        }
            //    }
            //}

            ////return PartialView("TableBarangDibawahMinimumStokPartial", listBarangMiniStok.OrderBy(b => b.NamaBrg).ToList());
            //return PartialView("TableBarangDibawahMinimumStokPartial", listBarangMiniStok.OrderByDescending(b => b.QtySales).ToList());
            //END REMARK BY CALVIN 28 MEI 2019

            //ADD BY CALVIN 28 MEI 2019
            //CHANGE BY NURUL 23/9/2019, SAMAIN DG YANG DI DASHBOARD 
            //string sSQL = "";
            //sSQL += "SELECT BRG, QOH, QOO, (SISA - MINI) AS SELISIH FROM ";
            //sSQL += "( ";
            //sSQL += "	SELECT A.BRG, ISNULL(QOH,0) QOH, ISNULL(QOO,0) QOO, (ISNULL(QOH,0) - ISNULL(QOO,0)) AS SISA,B.MINI FROM ";
            //sSQL += "	( ";
            //sSQL += "		SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH, ";
            //sSQL += "		SUM(CASE WHEN JENIS = 'QOO' THEN JUMLAH ELSE 0 END) QOO ";
            //sSQL += "		FROM [QOH_QOO_ALL_ITEM] ";
            //sSQL += "		GROUP BY BRG ";
            //sSQL += "	) A ";
            //sSQL += "	LEFT JOIN STF02 B ON A.BRG = B.BRG ";
            //sSQL += "	WHERE (ISNULL(B.NAMA, '') + ' ' + ISNULL(B.NAMA2, '')) LIKE '%" + search + "%' OR A.BRG LIKE '%" + search + "%' ";
            //sSQL += ") A ";
            //sSQL += "WHERE SISA <= MINI ";
            //var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<BarangDibawahMinimumStokContent>(sSQL).ToList();
            //var listBRG_in_listQOH_QOO = listQOH_QOO.Select(p => p.BRG).ToList();
            //var Stf02S = (from p in ErasoftDbContext.STF02
            //              where
            //              (
            //                (p.TYPE == "3")
            //              )
            //              orderby p.NAMA
            //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1, p.MINI });

            //var sudahFilter = Stf02S.ToList().Where(p => listBRG_in_listQOH_QOO.Contains(p.BRG)).OrderBy(p => p.NAMA).ToList();

            //var ListStf02S = sudahFilter.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = sudahFilter.Count();

            //var result = new List<TableMenuBarang1PartialViewModel>();
            //foreach (var item in ListStf02S)
            //{
            //    var resultItem = new TableMenuBarang1PartialViewModel()
            //    {
            //        BRG = item.BRG,
            //        HJUAL = item.HJUAL,
            //        ID = item.ID,
            //        KET_SORT1 = item.KET_SORT1,
            //        KET_SORT2 = item.KET_SORT2,
            //        LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //        NAMA = item.NAMA,
            //        NAMA2 = item.NAMA2,
            //        MIN = item.MINI,
            //        QOH = 0,
            //        QOO = 0,
            //        SELISIH = listQOH_QOO.Where(a => a.BRG == item.BRG).Single().SELISIH
            //    };
            //    var getQOHQOO = listQOH_QOO.Where(p => p.BRG == item.BRG).FirstOrDefault();
            //    if (getQOHQOO != null)
            //    {
            //        resultItem.QOH = getQOHQOO.QOH;
            //        resultItem.QOO = getQOHQOO.QOO;
            //    }
            //    result.Add(resultItem);
            //}     

            //ADD BY NURUL 3/10/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( BRG like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( NAMA like '%" + getkata[i] + "%' )";
                            sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%' )";
                            sSQLmerk += " ( KET_SORT2 like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( BRG like '%" + getkata[i] + "%'";
                                sSQLnama += " ( NAMA like '%" + getkata[i] + "%'";
                                sSQLkategori += " ( KET_SORT1 like '%" + getkata[i] + "%'";
                                sSQLmerk += "( KET_SORT2 like '%" + getkata[i] + "%'";
                                sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' )";
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' )";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and BRG like '%" + getkata[i] + "%' ";
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 3/10/2019
            try
            {
                ErasoftDbContext.Database.ExecuteSqlCommand("DROP TABLE #A; DROP TABLE #B;");
            }
            catch (Exception ex)
            {

            }

            string sSQL = "";
            string sSql1 = "";
            string sSQL2 = "";
            string sSQL3 = "";
            string sSQL0 = "";
            sSQL0 += "SELECT C.NO_BUKTI, D.BRG into #B FROM SOT01A C(NOLOCK) INNER JOIN SOT01B D(NOLOCK) ON C.NO_BUKTI = D.NO_BUKTI WHERE C.TGL BETWEEN '" + drtanggal + "' AND '" + sdtanggal + "' AND C.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04'); " + System.Environment.NewLine;
            sSQL0 += "SELECT B.BRG, B.NAMA, B.HJUAL, B.ID, B.KET_SORT1, B.KET_SORT2, B.LINK_GAMBAR_1, ISNULL(QOH,0) QOH, ISNULL(QOO,0) QOO, (ISNULL(QOH,0) - ISNULL(QOO,0)) AS SISA,B.MINI INTO #A FROM (SELECT BRG, (isnull(NAMA, '') + ' ' + ISNULL(NAMA2, '')) AS NAMA, HJUAL, ID, KET_SORT1, KET_SORT2, LINK_GAMBAR_1,MINI FROM STF02(NOLOCK) WHERE TYPE='3') B LEFT JOIN 	( SELECT BRG, SUM(CASE WHEN JENIS = 'QOH' THEN JUMLAH ELSE 0 END) QOH, 	SUM(CASE WHEN JENIS = 'QOO' THEN JUMLAH ELSE 0 END) QOO 	FROM [QOH_QOO_ALL_ITEM]	GROUP BY BRG 	) A ON A.BRG = B.BRG WHERE (ISNULL(QOH,0) - ISNULL(QOO,0)) <= B.MINI; " + System.Environment.NewLine;
            sSQL2 += "SELECT COUNT(BRG) AS COUNT_TRANSAKSI  ";
            sSQL += "SELECT JENIS, BRG, NAMA, HJUAL, ID, KET_SORT1, KET_SORT2, LINK_GAMBAR_1, QOH, QOO , SISA, MINI, QTY_JUAL, (MINI - SISA) AS SELISIH  ";
            sSql1 += "FROM ( ";
            //1. CARI YANG BARANG NYA ADA PENJUALAN DAN SISA KURANG DR MINIMAL STOK
            sSql1 += "SELECT 'ADA' AS JENIS, A.BRG, A.NAMA, A.HJUAL, A.ID, A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1, A.QOH, A.QOO , A.SISA, A.MINI, D.QTY AS QTY_JUAL FROM #B B ";
            sSql1 += "  INNER JOIN #A A  ON A.BRG=B.BRG ";
            sSql1 += "  LEFT JOIN SIT01A C(NOLOCK) ON B.NO_BUKTI= C.NO_SO ";
            sSql1 += "  LEFT JOIN (SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL BETWEEN '" + drtanggal + "' AND '" + sdtanggal + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY B.BRG)D ON A.BRG=D.BRG ";
            sSql1 += "  GROUP BY A.BRG,A.NAMA, A.HJUAL, A.ID, A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1, A.QOH, A.QOO , A.SISA, A.MINI, D.QTY ";

            sSql1 += "UNION ALL ";
            //2. KALAU YANG PERTAMA KURANG DR 10 RECORD, MAKA CARI YANG BARANG NYA TIDAK ADA PENJUALAN DAN SISA KURANG DR MINIMAL STOK 
            sSql1 += "SELECT 'TIDAK ADA' AS JENIS, A.BRG, A.NAMA, A.HJUAL, A.ID, A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1, A.QOH, A.QOO , A.SISA, A.MINI, 0 AS QTY_JUAL FROM  ";
            sSql1 += "  (SELECT * FROM #A WHERE SISA <= MINI AND BRG NOT IN( ";
            sSql1 += "      SELECT A.BRG FROM #B B ";
            sSql1 += "      INNER JOIN #A A  ON A.BRG=B.BRG ";
            sSql1 += "      LEFT JOIN SIT01A C(NOLOCK) ON B.NO_BUKTI= C.NO_SO ";
            sSql1 += "      LEFT JOIN (SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL BETWEEN '" + drtanggal + "' AND '" + sdtanggal + "' AND A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') GROUP BY B.BRG)D ON A.BRG=D.BRG ";
            sSql1 += "      GROUP BY A.BRG ";
            sSql1 += ") )A ";
            sSql1 += "GROUP BY A.BRG,A.NAMA, A.HJUAL, A.ID, A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1, A.QOH, A.QOO , A.SISA, A.MINI ";
            sSql1 += ")A ";
            //DI UNION ALL ORDER BY QTY_JUAL DESC, SELISIH (SISA-MIN) ASC, TAKE 10
            if (search != "")
            {
                sSql1 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }
            if (order == "2")
            {
                sSQL3 += "ORDER BY SISA ASC ";
            }
            else
            {
                sSQL3 += "ORDER BY JENIS ASC, QTY_JUAL DESC, SELISIH DESC ";
            }
            sSQL3 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQL3 += "FETCH NEXT 10 ROWS ONLY ";

            var result = new List<TableMenuBarang1PartialViewModel>();
            var ListBarangMinStokInPesanan = ErasoftDbContext.Database.SqlQuery<listBrgMinStok>(sSQL0 + sSQL + sSql1 + sSQL3).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL0 + sSQL2 + sSql1).Single();
            foreach (var item in ListBarangMinStokInPesanan)
            {
                result.Add(new TableMenuBarang1PartialViewModel
                {
                    BRG = item.BRG,
                    HJUAL = item.HJUAL,
                    ID = item.ID,
                    KET_SORT1 = item.KET_SORT1,
                    KET_SORT2 = item.KET_SORT2,
                    LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
                    NAMA = item.NAMA,
                    //NAMA2 = item.NAMA2,
                    MIN = item.MINI,
                    QOH = item.QOH,
                    QOO = item.QOO,
                    SELISIH = item.SELISIH,
                    QtySales = item.QTY_JUAL
                });
            }
            //END CHANGE BY NURUL 23/9/2019

            IPagedList<TableMenuBarang1PartialViewModel> pageOrders = new StaticPagedList<TableMenuBarang1PartialViewModel>(result, pagenumber + 1, 10, totalCount.COUNT_TRANSAKSI);
            return PartialView("TableBarangDibawahMinimumStokPartial", pageOrders);
            //END ADD BY CALVIN 28 MEI 2019
        }

        public ActionResult RefreshTableBarangPalingLaku(string param, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //add by nurul 16/1/2019
            string dr = (param.Split(';')[param.Split(';').Length - 2]);
            string sd = (param.Split(';')[param.Split(';').Length - 1]);
            string tgl1 = (dr.Split('/')[dr.Split('/').Length - 3]);
            string bln1 = (dr.Split('/')[dr.Split('/').Length - 2]);
            string thn1 = (dr.Split('/')[dr.Split('/').Length - 1]);
            //change by nurul 19/7/2019
            //string drtanggal = thn1 + '-' + bln1 + '-' + tgl1;
            string drtanggal = thn1 + '-' + bln1 + '-' + tgl1 + " 00:00:00.000";
            //end change by nurul 19/7/2019
            string tgl2 = (sd.Split('/')[sd.Split('/').Length - 3]);
            string bln2 = (sd.Split('/')[sd.Split('/').Length - 2]);
            string thn2 = (sd.Split('/')[sd.Split('/').Length - 1]);
            //change by nurul 19/7/2019
            //string sdtanggal = thn2 + '-' + bln2 + '-' + tgl2;
            string sdtanggal = thn2 + '-' + bln2 + '-' + tgl2 + " 23:59:59.999";
            //end change by nurul 19/7/2019
            //end add by nurul 

            //remark by calvin 28 mei 2019
            //var listBarangLaku = new List<PenjualanBarang>();
            //var qohqoo = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList();
            ////change by nurul 16/1/2019 -- var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl >= dateadd(month, -3, getdate())) b on c.brg = b.brg where isnull(b.brg, '') <> ''").ToList();
            ////change by nurul 18/1/2019 -- var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "') b on c.brg = b.brg where isnull(b.brg, '') <> ''").ToList();
            //var stf02Filter = ErasoftDbContext.Database.SqlQuery<PenjualanBarang>("select c.brg as KodeBrg,isnull(c.nama, '') + ' ' + isnull(c.nama2, '') as NamaBrg,c.KET_SORT1 as Kategori,c.KET_SORT2 as Merk, c.HJUAL as HJual from stf02 c left join (select distinct brg from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "') b on c.brg = b.brg where isnull(b.brg, '') <> '' and c.[type] = '3'").ToList();
            ////end change 

            //foreach (var barang in stf02Filter)
            //{
            //    var getQoh = 0d;
            //    var getQoo = 0d;
            //    var cekQoh = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOH");
            //    var cekQoo = qohqoo.FirstOrDefault(p => p.BRG == barang.KodeBrg && p.JENIS == "QOO");
            //    if (cekQoh != null)
            //    {
            //        getQoh = cekQoh.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoh = 0;
            //    }
            //    if (cekQoo != null)
            //    {
            //        getQoo = cekQoo.JUMLAH;
            //    }
            //    else
            //    {
            //        getQoo = 0;
            //    }
            //    //add by nurul 12/4/2019
            //    double sales = 0;
            //    var cekQtySales = ErasoftDbContext.Database.SqlQuery<SOT01B>("select * from sot01a a inner join sot01b b on a.no_bukti = b.no_bukti where a.tgl between '" + drtanggal + "' and '" + sdtanggal + "' and b.brg = '" + barang.KodeBrg + "'").ToList();
            //    //var cekQtySales = ErasoftDbContext.SIT01B.Where(b => b.BRG == barang.KodeBrg && ).ToList();
            //    foreach (var jual in cekQtySales)
            //    {
            //        sales = sales + jual.QTY;
            //    }
            //    //end add by nurul 12/4/2019
            //    listBarangLaku.Add(new PenjualanBarang
            //    {

            //        KodeBrg = barang.KodeBrg,
            //        NamaBrg = barang.NamaBrg,
            //        Kategori = barang.Kategori,
            //        Merk = barang.Merk,
            //        HJual = barang.HJual,
            //        Qoh = getQoh,
            //        Qoo = getQoo,
            //        //add by nurul 12/4/2019
            //        QtySales = sales
            //        //end add by nurul 12/4/2019
            //    });
            //}

            ////foreach (var barang in ErasoftDbContext.STF02.ToList())
            ////{
            ////    //change by nurul 10/12/2018 (periode 3 bulan terakhir)
            ////    //var listBarangTerpesan = ErasoftDbContext.SOT01B.Where(b => b.BRG == barang.BRG).ToList();
            ////    var month = DateTime.Now.AddMonths(-3);
            ////    var listBarangTerpesan = (from a in ErasoftDbContext.SOT01A
            ////                              join b in ErasoftDbContext.SOT01B on a.NO_BUKTI equals b.NO_BUKTI
            ////                              where b.BRG == barang.BRG && a.TGL >= month
            ////                              select new { BRG = b.BRG, NO_BUKTI = a.NO_BUKTI, TGL = a.TGL }).ToList();
            ////    //end change 

            ////    if (listBarangTerpesan.Count > 0)
            ////    {
            ////        listBarangLaku.Add(new PenjualanBarang
            ////        {
            ////            KodeBrg = barang.BRG,
            ////            //KodeBrg = listBarangTerpesan.SingleOrDefault().BRG,
            ////            NamaBrg = $"{barang.NAMA} {barang.NAMA2}",
            ////            Kategori = barang.KET_SORT1,
            ////            Merk = barang.KET_SORT2,
            ////            HJual = barang.HJUAL,
            ////            //add by nurul 21/11/2018
            ////            Stok = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM]").ToList(),
            ////        });
            ////    }
            ////}


            ////return PartialView("TableBarangPalingLakuPartial", listBarangLaku.OrderBy(b => b.NamaBrg).ToList());
            //return PartialView("TableBarangPalingLakuPartial", listBarangLaku.OrderByDescending(b => b.QtySales).ToList());
            //end remark by calvin 28 mei 2019
            //add by calvin 24 mei 2019
            //note by calvin 24 mei 2019 : hanya cari dari pesanan, confirm by pak dani

            //change by nurul 19/7/2019
            //var ListBarangAndQtyInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>("SELECT BRG, NAMA, QTY FROM ( SELECT B.BRG, ISNULL(C.NAMA,'') + ' ' + ISNULL(C.NAMA2,'') AS NAMA, SUM(B.QTY) QTY FROM SOT01A (nolock) A INNER JOIN SOT01B (nolock) B ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN STF02 (nolock) C ON B.BRG = C.BRG WHERE A.TGL between '" + drtanggal + "' AND '" + sdtanggal + "' GROUP BY B.BRG,C.NAMA,C.NAMA2 ) A WHERE A.NAMA LIKE '%" + search + "%' OR A.BRG LIKE '%" + search + "%' ORDER BY QTY DESC").ToList();

            //ADD BY NURUL 3/10/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLkategori = "";
            string sSQLmerk = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.BRG like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' )";
                            sSQLkategori += " ( A.KET_SORT1 like '%" + getkata[i] + "%' )";
                            sSQLmerk += " ( A.KET_SORT2 like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.BRG like '%" + getkata[i] + "%'";
                                sSQLnama += " ( (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%'";
                                sSQLkategori += " ( A.KET_SORT1 like '%" + getkata[i] + "%'";
                                sSQLmerk += "( A.KET_SORT2 like '%" + getkata[i] + "%'";
                                sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.BRG like '%" + getkata[i] + "%' )";
                                sSQLnama += " and (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and A.KET_SORT1 like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and A.KET_SORT2 like '%" + getkata[i] + "%' )";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.BRG like '%" + getkata[i] + "%' ";
                                sSQLnama += " and (isnull(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and A.KET_SORT1 like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and A.KET_SORT2 like '%" + getkata[i] + "%' ";
                                sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 3/10/2019
            string sSql = "";
            string sSQL2 = "SELECT COUNT(BRG) AS COUNT_TRANSAKSI  from ( ";
            string sSql3 = "select * from ( ";
            //barang tidak laku
            sSql += "select a.jenis,a.brg,a.NAMA, a.NAMA2, a.HJUAL, a.ID, a.KET_SORT1, a.KET_SORT2, a.LINK_GAMBAR_1 , QOH, QOO , 0 AS QTY from ( ";
            sSql += "   select 'Tidak Laku' as jenis,st2.brg, ";
            sSql += "   st2.NAMA, st2.NAMA2, ISNULL(st2.HJUAL, 0) HJUAL, ISNULL(st2.ID, 0) ID, st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, SUM(CASE WHEN ST.JENIS = 'QOH' THEN ST.JUMLAH ELSE 0 END) QOH, SUM(CASE WHEN ST.JENIS = 'QOO' THEN ST.JUMLAH ELSE 0 END) QOO ";
            sSql += "   FROM ";
            sSql += "   STF02 ST2 LEFT JOIN [QOH_QOO_ALL_ITEM] ST ";
            sSql += "   ON ST.BRG = ST2.BRG where st2.TYPE = '3' ";
            sSql += "   group by st2.brg,st2.NAMA, st2.NAMA2,st2.HJUAL,st2.ID,st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1)a ";
            sSql += "   left join ( ";
            sSql += "   select distinct sob.brg ";
            sSql += "   from sot01a soa inner join sot01b sob on soa.no_bukti = sob.no_bukti ";
            sSql += "   where soa.tgl >= '" + drtanggal + "' and soa.tgl <= '" + sdtanggal + "' and soa.status_transaksi IN ('0', '01', '02', '03', '04') and sob.brg<> 'NOT_FOUND' ";
            sSql += "   group by sob.brg ";
            sSql += "   )so on 	a.brg = so.brg ";
            sSql += "where isnull(so.brg ,'') = '' AND ISNULL(A.BRG,'')<>'NOT_FOUND' ";
            sSql += "group by a.jenis,a.brg,a.NAMA, a.NAMA2, a.HJUAL, a.ID, a.KET_SORT1, a.KET_SORT2, a.LINK_GAMBAR_1 , QOH, QOO ";
            //union all dengan barang laku 
            sSql += "UNION ALL ";
            sSql += "SELECT 'Laku' as jenis,st2.brg, st2.NAMA, st2.NAMA2, ISNULL(st2.HJUAL, 0) HJUAL, ISNULL(st2.ID, 0) ID, st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, ";
            sSql += "   SUM(CASE WHEN ST.JENIS = 'QOH' THEN ST.JUMLAH ELSE 0 END) QOH, SUM(CASE WHEN ST.JENIS = 'QOO' THEN ST.JUMLAH ELSE 0 END) QOO, SO.QTY ";
            sSql += "   FROM ";
            sSql += "   STF02 ST2 INNER JOIN ";
            sSql += "   (SELECT BRG, QTY FROM ( SELECT B.BRG, SUM(B.QTY) QTY FROM SOT01A (nolock) A INNER JOIN SOT01B (nolock) B ON A.NO_BUKTI = B.NO_BUKTI WHERE A.TGL between '" + drtanggal + "' AND '" + sdtanggal + "' and A.status_transaksi IN ('0', '01', '02', '03', '04') GROUP BY B.BRG ) A) SO ";
            sSql += "   ON ST2.BRG=SO.BRG ";
            sSql += "   INNER JOIN [QOH_QOO_ALL_ITEM] ST ON ST2.BRG=ST.BRG ";
            sSql += "   WHERE ST2.TYPE='3' AND ISNULL(ST2.BRG,'')<>'NOT_FOUND' ";
            sSql += "GROUP BY st2.brg,st2.NAMA, st2.NAMA2,st2.HJUAL,st2.ID,st2.KET_SORT1, st2.KET_SORT2, st2.LINK_GAMBAR_1, SO.QTY ";
            sSql += ")A ";
            if (search != "")
            {
                sSql += " where ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkategori + " or " + sSQLmerk + " or " + sSQLharga + " ) ";
            }
            string sSql1 = "";
            sSql1 += "	GROUP BY A.JENIS,A.brg,A.NAMA, A.NAMA2,A.HJUAL,A.ID,A.KET_SORT1, A.KET_SORT2, A.LINK_GAMBAR_1,A.QOH,A.QOO, A.QTY 	";
            sSql1 += "  ORDER BY ";
            sSql1 += "          CASE WHEN A.JENIS='LAKU' THEN A.QTY END DESC, ";
            sSql1 += "          CASE WHEN A.JENIS='TIDAK LAKU' THEN A.QOH END  ASC, ";
            sSql1 += "          A.BRG ASC ";
            sSql1 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSql1 += "FETCH NEXT 10 ROWS ONLY; ";

            var result = new List<TableMenuBarang1PartialViewModel>();
            var ListBarangTidaklaku = ErasoftDbContext.Database.SqlQuery<listBrgNotInPesanan>(sSql3 + sSql + sSql1).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<COUNT_List>(sSQL2 + sSql).Single();
            foreach (var item in ListBarangTidaklaku)
            {
                result.Add(new TableMenuBarang1PartialViewModel
                {
                    JENIS = item.JENIS,
                    BRG = item.BRG,
                    HJUAL = item.HJUAL,
                    ID = item.ID,
                    KET_SORT1 = item.KET_SORT1,
                    KET_SORT2 = item.KET_SORT2,
                    LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
                    NAMA = item.NAMA,
                    NAMA2 = item.NAMA2,
                    QOH = item.QOH,
                    QOO = item.QOO,
                    QtySales = item.QTY
                });
            }
            //string sSQL = "SELECT BRG, NAMA, QTY FROM ( SELECT B.BRG, ISNULL(C.NAMA,'') + ' ' + ISNULL(C.NAMA2,'') AS NAMA, SUM(B.QTY) QTY ";
            //sSQL += "FROM SOT01A (nolock) A INNER JOIN SOT01B (nolock) B ON A.NO_BUKTI = B.NO_BUKTI ";
            //sSQL += "LEFT JOIN STF02 (nolock) C ON B.BRG = C.BRG ";
            //sSQL += "WHERE A.TGL between '" + drtanggal + "' AND '" + sdtanggal + "' AND ISNULL(B.BRG,'')<>'NOT_FOUND' AND C.TYPE='3' GROUP BY B.BRG,C.NAMA,C.NAMA2 ) A ";
            //if (search != "")
            //{
            //    sSQL += "WHERE A.NAMA LIKE '%" + search + "%' OR A.BRG LIKE '%" + search + "%' ";
            //}
            //sSQL += "ORDER BY QTY DESC ";
            //var ListBarangAndQtyInPesanan = ErasoftDbContext.Database.SqlQuery<listQtyPesanan>(sSQL).ToList();
            ////end change by nurul 19/7/2019

            //var listBarangInPesanan = ListBarangAndQtyInPesanan.Select(p => p.BRG).ToList();
            //var totalCountInPesanan = listBarangInPesanan.Count();
            //var totalCount0Pesanan = 0;

            //#region cari yang ada pesanannya
            //{
            //    var GetBRGFrom_ListBarangAndQtyInPesanan = (from p in ListBarangAndQtyInPesanan orderby p.QTY descending select p);
            //    var ListGetBRGFrom_ListBarangAndQtyInPesanan = GetBRGFrom_ListBarangAndQtyInPesanan.Skip(pagenumber * 10).Take(10).ToList();
            //    var ListBRG_in_ListGetBRGFrom_ListBarangAndQtyInPesanan = ListGetBRGFrom_ListBarangAndQtyInPesanan.Select(p => p.BRG).ToList();
            //    var ListStf02S = (from p in ErasoftDbContext.STF02
            //                      where
            //                      (
            //                        (p.TYPE == "3")
            //                        &&
            //                        ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //                        &&
            //                        ListBRG_in_ListGetBRGFrom_ListBarangAndQtyInPesanan.Contains(p.BRG)
            //                      )
            //                      orderby p.NAMA
            //                      select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 }).ToList();
            //    if (ListStf02S.Count() > 0)
            //    {
            //        string kodeBarang = "";
            //        foreach (var item in ListStf02S)
            //        {
            //            kodeBarang += "'" + item.BRG + "'" + ",";
            //        }
            //        kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //        var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //        foreach (var item in ListStf02S)
            //        {
            //            var resultItem = new TableMenuBarang1PartialViewModel()
            //            {
            //                BRG = item.BRG,
            //                HJUAL = item.HJUAL,
            //                ID = item.ID,
            //                KET_SORT1 = item.KET_SORT1,
            //                KET_SORT2 = item.KET_SORT2,
            //                LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //                NAMA = item.NAMA,
            //                NAMA2 = item.NAMA2,
            //                QOH = 0,
            //                QOO = 0,
            //                QtySales = 0
            //            };
            //            var getQtySales = ListGetBRGFrom_ListBarangAndQtyInPesanan.Where(p => p.BRG == item.BRG).FirstOrDefault();
            //            if (getQtySales != null)
            //            {
            //                resultItem.QtySales = getQtySales.QTY;
            //            }
            //            var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //            if (getQOH != null)
            //            {
            //                resultItem.QOH = getQOH.JUMLAH;
            //            }
            //            var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //            if (getQOO != null)
            //            {
            //                resultItem.QOO = getQOO.JUMLAH;
            //            }
            //            result.Add(resultItem);
            //        }
            //    }
            //}
            //#endregion
            //var jumlahResultInPesanan = result.Count();
            //var Stf02S = (from p in ErasoftDbContext.STF02
            //              where
            //              (
            //                (p.TYPE == "3")
            //                &&
            //                ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //              )
            //              orderby p.NAMA
            //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 });
            //var sudahFilter = Stf02S.ToList().Where(p => !listBarangInPesanan.Contains(p.BRG)).OrderBy(p => p.NAMA).ToList();
            //totalCount0Pesanan = sudahFilter.Count();
            //if (jumlahResultInPesanan < 10)
            //{
            //    var jumlahSkip = (pagenumber * 10) - totalCountInPesanan;
            //    //var Stf02S = (from p in ErasoftDbContext.STF02
            //    //              where
            //    //              (
            //    //                (p.TYPE == "3")
            //    //                &&
            //    //                ((p.NAMA + " " + (p.NAMA2 ?? "")).Contains(search) || p.BRG.Contains(search))
            //    //              )
            //    //              orderby p.NAMA
            //    //              select new { p.BRG, p.NAMA, p.NAMA2, p.HJUAL, p.ID, p.KET_SORT1, p.KET_SORT2, p.LINK_GAMBAR_1 });
            //    //var sudahFilter = Stf02S.ToList().Where(p => !listBarangInPesanan.Contains(p.BRG)).OrderBy(p => p.NAMA).ToList();
            //    var ListStf02S = sudahFilter.Skip(jumlahSkip < 0 ? 0 : jumlahSkip).Take(10 - jumlahResultInPesanan).ToList();
            //    //totalCount0Pesanan = sudahFilter.Count();

            //    if (ListStf02S.Count() > 0)
            //    {
            //        string kodeBarang = "";
            //        foreach (var item in ListStf02S)
            //        {
            //            kodeBarang += "'" + item.BRG + "'" + ",";
            //        }
            //        kodeBarang = kodeBarang.Substring(0, kodeBarang.Length - 1);
            //        var listQOH_QOO = ErasoftDbContext.Database.SqlQuery<QOH_QOO_ALL_ITEM>("SELECT * FROM [QOH_QOO_ALL_ITEM] WHERE BRG IN (" + kodeBarang + ")").ToList();

            //        foreach (var item in ListStf02S)
            //        {
            //            var resultItem = new TableMenuBarang1PartialViewModel()
            //            {
            //                BRG = item.BRG,
            //                HJUAL = item.HJUAL,
            //                ID = item.ID,
            //                KET_SORT1 = item.KET_SORT1,
            //                KET_SORT2 = item.KET_SORT2,
            //                LINK_GAMBAR_1 = item.LINK_GAMBAR_1,
            //                NAMA = item.NAMA,
            //                NAMA2 = item.NAMA2,
            //                QOH = 0,
            //                QOO = 0,
            //                QtySales = 0
            //            };
            //            var getQOH = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOH").FirstOrDefault();
            //            if (getQOH != null)
            //            {
            //                resultItem.QOH = getQOH.JUMLAH;
            //            }
            //            var getQOO = listQOH_QOO.Where(p => p.BRG == item.BRG && p.JENIS == "QOO").FirstOrDefault();
            //            if (getQOO != null)
            //            {
            //                resultItem.QOO = getQOO.JUMLAH;
            //            }
            //            result.Add(resultItem);
            //        }
            //    }
            //}
            IPagedList<TableMenuBarang1PartialViewModel> pageOrders = new StaticPagedList<TableMenuBarang1PartialViewModel>(result, pagenumber + 1, 10, totalCount.COUNT_TRANSAKSI);
            return PartialView("TableBarangPalingLakuPartial", pageOrders);
            //end add by calvin 24 mei 2019
        }

        [HttpGet]
        public ActionResult GetKategoriBarang()
        {
            var listKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "1").OrderBy(m => m.KET).ToList();

            //return Json(listKategori, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategori),
                ContentType = "application/json"
            };
            return result;
        }
        #region Kategori Elevenia

        [HttpGet]
        public ActionResult GetKategoriEleveniaByCode(string code)
        {
            //string[] codelist = code.Split(';');
            var listKategoriEle = MoDbContext.CategoryElevenia.Where(k => k.PARENT_CODE == "").OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriEle, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriEle),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriEleveniaByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriEle = MoDbContext.CategoryElevenia.Where(k => codelist.Contains(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriEle, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriEle),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriEleveniaByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_ELEVENIA> listKategoriEle = new List<CATEGORY_ELEVENIA>();
            if (!string.IsNullOrEmpty(code))
            {
                var category = MoDbContext.CategoryElevenia.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
                listKategoriEle.Add(category);

                if (category.PARENT_CODE != "")
                {
                    bool TopParent = false;
                    while (!TopParent)
                    {
                        category = MoDbContext.CategoryElevenia.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                        listKategoriEle.Add(category);
                        if (string.IsNullOrEmpty(category.PARENT_CODE))
                        {
                            TopParent = true;
                        }
                    }
                }
            }

            //return Json(listKategoriEle.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriEle.OrderBy(p => p.RecNum)),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeElevenia(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeEle = MoDbContext.AttributeElevenia.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            var listAttributeEle = new List<ATTRIBUTE_ELEVENIA>();
            var custEle = ErasoftDbContext.ARF01.Where(m => m.NAMA == "9" && !string.IsNullOrEmpty(m.API_KEY)).ToList();
            if (custEle.Count > 0)
            {
                var eleApi = new EleveniaController();
                var attrEle = eleApi.GetAttributeByCategory(custEle[0].API_KEY, code);
                listAttributeEle.Add(attrEle);
            }

            //return Json(listAttributeEle, JsonRequestBehavior.AllowGet);
            //var listAttributeEle = MoDbContext.AttributeElevenia.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeEle),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        #region Kategori Blibli
        [HttpGet]
        public ActionResult GetKategoriBlibliByCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriBlibli = MoDbContext.CategoryBlibli.Where(k => codelist.Contains(k.CATEGORY_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriBlibliByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriBlibli = MoDbContext.CategoryBlibli.Where(k => codelist.Contains(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriBlibliByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_BLIBLI> listKategoriBlibli = new List<CATEGORY_BLIBLI>();
            var category = MoDbContext.CategoryBlibli.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
            listKategoriBlibli.Add(category);

            if (category.PARENT_CODE != "")
            {
                bool TopParent = false;
                while (!TopParent)
                {
                    category = MoDbContext.CategoryBlibli.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                    listKategoriBlibli.Add(category);
                    if (string.IsNullOrEmpty(category.PARENT_CODE))
                    {
                        TopParent = true;
                    }
                }
            }

            //return Json(listKategoriBlibli.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        //public ActionResult GetAttributeBlibli(string code)
        public async Task<ActionResult> GetAttributeBlibli(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeBlibli = MoDbContext.AttributeBlibli.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            string categoryCode = codelist[0];
            var marketrecnum_int = Convert.ToInt32(codelist[1]);
            var CategoryBlibli = MoDbContext.CategoryBlibli.Where(k => k.CATEGORY_CODE == categoryCode).FirstOrDefault();
            var tblCustomer = ErasoftDbContext.ARF01.Where(p => p.RecNum == marketrecnum_int).FirstOrDefault();

            var BliAPI = new BlibliController();

            BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData
            {
                merchant_code = tblCustomer.Sort1_Cust,
                API_client_password = tblCustomer.API_CLIENT_P,
                API_client_username = tblCustomer.API_CLIENT_U,
                API_secret_key = tblCustomer.API_KEY,
                token = tblCustomer.TOKEN,
                mta_username_email_merchant = tblCustomer.EMAIL,
                mta_password_password_merchant = tblCustomer.PASSWORD,
                idmarket = tblCustomer.RecNum.Value,
                versiToken = tblCustomer.KD_ANALISA
            };

            var listAttributeBlibli = await BliAPI.GetAttributeToList(data, CategoryBlibli);

            //return Json(listAttributeBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptBlibli(string code)
        {
            string[] codelist = code.Split(';');
            var listAttributeOptBlibli = MoDbContext.AttributeOptBlibli.Where(k => codelist.Contains(k.ACODE)).ToList();
            //return Json(listAttributeOptBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeOptBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public async Task<ActionResult> GetAttributeBlibliVar(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeBlibli = MoDbContext.AttributeBlibli.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            string categoryCode = codelist[0];
            var marketrecnum_int = Convert.ToInt32(codelist[1]);
            var CategoryBlibli = MoDbContext.CategoryBlibli.Where(k => k.CATEGORY_CODE == categoryCode).FirstOrDefault();
            var tblCustomer = ErasoftDbContext.ARF01.Where(p => p.RecNum == marketrecnum_int).FirstOrDefault();

            var BliAPI = new BlibliController();

            BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData
            {
                merchant_code = tblCustomer.Sort1_Cust,
                API_client_password = tblCustomer.API_CLIENT_P,
                API_client_username = tblCustomer.API_CLIENT_U,
                API_secret_key = tblCustomer.API_KEY,
                token = tblCustomer.TOKEN,
                mta_username_email_merchant = tblCustomer.EMAIL,
                mta_password_password_merchant = tblCustomer.PASSWORD,
                idmarket = tblCustomer.RecNum.Value,
                versiToken = tblCustomer.KD_ANALISA
            };

            var listAttributeBlibli = await BliAPI.GetAttributeToList(data, CategoryBlibli);

            //return Json(listAttributeBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptBlibliVar(string code)
        {
            string[] codelist = code.Split(';');
            var listAttributeOptBlibli = MoDbContext.AttributeOptBlibli.Where(k => codelist.Contains(k.ACODE)).ToList();
            //return Json(listAttributeOptBlibli, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeOptBlibli),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        #region lzd
        [HttpGet]
        public ActionResult GetKategoriLazadaByCode(/*string code*/)
        {
            //string[] codelist = code.Split(';');
            //var listKategoriLazada = MoDbContext.CATEGORY_LAZADA.Where(k => codelist.Contains(k.CATEGORY_ID)).OrderBy(k => k.NAME).ToList();
            var listKategoriLazada = MoDbContext.CATEGORY_LAZADA.Where(k => string.IsNullOrEmpty(k.PARENT_ID)).OrderBy(k => k.NAME).ToList();

            //return Json(listKategoriLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriLazadaByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriLazada = MoDbContext.CATEGORY_LAZADA.Where(k => codelist.Contains(k.PARENT_ID)).OrderBy(k => k.NAME).ToList();

            //return Json(listKategoriLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriLazadaByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_LAZADA> listKategoriLazada = new List<CATEGORY_LAZADA>();
            var category = MoDbContext.CATEGORY_LAZADA.Where(k => codelist.Contains(k.CATEGORY_ID)).FirstOrDefault();
            listKategoriLazada.Add(category);

            if (category.PARENT_ID != "")
            {
                bool TopParent = false;
                while (!TopParent)
                {
                    category = MoDbContext.CATEGORY_LAZADA.Where(k => k.CATEGORY_ID.Equals(category.PARENT_ID)).FirstOrDefault();
                    listKategoriLazada.Add(category);
                    if (string.IsNullOrEmpty(category.PARENT_ID))
                    {
                        TopParent = true;
                    }
                }
            }

            //return Json(listKategoriLazada.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeLazada(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeLazada = MoDbContext.ATTRIBUTE_LAZADA.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            var listAttributeLazada = new List<ATTRIBUTE_LAZADA>();
            var lzdApi = new LazadaController();
            var attrLzd = lzdApi.getAttrLzd(code);
            listAttributeLazada.Add(attrLzd);

            //return Json(listAttributeLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptLazada(string code, string kategoryCode)
        {
            string[] codelist = code.Split(';');
            //var listAttributeOptLazada = MoDbContext.ATTRIBUTE_OPT_LAZADA.Where(k => codelist.Contains(k.A_NAME) && k.CATEGORY_CODE.ToUpper() == kategoryCode.ToUpper()).ToList();
            //var listAttributeOptLazada = MoDbContext.Database.SqlQuery<ATTRIBUTE_OPT_LAZADA>("SELECT * FROM ATTRIBUTE_OPT_LAZADA WHERE UPPER(CATEGORY_CODE)=UPPER('" + kategoryCode + "') AND A_NAME='" + codelist[0] + "'").ToList();
            var lzdApi = new LazadaController();
            var listAttributeOptLazada = lzdApi.getAttrOptLzd(kategoryCode, codelist[0]);
            //return Json(listAttributeOptLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeOptLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeLazadaVar(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeLazada = MoDbContext.ATTRIBUTE_LAZADA.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            var listAttributeLazada = new List<ATTRIBUTE_LAZADA>();
            var lzdApi = new LazadaController();
            var attrLzd = lzdApi.getAttrLzd(code);
            listAttributeLazada.Add(attrLzd);
            //return Json(listAttributeLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptLazadaVar(string code)
        {
            string[] codelist = code.Split(';');
            var lzdApi = new LazadaController();
            var listAttributeOptLazada = lzdApi.getAttrOptLzd(codelist[1], codelist[0]);
            //return Json(listAttributeOptLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeOptLazada),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        //add by Tri 22 Maret 2018
        #region jd
        [HttpGet]
        public ActionResult GetKategoriJDByCode(/*string code*/)
        {
            //string[] codelist = code.Split(';');
            //var listKategoriLazada = MoDbContext.CATEGORY_LAZADA.Where(k => codelist.Contains(k.CATEGORY_ID)).OrderBy(k => k.NAME).ToList();
            var listKategoriLazada = ErasoftDbContext.CATEGORY_JDID.Where(k => string.IsNullOrEmpty(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriJDByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriLazada = ErasoftDbContext.CATEGORY_JDID.Where(k => codelist.Contains(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriLazada, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriLazada),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriJDByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_JDID> listKategoriJD = new List<CATEGORY_JDID>();
            var category = ErasoftDbContext.CATEGORY_JDID.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
            listKategoriJD.Add(category);

            if (category.PARENT_CODE != "")
            {
                bool TopParent = false;
                while (!TopParent)
                {
                    category = ErasoftDbContext.CATEGORY_JDID.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                    listKategoriJD.Add(category);
                    if (string.IsNullOrEmpty(category.PARENT_CODE))
                    {
                        TopParent = true;
                    }
                }
            }

            //return Json(listKategoriJD.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriJD),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeJD(string code, int cust)
        {
            string[] codelist = code.Split(';');
            var retData = new List<ATTRIBUTE_JDID>();
            var customer = ErasoftDbContext.ARF01.Where(m => m.RecNum == cust).FirstOrDefault();
            if (customer != null)
            {
                if (!string.IsNullOrEmpty(customer.TOKEN))
                {
                    var data = new JDIDAPIData
                    {
                        accessToken = customer.TOKEN,
                        appKey = customer.API_KEY,
                        appSecret = customer.API_CLIENT_U
                    };
                    var jdApi = new JDIDController();
                    retData.Add(jdApi.getAttribute(data, codelist[0]));
                }

            }

            //return Json(retData, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(retData),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptJD(string code, string kategoryCode, int cust)
        {
            string[] codelist = code.Split(';');
            var retData = new List<ATTRIBUTE_OPT_JDID>();
            var customer = ErasoftDbContext.ARF01.Where(m => m.RecNum == cust).FirstOrDefault();
            if (customer != null)
            {
                if (!string.IsNullOrEmpty(customer.TOKEN))
                {
                    var data = new JDIDAPIData
                    {
                        accessToken = customer.TOKEN,
                        appKey = customer.API_CLIENT_P,
                        appSecret = customer.API_CLIENT_U
                    };
                    var jdApi = new JDIDController();
                    var a = jdApi.getAttributeOpt(data, kategoryCode, codelist[0], 1);
                    retData = a.OrderBy(m => m.OPTION_VALUE).ToList();
                }

            }

            //return Json(retData, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(retData),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        //end add by Tri 22 Maret 2018
        //add by calvin 18 desember 2018
        #region Kategori Shopee
        [HttpGet]
        public ActionResult GetKategoriShopeeByCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriShopee = MoDbContext.CategoryShopee.Where(k => string.IsNullOrEmpty(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriShopee, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriShopee),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriShopeeByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriShopee = MoDbContext.CategoryShopee.Where(k => codelist.Contains(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriShopee, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriShopee),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriShopeeByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_SHOPEE> listKategoriShopee = new List<CATEGORY_SHOPEE>();
            if (!string.IsNullOrEmpty(code))
            {
                var category = MoDbContext.CategoryShopee.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
                listKategoriShopee.Add(category);

                if (category.PARENT_CODE != "")
                {
                    bool TopParent = false;
                    while (!TopParent)
                    {
                        category = MoDbContext.CategoryShopee.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                        listKategoriShopee.Add(category);
                        if (string.IsNullOrEmpty(category.PARENT_CODE))
                        {
                            TopParent = true;
                        }
                    }
                }
            }
            //return Json(listKategoriShopee.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriShopee),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public async Task<ActionResult> GetAttributeShopee(string code)
        //public ActionResult GetAttributeShopee(string code)
        {
            string[] codelist = code.Split(';');
            //var listAttributeShopee = MoDbContext.AttributeShopee.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            string categoryCode = codelist[0];
            var marketrecnum_int = Convert.ToInt32(codelist[1]);
            var CategoryShopee = MoDbContext.CategoryShopee.Where(k => k.CATEGORY_CODE == categoryCode).FirstOrDefault();
            var sort1_cust = ErasoftDbContext.ARF01.Where(p => p.RecNum == marketrecnum_int).FirstOrDefault().Sort1_Cust;

            var ShopeeApi = new ShopeeController();

            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = sort1_cust,
            };

            var listAttributeShopee = await ShopeeApi.GetAttributeToList(data, CategoryShopee);

            //return Json(listAttributeShopee, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeShopee),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetAttributeOptShopee(string code)
        {
            string[] codelist = code.Split(';');
            var listAttributeOptShopee = MoDbContext.AttributeOptShopee.Where(k => codelist.Contains(k.ACODE)).ToList();
            //return Json(listAttributeOptShopee, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeOptShopee),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        //end add by calvin 18 desember 2018

        //add by fauzi for shopify 05 Maret 2020
        #region Kategori Shopify
        [HttpGet]
        public ActionResult GetKategoriShopifyByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_SHOPEE> listKategoriShopee = new List<CATEGORY_SHOPEE>();
            if (!string.IsNullOrEmpty(code))
            {
                var category = MoDbContext.CategoryShopee.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
                listKategoriShopee.Add(category);

                if (category.PARENT_CODE != "")
                {
                    bool TopParent = false;
                    while (!TopParent)
                    {
                        category = MoDbContext.CategoryShopee.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                        listKategoriShopee.Add(category);
                        if (string.IsNullOrEmpty(category.PARENT_CODE))
                        {
                            TopParent = true;
                        }
                    }
                }
            }
            //return Json(listKategoriShopee.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriShopee),
                ContentType = "application/json"
            };
            return result;
        }

        [HttpGet]
        public ActionResult GetKategoriShopifyByCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriShopify = ErasoftDbContext.STF02E.Where(m => m.LEVEL == "1").OrderBy(m => m.KET).ToList();

            //return Json(listKategoriShopee, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriShopify),
                ContentType = "application/json"
            };
            return result;
        }
        #endregion
        //end by fauzi for shopify 05 Maret 2020

        //add by calvin 6 februari 2019
        #region Kategori Tokped
        [HttpGet]
        public ActionResult GetKategoriTokpedByCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriTokped = MoDbContext.CategoryTokped.Where(k => string.IsNullOrEmpty(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriTokped, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriTokped),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriTokpedByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriTokped = MoDbContext.CategoryTokped.Where(k => codelist.Contains(k.PARENT_CODE)).OrderBy(k => k.CATEGORY_NAME).ToList();

            //return Json(listKategoriTokped, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriTokped),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategoriTokpedByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_TOKPED> listKategoriTokped = new List<CATEGORY_TOKPED>();
            if (!string.IsNullOrEmpty(code))
            {
                var category = MoDbContext.CategoryTokped.Where(k => codelist.Contains(k.CATEGORY_CODE)).FirstOrDefault();
                listKategoriTokped.Add(category);

                if (category.PARENT_CODE != "")
                {
                    bool TopParent = false;
                    while (!TopParent)
                    {
                        category = MoDbContext.CategoryTokped.Where(k => k.CATEGORY_CODE.Equals(category.PARENT_CODE)).FirstOrDefault();
                        listKategoriTokped.Add(category);
                        if (string.IsNullOrEmpty(category.PARENT_CODE))
                        {
                            TopParent = true;
                        }
                    }
                }
            }
            //return Json(listKategoriTokped.OrderBy(p => p.MASTER_CATEGORY_CODE).ThenBy(p => p.IS_LAST_NODE), JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategoriTokped.OrderBy(p => p.MASTER_CATEGORY_CODE).ThenBy(p => p.IS_LAST_NODE)),
                ContentType = "application/json"
            };
            return result;
        }
        public class GetAttributeTokpedReturn
        {
            public List<ATTRIBUTE_TOKPED> attribute { get; set; }
            public List<ATTRIBUTE_UNIT_TOKPED> attribute_unit { get; set; }
            public List<ATTRIBUTE_OPT_TOKPED> attribute_opt { get; set; }
        }
        [HttpGet]
        public async Task<ActionResult> GetAttributeTokped(string code)
        {
            string[] codelist = code.Split(';');
            var marketrecnum_int = Convert.ToInt32(codelist[1]);
            var tblCustomer = ErasoftDbContext.ARF01.Where(p => p.RecNum == marketrecnum_int).FirstOrDefault();

            TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
            {
                merchant_code = tblCustomer.Sort1_Cust, //FSID
                API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                API_secret_key = tblCustomer.API_KEY, //Shop ID 
                token = tblCustomer.TOKEN,
                idmarket = tblCustomer.RecNum.Value,
                DatabasePathErasoft = dbPathEra,
                username = usernameLogin
            };

            var listAttributeTokped = await new TokopediaControllerJob().GetAttributeToList(iden, codelist[0]);
            //var listAttributeTokped = MoDbContext.AttributeTokped.Where(k => codelist.Contains(k.CATEGORY_CODE)).ToList();
            //var listAttributeUnitTokped = MoDbContext.AttributeUnitTokped.ToList();
            var returnList = new GetAttributeTokpedReturn()
            {
                attribute = listAttributeTokped.attribute,
                attribute_unit = listAttributeTokped.attribute_unit
            };

            //return Json(returnList, JsonRequestBehavior.AllowGet);
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(returnList),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public async Task<ActionResult> GetAttributeOptTokped(string code)
        {
            string[] codelist = code.Split(';');
            try
            {
                int VariantID = Convert.ToInt32(codelist[0]);
                int UnitID = Convert.ToInt32(codelist[1]);
                int CategoryCode = Convert.ToInt32(codelist[2]);
                var marketrecnum_int = Convert.ToInt32(codelist[3]);
                var tblCustomer = ErasoftDbContext.ARF01.Where(p => p.RecNum == marketrecnum_int).FirstOrDefault();

                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                {
                    merchant_code = tblCustomer.Sort1_Cust, //FSID
                    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                    token = tblCustomer.TOKEN,
                    idmarket = tblCustomer.RecNum.Value,
                    DatabasePathErasoft = dbPathEra,
                    username = usernameLogin
                };

                var listAttributeTokped = await new TokopediaControllerJob().GetAttributeToList(iden, Convert.ToString(CategoryCode));

                var listAttributeOptTokped = listAttributeTokped.attribute_opt.Where(p => p.VARIANT_ID == VariantID && p.UNIT_ID == UnitID).ToList();

                //return Json(listAttributeOptTokped, JsonRequestBehavior.AllowGet);
                var serializer = new JavaScriptSerializer();
                serializer.MaxJsonLength = Int32.MaxValue;
                var result = new ContentResult
                {
                    Content = serializer.Serialize(listAttributeOptTokped),
                    ContentType = "application/json"
                };
                return result;
            }
            catch (Exception ex)
            {
                var listAttributeOptTokped = MoDbContext.AttributeOptTokped.Where(p => 0 == 1).ToList();
                //return Json(listAttributeOptTokped, JsonRequestBehavior.AllowGet);
                var serializer = new JavaScriptSerializer();
                serializer.MaxJsonLength = Int32.MaxValue;
                var result = new ContentResult
                {
                    Content = serializer.Serialize(listAttributeOptTokped),
                    ContentType = "application/json"
                };
                return result;
            }
        }
        #endregion
        //end add by calvin 6 februari 2019

        //add by Tri, 6 Mei 2019
        #region lzd
        [HttpGet]
        public ActionResult GetKategoriBukalapakByCode(/*string code*/)
        {
            //string[] codelist = code.Split(';');
            //var listKategoriLazada = MoDbContext.CATEGORY_LAZADA.Where(k => codelist.Contains(k.CATEGORY_ID)).OrderBy(k => k.NAME).ToList();
            var listKategoriBukalapak = MoDbContext.CATEGORY_BUKALAPAKs.Where(k => string.IsNullOrEmpty(k.PARENT_ID)).OrderBy(k => k.NAME).ToList();

            return Json(listKategoriBukalapak, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetKategoriBukalapakByParentCode(string code)
        {
            string[] codelist = code.Split(';');
            var listKategoriBukalapak = MoDbContext.CATEGORY_BUKALAPAKs.Where(k => codelist.Contains(k.PARENT_ID)).OrderBy(k => k.NAME).ToList();

            return Json(listKategoriBukalapak, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetKategoriBukalapakByChildCode(string code)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_BUKALAPAK> listKategoriBukalapak = new List<CATEGORY_BUKALAPAK>();
            var category = MoDbContext.CATEGORY_BUKALAPAKs.Where(k => codelist.Contains(k.CATEGORY_ID)).FirstOrDefault();
            listKategoriBukalapak.Add(category);

            if (category.PARENT_ID != "")
            {
                bool TopParent = false;
                while (!TopParent)
                {
                    category = MoDbContext.CATEGORY_BUKALAPAKs.Where(k => k.CATEGORY_ID.Equals(category.PARENT_ID)).FirstOrDefault();
                    listKategoriBukalapak.Add(category);
                    if (string.IsNullOrEmpty(category.PARENT_ID))
                    {
                        TopParent = true;
                    }
                }
            }

            return Json(listKategoriBukalapak.OrderBy(p => p.RecNum), JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetAttributeBukalapak(string code)
        {
            string[] codelist = code.Split(';');
            var listAttributeBukalapak = new List<ATTRIBUTE_BL>();
            var BLApi = new BukaLapakController();
            var BLCust = ErasoftDbContext.ARF01.Where(m => m.NAMA == "8" && m.TOKEN != "" && m.API_KEY != "").FirstOrDefault();
            if (BLCust != null)
            {
                var attrBL = BLApi.GetAttr(BLCust.API_KEY, BLCust.TOKEN, code);
                listAttributeBukalapak.Add(attrBL);
            }

            return Json(listAttributeBukalapak, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetAttributeOptBukalapak(string code, string kategoryCode)
        {
            string[] codelist = code.Split(';');
            var listAttributeOptBukalapak = new List<ATTRIBUTE_OPT_BL>();
            var BLApi = new BukaLapakController();
            var BLCust = ErasoftDbContext.ARF01.Where(m => m.NAMA == "8" && m.TOKEN != "" && m.API_KEY != "").FirstOrDefault();
            if (BLCust != null)
            {
                listAttributeOptBukalapak = BLApi.GetAttrOpt(BLCust.API_KEY, BLCust.TOKEN, kategoryCode, codelist[0], false);
            }

            return Json(listAttributeOptBukalapak, JsonRequestBehavior.AllowGet);
        }
        #endregion
        //end add by Tri, 6 Mei 2019

        //add by fauzi 20 Mei 2020
        #region category 82Cart
        public ActionResult GetAttribute82CartByCode_varian_group()
        {
            var e2CartController = new EightTwoCartController();
            var groupAttributes = e2CartController.E2Cart_GetAttributeGroup_Varian();

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(groupAttributes.data),
                ContentType = "application/json"
            };
            return result;
        }

        [HttpGet]
        public ActionResult GetAttribute82CartByCode_varian_item(string code)
        {
            string[] codelist = code.Split(';');
            var e2CartController = new EightTwoCartController();
            var itemAttributes = e2CartController.E2Cart_GetAttributeItem_Varian(codelist[0]);

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(itemAttributes.attribute),
                ContentType = "application/json"
            };
            return result;
        }

        [HttpGet]
        public ActionResult GetKategori82CartByCode(string code, string accountStore)
        {
            string[] codelist = code.Split(';');
            var listKategori82Cart = MoDbContext.Category82Cart.Where(k => k.ID_PARENT == "0" && k.ACTIVE == "1" && k.ACCOUNT.ToLower() == accountStore.ToLower()).OrderBy(k => k.NAME).ToList();

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategori82Cart),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategori82CartByParentCode(string code, string accountStore)
        {
            string[] codelist = code.Split(';');
            var listKategori82Cart = MoDbContext.Category82Cart.Where(k => codelist.Contains(k.ID_PARENT) && k.ACTIVE == "1" && k.ACCOUNT.ToLower() == accountStore.ToLower()).OrderBy(k => k.NAME).ToList();

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategori82Cart),
                ContentType = "application/json"
            };
            return result;
        }
        [HttpGet]
        public ActionResult GetKategori82CartByChildCode(string code, string accountStore)
        {
            string[] codelist = code.Split(';');
            List<CATEGORY_82CART> listKategori82Cart = new List<CATEGORY_82CART>();
            if (!string.IsNullOrEmpty(code))
            {
                var category = MoDbContext.Category82Cart.Where(k => codelist.Contains(k.ID_CATEGORY) && k.ACTIVE == "1" && k.ACCOUNT.ToLower() == accountStore.ToLower()).FirstOrDefault();
                listKategori82Cart.Add(category);

                if (category.ID_PARENT != "")
                {
                    bool TopParent = false;
                    while (!TopParent)
                    {
                        category = MoDbContext.Category82Cart.Where(k => k.ID_CATEGORY.Equals(category.ID_PARENT) && k.ACTIVE == "1" && k.ACCOUNT.ToLower() == accountStore.ToLower()).FirstOrDefault();
                        if (category != null)
                        {
                            listKategori82Cart.Add(category);
                            if (string.IsNullOrEmpty(category.ID_PARENT))
                            {
                                TopParent = true;
                            }
                        }
                        else
                        {
                            TopParent = true;
                        }
                    }
                }
            }

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listKategori82Cart),
                ContentType = "application/json"
            };
            return result;
        }

        [HttpGet]
        public ActionResult GetAttributeGroup82CartByCode(string code, string accountStore)
        {
            string[] codelist = code.Split(';');
            var listAttributeGroup82Cart = MoDbContext.Attribute82Cart.Where(k => k.id_attribute == null && k.color_attribute == null && k.attribute_name == null && k.account_name.ToLower() == accountStore.ToLower()).OrderBy(k => k.group_name).ToList();

            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(listAttributeGroup82Cart),
                ContentType = "application/json"
            };
            return result;
        }

        [HttpGet]
        public ActionResult GetAttribute82CartByChildCode(string code, string accountStore)
        {
            string[] codelist = code.Split(';');
            //if (!string.IsNullOrEmpty(code))
            //{
            var attribute = MoDbContext.Attribute82Cart.Where(k => codelist.Contains(k.id_attribute_group) && k.id_attribute != null && k.color_attribute != null && k.attribute_name != null && k.account_name.ToLower() == accountStore.ToLower()).OrderBy(k => k.attribute_name).ToList();
            var serializer = new JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;
            var result = new ContentResult
            {
                Content = serializer.Serialize(attribute),
                ContentType = "application/json"
            };
            return result;
            //}
        }
        #endregion
        //end by fauzi 20 Mei 2020

        [HttpGet]
        public ActionResult GetMerkBarang()
        {
            var listMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL == "2").OrderBy(m => m.KET).ToList();
            var serializer = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue };

            var result = new ContentResult
            {
                Content = serializer.Serialize(listMerk),
                ContentType = "application/json"
            };

            return result;
        }

        public ActionResult DeleteFotoProduk(string kodeBarang, int urutan)
        {
            try
            {
                var barangInDb = ErasoftDbContext.STF02.FirstOrDefault(b => b.BRG == kodeBarang);

                if (barangInDb != null)
                {
                    switch (urutan)
                    {
                        case 1:
                            barangInDb.LINK_GAMBAR_1 = null;
                            barangInDb.Sort5 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            barangInDb.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 2:
                            barangInDb.LINK_GAMBAR_2 = null;
                            barangInDb.Sort6 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            barangInDb.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 3:
                            barangInDb.LINK_GAMBAR_3 = null;
                            barangInDb.Sort7 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            barangInDb.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        //add 6/9/2019, 5 gambar
                        case 4:
                            barangInDb.LINK_GAMBAR_4 = null;
                            barangInDb.SIZE_GAMBAR_4 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            barangInDb.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 5:
                            barangInDb.LINK_GAMBAR_5 = null;
                            barangInDb.SIZE_GAMBAR_5 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            barangInDb.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                            //end add 6/9/2019, 5 gambar
                    }

                    ErasoftDbContext.SaveChanges();
                }

                return Json("Sukses hapus url foto produk dari tabel", JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteFotoProdukBlibli(string brg, string recnum, int urutan)
        {
            try
            {
                int recnum_int = Convert.ToInt32(recnum);
                var barangInDb = ErasoftDbContext.STF02H.FirstOrDefault(b => b.BRG == brg && b.IDMARKET == recnum_int);
                //add by nurul 27/11/2019, add tgl last edit
                var getStf02 = ErasoftDbContext.STF02.FirstOrDefault(b => b.BRG == brg);
                //end add by nurul 27/11/2019, add tgl last edit
                if (barangInDb != null)
                {
                    switch (urutan)
                    {
                        case 1:
                            barangInDb.AVALUE_50 = null;
                            barangInDb.ACODE_50 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 2:
                            barangInDb.AVALUE_49 = null;
                            barangInDb.ACODE_49 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 3:
                            barangInDb.AVALUE_48 = null;
                            barangInDb.ACODE_48 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        //add 6/9/2019, 5 gambar
                        case 4:
                            barangInDb.LINK_GAMBAR_4 = null;
                            barangInDb.SIZE_GAMBAR_4 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        case 5:
                            barangInDb.LINK_GAMBAR_5 = null;
                            barangInDb.SIZE_GAMBAR_5 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                            //end add 6/9/2019, 5 gambar
                    }

                    ErasoftDbContext.SaveChanges();
                }

                return Json("Sukses hapus url foto produk dari tabel", JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteFotoProdukBliVar(string recnum, int urutan)
        {
            try
            {
                int recnum_int = Convert.ToInt32(recnum);
                var barangInDb = ErasoftDbContext.STF02H.FirstOrDefault(b => b.RecNum.Value == recnum_int);
                //add by nurul 27/11/2019, add tgl last edit
                var getStf02 = ErasoftDbContext.STF02.FirstOrDefault(b => b.BRG == barangInDb.BRG);
                //end add by nurul 27/11/2019, add tgl last edit
                if (barangInDb != null)
                {
                    switch (urutan)
                    {
                        case 1:
                            barangInDb.AVALUE_50 = null;
                            barangInDb.ACODE_50 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                        //add 6/9/2019, 2 gambar untuk barang varian
                        case 2:
                            barangInDb.AVALUE_49 = null;
                            barangInDb.ACODE_49 = null;
                            //add by nurul 27/11/2019, add tgl last edit
                            if (getStf02 != null)
                            {
                                getStf02.Tgl_Input = DateTime.Today;
                            }
                            //end add by nurul 27/11/2019, add tgl last edit
                            break;
                            //end add 6/9/2019, 2 gambar untuk barang varian
                    }

                    ErasoftDbContext.SaveChanges();
                }

                return Json("Sukses hapus url foto produk dari tabel", JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }
        [HttpPost]
        //public ActionResult SaveBarang(BarangViewModel dataBarang, IEnumerable<HttpPostedFileBase> fotoProdukBlibli)
        public ActionResult SaveBarang(BarangViewModel dataBarang)
        {
            //add by nurul 21/6/2019, validasi berat,p,l,t
            try
            {
                //end add by nurul 21/6/2019, validasi berat,p,l,t
                if (!ModelState.IsValid)
                {
                    dataBarang.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                }

                //add by nurul 21/6/2019, validasi berat,p,l,t
                //if (dataBarang.Stf02.BERAT <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Berat tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                //if (dataBarang.Stf02.PANJANG <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Panjang tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                //if (dataBarang.Stf02.LEBAR <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Lebar tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                if (dataBarang.Stf02.BERAT <= 0 || dataBarang.Stf02.PANJANG <= 0 || dataBarang.Stf02.LEBAR <= 0 || dataBarang.Stf02.TINGGI <= 0)
                {
                    List<string> listError = new List<string>();
                    listError.Add("Berat, panjang, lebar dan tinggi tidak boleh kurang atau sama dengan 0 !");
                    dataBarang.Errors = listError;
                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                }
                //end add by nurul 21/6/2019, validasi berat,p,l,t

                

                bool insert = false;//add by Tri
                bool updateHarga = false;//add by Tri
                bool updateDisplay = false;//add by Tri
                bool updateGambar = false;//add by Tri
                var Marketplaces = MoDbContext.Marketplaces.ToList();
                var kdBL = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
                var kdLazada = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
                var kdBlibli = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI");
                var kdElevenia = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA");
                var validPrice = true;

                string[] imgPath = new string[Request.Files.Count];
                if (dataBarang.Stf02.ID == null)
                {
                    insert = true;

                    if (ErasoftDbContext.STF02.Where(p => p.BRG.ToUpper() == dataBarang.Stf02.BRG.ToUpper()).FirstOrDefault() != null)
                    {
                        List<string> listError = new List<string>();
                        listError.Add("Kode " + dataBarang.Stf02.BRG + " sudah digunakan oleh barang lain.");
                        dataBarang.Errors = listError;
                        return Json(dataBarang, JsonRequestBehavior.AllowGet);
                    }
                    if (dataBarang.ListHargaJualPermarket?.Count > 0)
                    {
                        List<string> listError = new List<string>();
                        int i = 0;
                        List<int> processedIdMarket = new List<int>();
                        foreach (var hargaPerMarket in dataBarang.ListHargaJualPermarket)
                        {
                            if (hargaPerMarket.DISPLAY)
                            {
                                if (!processedIdMarket.Contains(hargaPerMarket.IDMARKET))
                                {
                                    processedIdMarket.Add(hargaPerMarket.IDMARKET);

                                    var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == hargaPerMarket.IDMARKET).SingleOrDefault().NAMA;
                                    //change by Tri 22 agustus 2019, validasi harga 1 function
                                    //if (kdMarket == kdLazada.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 3000)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 3000.");
                                    //    }
                                    //    //else if (hargaPerMarket.HJUAL % 100 != 0)
                                    //    //{
                                    //    //    validPrice = false;
                                    //    //    listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                    //    //}
                                    //}
                                    //else if (kdMarket == kdBlibli.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 1100)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual minimal 1100.");
                                    //    }
                                    //}
                                    //else if (kdMarket == kdBL.IdMarket.ToString() || kdMarket == kdElevenia.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 100)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 100.");
                                    //    }
                                    //    else if (hargaPerMarket.HJUAL % 100 != 0)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                    //    }
                                    //}
                                    var retVal = ValidasiHarga(kdMarket, hargaPerMarket.HJUAL);
                                    if (retVal.status == 0)
                                    {
                                        validPrice = false;
                                        listError.Add(i + "_errortext_" + retVal.message);
                                    }
                                    //end change by Tri 22 agustus 2019, validasi harga 1 function
                                    i++;
                                }
                            }
                        }
                        if (validPrice)
                        {
                            //add by calvin 1 maret 2019
                            Dictionary<string, string> extra_image_uploaded = new Dictionary<string, string>();
                            Dictionary<int, string> same_uploaded = new Dictionary<int, string>();
                            if (Request.Files.Count > 0)
                            {
                                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                                {
                                    string key = Request.Files.GetKey(file_index);
                                    string[] key_split = key.Split(';');
                                    if (key_split.Count() > 1)
                                    {
                                        #region Extra Image
                                        int urutan = Convert.ToInt32(key_split[0]);
                                        int idmarket = Convert.ToInt32(key_split[1]);
                                        var file = Request.Files[file_index];

                                        if (file != null && file.ContentLength > 0)
                                        {
                                            if (!same_uploaded.ContainsKey(file.ContentLength))
                                            {
                                                ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                                same_uploaded.Add(file.ContentLength, image.data.link_l);
                                                extra_image_uploaded.Add(Convert.ToString(urutan) + ";" + Convert.ToString(idmarket) + ";" + Convert.ToString(file.ContentLength), image.data.link_l);
                                            }
                                            else
                                            {
                                                extra_image_uploaded.Add(Convert.ToString(urutan) + ";" + Convert.ToString(idmarket) + ";" + Convert.ToString(file.ContentLength), same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value);
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                            //end add by calvin 1 maret 2019
                            List<int> protectDuplicateIdMarket = new List<int>();
                            foreach (var hargaPerMarket in dataBarang.ListHargaJualPermarket)
                            {
                                var stf02hInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataBarang.Stf02.BRG).FirstOrDefault();
                                if (stf02hInDB == null)
                                {
                                    if (!protectDuplicateIdMarket.Contains(hargaPerMarket.IDMARKET))
                                    {
                                        protectDuplicateIdMarket.Add(hargaPerMarket.IDMARKET);
                                        hargaPerMarket.BRG = dataBarang.Stf02.BRG;

                                        //add by calvin 1 maret 2019
                                        if (extra_image_uploaded.Count() > 0)
                                        {
                                            foreach (var extra_image in extra_image_uploaded)
                                            {
                                                string[] key_split = extra_image.Key.Split(';');
                                                int urutan = Convert.ToInt32(key_split[0]);
                                                int idmarket = Convert.ToInt32(key_split[1]);
                                                string idGambar = Convert.ToString(key_split[2]);
                                                if (idmarket == hargaPerMarket.IDMARKET)
                                                {
                                                    switch (urutan)
                                                    {
                                                        case 1:
                                                            hargaPerMarket.ACODE_50 = idGambar;
                                                            hargaPerMarket.AVALUE_50 = extra_image.Value;
                                                            break;
                                                        case 2:
                                                            hargaPerMarket.ACODE_49 = idGambar;
                                                            hargaPerMarket.AVALUE_49 = extra_image.Value;
                                                            break;
                                                        case 3:
                                                            hargaPerMarket.ACODE_48 = idGambar;
                                                            hargaPerMarket.AVALUE_48 = extra_image.Value;
                                                            break;
                                                        //add 13/9/2019, 5 gambar
                                                        case 4:
                                                            hargaPerMarket.SIZE_GAMBAR_4 = idGambar;
                                                            hargaPerMarket.LINK_GAMBAR_4 = extra_image.Value;
                                                            break;
                                                        case 5:
                                                            hargaPerMarket.SIZE_GAMBAR_5 = idGambar;
                                                            hargaPerMarket.LINK_GAMBAR_5 = extra_image.Value;
                                                            break;
                                                            //end add 13/9/2019, 5 gambar
                                                    }
                                                }
                                            }
                                        }
                                        //end add by calvin 1 maret 2019
                                        ErasoftDbContext.STF02H.Add(hargaPerMarket);
                                    }

                                }
                                else
                                {
                                    List<string> listError2 = new List<string>();
                                    listError2.Add("Data barang ada yang terduplikat, Silahkan hubungi Support MO.");
                                    dataBarang.Errors = listError2;
                                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                }

                            }
                        }
                        else
                        {
                            dataBarang.errorHargaPerMP = "1";
                            dataBarang.Errors = listError;
                            return Json(dataBarang, JsonRequestBehavior.AllowGet);
                        }

                    }

                    var listMarket = dataBarang.ListMarket.ToList();

                    //remark by Tri, moved to top
                    //add by tri
                    //string[] imgPath = new string[Request.Files.Count];
                    //end add by tri
                    //end remark by Tri, moved to top

                    if (Request.Files.Count > 0)
                    {
                        //for (int i = 0; i < 3; i++)
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            var file = Request.Files[i];

                            if (file != null && file.ContentLength > 0 && Request.Files.GetKey(i).Contains("foto_produk"))
                            {
                                //var namaFile = $"FotoProduk-{dataBarang.Stf02.USERNAME}-BRG{dataBarang.Stf02.BRG}-foto-{i + 1}";
                                ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");

                                //var fileExtension = Path.GetExtension(file.FileName);
                                //var path = Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile);
                                //try
                                //{
                                //    file.SaveAs(path);
                                //}
                                //catch (Exception ex)
                                //{

                                //}
                                //add by tri

                                imgPath[i] = image.data.link;

                                switch (i)
                                {
                                    case 0:
                                        dataBarang.Stf02.LINK_GAMBAR_1 = image.data.link_l;
                                        dataBarang.Stf02.Sort5 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 1:
                                        dataBarang.Stf02.LINK_GAMBAR_2 = image.data.link_l;
                                        dataBarang.Stf02.Sort6 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 2:
                                        dataBarang.Stf02.LINK_GAMBAR_3 = image.data.link_l;
                                        dataBarang.Stf02.Sort7 = Convert.ToString(file.ContentLength);
                                        break;
                                    //add 6/9/2019, 5 gambar
                                    case 3:
                                        dataBarang.Stf02.LINK_GAMBAR_4 = image.data.link_l;
                                        dataBarang.Stf02.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 4:
                                        dataBarang.Stf02.LINK_GAMBAR_5 = image.data.link_l;
                                        dataBarang.Stf02.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                        break;
                                        //end add 6/9/2019, 5 gambar
                                }
                            }
                        }
                    }

                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        switch (i)
                        {
                            case 0:
                                imgPath[0] = dataBarang.Stf02.LINK_GAMBAR_1;
                                break;
                            case 1:
                                imgPath[1] = dataBarang.Stf02.LINK_GAMBAR_2;
                                break;
                            case 2:
                                imgPath[2] = dataBarang.Stf02.LINK_GAMBAR_3;
                                break;
                            //add 6/9/2019, 5 gambar
                            case 3:
                                imgPath[3] = dataBarang.Stf02.LINK_GAMBAR_4;
                                break;
                            case 4:
                                imgPath[4] = dataBarang.Stf02.LINK_GAMBAR_5;
                                break;
                                //end add 6/9/2019, 5 gambar
                        }
                    }

                    if (string.IsNullOrWhiteSpace(dataBarang.Stf02.TYPE))
                    {
                        dataBarang.Stf02.TYPE = "3";
                    }


                    //add by nurul 27/11/2019, add tgl last edit
                    dataBarang.Stf02.Tgl_Input = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    //add by nurul 28/8/2020
                    if (dataBarang.Stf02.KUBILASI.ToString() == "1")
                    {
                        if (string.IsNullOrWhiteSpace(dataBarang.Stf02.BRG_NON_OS))
                        {
                            List<string> listError = new List<string>();
                            listError.Add("Kode barang acuan harus diisi untuk barang yang memiliki multi SKU.");
                            dataBarang.Errors = listError;
                            return Json(dataBarang, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var cekBarang = dataBarang.Stf02.BRG;
                            if (cekBarang == "" || cekBarang == null)
                            {
                                if (cekBarang == dataBarang.Stf02.BRG_NON_OS)
                                {
                                    List<string> listError = new List<string>();
                                    listError.Add("Kode barang acuan tidak boleh sama dengan kode barang multi SKU.");
                                    dataBarang.Errors = listError;
                                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                }
                                var cekFaktur = ErasoftDbContext.SIT01B.Count(k => k.BRG == cekBarang);
                                var cekPembelian = ErasoftDbContext.PBT01B.Count(k => k.BRG == cekBarang);
                                var cekTransaksi = ErasoftDbContext.STT01B.Count(k => k.Kobar == cekBarang);
                                var cekPesanan = ErasoftDbContext.SOT01B.Count(k => k.BRG == cekBarang);
                                var cekPromosi = ErasoftDbContext.DETAILPROMOSI.Count(k => k.KODE_BRG == cekBarang);

                                if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0 || cekPromosi > 0)
                                {
                                    List<string> listError = new List<string>();
                                    listError.Add("Barang " + cekBarang + " sudah dipakai di transaksi tidak bisa dijadikan barang multi SKU !");
                                    dataBarang.Errors = listError;
                                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                }
                            }
                            dataBarang.Stf02.TYPE = "6";
                        }
                    }
                    //end add by nurul 28/8/2020

                    //add by nurul 3/9/2020
                    if (dataBarang.Stf02.TYPE == "6")
                    {
                        var cekMultiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == dataBarang.Stf02.BRG_NON_OS && a.BRG == dataBarang.Stf02.BRG).Count();
                        if (cekMultiSKU == 0)
                        {
                            var Stf03c = new STF03C() { };
                            Stf03c.BRG = dataBarang.Stf02.BRG;
                            Stf03c.BRG_ACUAN = dataBarang.Stf02.BRG_NON_OS;
                            Stf03c.TGL_EDIT = DateTime.UtcNow.AddHours(7);
                            Stf03c.USERNAME = dataBarang.Stf02.USERNAME;
                            ErasoftDbContext.STF03C.Add(Stf03c);
                        }
                    }
                    //end add by nurul 3/9/2020

                    ErasoftDbContext.STF02.Add(dataBarang.Stf02);
                }
                else
                {
                    var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);

                    if (barangInDb != null)
                    {
                        barangInDb.NAMA = dataBarang.Stf02.NAMA;
                        barangInDb.NAMA2 = dataBarang.Stf02.NAMA2;
                        barangInDb.MINI = dataBarang.Stf02.MINI;
                        barangInDb.MAXI = dataBarang.Stf02.MAXI;
                        barangInDb.Sort1 = dataBarang.Stf02.Sort1;
                        barangInDb.Sort2 = dataBarang.Stf02.Sort2;
                        barangInDb.KET_SORT1 = dataBarang.Stf02.KET_SORT1;
                        barangInDb.KET_SORT2 = dataBarang.Stf02.KET_SORT2;
                        barangInDb.STN = dataBarang.Stf02.STN;
                        barangInDb.STN2 = dataBarang.Stf02.STN2;
                        barangInDb.ISI = dataBarang.Stf02.ISI;
                        barangInDb.Metoda = dataBarang.Stf02.Metoda;
                        barangInDb.Deskripsi = dataBarang.Stf02.Deskripsi;
                        barangInDb.BERAT = dataBarang.Stf02.BERAT;
                        barangInDb.PANJANG = dataBarang.Stf02.PANJANG;
                        barangInDb.LEBAR = dataBarang.Stf02.LEBAR;
                        barangInDb.TINGGI = dataBarang.Stf02.TINGGI;
                        barangInDb.HJUAL = dataBarang.Stf02.HJUAL;
                        //barangInDb.TYPE = "3";

                        //add by nurul 28/8/2020
                        var tempType = barangInDb.TYPE;
                        barangInDb.TYPE = "3";
                        if (dataBarang.Stf02.KUBILASI.ToString() == "1")
                        {
                            if (string.IsNullOrWhiteSpace(dataBarang.Stf02.BRG_NON_OS))
                            {
                                if (tempType != "4")
                                {
                                    barangInDb.TYPE = "3";
                                    barangInDb.BRG_NON_OS = "";
                                    barangInDb.KUBILASI = 0;
                                }
                                List<string> listError = new List<string>();
                                listError.Add("Kode barang acuan harus diisi untuk barang yang memiliki multi SKU.");
                                dataBarang.Errors = listError;
                                return Json(dataBarang, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                if (tempType != "4")
                                {
                                    var cekBarang = dataBarang.Stf02.BRG;
                                    if (cekBarang == "" || cekBarang == null && barangInDb.BRG != "" && barangInDb.BRG != null)
                                    {
                                        cekBarang = barangInDb.BRG;
                                    }
                                    if (cekBarang == dataBarang.Stf02.BRG_NON_OS)
                                    {
                                        List<string> listError = new List<string>();
                                        listError.Add("Kode barang acuan tidak boleh sama dengan kode barang multi SKU.");
                                        dataBarang.Errors = listError;
                                        return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                    }

                                    if (tempType != "6")
                                    {
                                        var cekFaktur = ErasoftDbContext.SIT01B.Count(k => k.BRG == cekBarang);
                                        var cekPembelian = ErasoftDbContext.PBT01B.Count(k => k.BRG == cekBarang);
                                        var cekTransaksi = ErasoftDbContext.STT01B.Count(k => k.Kobar == cekBarang);
                                        var cekPesanan = ErasoftDbContext.SOT01B.Count(k => k.BRG == cekBarang);
                                        var cekPromosi = ErasoftDbContext.DETAILPROMOSI.Count(k => k.KODE_BRG == cekBarang);

                                        if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0 || cekPromosi > 0)
                                        {
                                            List<string> listError = new List<string>();
                                            listError.Add("Barang " + cekBarang + " sudah dipakai di transaksi tidak bisa dijadikan barang multi SKU !");
                                            dataBarang.Errors = listError;
                                            return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                        }
                                    }

                                    dataBarang.Stf02.TYPE = "6";
                                    barangInDb.TYPE = "6";
                                    barangInDb.BRG_NON_OS = dataBarang.Stf02.BRG_NON_OS;
                                    barangInDb.KUBILASI = dataBarang.Stf02.KUBILASI;
                                }
                            }
                        }
                        else
                        {
                            if(tempType == "6")
                            {
                                barangInDb.KUBILASI = 0;
                                barangInDb.BRG_NON_OS = "";
                            }
                        }
                        //end add by nurul 28/8/2020

                        //add by nurul 27/11/2019, add tgl last edit
                        barangInDb.Tgl_Input = DateTime.Today;
                        //end add by nurul 27/11/2019, add tgl last edit

                        if (dataBarang.ListHargaJualPermarket?.Count > 0)
                        {
                            List<string> listError = new List<string>();
                            int i = 0;
                            foreach (var dataBaru in dataBarang.ListHargaJualPermarket)
                            {
                                //add validasi harga per marketplace
                                //var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == dataBaru.IDMARKET).SingleOrDefault().NAMA;
                                var akunMP = ErasoftDbContext.ARF01.Where(m => m.RecNum == dataBaru.IDMARKET).SingleOrDefault();

                                ////add by nurul 31/1/2019
                                ////var getpromosi1 = ErasoftDbContext.Database.SqlQuery<>("SELECT * FROM API_LOG_MARKETPLACE_PER_ITEM WHERE REQUEST_ATTRIBUTE_1 = '" + barangId + "' AND REQUEST_ACTION IN ('Create Product','create brg','create Produk')").ToList()
                                //var getpromo1 = (from a in ErasoftDbContext.PROMOSI
                                //                 join b in ErasoftDbContext.DETAILPROMOSI on a.RecNum equals b.RecNumPromosi
                                //                 join c in ErasoftDbContext.ARF01 on a.NAMA_MARKET equals c.CUST
                                //                 select new { brg = b.KODE_BRG, mulai = a.TGL_MULAI, akhir = a.TGL_AKHIR, nama = c.NAMA }).ToList();
                                //var getpromo2 = (from d in MoDbContext.Marketplaces
                                //                 select new { market = d.IdMarket }).ToList();
                                //var getpromosi = (from a in getpromo1
                                //                  join d in getpromo2 on a.nama equals Convert.ToString(d.market)
                                //                  where a.brg == barangInDb.BRG && Convert.ToString(d.market) == kdMarket
                                //                  select new BarangViewModel { BRG = a.brg, MULAI = Convert.ToString(a.mulai), AKHIR = Convert.ToString(a.akhir), MARKET = Convert.ToInt32(d.market) }).ToList();
                                //var drtanggal = "";
                                //var sdtanggal = "";
                                //if (getpromosi.Count() > 0)
                                //{
                                //    string tgl1 = (getpromosi.FirstOrDefault().MULAI.Split('-')[getpromosi.FirstOrDefault().MULAI.Split('-').Length - 3]);
                                //    string bln1 = (getpromosi.FirstOrDefault().MULAI.Split('-')[getpromosi.FirstOrDefault().MULAI.Split('-').Length - 2]);
                                //    string thn10 = (getpromosi.FirstOrDefault().MULAI.Split('-')[getpromosi.FirstOrDefault().MULAI.Split('-').Length - 1]);
                                //    string thn1 = (thn10.Split(' ')[thn10.Split(' ').Length - 3]);
                                //    drtanggal = tgl1 + '/' + bln1 + '/' + thn1;
                                //}
                                //else
                                //{
                                //    drtanggal = "01/01/1000";
                                //}
                                //if (getpromosi.Count() > 0)
                                //{
                                //    string tgl2 = (getpromosi.FirstOrDefault().AKHIR.Split('-')[getpromosi.FirstOrDefault().AKHIR.Split('-').Length - 3]);
                                //    string bln2 = (getpromosi.FirstOrDefault().AKHIR.Split('-')[getpromosi.FirstOrDefault().AKHIR.Split('-').Length - 2]);
                                //    string thn20 = (getpromosi.FirstOrDefault().AKHIR.Split('-')[getpromosi.FirstOrDefault().AKHIR.Split('-').Length - 1]);
                                //    string thn2 = (thn20.Split(' ')[thn20.Split(' ').Length - 3]);
                                //    sdtanggal = tgl2 + '/' + bln2 + '/' + thn2;
                                //}
                                //else
                                //{
                                //    sdtanggal = "01/01/1000";
                                //}
                                //var tglmulai = DateTime.ParseExact(drtanggal, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                                //var tglakhir = DateTime.ParseExact(sdtanggal, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                                ////end add by nurul 31/1/2019
                                var dsPromo = EDB.GetDataSet("CString", "PROMOSIS", "select * from promosis a inner join detailpromosis b on a.recnum = b.RecNumPromosi where tgl_mulai < dateadd(hour,7,getutcdate()) and tgl_akhir > dateadd(hour,7,getutcdate()) and kode_brg = '" + barangInDb.BRG + "' and nama_market = '" + akunMP.CUST + "'");
                                if (dsPromo.Tables[0].Rows.Count > 0)
                                {
                                    var stf02hInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == barangInDb.BRG && m.IDMARKET == dataBaru.IDMARKET).FirstOrDefault();
                                    if (stf02hInDB != null)
                                    {
                                        if (stf02hInDB.HJUAL != dataBaru.HJUAL)
                                        {
                                            validPrice = false;
                                            listError.Add(i + "_errortext_" + "Harga barang tidak dapat di update, karena sedang dalam masa promosi");
                                        }
                                    }
                                }
                                //change by Tri 22 agustus 2019, validasi harga 1 function
                                //if (akunMP.NAMA == kdLazada.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 3000)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 3000.");
                                //    }
                                //    //else if (dataBaru.HJUAL % 100 != 0)
                                //    //{
                                //    //    validPrice = false;
                                //    //    listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                //    //}
                                //    ////add by nurul 31/1/2019
                                //    //if (DateTime.Now >= tglmulai && DateTime.Now <= tglakhir)
                                //    //{
                                //    //    validPrice = false;
                                //    //    listError.Add(i + "_errortext_" + "Harga barang tidak dapat di update, karena sedang dalam masa promosi !");
                                //    //}
                                //    ////end add by nurul 31/1/2019
                                //}
                                //else if (akunMP.NAMA == kdBlibli.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 1100)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual minimal 1100.");
                                //    }
                                //    ////add by nurul 31/1/2019
                                //    //if (DateTime.Now >= tglmulai && DateTime.Now <= tglakhir)
                                //    //{
                                //    //    validPrice = false;
                                //    //    listError.Add(i + "_errortext_" + "Harga barang tidak dapat di update, karena sedang dalam masa promosi !");
                                //    //}
                                //    ////end add by nurul 31/1/2019
                                //}
                                //else if (akunMP.NAMA == kdBL.IdMarket.ToString() || akunMP.NAMA == kdElevenia.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 100)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 100.");
                                //    }
                                //    else if (dataBaru.HJUAL % 100 != 0)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                //    }
                                //    ////add by nurul 31/1/2019
                                //    //if (DateTime.Now >= tglmulai && DateTime.Now <= tglakhir)
                                //    //{
                                //    //    validPrice = false;
                                //    //    listError.Add(i + "_errortext_" + "Harga barang tidak dapat di update, karena sedang dalam masa promosi !");
                                //    //}
                                //    ////end add by nurul 31/1/2019
                                //}
                                if (dataBaru.DISPLAY)
                                {
                                    var retVal = ValidasiHarga(akunMP.NAMA, dataBaru.HJUAL);
                                    if (retVal.status == 0)
                                    {
                                        validPrice = false;
                                        listError.Add(i + "_errortext_" + retVal.message);
                                    }
                                }
                                //end change by Tri 23 agustus 2019, validasi harga 1 function
                                i++;
                                //end add validasi harga per marketplace
                            }
                            if (validPrice)
                            {

                                //add by calvin 1 maret 2019
                                Dictionary<string, string> extra_image_uploaded = new Dictionary<string, string>();
                                Dictionary<int, string> same_uploaded = new Dictionary<int, string>();
                                if (Request.Files.Count > 0)
                                {
                                    for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                                    {
                                        string key = Request.Files.GetKey(file_index);
                                        string[] key_split = key.Split(';');
                                        if (key_split.Count() > 1)
                                        {
                                            #region Extra Image
                                            int urutan = Convert.ToInt32(key_split[0]);
                                            int idmarket = Convert.ToInt32(key_split[1]);
                                            var file = Request.Files[file_index];

                                            if (file != null && file.ContentLength > 0)
                                            {
                                                if (!same_uploaded.ContainsKey(file.ContentLength))
                                                {
                                                    ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                                    same_uploaded.Add(file.ContentLength, image.data.link_l);
                                                    extra_image_uploaded.Add(Convert.ToString(urutan) + ";" + Convert.ToString(idmarket) + ";" + Convert.ToString(file.ContentLength), image.data.link_l);
                                                }
                                                else
                                                {
                                                    extra_image_uploaded.Add(Convert.ToString(urutan) + ";" + Convert.ToString(idmarket) + ";" + Convert.ToString(file.ContentLength), same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value);
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                //end add by calvin 1 maret 2019

                                foreach (var dataBaru in dataBarang.ListHargaJualPermarket)
                                {
                                    var dataHarga = ErasoftDbContext.STF02H.SingleOrDefault(h => h.RecNum == dataBaru.RecNum);
                                    if (dataHarga == null)
                                    {
                                        dataBaru.BRG = barangInDb.BRG;

                                        //add by calvin 1 maret 2019
                                        if (extra_image_uploaded.Count() > 0)
                                        {
                                            foreach (var extra_image in extra_image_uploaded)
                                            {
                                                string[] key_split = extra_image.Key.Split(';');
                                                int urutan = Convert.ToInt32(key_split[0]);
                                                int idmarket = Convert.ToInt32(key_split[1]);
                                                string idGambar = Convert.ToString(key_split[2]);
                                                if (idmarket == dataBaru.IDMARKET)
                                                {
                                                    switch (urutan)
                                                    {
                                                        case 1:
                                                            dataBaru.ACODE_50 = idGambar;
                                                            dataBaru.AVALUE_50 = extra_image.Value;
                                                            break;
                                                        case 2:
                                                            dataBaru.ACODE_49 = idGambar;
                                                            dataBaru.AVALUE_49 = extra_image.Value;
                                                            break;
                                                        case 3:
                                                            dataBaru.ACODE_48 = idGambar;
                                                            dataBaru.AVALUE_48 = extra_image.Value;
                                                            break;
                                                        //add 13/9/2019, 5 gambar
                                                        case 4:
                                                            dataBaru.SIZE_GAMBAR_4 = idGambar;
                                                            dataBaru.LINK_GAMBAR_4 = extra_image.Value;
                                                            break;
                                                        case 5:
                                                            dataBaru.SIZE_GAMBAR_5 = idGambar;
                                                            dataBaru.LINK_GAMBAR_5 = extra_image.Value;
                                                            break;
                                                            //end add 13/9/2019, 5 gambar
                                                    }
                                                }
                                            }
                                        }
                                        //end add by calvin 1 maret 2019

                                        ErasoftDbContext.STF02H.Add(dataBaru);
                                    }
                                    else
                                    {
                                        //add by Tri update harga di marketplace
                                        if (dataHarga.HJUAL != dataBaru.HJUAL)
                                        {
                                            updateHarga = true;
                                        }
                                        //end add by Tri update harga di marketplace
                                        dataHarga.HJUAL = dataBaru.HJUAL;

                                        if (dataHarga.DISPLAY != dataBaru.DISPLAY)
                                        {
                                            updateDisplay = true;
                                        }
                                        dataHarga.DISPLAY = dataBaru.DISPLAY;
                                        #region Category && Attribute
                                        dataHarga.CATEGORY_CODE = dataBaru.CATEGORY_CODE;
                                        dataHarga.CATEGORY_NAME = dataBaru.CATEGORY_NAME;
                                        dataHarga.DeliveryTempElevenia = dataBaru.DeliveryTempElevenia;
                                        dataHarga.PICKUP_POINT = dataBaru.PICKUP_POINT;
                                        dataHarga.ACODE_1 = dataBaru.ACODE_1;
                                        dataHarga.ACODE_2 = dataBaru.ACODE_2;
                                        dataHarga.ACODE_3 = dataBaru.ACODE_3;
                                        dataHarga.ACODE_4 = dataBaru.ACODE_4;
                                        dataHarga.ACODE_5 = dataBaru.ACODE_5;
                                        dataHarga.ACODE_6 = dataBaru.ACODE_6;
                                        dataHarga.ACODE_7 = dataBaru.ACODE_7;
                                        dataHarga.ACODE_8 = dataBaru.ACODE_8;
                                        dataHarga.ACODE_9 = dataBaru.ACODE_9;
                                        dataHarga.ACODE_10 = dataBaru.ACODE_10;
                                        dataHarga.ACODE_11 = dataBaru.ACODE_11;
                                        dataHarga.ACODE_12 = dataBaru.ACODE_12;
                                        dataHarga.ACODE_13 = dataBaru.ACODE_13;
                                        dataHarga.ACODE_14 = dataBaru.ACODE_14;
                                        dataHarga.ACODE_15 = dataBaru.ACODE_15;
                                        dataHarga.ACODE_16 = dataBaru.ACODE_16;
                                        dataHarga.ACODE_17 = dataBaru.ACODE_17;
                                        dataHarga.ACODE_18 = dataBaru.ACODE_18;
                                        dataHarga.ACODE_19 = dataBaru.ACODE_19;
                                        dataHarga.ACODE_20 = dataBaru.ACODE_20;
                                        dataHarga.ACODE_21 = dataBaru.ACODE_21;
                                        dataHarga.ACODE_22 = dataBaru.ACODE_22;
                                        dataHarga.ACODE_23 = dataBaru.ACODE_23;
                                        dataHarga.ACODE_24 = dataBaru.ACODE_24;
                                        dataHarga.ACODE_25 = dataBaru.ACODE_25;
                                        dataHarga.ACODE_26 = dataBaru.ACODE_26;
                                        dataHarga.ACODE_27 = dataBaru.ACODE_27;
                                        dataHarga.ACODE_28 = dataBaru.ACODE_28;
                                        dataHarga.ACODE_29 = dataBaru.ACODE_29;
                                        dataHarga.ACODE_30 = dataBaru.ACODE_30;
                                        dataHarga.ACODE_31 = dataBaru.ACODE_31;
                                        dataHarga.ACODE_32 = dataBaru.ACODE_32;
                                        dataHarga.ACODE_33 = dataBaru.ACODE_33;
                                        dataHarga.ACODE_34 = dataBaru.ACODE_34;
                                        dataHarga.ACODE_35 = dataBaru.ACODE_35;
                                        dataHarga.ACODE_36 = dataBaru.ACODE_36;
                                        dataHarga.ACODE_37 = dataBaru.ACODE_37;
                                        dataHarga.ACODE_38 = dataBaru.ACODE_38;
                                        dataHarga.ACODE_39 = dataBaru.ACODE_39;
                                        dataHarga.ACODE_40 = dataBaru.ACODE_40;
                                        dataHarga.ACODE_41 = dataBaru.ACODE_41;
                                        dataHarga.ACODE_42 = dataBaru.ACODE_42;
                                        dataHarga.ACODE_43 = dataBaru.ACODE_43;
                                        dataHarga.ACODE_44 = dataBaru.ACODE_44;
                                        dataHarga.ACODE_45 = dataBaru.ACODE_45;
                                        dataHarga.ACODE_46 = dataBaru.ACODE_46;
                                        dataHarga.ACODE_47 = dataBaru.ACODE_47;
                                        //remark by calvin 1 maret 2019, dipakai untuk gambar
                                        //dataHarga.ACODE_48 = dataBaru.ACODE_48;
                                        //dataHarga.ACODE_49 = dataBaru.ACODE_49;
                                        //dataHarga.ACODE_50 = dataBaru.ACODE_50;
                                        //remark by calvin 1 maret 2019, dipakai untuk gambar

                                        dataHarga.ANAME_1 = dataBaru.ANAME_1;
                                        dataHarga.ANAME_2 = dataBaru.ANAME_2;
                                        dataHarga.ANAME_3 = dataBaru.ANAME_3;
                                        dataHarga.ANAME_4 = dataBaru.ANAME_4;
                                        dataHarga.ANAME_5 = dataBaru.ANAME_5;
                                        dataHarga.ANAME_6 = dataBaru.ANAME_6;
                                        dataHarga.ANAME_7 = dataBaru.ANAME_7;
                                        dataHarga.ANAME_8 = dataBaru.ANAME_8;
                                        dataHarga.ANAME_9 = dataBaru.ANAME_9;
                                        dataHarga.ANAME_10 = dataBaru.ANAME_10;
                                        dataHarga.ANAME_11 = dataBaru.ANAME_11;
                                        dataHarga.ANAME_12 = dataBaru.ANAME_12;
                                        dataHarga.ANAME_13 = dataBaru.ANAME_13;
                                        dataHarga.ANAME_14 = dataBaru.ANAME_14;
                                        dataHarga.ANAME_15 = dataBaru.ANAME_15;
                                        dataHarga.ANAME_16 = dataBaru.ANAME_16;
                                        dataHarga.ANAME_17 = dataBaru.ANAME_17;
                                        dataHarga.ANAME_18 = dataBaru.ANAME_18;
                                        dataHarga.ANAME_19 = dataBaru.ANAME_19;
                                        dataHarga.ANAME_20 = dataBaru.ANAME_20;
                                        dataHarga.ANAME_21 = dataBaru.ANAME_21;
                                        dataHarga.ANAME_22 = dataBaru.ANAME_22;
                                        dataHarga.ANAME_23 = dataBaru.ANAME_23;
                                        dataHarga.ANAME_24 = dataBaru.ANAME_24;
                                        dataHarga.ANAME_25 = dataBaru.ANAME_25;
                                        dataHarga.ANAME_26 = dataBaru.ANAME_26;
                                        dataHarga.ANAME_27 = dataBaru.ANAME_27;
                                        dataHarga.ANAME_28 = dataBaru.ANAME_28;
                                        dataHarga.ANAME_29 = dataBaru.ANAME_29;
                                        dataHarga.ANAME_30 = dataBaru.ANAME_30;
                                        dataHarga.ANAME_31 = dataBaru.ANAME_31;
                                        dataHarga.ANAME_32 = dataBaru.ANAME_32;
                                        dataHarga.ANAME_33 = dataBaru.ANAME_33;
                                        dataHarga.ANAME_34 = dataBaru.ANAME_34;
                                        dataHarga.ANAME_35 = dataBaru.ANAME_35;
                                        dataHarga.ANAME_36 = dataBaru.ANAME_36;
                                        dataHarga.ANAME_37 = dataBaru.ANAME_37;
                                        dataHarga.ANAME_38 = dataBaru.ANAME_38;
                                        dataHarga.ANAME_39 = dataBaru.ANAME_39;
                                        dataHarga.ANAME_40 = dataBaru.ANAME_40;
                                        dataHarga.ANAME_41 = dataBaru.ANAME_41;
                                        dataHarga.ANAME_42 = dataBaru.ANAME_42;
                                        dataHarga.ANAME_43 = dataBaru.ANAME_43;
                                        dataHarga.ANAME_44 = dataBaru.ANAME_44;
                                        dataHarga.ANAME_45 = dataBaru.ANAME_45;
                                        dataHarga.ANAME_46 = dataBaru.ANAME_46;
                                        dataHarga.ANAME_47 = dataBaru.ANAME_47;
                                        //remark by calvin 1 maret 2019, dipakai untuk gambar
                                        //dataHarga.ANAME_48 = dataBaru.ANAME_48;
                                        //dataHarga.ANAME_49 = dataBaru.ANAME_49;
                                        //dataHarga.ANAME_50 = dataBaru.ANAME_50;
                                        //remark by calvin 1 maret 2019, dipakai untuk gambar

                                        dataHarga.AVALUE_1 = dataBaru.AVALUE_1;
                                        dataHarga.AVALUE_2 = dataBaru.AVALUE_2;
                                        dataHarga.AVALUE_3 = dataBaru.AVALUE_3;
                                        dataHarga.AVALUE_4 = dataBaru.AVALUE_4;
                                        dataHarga.AVALUE_5 = dataBaru.AVALUE_5;
                                        dataHarga.AVALUE_6 = dataBaru.AVALUE_6;
                                        dataHarga.AVALUE_7 = dataBaru.AVALUE_7;
                                        dataHarga.AVALUE_8 = dataBaru.AVALUE_8;
                                        dataHarga.AVALUE_9 = dataBaru.AVALUE_9;
                                        dataHarga.AVALUE_10 = dataBaru.AVALUE_10;
                                        dataHarga.AVALUE_11 = dataBaru.AVALUE_11;
                                        dataHarga.AVALUE_12 = dataBaru.AVALUE_12;
                                        dataHarga.AVALUE_13 = dataBaru.AVALUE_13;
                                        dataHarga.AVALUE_14 = dataBaru.AVALUE_14;
                                        dataHarga.AVALUE_15 = dataBaru.AVALUE_15;
                                        dataHarga.AVALUE_16 = dataBaru.AVALUE_16;
                                        dataHarga.AVALUE_17 = dataBaru.AVALUE_17;
                                        dataHarga.AVALUE_18 = dataBaru.AVALUE_18;
                                        dataHarga.AVALUE_19 = dataBaru.AVALUE_19;
                                        dataHarga.AVALUE_20 = dataBaru.AVALUE_20;
                                        dataHarga.AVALUE_21 = dataBaru.AVALUE_21;
                                        dataHarga.AVALUE_22 = dataBaru.AVALUE_22;
                                        dataHarga.AVALUE_23 = dataBaru.AVALUE_23;
                                        dataHarga.AVALUE_24 = dataBaru.AVALUE_24;
                                        dataHarga.AVALUE_25 = dataBaru.AVALUE_25;
                                        dataHarga.AVALUE_26 = dataBaru.AVALUE_26;
                                        dataHarga.AVALUE_27 = dataBaru.AVALUE_27;
                                        dataHarga.AVALUE_28 = dataBaru.AVALUE_28;
                                        dataHarga.AVALUE_29 = dataBaru.AVALUE_29;
                                        dataHarga.AVALUE_30 = dataBaru.AVALUE_30;
                                        dataHarga.AVALUE_31 = dataBaru.AVALUE_31;
                                        dataHarga.AVALUE_32 = dataBaru.AVALUE_32;
                                        dataHarga.AVALUE_33 = dataBaru.AVALUE_33;
                                        dataHarga.AVALUE_34 = dataBaru.AVALUE_34;
                                        dataHarga.AVALUE_35 = dataBaru.AVALUE_35;
                                        dataHarga.AVALUE_36 = dataBaru.AVALUE_36;
                                        dataHarga.AVALUE_37 = dataBaru.AVALUE_37;
                                        dataHarga.AVALUE_38 = dataBaru.AVALUE_38;
                                        dataHarga.AVALUE_39 = dataBaru.AVALUE_39;
                                        dataHarga.AVALUE_40 = dataBaru.AVALUE_40;
                                        dataHarga.AVALUE_41 = dataBaru.AVALUE_41;
                                        dataHarga.AVALUE_42 = dataBaru.AVALUE_42;
                                        dataHarga.AVALUE_43 = dataBaru.AVALUE_43;
                                        dataHarga.AVALUE_44 = dataBaru.AVALUE_44;
                                        dataHarga.AVALUE_45 = dataBaru.AVALUE_45;
                                        dataHarga.AVALUE_46 = dataBaru.AVALUE_46;
                                        dataHarga.AVALUE_47 = dataBaru.AVALUE_47;
                                        //remark by calvin 1 maret 2019, dipakai untuk gambar
                                        //dataHarga.AVALUE_48 = dataBaru.AVALUE_48;
                                        //dataHarga.AVALUE_49 = dataBaru.AVALUE_49;
                                        //dataHarga.AVALUE_50 = dataBaru.AVALUE_50;
                                        //end remark by calvin 1 maret 2019
                                        #endregion

                                        //add by calvin 1 maret 2019
                                        if (extra_image_uploaded.Count() > 0)
                                        {
                                            foreach (var extra_image in extra_image_uploaded)
                                            {
                                                string[] key_split = extra_image.Key.Split(';');
                                                int urutan = Convert.ToInt32(key_split[0]);
                                                int idmarket = Convert.ToInt32(key_split[1]);
                                                string idGambar = Convert.ToString(key_split[2]);
                                                if (idmarket == dataHarga.IDMARKET)
                                                {
                                                    switch (urutan)
                                                    {
                                                        case 1:
                                                            dataHarga.ACODE_50 = idGambar;
                                                            dataHarga.AVALUE_50 = extra_image.Value;
                                                            break;
                                                        case 2:
                                                            dataHarga.ACODE_49 = idGambar;
                                                            dataHarga.AVALUE_49 = extra_image.Value;
                                                            break;
                                                        case 3:
                                                            dataHarga.ACODE_48 = idGambar;
                                                            dataHarga.AVALUE_48 = extra_image.Value;
                                                            break;
                                                        //add 13/9/2019, 5 gambar
                                                        case 4:
                                                            dataHarga.SIZE_GAMBAR_4 = idGambar;
                                                            dataHarga.LINK_GAMBAR_4 = extra_image.Value;
                                                            break;
                                                        case 5:
                                                            dataHarga.SIZE_GAMBAR_5 = idGambar;
                                                            dataHarga.LINK_GAMBAR_5 = extra_image.Value;
                                                            break;
                                                            //end add 13/9/2019, 5 gambar
                                                    }
                                                }
                                            }
                                        }
                                        //end add by calvin 1 maret 2019
                                    }
                                }
                            }
                            else
                            {
                                dataBarang.errorHargaPerMP = "1";
                                dataBarang.Errors = listError;
                                return Json(dataBarang, JsonRequestBehavior.AllowGet);
                            }
                        }

                        if (Request.Files.Count > 0)
                        {
                            //add 6/9/2019, 5 gambar
                            //for (int i = 0; i < 3; i++)
                            for (int i = 0; i < Request.Files.Count; i++)
                            //end add 6/9/2019, 5 gambar
                            {
                                var file = Request.Files[i];

                                if (file != null && file.ContentLength > 0 && Request.Files.GetKey(i).Contains("foto_produk"))
                                {
                                    //var namaFile = $"FotoProduk-{dataBarang.Stf02.USERNAME}-BRG{barangInDb.BRG}-foto-{i + 1}";
                                    ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");

                                    //updateGambar = true;
                                    //var fileExtension = Path.GetExtension(file.FileName);
                                    //var namaFile = $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}{fileExtension}";
                                    //var path = Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile);
                                    //file.SaveAs(path);
                                    ////add by tri
                                    //imgPath[i] = path;

                                    imgPath[i] = image.data.link;

                                    switch (i)
                                    {
                                        case 0:
                                            barangInDb.LINK_GAMBAR_1 = image.data.link_l;
                                            barangInDb.Sort5 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 1:
                                            barangInDb.LINK_GAMBAR_2 = image.data.link_l;
                                            barangInDb.Sort6 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 2:
                                            barangInDb.LINK_GAMBAR_3 = image.data.link_l;
                                            barangInDb.Sort7 = Convert.ToString(file.ContentLength);
                                            break;
                                        //add 6/9/2019, 5 gambar
                                        case 3:
                                            barangInDb.LINK_GAMBAR_4 = image.data.link_l;
                                            barangInDb.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 4:
                                            barangInDb.LINK_GAMBAR_5 = image.data.link_l;
                                            barangInDb.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                            break;
                                            //end add 6/9/2019, 5 gambar
                                    }
                                }
                            }
                        }
                        //add by calvin 16 nov 2018, imgpath saat update
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            switch (i)
                            {
                                case 0:
                                    imgPath[0] = barangInDb.LINK_GAMBAR_1;
                                    break;
                                case 1:
                                    imgPath[1] = barangInDb.LINK_GAMBAR_2;
                                    break;
                                case 2:
                                    imgPath[2] = barangInDb.LINK_GAMBAR_3;
                                    break;
                                //add 6/9/2019, 5 gambar
                                case 3:
                                    imgPath[3] = barangInDb.LINK_GAMBAR_4;
                                    break;
                                case 4:
                                    imgPath[4] = barangInDb.LINK_GAMBAR_5;
                                    break;
                                    //end add 6/9/2019, 5 gambar
                            }
                        }
                        //end add by calvin

                        //add by nurul 3/9/2020
                        if (dataBarang.Stf02.TYPE == "6")
                        {
                            dataBarang.Stf02.BRG = barangInDb.BRG;
                            var cekMultiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == dataBarang.Stf02.BRG_NON_OS && a.BRG == dataBarang.Stf02.BRG).Count();
                            if (cekMultiSKU == 0)
                            {
                                var Stf03c = new STF03C() { };
                                //Stf03c.BRG = dataBarang.Stf02.BRG;
                                Stf03c.BRG = barangInDb.BRG;
                                Stf03c.BRG_ACUAN = dataBarang.Stf02.BRG_NON_OS;
                                Stf03c.TGL_EDIT = DateTime.UtcNow.AddHours(7);
                                Stf03c.USERNAME = dataBarang.Stf02.USERNAME;
                                ErasoftDbContext.STF03C.Add(Stf03c);
                            }
                        }

                        if(tempType == "6" && dataBarang.Stf02.TYPE != "6")
                        {
                            var cekStf03c = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == dataBarang.Stf02.BRG_NON_OS && a.BRG == barangInDb.BRG).SingleOrDefault();
                            if(cekStf03c != null)
                            {
                                ErasoftDbContext.STF03C.Remove(cekStf03c);
                            }
                        }
                        //end add by nurul 3/9/2020
                    }
                }

                ErasoftDbContext.SaveChanges();
                //add by Tri, 24 sept 2020
                cekStf02hDuplikat(dataBarang.Stf02);
                //end add by Tri, 24 sept 2020

                //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
                //bool doAPI = false;
                //if (DataUsaha != null)
                //{
                //    if (DataUsaha.JTRAN_RETUR == "1")
                //    {
                //        doAPI = true;
                //    }
                //}
                //if (doAPI)
                //{

                //add by nurul 7/9/2020, langsung update stok u/ brg multi sku 
                if (dataBarang.Stf02.TYPE == "6")
                {
                    List<string> listBrg = new List<string>();
                    listBrg.Add(dataBarang.Stf02.BRG);
                    updateStockMarketPlace(listBrg, "[BRG_MULTI][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                }
                //end add by nurul 7/9/2020, langsung update stok u/ brg multi sku 

                #region Sync ke Marketplace
                //var kdBL = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK");//moved to top
                var listBLShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBL.IdMarket.ToString()).ToList();
                //var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");//moved to top
                var listLazadaShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLazada.IdMarket.ToString()).ToList();
                string[] imageUrl = new string[Request.Files.Count];//variabel penampung url image hasil upload ke markeplace
                var lzdApi = new LazadaController();
                var blApi = new BukaLapakController();

                //add by tri call marketplace api to create product
                if (insert)
                {
                    var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
                    #region lazada
                    if (listLazadaShop.Count > 0)
                    {
                        foreach (ARF01 tblCustomer in listLazadaShop)
                        {
                            createBarangLazada(dataBarang, imgPath, tblCustomer, 1);

                            //        var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
                            //        if (!string.IsNullOrEmpty(tblCustomer.TOKEN) && productMarketPlace.DISPLAY)
                            //        {
                            //            //string[] imageUrl = new string[Request.Files.Count];
                            //            for (int i = 0; i < imgPath.Length; i++)
                            //            {
                            //                if (!string.IsNullOrEmpty(imgPath[i]))
                            //                {
                            //                    var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                            //                    if (uploadImg.status == 1)
                            //                        imageUrl[i] = uploadImg.message;
                            //                }
                            //            }

                            //            //string[] imgID = new string[3];
                            //            //for (int i = 0; i < 3; i++)
                            //            //{
                            //            //    //    if (!string.IsNullOrEmpty(imgPath[i]))
                            //            //    //    {
                            //            //    imageUrl[i] = "http://masteronline.co.id/ele/image?id=" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}.jpg";
                            //            //    imageUrl[i] = Convert.ToString(imageUrl[i]).Replace(" ", "%20");
                            //            //    //    }
                            //            //}

                            //            BrgViewModel dataLazada = new BrgViewModel
                            //            {
                            //                deskripsi = dataBarang.Stf02.Deskripsi,
                            //                harga = dataBarang.Stf02.HJUAL.ToString(),
                            //                height = dataBarang.Stf02.TINGGI.ToString(),
                            //                kdBrg = barangInDb.BRG,
                            //                length = dataBarang.Stf02.PANJANG.ToString(),
                            //                nama = dataBarang.Stf02.NAMA,
                            //                nama2 = dataBarang.Stf02.NAMA2,
                            //                weight = dataBarang.Stf02.BERAT.ToString(),
                            //                width = dataBarang.Stf02.LEBAR.ToString(),
                            //                user = tblCustomer.EMAIL,
                            //                key = tblCustomer.API_KEY,
                            //                qty = "1",
                            //                token = tblCustomer.TOKEN,
                            //                idMarket = tblCustomer.RecNum.ToString(),
                            //            };

                            //            ////string[] imgID = new string[3];
                            //            ////if (Request.Files.Count > 0)
                            //            ////{
                            //            //for (int i = 0; i < 3; i++)
                            //            //{
                            //            //    //var file = Request.Files[i];

                            //            //    //if (file != null && file.ContentLength > 0)
                            //            //    //{
                            //            //    //    var fileExtension = Path.GetExtension(file.FileName);
                            //            //    imageUrl[i] = "http://masteronline.co.id/ele/image?id=" + $"FotoProduk-{dataBarang.Username}-{dataBarang.Stf02.BRG}-foto-{i + 1}.jpg";
                            //            //    imageUrl[i] = Convert.ToString(imageUrl[i]).Replace(" ", "%20");
                            //            //    //}
                            //            //}

                            //            dataLazada.merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                            //            //var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
                            //            dataLazada.harga = productMarketPlace.HJUAL.ToString();
                            //            dataLazada.activeProd = productMarketPlace.DISPLAY;

                            //            if (!string.IsNullOrEmpty(imageUrl[2]))
                            //            {
                            //                dataLazada.imageUrl3 = imageUrl[2];
                            //            }
                            //            if (!string.IsNullOrEmpty(imageUrl[1]))
                            //            {
                            //                dataLazada.imageUrl2 = imageUrl[1];
                            //            }
                            //            if (!string.IsNullOrEmpty(imageUrl[0]))
                            //            {
                            //                dataLazada.imageUrl = imageUrl[0];
                            //            }
                            //            var result = lzdApi.CreateProduct(dataLazada);
                            //        }

                        }
                    }
                    #endregion
                    #region Bukalapak
                    //var kdBL = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
                    //var listBLShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBL.IdMarket.ToString()).ToList();
                    if (listBLShop.Count > 0)
                    {
                        foreach (ARF01 tblCustomer in listBLShop)
                        {
                            var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
                            if (productMarketPlace.DISPLAY)
                            {
                                createBarangBukaLapak(dataBarang, imgPath, tblCustomer);
                                //string[] imgID = new string[Request.Files.Count];
                                //for (int i = 0; i < imgPath.Length; i++)
                                //{
                                //    if (!string.IsNullOrEmpty(imgPath[i]))
                                //    {
                                //        var uploadImg = blApi.uploadGambar(imgPath[i], tblCustomer.API_KEY, tblCustomer.TOKEN);
                                //        if (uploadImg.status == 1)
                                //            imgID[i] = uploadImg.message;
                                //    }
                                //}
                                //BrgViewModel data = new BrgViewModel
                                //{
                                //    deskripsi = dataBarang.Stf02.Deskripsi,
                                //    harga = dataBarang.Stf02.HJUAL.ToString(),
                                //    height = dataBarang.Stf02.TINGGI.ToString(),
                                //    kdBrg = barangInDb.BRG,
                                //    length = dataBarang.Stf02.PANJANG.ToString(),
                                //    nama = dataBarang.Stf02.NAMA,
                                //    nama2 = dataBarang.Stf02.NAMA2,
                                //    weight = dataBarang.Stf02.BERAT.ToString(),
                                //    width = dataBarang.Stf02.LEBAR.ToString(),
                                //    user = tblCustomer.EMAIL,
                                //    key = tblCustomer.API_KEY,
                                //    qty = "1",
                                //    token = tblCustomer.TOKEN,
                                //    idMarket = tblCustomer.RecNum.ToString(),
                                //    //merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET
                                //};
                                //data.merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                                ////var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
                                //data.harga = productMarketPlace.HJUAL.ToString();
                                //if (!string.IsNullOrEmpty(imgID[2]))
                                //{
                                //    data.imageId3 = imgID[2];
                                //}
                                //if (!string.IsNullOrEmpty(imgID[1]))
                                //{
                                //    data.imageId2 = imgID[1];
                                //}
                                //if (!string.IsNullOrEmpty(imgID[0]))
                                //{
                                //    data.imageId = imgID[0];
                                //}

                                //var result = blApi.CreateProduct(data);
                                //if (result.status == 1)
                                //    if (!productMarketPlace.DISPLAY)
                                //    {
                                //        //panggil api utk non-aktif barang yg baru di insert
                                //        result = blApi.prodNonAktif(barangInDb.BRG, result.message, tblCustomer.API_KEY, tblCustomer.TOKEN);
                                //    }
                            }

                        }
                    }
                    #endregion
                    #region Elevenia
                    saveBarangElevenia(1, dataBarang, imgPath);
                    #endregion
                    #region Blibli
                    saveBarangBlibli(1, dataBarang);
                    #endregion
                    saveBarangShopee(1, dataBarang, false);
                    saveBarangTokpedVariant(1, barangInDb.BRG, false);
                    #region SHOPIFY
                    saveBarangShopify(1, dataBarang);
                    #endregion
                    //add by fauzi for 82Cart
                    //saveBarang82Cart(1, dataBarang, false);
                    saveBarang82CartVariant(1, barangInDb.BRG, false);
                    //end add by fauzi for 82Cart
                }
                //end add by tri call marketplace api to create product
                else
                {
                    //saveBarangBlibli(1, dataBarang);
                    //update harga, qty, dll

                    saveBarangBlibli(2, dataBarang);
                    saveBarangElevenia(2, dataBarang, imgPath);
                    saveBarangShopee(2, dataBarang, updateHarga);
                    saveBarangShopify(2, dataBarang);



                    //get image
                    var barang = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);
                    //string[] picPath = new string[3];
                    //for (int i = 0; i < 3; i++)
                    //{
                    //    string picName = $"FotoProduk-{barang.USERNAME}-{barang.BRG}-foto-{i + 1}.jpg";
                    //    if (System.IO.File.Exists(Server.MapPath("/Content/Uploaded/" + picName)))
                    //    {
                    //        picPath[i] = Server.MapPath("/Content/Uploaded/" + picName);
                    //    }
                    //}
                    //end get image

                    //add by fauzi for 82Cart
                    //saveBarang82Cart(2, dataBarang, false);
                    saveBarang82CartVariant(2, barang.BRG, false);
                    //end add by fauzi for 82Cart

                    saveBarangTokpedVariant(2, barang.BRG, false);


                    #region lazada
                    if (listLazadaShop.Count > 0)
                    {
                        foreach (ARF01 tblCustomer in listLazadaShop)
                        {
                            if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
                            {
                                var tokoLazada = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                                if (tokoLazada.DISPLAY && string.IsNullOrEmpty(tokoLazada.BRG_MP))//display = true and brg_mp = null -> create product
                                {
                                    createBarangLazada(dataBarang, imgPath, tblCustomer, 1);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(tokoLazada.BRG_MP))
                                    {
                                        //if (updateDisplay)
                                        //{
                                        //    var resultLazada = lzdApi.setDisplay(tokoLazada.BRG_MP, tokoLazada.DISPLAY, tblCustomer.TOKEN);
                                        //}
                                        //if (updateHarga)
                                        //{
                                        //    var resultLazada = lzdApi.UpdatePriceQuantity(tokoLazada.BRG_MP, tokoLazada.HJUAL.ToString(), "", tblCustomer.TOKEN);
                                        //}
                                        //update brg
                                        createBarangLazada(dataBarang, imgPath, tblCustomer, 2);

                                    }
                                }
                            }
                        }
                    }
                    #endregion
                    if (updateDisplay)
                    {
                        #region Elevenia
                        saveBarangElevenia(3, dataBarang, imgPath);
                        #endregion
                        #region Bukalapak
                        if (listBLShop.Count > 0)
                        {
                            foreach (ARF01 tblCustomer in listBLShop)
                            {
                                var tokoBl = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                                if (tokoBl.DISPLAY)
                                {
                                    if (string.IsNullOrEmpty(tokoBl.BRG_MP))
                                    {
                                        createBarangBukaLapak(dataBarang, imgPath, tblCustomer);
                                    }
                                    else
                                    {
                                        var result = blApi.prodAktif(barang.BRG, tokoBl.BRG_MP, tblCustomer.API_KEY, tblCustomer.TOKEN);
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(tokoBl.BRG_MP))
                                    {
                                        var result = blApi.prodNonAktif(barang.BRG, tokoBl.BRG_MP, tblCustomer.API_KEY, tblCustomer.TOKEN);
                                    }

                                }

                            }
                        }
                        #endregion
                    }
                    if (updateHarga)
                    {
                        #region Bukalapak
                        if (listBLShop.Count > 0)
                        {
                            foreach (ARF01 tblCustomer in listBLShop)
                            {
                                //var barang = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);
                                var tokoBl = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                                var resultBL = blApi.updateProduk(barang.BRG, tokoBl.BRG_MP, tokoBl.HJUAL.ToString(), "", tblCustomer.API_KEY, tblCustomer.TOKEN);
                            }
                        }

                        #endregion
                    }
                }
                #endregion
                //}
                ModelState.Clear();

                //remark by calvin 23 april 2019
                //var partialVm = new BarangViewModel()
                //{
                ////change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList(),
                //ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),
                //ListHargaJualPermarketView = ErasoftDbContext.STF02H.Where(p => 0 == 1).OrderBy(p => p.IDMARKET).ToList(),
                //};
                //end remark by calvin 23 april 2019

                //change by calvin 23 april 2019
                //return PartialView("TableBarang1Partial", partialVm);
                dataBarang.Errors = null;
                return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //end change by calvin 23 april 2019
                //add by nurul 21/6/2019, validasi berat,p,l,t
            }
            catch (Exception ex)
            {
                return View("Error");
            }
            //end add by nurul 21/6/2019, validasi berat,p,l,t
        }

        [HttpPost]
        public ActionResult SaveBarangInduk(BarangViewModel dataBarang)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    dataBarang.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                }

                //add by nurul 21/6/2019, validasi berat,p,l,t
                //if (dataBarang.Stf02.BERAT <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Berat tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                //if (dataBarang.Stf02.PANJANG <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Panjang tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                //if (dataBarang.Stf02.LEBAR <= 0)
                //{
                //    List<string> listError = new List<string>();
                //    listError.Add("Lebar tidak boleh kurang atau sama dengan 0 !");
                //    dataBarang.Errors = listError;
                //    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                //}
                if (dataBarang.Stf02.BERAT <= 0 || dataBarang.Stf02.PANJANG <= 0 || dataBarang.Stf02.LEBAR <= 0 || dataBarang.Stf02.TINGGI <= 0)
                {
                    List<string> listError = new List<string>();
                    listError.Add("Berat, panjang, lebar dan tinggi tidak boleh kurang atau sama dengan 0 !");
                    dataBarang.Errors = listError;
                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                }
                //end add by nurul 21/6/2019, validasi berat,p,l,t

                //add by nurul 28/8/2020
                if (dataBarang.Stf02.KUBILASI.ToString() == "1" || dataBarang.Stf02.BRG_NON_OS != "" || dataBarang.Stf02.BRG_NON_OS != null)
                {
                    dataBarang.Stf02.KUBILASI = 0;
                    dataBarang.Stf02.BRG_NON_OS = "";
                }
                //end add by nurul 28/8/2020

                string KodeBarang = "";
                bool insert = false;//add by Tri
                bool updateHarga = false;//add by Tri
                bool updateDisplay = false;//add by Tri
                bool updateGambar = false;//add by Tri
                var Marketplaces = MoDbContext.Marketplaces.ToList();
                var kdBL = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
                var kdLazada = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
                var kdBlibli = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI");
                var kdElevenia = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA");
                var kdShopee = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");
                var kdTokped = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
                var kd82Cart = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "82CART");
                var kdShopify = Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPIFY");
                var validPrice = true;

                string[] imgPath = new string[Request.Files.Count];
                if (dataBarang.Stf02.ID == null)
                {
                    insert = true;
                    KodeBarang = dataBarang.Stf02.BRG;
                    if (ErasoftDbContext.STF02.Where(p => p.BRG.ToUpper() == KodeBarang.ToUpper()).FirstOrDefault() != null)
                    {
                        List<string> listError = new List<string>();
                        listError.Add("Kode " + KodeBarang + " sudah digunakan oleh barang lain.");
                        dataBarang.Errors = listError;
                        return Json(dataBarang, JsonRequestBehavior.AllowGet);
                    }
                    if (dataBarang.ListHargaJualPermarket?.Count > 0)
                    {
                        List<string> listError = new List<string>();
                        int i = 0;
                        List<int> processedIdMarket = new List<int>();
                        //add by Tri, 24 sept 2020
                        cekStf02hDuplikat(dataBarang.Stf02);
                        //end add by Tri, 24 sept 2020
                        foreach (var hargaPerMarket in dataBarang.ListHargaJualPermarket)
                        {
                            if (hargaPerMarket.DISPLAY)
                            {
                                if (!processedIdMarket.Contains(hargaPerMarket.IDMARKET))
                                {
                                    processedIdMarket.Add(hargaPerMarket.IDMARKET);

                                    var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == hargaPerMarket.IDMARKET).SingleOrDefault().NAMA;
                                    //change by Tri 23 agustus 2019, validasi harga 1 function
                                    //if (kdMarket == kdLazada.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 3000)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 3000.");
                                    //    }
                                    //    //else if (hargaPerMarket.HJUAL % 100 != 0)
                                    //    //{
                                    //    //    validPrice = false;
                                    //    //    listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                    //    //}
                                    //}
                                    //else if (kdMarket == kdBlibli.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 1100)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual minimal 1100.");
                                    //    }
                                    //}
                                    //else if (kdMarket == kdBL.IdMarket.ToString() || kdMarket == kdElevenia.IdMarket.ToString())
                                    //{
                                    //    if (hargaPerMarket.HJUAL < 100)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 100.");
                                    //    }
                                    //    else if (hargaPerMarket.HJUAL % 100 != 0)
                                    //    {
                                    //        validPrice = false;
                                    //        listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                    //    }
                                    //}
                                    var retVal = ValidasiHarga(kdMarket, hargaPerMarket.HJUAL);
                                    if (retVal.status == 0)
                                    {
                                        validPrice = false;
                                        listError.Add(i + "_errortext_" + retVal.message);
                                    }
                                    //end change by Tri 23 agustus 2019, validasi harga 1 function
                                    i++;
                                }
                            }

                        }
                        if (validPrice)
                        {
                            List<int> protectDuplicateIdMarket = new List<int>();
                            foreach (var hargaPerMarket in dataBarang.ListHargaJualPermarket)
                            {
                                var stf02hInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataBarang.Stf02.BRG).FirstOrDefault();
                                if (stf02hInDB == null)
                                {
                                    if (!protectDuplicateIdMarket.Contains(hargaPerMarket.IDMARKET))
                                    {
                                        protectDuplicateIdMarket.Add(hargaPerMarket.IDMARKET);
                                        hargaPerMarket.BRG = dataBarang.Stf02.BRG;
                                        ErasoftDbContext.STF02H.Add(hargaPerMarket);
                                    }
                                }
                                else
                                {
                                    List<string> listError2 = new List<string>();
                                    listError2.Add("Data barang ada yang terduplikat, Silahkan hubungi Support MO.");
                                    dataBarang.Errors = listError2;
                                    return Json(dataBarang, JsonRequestBehavior.AllowGet);
                                }
                            }
                        }
                        else
                        {
                            dataBarang.errorHargaPerMP = "1";
                            dataBarang.Errors = listError;
                            return Json(dataBarang, JsonRequestBehavior.AllowGet);
                        }

                    }

                    var listMarket = dataBarang.ListMarket.ToList();

                    //remark by Tri, moved to top
                    //add by tri
                    //string[] imgPath = new string[Request.Files.Count];
                    //end add by tri
                    //end remark by Tri, moved to top

                    if (Request.Files.Count > 0)
                    {
                        //change 13/9/19, 5 gambar
                        //for (int i = 0; i < 3; i++)
                        for (int i = 0; i < Request.Files.Count; i++)
                        //end change 13/9/19, 5 gambar
                        {
                            var file = Request.Files[i];

                            if (file != null && file.ContentLength > 0 && Request.Files.GetKey(i).Contains("foto_produk"))
                            {
                                //var namaFile = $"FotoProduk-{dataBarang.Stf02.USERNAME}-BRG{dataBarang.Stf02.BRG}-foto-{i + 1}";
                                ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");

                                //var fileExtension = Path.GetExtension(file.FileName);
                                //var path = Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile);
                                //try
                                //{
                                //    file.SaveAs(path);
                                //}
                                //catch (Exception ex)
                                //{

                                //}
                                //add by tri

                                imgPath[i] = image.data.link;

                                switch (i)
                                {
                                    case 0:
                                        dataBarang.Stf02.LINK_GAMBAR_1 = image.data.link_l;
                                        dataBarang.Stf02.Sort5 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 1:
                                        dataBarang.Stf02.LINK_GAMBAR_2 = image.data.link_l;
                                        dataBarang.Stf02.Sort6 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 2:
                                        dataBarang.Stf02.LINK_GAMBAR_3 = image.data.link_l;
                                        dataBarang.Stf02.Sort7 = Convert.ToString(file.ContentLength);
                                        break;
                                    //add 13/9/19, 5 gambar
                                    case 3:
                                        dataBarang.Stf02.LINK_GAMBAR_4 = image.data.link_l;
                                        dataBarang.Stf02.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                        break;
                                    case 4:
                                        dataBarang.Stf02.LINK_GAMBAR_5 = image.data.link_l;
                                        dataBarang.Stf02.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                        break;
                                        //end add 13/9/19, 5 gambar
                                }
                            }
                        }
                    }

                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        switch (i)
                        {
                            case 0:
                                imgPath[0] = dataBarang.Stf02.LINK_GAMBAR_1;
                                break;
                            case 1:
                                imgPath[1] = dataBarang.Stf02.LINK_GAMBAR_2;
                                break;
                            case 2:
                                imgPath[2] = dataBarang.Stf02.LINK_GAMBAR_3;
                                break;
                            //add 13/9/19, 5 gambar
                            case 3:
                                imgPath[3] = dataBarang.Stf02.LINK_GAMBAR_4;
                                break;
                            case 4:
                                imgPath[4] = dataBarang.Stf02.LINK_GAMBAR_5;
                                break;
                                //end add 13/9/19, 5 gambar
                        }
                    }

                    if (string.IsNullOrWhiteSpace(dataBarang.Stf02.TYPE))
                    {
                        dataBarang.Stf02.TYPE = "4";
                    }

                    //add by nurul 27/11/2019, add tgl last edit
                    dataBarang.Stf02.Tgl_Input = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    ErasoftDbContext.STF02.Add(dataBarang.Stf02);
                }
                else
                {
                    var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);

                    if (barangInDb != null)
                    {
                        //add by Tri 3 jun 2020, update nama barang varian
                        var updateNama = false;
                        if (barangInDb.NAMA != dataBarang.Stf02.NAMA || barangInDb.NAMA2 != dataBarang.Stf02.NAMA2)
                        {
                            updateNama = true;
                        }
                        //end add by Tri 3 jun 2020, update nama barang varian
                        KodeBarang = barangInDb.BRG;
                        barangInDb.NAMA = dataBarang.Stf02.NAMA;
                        barangInDb.NAMA2 = dataBarang.Stf02.NAMA2;
                        barangInDb.MINI = dataBarang.Stf02.MINI;
                        barangInDb.MAXI = dataBarang.Stf02.MAXI;
                        barangInDb.Sort1 = dataBarang.Stf02.Sort1;
                        barangInDb.Sort2 = dataBarang.Stf02.Sort2;
                        barangInDb.KET_SORT1 = dataBarang.Stf02.KET_SORT1;
                        barangInDb.KET_SORT2 = dataBarang.Stf02.KET_SORT2;
                        barangInDb.STN = dataBarang.Stf02.STN;
                        barangInDb.STN2 = dataBarang.Stf02.STN2;
                        barangInDb.ISI = dataBarang.Stf02.ISI;
                        barangInDb.Metoda = dataBarang.Stf02.Metoda;
                        barangInDb.Deskripsi = dataBarang.Stf02.Deskripsi;
                        barangInDb.BERAT = dataBarang.Stf02.BERAT;
                        barangInDb.PANJANG = dataBarang.Stf02.PANJANG;
                        barangInDb.LEBAR = dataBarang.Stf02.LEBAR;
                        barangInDb.TINGGI = dataBarang.Stf02.TINGGI;
                        barangInDb.HJUAL = dataBarang.Stf02.HJUAL;
                        barangInDb.TYPE = "4";

                        //add by nurul 28/8/2020
                        if (dataBarang.Stf02.KUBILASI.ToString() == "1" || dataBarang.Stf02.BRG_NON_OS != "" || dataBarang.Stf02.BRG_NON_OS != null)
                        {
                            dataBarang.Stf02.KUBILASI = 0;
                            dataBarang.Stf02.BRG_NON_OS = "";
                        }
                        //end add by nurul 28/8/2020

                        //add by nurul 27/11/2019, add tgl last edit
                        barangInDb.Tgl_Input = DateTime.Today;
                        //end add by nurul 27/11/2019, add tgl last edit

                        if (dataBarang.ListHargaJualPermarket?.Count > 0)
                        {
                            List<string> listError = new List<string>();
                            int i = 0;
                            //add by Tri, 24 sept 2020
                            cekStf02hDuplikat(dataBarang.Stf02);
                            //end add by Tri, 24 sept 2020
                            foreach (var dataBaru in dataBarang.ListHargaJualPermarket)
                            {
                                //add validasi harga per marketplace
                                var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == dataBaru.IDMARKET).SingleOrDefault().NAMA;
                                //change by Tri 23 agustus 2019, validasi harga 1 function
                                //if (kdMarket == kdLazada.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 3000)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 3000.");
                                //    }
                                //    else if (dataBaru.HJUAL % 100 != 0)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                //    }
                                //}
                                //else if (kdMarket == kdBlibli.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 1100)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual minimal 1100.");
                                //    }
                                //}
                                //else if (kdMarket == kdBL.IdMarket.ToString() || kdMarket == kdElevenia.IdMarket.ToString())
                                //{
                                //    if (dataBaru.HJUAL < 100)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus lebih dari 100.");
                                //    }
                                //    else if (dataBaru.HJUAL % 100 != 0)
                                //    {
                                //        validPrice = false;
                                //        listError.Add(i + "_errortext_" + "Harga Jual harus kelipatan 100.");

                                //    }
                                //}
                                if (dataBaru.DISPLAY)
                                {
                                    var retVal = ValidasiHarga(kdMarket, dataBaru.HJUAL);
                                    if (retVal.status == 0)
                                    {
                                        validPrice = false;
                                        listError.Add(i + "_errortext_" + retVal.message);
                                    }
                                }
                                //end change by Tri 23 agustus 2019, validasi harga 1 function
                                i++;
                                //end add validasi harga per marketplace

                                //add by Tri 4 aug 2020, update display varian
                                string updateDisplaySQL = "UPDATE STF02H SET DISPLAY = " + (dataBaru.DISPLAY ? 1 : 0);
                                updateDisplaySQL += " WHERE BRG IN (SELECT BRG FROM STF02 WHERE PART = '" + barangInDb.BRG + "') AND IDMARKET = " + dataBaru.IDMARKET;
                                EDB.ExecuteSQL("CString", CommandType.Text, updateDisplaySQL);
                                //end add by Tri 4 aug 2020, update display varian
                            }
                            if (validPrice)
                            {
                                foreach (var dataBaru in dataBarang.ListHargaJualPermarket)
                                {
                                    var dataHarga = ErasoftDbContext.STF02H.SingleOrDefault(h => h.BRG == barangInDb.BRG && h.IDMARKET == dataBaru.IDMARKET);
                                    if (dataHarga == null)
                                    {
                                        dataBaru.BRG = barangInDb.BRG;
                                        ErasoftDbContext.STF02H.Add(dataBaru);
                                    }
                                    else
                                    {
                                        //add by Tri update harga di marketplace
                                        if (dataHarga.HJUAL != dataBaru.HJUAL)
                                        {
                                            updateHarga = true;
                                        }
                                        //end add by Tri update harga di marketplace
                                        dataHarga.HJUAL = dataBaru.HJUAL;
                                        bool updateKategori = false;
                                        if (dataHarga.DISPLAY != dataBaru.DISPLAY)
                                        {
                                            updateDisplay = true;
                                        }
                                        dataHarga.DISPLAY = dataBaru.DISPLAY;
                                        if (dataHarga.CATEGORY_CODE != dataBaru.CATEGORY_CODE)
                                        {
                                            updateKategori = true;
                                        }
                                        #region Category && Attribute
                                        dataHarga.CATEGORY_CODE = dataBaru.CATEGORY_CODE;
                                        dataHarga.CATEGORY_NAME = dataBaru.CATEGORY_NAME;
                                        dataHarga.DeliveryTempElevenia = dataBaru.DeliveryTempElevenia;
                                        dataHarga.PICKUP_POINT = dataBaru.PICKUP_POINT;
                                        dataHarga.ACODE_1 = dataBaru.ACODE_1;
                                        dataHarga.ACODE_2 = dataBaru.ACODE_2;
                                        dataHarga.ACODE_3 = dataBaru.ACODE_3;
                                        dataHarga.ACODE_4 = dataBaru.ACODE_4;
                                        dataHarga.ACODE_5 = dataBaru.ACODE_5;
                                        dataHarga.ACODE_6 = dataBaru.ACODE_6;
                                        dataHarga.ACODE_7 = dataBaru.ACODE_7;
                                        dataHarga.ACODE_8 = dataBaru.ACODE_8;
                                        dataHarga.ACODE_9 = dataBaru.ACODE_9;
                                        dataHarga.ACODE_10 = dataBaru.ACODE_10;
                                        dataHarga.ACODE_11 = dataBaru.ACODE_11;
                                        dataHarga.ACODE_12 = dataBaru.ACODE_12;
                                        dataHarga.ACODE_13 = dataBaru.ACODE_13;
                                        dataHarga.ACODE_14 = dataBaru.ACODE_14;
                                        dataHarga.ACODE_15 = dataBaru.ACODE_15;
                                        dataHarga.ACODE_16 = dataBaru.ACODE_16;
                                        dataHarga.ACODE_17 = dataBaru.ACODE_17;
                                        dataHarga.ACODE_18 = dataBaru.ACODE_18;
                                        dataHarga.ACODE_19 = dataBaru.ACODE_19;
                                        dataHarga.ACODE_20 = dataBaru.ACODE_20;
                                        dataHarga.ACODE_21 = dataBaru.ACODE_21;
                                        dataHarga.ACODE_22 = dataBaru.ACODE_22;
                                        dataHarga.ACODE_23 = dataBaru.ACODE_23;
                                        dataHarga.ACODE_24 = dataBaru.ACODE_24;
                                        dataHarga.ACODE_25 = dataBaru.ACODE_25;
                                        dataHarga.ACODE_26 = dataBaru.ACODE_26;
                                        dataHarga.ACODE_27 = dataBaru.ACODE_27;
                                        dataHarga.ACODE_28 = dataBaru.ACODE_28;
                                        dataHarga.ACODE_29 = dataBaru.ACODE_29;
                                        dataHarga.ACODE_30 = dataBaru.ACODE_30;
                                        dataHarga.ACODE_31 = dataBaru.ACODE_31;
                                        dataHarga.ACODE_32 = dataBaru.ACODE_32;
                                        dataHarga.ACODE_33 = dataBaru.ACODE_33;
                                        dataHarga.ACODE_34 = dataBaru.ACODE_34;
                                        dataHarga.ACODE_35 = dataBaru.ACODE_35;
                                        dataHarga.ACODE_36 = dataBaru.ACODE_36;
                                        dataHarga.ACODE_37 = dataBaru.ACODE_37;
                                        dataHarga.ACODE_38 = dataBaru.ACODE_38;
                                        dataHarga.ACODE_39 = dataBaru.ACODE_39;
                                        dataHarga.ACODE_40 = dataBaru.ACODE_40;
                                        dataHarga.ACODE_41 = dataBaru.ACODE_41;
                                        dataHarga.ACODE_42 = dataBaru.ACODE_42;
                                        dataHarga.ACODE_43 = dataBaru.ACODE_43;
                                        dataHarga.ACODE_44 = dataBaru.ACODE_44;
                                        dataHarga.ACODE_45 = dataBaru.ACODE_45;
                                        dataHarga.ACODE_46 = dataBaru.ACODE_46;
                                        dataHarga.ACODE_47 = dataBaru.ACODE_47;
                                        dataHarga.ACODE_48 = dataBaru.ACODE_48;
                                        dataHarga.ACODE_49 = dataBaru.ACODE_49;
                                        dataHarga.ACODE_50 = dataBaru.ACODE_50;

                                        dataHarga.ANAME_1 = dataBaru.ANAME_1;
                                        dataHarga.ANAME_2 = dataBaru.ANAME_2;
                                        dataHarga.ANAME_3 = dataBaru.ANAME_3;
                                        dataHarga.ANAME_4 = dataBaru.ANAME_4;
                                        dataHarga.ANAME_5 = dataBaru.ANAME_5;
                                        dataHarga.ANAME_6 = dataBaru.ANAME_6;
                                        dataHarga.ANAME_7 = dataBaru.ANAME_7;
                                        dataHarga.ANAME_8 = dataBaru.ANAME_8;
                                        dataHarga.ANAME_9 = dataBaru.ANAME_9;
                                        dataHarga.ANAME_10 = dataBaru.ANAME_10;
                                        dataHarga.ANAME_11 = dataBaru.ANAME_11;
                                        dataHarga.ANAME_12 = dataBaru.ANAME_12;
                                        dataHarga.ANAME_13 = dataBaru.ANAME_13;
                                        dataHarga.ANAME_14 = dataBaru.ANAME_14;
                                        dataHarga.ANAME_15 = dataBaru.ANAME_15;
                                        dataHarga.ANAME_16 = dataBaru.ANAME_16;
                                        dataHarga.ANAME_17 = dataBaru.ANAME_17;
                                        dataHarga.ANAME_18 = dataBaru.ANAME_18;
                                        dataHarga.ANAME_19 = dataBaru.ANAME_19;
                                        dataHarga.ANAME_20 = dataBaru.ANAME_20;
                                        dataHarga.ANAME_21 = dataBaru.ANAME_21;
                                        dataHarga.ANAME_22 = dataBaru.ANAME_22;
                                        dataHarga.ANAME_23 = dataBaru.ANAME_23;
                                        dataHarga.ANAME_24 = dataBaru.ANAME_24;
                                        dataHarga.ANAME_25 = dataBaru.ANAME_25;
                                        dataHarga.ANAME_26 = dataBaru.ANAME_26;
                                        dataHarga.ANAME_27 = dataBaru.ANAME_27;
                                        dataHarga.ANAME_28 = dataBaru.ANAME_28;
                                        dataHarga.ANAME_29 = dataBaru.ANAME_29;
                                        dataHarga.ANAME_30 = dataBaru.ANAME_30;
                                        dataHarga.ANAME_31 = dataBaru.ANAME_31;
                                        dataHarga.ANAME_32 = dataBaru.ANAME_32;
                                        dataHarga.ANAME_33 = dataBaru.ANAME_33;
                                        dataHarga.ANAME_34 = dataBaru.ANAME_34;
                                        dataHarga.ANAME_35 = dataBaru.ANAME_35;
                                        dataHarga.ANAME_36 = dataBaru.ANAME_36;
                                        dataHarga.ANAME_37 = dataBaru.ANAME_37;
                                        dataHarga.ANAME_38 = dataBaru.ANAME_38;
                                        dataHarga.ANAME_39 = dataBaru.ANAME_39;
                                        dataHarga.ANAME_40 = dataBaru.ANAME_40;
                                        dataHarga.ANAME_41 = dataBaru.ANAME_41;
                                        dataHarga.ANAME_42 = dataBaru.ANAME_42;
                                        dataHarga.ANAME_43 = dataBaru.ANAME_43;
                                        dataHarga.ANAME_44 = dataBaru.ANAME_44;
                                        dataHarga.ANAME_45 = dataBaru.ANAME_45;
                                        dataHarga.ANAME_46 = dataBaru.ANAME_46;
                                        dataHarga.ANAME_47 = dataBaru.ANAME_47;
                                        dataHarga.ANAME_48 = dataBaru.ANAME_48;
                                        dataHarga.ANAME_49 = dataBaru.ANAME_49;
                                        dataHarga.ANAME_50 = dataBaru.ANAME_50;

                                        dataHarga.AVALUE_1 = dataBaru.AVALUE_1;
                                        dataHarga.AVALUE_2 = dataBaru.AVALUE_2;
                                        dataHarga.AVALUE_3 = dataBaru.AVALUE_3;
                                        dataHarga.AVALUE_4 = dataBaru.AVALUE_4;
                                        dataHarga.AVALUE_5 = dataBaru.AVALUE_5;
                                        dataHarga.AVALUE_6 = dataBaru.AVALUE_6;
                                        dataHarga.AVALUE_7 = dataBaru.AVALUE_7;
                                        dataHarga.AVALUE_8 = dataBaru.AVALUE_8;
                                        dataHarga.AVALUE_9 = dataBaru.AVALUE_9;
                                        dataHarga.AVALUE_10 = dataBaru.AVALUE_10;
                                        dataHarga.AVALUE_11 = dataBaru.AVALUE_11;
                                        dataHarga.AVALUE_12 = dataBaru.AVALUE_12;
                                        dataHarga.AVALUE_13 = dataBaru.AVALUE_13;
                                        dataHarga.AVALUE_14 = dataBaru.AVALUE_14;
                                        dataHarga.AVALUE_15 = dataBaru.AVALUE_15;
                                        dataHarga.AVALUE_16 = dataBaru.AVALUE_16;
                                        dataHarga.AVALUE_17 = dataBaru.AVALUE_17;
                                        dataHarga.AVALUE_18 = dataBaru.AVALUE_18;
                                        dataHarga.AVALUE_19 = dataBaru.AVALUE_19;
                                        dataHarga.AVALUE_20 = dataBaru.AVALUE_20;
                                        dataHarga.AVALUE_21 = dataBaru.AVALUE_21;
                                        dataHarga.AVALUE_22 = dataBaru.AVALUE_22;
                                        dataHarga.AVALUE_23 = dataBaru.AVALUE_23;
                                        dataHarga.AVALUE_24 = dataBaru.AVALUE_24;
                                        dataHarga.AVALUE_25 = dataBaru.AVALUE_25;
                                        dataHarga.AVALUE_26 = dataBaru.AVALUE_26;
                                        dataHarga.AVALUE_27 = dataBaru.AVALUE_27;
                                        dataHarga.AVALUE_28 = dataBaru.AVALUE_28;
                                        dataHarga.AVALUE_29 = dataBaru.AVALUE_29;
                                        dataHarga.AVALUE_30 = dataBaru.AVALUE_30;
                                        dataHarga.AVALUE_31 = dataBaru.AVALUE_31;
                                        dataHarga.AVALUE_32 = dataBaru.AVALUE_32;
                                        dataHarga.AVALUE_33 = dataBaru.AVALUE_33;
                                        dataHarga.AVALUE_34 = dataBaru.AVALUE_34;
                                        dataHarga.AVALUE_35 = dataBaru.AVALUE_35;
                                        dataHarga.AVALUE_36 = dataBaru.AVALUE_36;
                                        dataHarga.AVALUE_37 = dataBaru.AVALUE_37;
                                        dataHarga.AVALUE_38 = dataBaru.AVALUE_38;
                                        dataHarga.AVALUE_39 = dataBaru.AVALUE_39;
                                        dataHarga.AVALUE_40 = dataBaru.AVALUE_40;
                                        dataHarga.AVALUE_41 = dataBaru.AVALUE_41;
                                        dataHarga.AVALUE_42 = dataBaru.AVALUE_42;
                                        dataHarga.AVALUE_43 = dataBaru.AVALUE_43;
                                        dataHarga.AVALUE_44 = dataBaru.AVALUE_44;
                                        dataHarga.AVALUE_45 = dataBaru.AVALUE_45;
                                        dataHarga.AVALUE_46 = dataBaru.AVALUE_46;
                                        dataHarga.AVALUE_47 = dataBaru.AVALUE_47;
                                        dataHarga.AVALUE_48 = dataBaru.AVALUE_48;
                                        dataHarga.AVALUE_49 = dataBaru.AVALUE_49;
                                        dataHarga.AVALUE_50 = dataBaru.AVALUE_50;
                                        #endregion
                                        if (updateKategori)
                                        {
                                            var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == dataBaru.IDMARKET).SingleOrDefault().NAMA;
                                            string namaMarket = "";
                                            if (kdMarket == kdTokped.IdMarket.ToString())
                                            {
                                                namaMarket = "TOKPED";
                                            }
                                            else if (kdMarket == kdShopee.IdMarket.ToString())
                                            {
                                                namaMarket = "SHOPEE";
                                            }
                                            else if (kdMarket == kdBlibli.IdMarket.ToString())
                                            {
                                                namaMarket = "BLIBLI";
                                            }
                                            if (kdMarket == kdLazada.IdMarket.ToString())
                                            {
                                                namaMarket = "LAZADA";
                                            }
                                            else if (kdMarket == kdBL.IdMarket.ToString())
                                            {
                                                namaMarket = "BUKALAPAK";
                                            }
                                            else if (kdMarket == kdElevenia.IdMarket.ToString())
                                            {
                                                namaMarket = "ELEVENIA";
                                            }
                                            else if (kdMarket == kd82Cart.IdMarket.ToString())
                                            {
                                                namaMarket = "82CART";
                                            }
                                            else if (kdMarket == kdShopify.IdMarket.ToString())
                                            {
                                                namaMarket = "SHOPIFY";
                                            }
                                            if (namaMarket != "")
                                            {
                                                EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE STF02I SET CATEGORY_MO = '" + barangInDb.Sort1 + "', MP_CATEGORY_CODE='" + dataHarga.CATEGORY_CODE + "' WHERE BRG = '" + barangInDb.BRG + "' AND MARKET='" + namaMarket + "' ");
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                dataBarang.errorHargaPerMP = "1";
                                dataBarang.Errors = listError;
                                return Json(dataBarang, JsonRequestBehavior.AllowGet);
                            }
                        }

                        if (Request.Files.Count > 0)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                var file = Request.Files[i];

                                if (file != null && file.ContentLength > 0)
                                {
                                    ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");

                                    imgPath[i] = image.data.link;

                                    switch (i)
                                    {
                                        case 0:
                                            barangInDb.LINK_GAMBAR_1 = image.data.link_l;
                                            barangInDb.Sort5 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 1:
                                            barangInDb.LINK_GAMBAR_2 = image.data.link_l;
                                            barangInDb.Sort6 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 2:
                                            barangInDb.LINK_GAMBAR_3 = image.data.link_l;
                                            barangInDb.Sort7 = Convert.ToString(file.ContentLength);
                                            break;
                                        //add 13/9/19, 5 gambar
                                        case 3:
                                            barangInDb.LINK_GAMBAR_4 = image.data.link_l;
                                            barangInDb.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                            break;
                                        case 4:
                                            barangInDb.LINK_GAMBAR_5 = image.data.link_l;
                                            barangInDb.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                            break;
                                            //end add 13/9/19, 5 gambar
                                    }
                                }
                            }
                        }
                        //add by calvin 16 nov 2018, imgpath saat update
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            switch (i)
                            {
                                case 0:
                                    imgPath[0] = barangInDb.LINK_GAMBAR_1;
                                    break;
                                case 1:
                                    imgPath[1] = barangInDb.LINK_GAMBAR_2;
                                    break;
                                case 2:
                                    imgPath[2] = barangInDb.LINK_GAMBAR_3;
                                    break;
                                //add 13/9/19, 5 gambar
                                case 3:
                                    imgPath[3] = barangInDb.LINK_GAMBAR_4;
                                    break;
                                case 4:
                                    imgPath[4] = barangInDb.LINK_GAMBAR_5;
                                    break;
                                    //end add 13/9/19, 5 gambar
                            }
                        }
                        //end add by calvin

                        //add by Tri 3 jun 2020, update nama barang varian
                        if (updateNama)
                        {
                            var listVarian = ErasoftDbContext.STF02.Where(m => m.PART == barangInDb.BRG).ToList();
                            if (listVarian.Count > 0)
                            {

                                var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == barangInDb.Sort1);
                                var stf20b = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
                                if (stf20b.Count > 0)
                                {
                                    foreach (var item in listVarian)
                                    {
                                        string ket_varlv1 = "";
                                        string ket_varlv2 = "";
                                        string ket_varlv3 = "";
                                        if (!string.IsNullOrEmpty(item.Sort8))
                                        {
                                            ket_varlv1 = stf20b.Where(p => p.LEVEL_VAR == 1 && p.KODE_VAR == item.Sort8).FirstOrDefault()?.KET_VAR;
                                        }
                                        if (!string.IsNullOrEmpty(item.Sort9))
                                        {
                                            ket_varlv2 = stf20b.Where(p => p.LEVEL_VAR == 2 && p.KODE_VAR == item.Sort9).FirstOrDefault()?.KET_VAR;
                                        }
                                        if (!string.IsNullOrEmpty(item.Sort10))
                                        {
                                            ket_varlv3 = stf20b.Where(p => p.LEVEL_VAR == 3 && p.KODE_VAR == item.Sort10).FirstOrDefault()?.KET_VAR;
                                        }

                                        if (string.IsNullOrEmpty(ket_varlv1) && string.IsNullOrEmpty(ket_varlv2) && string.IsNullOrEmpty(ket_varlv3))
                                        {
                                            //belum ada mapping
                                        }
                                        else
                                        {
                                            var nama2Var = barangInDb.NAMA2;
                                            nama2Var += (string.IsNullOrEmpty(ket_varlv1) ? "" : " " + ket_varlv1);
                                            nama2Var += (string.IsNullOrEmpty(ket_varlv2) ? "" : " " + ket_varlv2);
                                            nama2Var += (string.IsNullOrEmpty(ket_varlv3) ? "" : " " + ket_varlv3);
                                            EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE STF02 SET NAMA = '" + barangInDb.NAMA + "', NAMA2 = '" + nama2Var + "' WHERE BRG = '" + item.BRG + "'");
                                        }
                                    }
                                }

                            }
                        }
                        //end add by Tri 3 jun 2020, update nama barang varian

                    }
                }
                if (!insert)
                {
                    //saveBarangBlibli(2, dataBarang);
                    //saveBarangElevenia(2, dataBarang, imgPath);
                    //saveBarangShopee(2, dataBarang, updateHarga);


                    ////get image
                    //var barang = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);
                    ////string[] picPath = new string[3];
                    ////for (int i = 0; i < 3; i++)
                    ////{
                    ////    string picName = $"FotoProduk-{barang.USERNAME}-{barang.BRG}-foto-{i + 1}.jpg";
                    ////    if (System.IO.File.Exists(Server.MapPath("/Content/Uploaded/" + picName)))
                    ////    {
                    ////        picPath[i] = Server.MapPath("/Content/Uploaded/" + picName);
                    ////    }
                    ////}
                    ////end get image

                    //saveBarangTokpedVariant(2, barang.BRG, false);

                    //if (updateDisplay)
                    //{
                    //    #region lazada
                    //    if (listLazadaShop.Count > 0)
                    //    {
                    //        foreach (ARF01 tblCustomer in listLazadaShop)
                    //        {
                    //            if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
                    //            {
                    //                var tokoLazada = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                    //                if (tokoLazada.DISPLAY && string.IsNullOrEmpty(tokoLazada.BRG_MP))//display = true and brg_mp = null -> create product
                    //                {
                    //                    createBarangLazada(dataBarang, imgPath, tblCustomer);
                    //                }
                    //                else
                    //                {
                    //                    if (!string.IsNullOrEmpty(tokoLazada.BRG_MP))
                    //                    {
                    //                        var resultLazada = lzdApi.setDisplay(tokoLazada.BRG_MP, tokoLazada.DISPLAY, tblCustomer.TOKEN);
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //    #endregion
                    //    #region Elevenia
                    //    saveBarangElevenia(3, dataBarang, imgPath);
                    //    #endregion
                    //    #region Bukalapak
                    //    if (listBLShop.Count > 0)
                    //    {
                    //        foreach (ARF01 tblCustomer in listBLShop)
                    //        {
                    //            var tokoBl = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                    //            if (tokoBl.DISPLAY)
                    //            {
                    //                if (string.IsNullOrEmpty(tokoBl.BRG_MP))
                    //                {
                    //                    createBarangBukaLapak(dataBarang, imgPath, tblCustomer);
                    //                }
                    //                else
                    //                {
                    //                    var result = blApi.prodAktif(barang.BRG, tokoBl.BRG_MP, tblCustomer.API_KEY, tblCustomer.TOKEN);
                    //                }
                    //            }
                    //            else
                    //            {
                    //                if (!string.IsNullOrEmpty(tokoBl.BRG_MP))
                    //                {
                    //                    var result = blApi.prodNonAktif(barang.BRG, tokoBl.BRG_MP, tblCustomer.API_KEY, tblCustomer.TOKEN);
                    //                }

                    //            }

                    //        }
                    //    }
                    //    #endregion
                    //}
                    //if (updateHarga)
                    //{
                    //    #region lazada
                    //    if (listLazadaShop.Count > 0)
                    //    {
                    //        foreach (ARF01 tblCustomer in listLazadaShop)
                    //        {
                    //            if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
                    //            {
                    //                //var barang = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);
                    //                var tokoLazada = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                    //                var resultLazada = lzdApi.UpdatePriceQuantity(tokoLazada.BRG_MP, tokoLazada.HJUAL.ToString(), "", tblCustomer.TOKEN);
                    //            }
                    //        }
                    //    }
                    //    #endregion
                    //    #region Bukalapak
                    //    if (listBLShop.Count > 0)
                    //    {
                    //        foreach (ARF01 tblCustomer in listBLShop)
                    //        {
                    //            //var barang = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID);
                    //            var tokoBl = ErasoftDbContext.STF02H.SingleOrDefault(h => h.IDMARKET == tblCustomer.RecNum && h.BRG == barang.BRG);
                    //            var resultBL = blApi.updateProduk(barang.BRG, tokoBl.BRG_MP, tokoBl.HJUAL.ToString(), "", tblCustomer.API_KEY, tblCustomer.TOKEN);
                    //        }
                    //    }

                    //    #endregion
                    //}
                }

                ErasoftDbContext.SaveChanges();

                //add by Tri, 24 sept 2020
                cekStf02hDuplikat(dataBarang.Stf02);
                //end add by Tri, 24 sept 2020
                ModelState.Clear();

                //var kategori = ErasoftDbContext.STF02E.Single(k => k.KODE == dataBarang.Stf02.Sort1);
                //var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
                //var vm = new BarangStrukturVarViewModel()
                //{
                //    Barang = ErasoftDbContext.STF02.Where(p => p.BRG == KodeBarang).FirstOrDefault(),
                //    Kategori = kategori,
                //    Variant_Level_1 = new STF20()
                //    {
                //        CATEGORY_MO = kategori.KODE,
                //        LEVEL_JUDUL_VAR = 1,
                //        VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                //    },
                //    Variant_Level_2 = new STF20()
                //    {
                //        CATEGORY_MO = kategori.KODE,
                //        LEVEL_JUDUL_VAR = 2,
                //        VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                //    },
                //    Variant_Level_3 = new STF20()
                //    {
                //        CATEGORY_MO = kategori.KODE,
                //        LEVEL_JUDUL_VAR = 3,
                //        VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                //    },
                //    ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                //    VariantPerMP = ErasoftDbContext.STF02I.AsNoTracking().Where(p => p.BRG == KodeBarang).ToList(),
                //    VariantOptMaster = ErasoftDbContext.STF20B.Where(p => p.CATEGORY_MO == kategori.KODE).ToList()
                //};
                //return PartialView("BarangVarPartial", vm);

                dataBarang.Errors = null;
                return Json(dataBarang, JsonRequestBehavior.AllowGet);

                //add by nurul 21/6/2019, validasi berat,p,l,t
            }
            catch (Exception ex)
            {
                return View("Error");
            }
            //end add by nurul 21/6/2019, validasi berat,p,l,t
        }

        protected void createBarangLazadaVariant(string brg)
        {
            //var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var listLazadaShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLazada.IdMarket.ToString()).ToList();

            var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
            var listLazadaShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLazada.IdMarket.ToString()).ToList();
            foreach (var tblCustomer in listLazadaShop)
            {
                var barangInDb = ErasoftDbContext.STF02.AsNoTracking().SingleOrDefault(b => b.BRG == brg);
                var lzdApi = new LazadaController();
                string[] imgPath = new string[3];
                if (!string.IsNullOrWhiteSpace(barangInDb.LINK_GAMBAR_1))
                {
                    imgPath[0] = barangInDb.LINK_GAMBAR_1;
                }
                if (!string.IsNullOrWhiteSpace(barangInDb.LINK_GAMBAR_2))
                {
                    imgPath[1] = barangInDb.LINK_GAMBAR_2;
                }
                if (!string.IsNullOrWhiteSpace(barangInDb.LINK_GAMBAR_3))
                {
                    imgPath[2] = barangInDb.LINK_GAMBAR_3;
                }
                string[] imageUrl = new string[imgPath.Length];
                var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
                //var productMarketPlace = ErasoftDbContext.STF02H.Where(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum).ToList();

                if (!string.IsNullOrEmpty(tblCustomer.TOKEN) /*&& productMarketPlace.DISPLAY*/)
                {
                    //for (int i = 0; i < imgPath.Length; i++)
                    //{
                    //    if (!string.IsNullOrEmpty(imgPath[i]))
                    //    {
                    //        var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                    //        if (uploadImg.status == 1)
                    //            imageUrl[i] = uploadImg.message;
                    //    }
                    //}

                    //add by nurul 14/1/2020, handle deskripsi enter2x
                    var note = barangInDb.Deskripsi.Replace("\r\n", "").Replace("&nbsp;", " ").Replace("<em>", "<i>").Replace("</em>", "</i>");
                    //add by nurul 14/1/2020, handle deskripsi enter2x

                    BrgViewModel dataLazada = new BrgViewModel
                    {
                        //add by nurul 14/1/2020, handle deskripsi enter2x
                        //deskripsi = barangInDb.Deskripsi,
                        deskripsi = note,
                        //end add by nurul 14/1/2020, handle deskripsi enter2x
                        harga = barangInDb.HJUAL.ToString(),
                        height = barangInDb.TINGGI.ToString(),
                        kdBrg = barangInDb.BRG,
                        length = barangInDb.PANJANG.ToString(),
                        nama = barangInDb.NAMA,
                        nama2 = barangInDb.NAMA2,
                        weight = barangInDb.BERAT.ToString(),
                        width = barangInDb.LEBAR.ToString(),
                        user = tblCustomer.EMAIL,
                        key = tblCustomer.API_KEY,
                        qty = "1",
                        token = tblCustomer.TOKEN,
                        idMarket = tblCustomer.RecNum.ToString(),
                    };

                    dataLazada.merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == barangInDb.Sort2 && m.LEVEL == "2").KET;
                    dataLazada.harga = productMarketPlace.HJUAL.ToString();
                    dataLazada.activeProd = productMarketPlace.DISPLAY;

                    //if (!string.IsNullOrEmpty(imageUrl[2]))
                    //{
                    //    dataLazada.imageUrl3 = imageUrl[2];
                    //}
                    //if (!string.IsNullOrEmpty(imageUrl[1]))
                    //{
                    //    dataLazada.imageUrl2 = imageUrl[1];
                    //}
                    //if (!string.IsNullOrEmpty(imageUrl[0]))
                    //{
                    //    dataLazada.imageUrl = imageUrl[0];
                    //}
                    var brg_notInLzd = EDB.GetDataSet("CString", "STF02", "SELECT B.BRG, B.BRG_MP FROM STF02 A INNER JOIN STF02H B ON A.BRG = B.BRG WHERE (A.BRG = '" + barangInDb.BRG + "' OR A.PART = '" + barangInDb.BRG + "') AND ISNULL(B.BRG_MP, '') = '' AND IDMARKET = " + tblCustomer.RecNum);
                    var brg_inLzd = EDB.GetDataSet("CString", "STF02", "SELECT B.BRG, B.BRG_MP FROM STF02 A INNER JOIN STF02H B ON A.BRG = B.BRG WHERE (A.BRG = '" + barangInDb.BRG + "' OR A.PART = '" + barangInDb.BRG + "') AND ISNULL(B.BRG_MP, '') <> '' AND IDMARKET = " + tblCustomer.RecNum);
                    //if (string.IsNullOrWhiteSpace(productMarketPlace[0].BRG_MP) && productMarketPlace[0].DISPLAY)
                    if (brg_notInLzd.Tables[0].Rows.Count > 0 && productMarketPlace.DISPLAY)
                    {
                        for (int i = 0; i < imgPath.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(imgPath[i]))
                            {
                                var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                                if (uploadImg.status == 1)
                                    imageUrl[i] = uploadImg.message;
                            }
                        }
                        if (!string.IsNullOrEmpty(imageUrl[2]))
                        {
                            dataLazada.imageUrl3 = imageUrl[2];
                        }
                        if (!string.IsNullOrEmpty(imageUrl[1]))
                        {
                            dataLazada.imageUrl2 = imageUrl[1];
                        }
                        if (!string.IsNullOrEmpty(imageUrl[0]))
                        {
                            dataLazada.imageUrl = imageUrl[0];
                        }

                        string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + dataLazada.kdBrg + "'";
                        EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                        //var result = lzdApi.CreateProduct(dataLazada);
                        LazadaControllerJob test = new LazadaControllerJob();
#if (DEBUG || Debug_AWS)
                        Task.Run(() => test.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada)).Wait();
#else
                        var sqlStorage = new SqlServerStorage(EDBConnID);
                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                        clientJobServer.Enqueue<LazadaControllerJob>(x => x.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada));
#endif
                        //var test = new LazadaControllerJob();
                        //test.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada);
                    }
                    //else
                    //{
                    //    var result = lzdApi.UpdateProduct(dataLazada);
                    //}
                    if (brg_inLzd.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < imgPath.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(imgPath[i]))
                            {
                                var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                                if (uploadImg.status == 1)
                                    imageUrl[i] = uploadImg.message;
                            }
                        }
                        if (!string.IsNullOrEmpty(imageUrl[2]))
                        {
                            dataLazada.imageUrl3 = imageUrl[2];
                        }
                        if (!string.IsNullOrEmpty(imageUrl[1]))
                        {
                            dataLazada.imageUrl2 = imageUrl[1];
                        }
                        if (!string.IsNullOrEmpty(imageUrl[0]))
                        {
                            dataLazada.imageUrl = imageUrl[0];
                        }
                        var result = lzdApi.UpdateProduct(dataLazada);
                    }
                }
            }
        }

        protected void createBarangLazada(BarangViewModel dataBarang, string[] imgPath, ARF01 tblCustomer, int mode)
        {
            //var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var listLazadaShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLazada.IdMarket.ToString()).ToList();
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var lzdApi = new LazadaController();
            string[] imageUrl = new string[imgPath.Length];
            //if (listLazadaShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listLazadaShop)
            //    {
            var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
            if (!string.IsNullOrEmpty(tblCustomer.TOKEN) /*&& productMarketPlace.DISPLAY*/)
            {
                //for (int i = 0; i < imgPath.Length; i++)
                //{
                //    if (!string.IsNullOrEmpty(imgPath[i]))
                //    {
                //        var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                //        if (uploadImg.status == 1)
                //            imageUrl[i] = uploadImg.message;
                //    }
                //}

                //add by nurul 14/1/2020, handle deskripsi enter2x
                var note = dataBarang.Stf02.Deskripsi.Replace("\r\n", "").Replace("&nbsp;", " ").Replace("<em>", "<i>").Replace("</em>", "</i>");
                //add by nurul 14/1/2020, handle deskripsi enter2x

                BrgViewModel dataLazada = new BrgViewModel
                {
                    //add by nurul 14/1/2020, handle deskripsi enter2x
                    //deskripsi = dataBarang.Stf02.Deskripsi,
                    deskripsi = note,
                    //end add by nurul 14/1/2020, handle deskripsi enter2x
                    harga = dataBarang.Stf02.HJUAL.ToString(),
                    height = dataBarang.Stf02.TINGGI.ToString(),
                    kdBrg = barangInDb.BRG,
                    length = dataBarang.Stf02.PANJANG.ToString(),
                    nama = dataBarang.Stf02.NAMA,
                    nama2 = dataBarang.Stf02.NAMA2,
                    weight = dataBarang.Stf02.BERAT.ToString(),
                    width = dataBarang.Stf02.LEBAR.ToString(),
                    user = tblCustomer.EMAIL,
                    key = tblCustomer.API_KEY,
                    qty = "1",
                    token = tblCustomer.TOKEN,
                    idMarket = tblCustomer.RecNum.ToString(),
                };

                dataLazada.merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                dataLazada.harga = productMarketPlace.HJUAL.ToString();
                dataLazada.activeProd = productMarketPlace.DISPLAY;

                //if (!string.IsNullOrEmpty(imageUrl[2]))
                //{
                //    dataLazada.imageUrl3 = imageUrl[2];
                //}
                //if (!string.IsNullOrEmpty(imageUrl[1]))
                //{
                //    dataLazada.imageUrl2 = imageUrl[1];
                //}
                //if (!string.IsNullOrEmpty(imageUrl[0]))
                //{
                //    dataLazada.imageUrl = imageUrl[0];
                //}
                ////add 6/9/2019, 5 gambar
                //if (!string.IsNullOrEmpty(imageUrl[3]))
                //{
                //    dataLazada.imageUrl4 = imageUrl[3];
                //}
                //if (!string.IsNullOrEmpty(imageUrl[4]))
                //{
                //    dataLazada.imageUrl5 = imageUrl[4];
                //}
                //end add 6/9/2019, 5 gambar
                //if (!string.IsNullOrEmpty(barangInDb.LINK_GAMBAR_3))
                //{
                //    dataLazada.imageUrl3 = barangInDb.LINK_GAMBAR_3;
                //}
                //if (!string.IsNullOrEmpty(barangInDb.LINK_GAMBAR_2))
                //{
                //    dataLazada.imageUrl2 = barangInDb.LINK_GAMBAR_2;
                //}
                //if (!string.IsNullOrEmpty(barangInDb.LINK_GAMBAR_1))
                //{
                //    dataLazada.imageUrl = barangInDb.LINK_GAMBAR_1;
                //}

                //change by calvin 9 juni 2019
                if (mode == 1 && productMarketPlace.DISPLAY)
                {
                    for (int i = 0; i < imgPath.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(imgPath[i]))
                        {
                            var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                            if (uploadImg.status == 1)
                                imageUrl[i] = uploadImg.message;
                        }
                    }
                    if (!string.IsNullOrEmpty(imageUrl[2]))
                    {
                        dataLazada.imageUrl3 = imageUrl[2];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[1]))
                    {
                        dataLazada.imageUrl2 = imageUrl[1];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[0]))
                    {
                        dataLazada.imageUrl = imageUrl[0];
                    }
                    //add 6/9/2019, 5 gambar
                    if (!string.IsNullOrEmpty(imageUrl[3]))
                    {
                        dataLazada.imageUrl4 = imageUrl[3];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[4]))
                    {
                        dataLazada.imageUrl5 = imageUrl[4];
                    }
                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + dataLazada.kdBrg + "'";
                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    //var result = lzdApi.CreateProduct(dataLazada);
#if (DEBUG || Debug_AWS)
                    var test = new LazadaControllerJob();
                    test.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada);
#else
                    clientJobServer.Enqueue<LazadaControllerJob>(x => x.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada));
#endif
                }
                else if (mode == 2)
                {
                    for (int i = 0; i < imgPath.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(imgPath[i]))
                        {
                            var uploadImg = lzdApi.UploadImage(imgPath[i], tblCustomer.TOKEN);
                            if (uploadImg.status == 1)
                                imageUrl[i] = uploadImg.message;
                        }
                    }
                    if (!string.IsNullOrEmpty(imageUrl[2]))
                    {
                        dataLazada.imageUrl3 = imageUrl[2];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[1]))
                    {
                        dataLazada.imageUrl2 = imageUrl[1];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[0]))
                    {
                        dataLazada.imageUrl = imageUrl[0];
                    }
                    //add 6/9/2019, 5 gambar
                    if (!string.IsNullOrEmpty(imageUrl[3]))
                    {
                        dataLazada.imageUrl4 = imageUrl[3];
                    }
                    if (!string.IsNullOrEmpty(imageUrl[4]))
                    {
                        dataLazada.imageUrl5 = imageUrl[4];
                    }
                    var result = lzdApi.UpdateProduct(dataLazada);
                }
                //clientJobServer.Enqueue<LazadaControllerJob>(x => x.CreateProduct(dbPathEra, dataLazada.kdBrg, tblCustomer.CUST, "Barang", "Buat Produk", usernameLogin, dataLazada));
                //end change by calvin 9 juni 2019
            }
            //    }
            //}
        }
        protected void createBarangBukaLapak(BarangViewModel dataBarang, string[] imgPath, ARF01 tblCustomer)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
            var blApi = new BukaLapakController();
            string[] imgID = new string[imgPath.Length];
            for (int i = 0; i < imgPath.Length; i++)
            {
                if (!string.IsNullOrEmpty(imgPath[i]))
                {
                    var uploadImg = blApi.uploadGambar(imgPath[i], tblCustomer.API_KEY, tblCustomer.TOKEN);
                    if (uploadImg.status == 1)
                        imgID[i] = uploadImg.message;
                }
            }
            BrgViewModel data = new BrgViewModel
            {
                deskripsi = dataBarang.Stf02.Deskripsi,
                harga = dataBarang.Stf02.HJUAL.ToString(),
                height = dataBarang.Stf02.TINGGI.ToString(),
                kdBrg = barangInDb.BRG,
                length = dataBarang.Stf02.PANJANG.ToString(),
                nama = dataBarang.Stf02.NAMA,
                nama2 = dataBarang.Stf02.NAMA2,
                weight = dataBarang.Stf02.BERAT.ToString(),
                width = dataBarang.Stf02.LEBAR.ToString(),
                user = tblCustomer.EMAIL,
                key = tblCustomer.API_KEY,
                qty = "1",
                token = tblCustomer.TOKEN,
                idMarket = tblCustomer.RecNum.ToString(),
                //merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET
            };
            data.merk = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
            //var productMarketPlace = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == barangInDb.BRG && m.IDMARKET == tblCustomer.RecNum);
            data.harga = productMarketPlace.HJUAL.ToString();
            if (!string.IsNullOrEmpty(imgID[2]))
            {
                data.imageId3 = imgID[2];
            }
            if (!string.IsNullOrEmpty(imgID[1]))
            {
                data.imageId2 = imgID[1];
            }
            if (!string.IsNullOrEmpty(imgID[0]))
            {
                data.imageId = imgID[0];
            }
            //add 6/9/2019, 5 gambar
            if (!string.IsNullOrEmpty(imgID[3]))
            {
                data.imageUrl4 = imgID[3];
            }
            if (!string.IsNullOrEmpty(imgID[4]))
            {
                data.imageUrl5 = imgID[4];
            }
            //end add 6/9/2019, 5 gambar

            var result = blApi.CreateProduct(data);
            //if (result.status == 1)
            //    if (!productMarketPlace.DISPLAY)
            //    {
            //        //panggil api utk non-aktif barang yg baru di insert
            //        result = blApi.prodNonAktif(barangInDb.BRG, result.message, tblCustomer.API_KEY, tblCustomer.TOKEN);
            //    }
        }
        protected void saveBarangTokpedVariant(int mode, string dataBarang_Stf02_BRG, bool updateHarga)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == dataBarang_Stf02_BRG);
            var kdTokped = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
            if (barangInDb != null && kdTokped != null)
            {
                var listTokped = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdTokped.IdMarket.ToString()).ToList();
                if (listTokped.Count > 0)
                {
                    switch (mode)
                    {
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listTokped)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            //change by calvin 9 juni 2019
                                            //TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData()
                                            //{
                                            //    merchant_code = tblCustomer.Sort1_Cust, //FSID
                                            //    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                            //    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                            //    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                            //    token = tblCustomer.TOKEN,
                                            //    idmarket = tblCustomer.RecNum.Value
                                            //};
                                            //TokopediaController tokoAPI = new TokopediaController();
                                            //Task.Run(() => tokoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)).Wait());

                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION LIKE 'Link Produk%') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                            TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                            {
                                                merchant_code = tblCustomer.Sort1_Cust, //FSID
                                                API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                                API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                                API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                                token = tblCustomer.TOKEN,
                                                idmarket = tblCustomer.RecNum.Value,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin
                                            };
#if (DEBUG || Debug_AWS)
                                            Task.Run(() => new TokopediaControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<TokopediaControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)));
#endif
                                            //end change by calvin 9 juni 2019
                                        }
                                    }
                                }
                            }
                            break;
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in listTokped)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                //change by calvin 9 juni 2019
                                                //TokopediaController tokoAPI = new TokopediaController();
                                                //TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData()
                                                //{
                                                //    merchant_code = tblCustomer.Sort1_Cust, //FSID
                                                //    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                                //    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                                //    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                                //    token = tblCustomer.TOKEN,
                                                //    idmarket = tblCustomer.RecNum.Value
                                                //};
                                                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust, //FSID
                                                    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                                    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                                    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                                    token = tblCustomer.TOKEN,
                                                    idmarket = tblCustomer.RecNum.Value,
                                                    DatabasePathErasoft = dbPathEra,
                                                    username = usernameLogin
                                                };
                                                //end change by calvin 9 juni 2019

                                                if (stf02h.BRG_MP.Contains("PENDING"))
                                                {
                                                    var cekPendingCreate = ErasoftDbContext.STF02H.Where(p => p.IDMARKET == tblCustomer.RecNum && p.BRG_MP == stf02h.BRG_MP).ToList();
                                                    if (cekPendingCreate.Count > 0)
                                                    {
                                                        foreach (var item in cekPendingCreate)
                                                        {
                                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION LIKE 'Link Produk%') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

                                                            //change by calvin 9 juni 2019
                                                            //Task.Run(() => tokoAPI.CreateProductGetStatus(iden, item.BRG, Convert.ToInt32(item.BRG_MP.Split(';')[1]), item.BRG_MP.Split(';')[2]).Wait());
#if (DEBUG || Debug_AWS)
                                                            //Task.Run(() => new TokopediaControllerJob().EditProductGetStatus(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Barang", "Edit Produk Get Status", iden, stf02h.BRG, Convert.ToInt32(stf02h.BRG_MP.Split(';')[1]), stf02h.BRG_MP.Split(';')[2], stf02h.BRG_MP.Split(';')[3]).Wait());
                                                            Task.Run(() => new TokopediaControllerJob().CreateProductGetStatus(dbPathEra, item.BRG, tblCustomer.CUST, "Barang", "Link Produk (Tahap 1 / 2 )", iden, item.BRG, Convert.ToInt32(item.BRG_MP.Split(';')[1]), item.BRG_MP.Split(';')[2]).Wait());
#else
                                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                            clientJobServer.Enqueue<TokopediaControllerJob>(x => x.CreateProductGetStatus(dbPathEra, item.BRG, tblCustomer.CUST, "Barang", "Link Produk (Tahap 1 / 2 )", iden, item.BRG, Convert.ToInt32(item.BRG_MP.Split(';')[1]), item.BRG_MP.Split(';')[2]));
#endif
                                                            //end change by calvin 9 juni 2019
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (stf02h.BRG_MP.Contains("PEDITENDING"))
                                                    {
                                                        //change by calvin 9 juni 2019
                                                        //Task.Run(() => tokoAPI.EditProductGetStatus(iden, stf02h.BRG, Convert.ToInt32(stf02h.BRG_MP.Split(';')[1]), stf02h.BRG_MP.Split(';')[2], stf02h.BRG_MP.Split(';')[3]).Wait());

                                                        string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION LIKE 'Edit Produk%' OR REQUEST_ACTION LIKE 'Link Produk%') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                        EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                        Task.Run(() => new TokopediaControllerJob().EditProductGetStatus(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Barang", "Edit Produk Get Status", iden, stf02h.BRG, Convert.ToInt32(stf02h.BRG_MP.Split(';')[1]), stf02h.BRG_MP.Split(';')[2], stf02h.BRG_MP.Split(';')[3]).Wait());
#else
                                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                        clientJobServer.Enqueue<TokopediaControllerJob>(x => x.EditProductGetStatus(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Barang", "Edit Produk Get Status", iden, stf02h.BRG, Convert.ToInt32(stf02h.BRG_MP.Split(';')[1]), stf02h.BRG_MP.Split(';')[2], stf02h.BRG_MP.Split(';')[3]));
#endif
                                                        //end change by calvin 9 juni 2019
                                                    }
                                                    else
                                                    {
                                                        //change by nurul 3/2/2020
                                                        ////change by calvin 9 juni 2019
                                                        ////Task.Run(() => tokoAPI.EditProduct(iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), stf02h.BRG_MP).Wait());
                                                        //var sqlStorage = new SqlServerStorage(EDBConnID);
                                                        //var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                        //clientJobServer.Enqueue<TokopediaControllerJob>(x => x.EditProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Edit Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), stf02h.BRG_MP));
                                                        ////end change by calvin 9 juni 2019

                                                        string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION LIKE 'Edit Produk%' OR REQUEST_ACTION LIKE 'Link Produk%') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                        EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                        Task.Run(() => new TokopediaControllerJob().EditProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Edit Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), stf02h.BRG_MP).Wait());
#else
                                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                        clientJobServer.Enqueue<TokopediaControllerJob>(x => x.EditProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Edit Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), stf02h.BRG_MP));
                                                        //end change by calvin 9 juni 2019
#endif
                                                        //end change by nurul 3/2/2020
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                                    if (display)
                                                    {
                                                        //change by calvin 9 juni 2019
                                                        //TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData()
                                                        //{
                                                        //    merchant_code = tblCustomer.Sort1_Cust, //FSID
                                                        //    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                                        //    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                                        //    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                                        //    token = tblCustomer.TOKEN,
                                                        //    idmarket = tblCustomer.RecNum.Value
                                                        //};
                                                        //TokopediaController tokoAPI = new TokopediaController();
                                                        //Task.Run(() => tokoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)).Wait());

                                                        string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION LIKE 'Link Produk%') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                        EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                        TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                                        {
                                                            merchant_code = tblCustomer.Sort1_Cust, //FSID
                                                            API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                                                            API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                                                            API_secret_key = tblCustomer.API_KEY, //Shop ID 
                                                            token = tblCustomer.TOKEN,
                                                            idmarket = tblCustomer.RecNum.Value,
                                                            DatabasePathErasoft = dbPathEra,
                                                            username = usernameLogin
                                                        };
#if (DEBUG || Debug_AWS)
                                                        Task.Run(() => new TokopediaControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)).Wait());
#else
                                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                        clientJobServer.Enqueue<TokopediaControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG)));
                                                        //end change by calvin 9 juni 2019
#endif
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        //add by fauzi for shopify
        public void saveBarangShopify(int mode, BarangViewModel dataBarang)
        {
            //var ret = "";
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var kdShopify = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPIFY");
            if (barangInDb != null && kdShopify != null)
            {
                var listShopify = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopify.IdMarket.ToString()).ToList();
                if (listShopify.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listShopify)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {

                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

                                            ShopifyControllerJob.ShopifyAPIData data = new ShopifyControllerJob.ShopifyAPIData();
                                            data.no_cust = tblCustomer.CUST;
                                            data.username = usernameLogin;
                                            data.DatabasePathErasoft = dbPathEra;
                                            data.account_store = tblCustomer.PERSO;
                                            data.API_key = tblCustomer.API_KEY;
                                            data.API_password = tblCustomer.API_CLIENT_P;
#if (DEBUG || Debug_AWS)
                                            new ShopifyControllerJob().Shopify_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data);
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in listShopify)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                ShopifyControllerJob.ShopifyAPIData iden = new ShopifyControllerJob.ShopifyAPIData();
                                                iden.no_cust = tblCustomer.CUST;
                                                iden.DatabasePathErasoft = dbPathEra;
                                                iden.account_store = tblCustomer.PERSO;
                                                iden.API_key = tblCustomer.API_KEY;
                                                iden.API_password = tblCustomer.API_CLIENT_P;

                                                ShopifyControllerJob ShopifyAPI = new ShopifyControllerJob();
                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
#if (Debug_AWS || DEBUG)
                                                //Task.Run(() => ShopifyAPI.UpdateProduct(iden, stf02h.BRG_MP, tblCustomer.CUST).Wait());
                                                //var checkProductExist = ShopifyAPI.GetItemSingle(iden, stf02h.BRG);
                                                //ShopifyAPI.CheckProduct(iden, stf02h.BRG_MP, stf02h.BRG);

                                                ShopifyAPI.Shopify_UpdateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Update Produk", iden, stf02h.BRG_MP);

#else
                                                clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_UpdateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Update Produk", iden, stf02h.BRG_MP));
#endif
                                                //end unremark by nurul 15/1/2020, biar bisa update deskripsi, tapi panjang lebar dan tinggi harus <= 40 cm
                                                //end remark by calvin 26 februari 2019
                                                //Task.Run(() => shoAPI.UpdateImage(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), stf02h.BRG_MP).Wait());

                                                //ShopeeController shoAPI = new ShopeeController();
                                                //Task.Run(() => shoAPI.UpdateImage(iden, temp_brg, stf02h.BRG_MP).Wait());
                                                //string[] brg_mp = stf02h.BRG_MP.Split(';');
                                                //if (updateHarga)
                                                //{
                                                //    if (brg_mp.Count() == 2)
                                                //    {
                                                //        if (brg_mp[1] == "0")
                                                //        {
                                                //            Task.Run(() => shoAPI.UpdatePrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                //        }
                                                //        else if (brg_mp[1] != "")
                                                //        {
                                                //            Task.Run(() => shoAPI.UpdateVariationPrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                //        }
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                                    //{
                                                    //    merchant_code = tblCustomer.Sort1_Cust,
                                                    //};
                                                    //ShopeeController shoAPI = new ShopeeController();
                                                    //Task.Run(() => shoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());

                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                    ShopifyControllerJob.ShopifyAPIData data = new ShopifyControllerJob.ShopifyAPIData();
                                                    data.no_cust = tblCustomer.CUST;
                                                    data.username = usernameLogin;
                                                    data.DatabasePathErasoft = dbPathEra;
                                                    data.account_store = tblCustomer.PERSO;
                                                    data.API_key = tblCustomer.API_KEY;
                                                    data.API_password = tblCustomer.API_CLIENT_P;
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new ShopifyControllerJob().Shopify_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data).Wait());
#else
                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data));
#endif
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //return ret;
        }

        protected void saveBarangShopee(int mode, BarangViewModel dataBarang, bool updateHarga)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");
            if (barangInDb != null && kdShopee != null)
            {
                var listShopee = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
                if (listShopee.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listShopee)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                            //{
                                            //    merchant_code = tblCustomer.Sort1_Cust,
                                            //};
                                            //ShopeeController shoAPI = new ShopeeController();
                                            //Task.Run(() => shoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());

                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                            ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                            {
                                                merchant_code = tblCustomer.Sort1_Cust,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin
                                            };
#if (DEBUG || Debug_AWS)
                                            Task.Run(() => new ShopeeControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in listShopee)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust,
                                                };
                                                //add by nurul 29/1/2020
                                                ShopeeControllerJob shoAPI2 = new ShopeeControllerJob();
                                                ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust,
                                                    DatabasePathErasoft = dbPathEra,
                                                    username = usernameLogin
                                                };
                                                //end add by nurul 29/1/2020

                                                //add 6 aug 2020, hapus error log lama sebelum panggil update produk
                                                string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Update Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + barangInDb.BRG + "'";
                                                EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                //end add 6 aug 2020, hapus error log lama sebelum panggil update produk

                                                //remark by calvin 26 februari 2019, ini untuk update deskripsi dll
                                                //unremark by nurul 15/1/2020, biar bisa update deskripsi, tapi panjang lebar dan tinggi harus <= 40 cm
                                                var temp_brg = (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG);
                                                //Task.Run(() => shoAPI.UpdateProduct(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());
                                                //Task.Run(() => shoAPI2.UpdateProduct(data, temp_brg, tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
#if (Debug_AWS || DEBUG)
                                                Task.Run(() => shoAPI2.UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", data, temp_brg, tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
#else
                                                clientJobServer.Enqueue<ShopeeControllerJob>(x => x.UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", data, temp_brg, tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()));
#endif
                                                //end unremark by nurul 15/1/2020, biar bisa update deskripsi, tapi panjang lebar dan tinggi harus <= 40 cm
                                                //end remark by calvin 26 februari 2019
                                                //Task.Run(() => shoAPI.UpdateImage(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), stf02h.BRG_MP).Wait());

                                                ShopeeController shoAPI = new ShopeeController();
                                                Task.Run(() => shoAPI.UpdateImage(iden, temp_brg, stf02h.BRG_MP).Wait());
                                                string[] brg_mp = stf02h.BRG_MP.Split(';');
                                                if (updateHarga)
                                                {
                                                    if (brg_mp.Count() == 2)
                                                    {
                                                        if (brg_mp[1] == "0")
                                                        {
                                                            Task.Run(() => shoAPI.UpdatePrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                        }
                                                        else if (brg_mp[1] != "")
                                                        {
                                                            Task.Run(() => shoAPI.UpdateVariationPrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                                    //{
                                                    //    merchant_code = tblCustomer.Sort1_Cust,
                                                    //};
                                                    //ShopeeController shoAPI = new ShopeeController();
                                                    //Task.Run(() => shoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());

                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                    ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin
                                                    };
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new ShopeeControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()));
#endif
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        protected void saveBarangShopeeVariant(int mode, string dataBarang_Stf02_BRG, bool updateHarga)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == dataBarang_Stf02_BRG);
            var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");
            if (barangInDb != null && kdShopee != null)
            {
                var listShopee = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
                if (listShopee.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listShopee)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                            //{
                                            //    merchant_code = tblCustomer.Sort1_Cust,
                                            //};
                                            //ShopeeController shoAPI = new ShopeeController();
                                            //Task.Run(() => shoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());

                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                            ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                            {
                                                merchant_code = tblCustomer.Sort1_Cust,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin
                                            };
#if (DEBUG || Debug_AWS)
                                            Task.Run(() => new ShopeeControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in listShopee)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                //add 6 aug 2020, hapus error log lama sebelum panggil init tier
                                                string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                //end add 6 aug 2020, hapus error log lama sebelum panggil init tier
                                                //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                                //{
                                                //    merchant_code = tblCustomer.Sort1_Cust,
                                                //};
                                                //ShopeeController shoAPI = new ShopeeController();
                                                //Task.Run(() => shoAPI.InitTierVariation(iden, barangInDb, Convert.ToInt64(stf02h.BRG_MP.Split(';')[0]), tblCustomer).Wait());
                                                ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust,
                                                    DatabasePathErasoft = dbPathEra,
                                                    username = usernameLogin
                                                };
#if (DEBUG || Debug_AWS)
                                                //Task.Run(() => new ShopeeControllerJob().InitTierVariation(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, barangInDb, Convert.ToInt64(stf02h.BRG_MP.Split(';')[0]), tblCustomer, null).Wait());
#else
                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitTierVariation(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, barangInDb, Convert.ToInt64(stf02h.BRG_MP.Split(';')[0]), tblCustomer, null));
#endif


                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    //ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                                                    //{
                                                    //    merchant_code = tblCustomer.Sort1_Cust,
                                                    //};
                                                    //ShopeeController shoAPI = new ShopeeController();
                                                    //Task.Run(() => shoAPI.CreateProduct(iden, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeController.ShopeeLogisticsClass>()).Wait());

                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                                                    ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin
                                                    };
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new ShopeeControllerJob().CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()).Wait());
#else
                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", data, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, new List<ShopeeControllerJob.ShopeeLogisticsClass>()));
#endif
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        protected void saveBarang82Cart(int mode, BarangViewModel dataBarang, bool updateHarga)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            //var kd82Cart = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "82CART");
            var kd82Cart = "20";
            if (barangInDb != null && kd82Cart != null)
            {
                var list82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kd82Cart).ToList();
                if (list82Cart.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in list82Cart)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

#if (DEBUG || Debug_AWS)
                                            EightTwoCartControllerJob.E2CartAPIData iden = new EightTwoCartControllerJob.E2CartAPIData
                                            {
                                                username = usernameLogin,
                                                no_cust = tblCustomer.CUST,
                                                account_store = tblCustomer.PERSO,
                                                API_key = tblCustomer.API_KEY,
                                                API_credential = tblCustomer.Sort1_Cust,
                                                API_url = tblCustomer.PERSO,
                                                ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                DatabasePathErasoft = dbPathEra
                                            };
                                            EightTwoCartControllerJob c82CartAPI = new EightTwoCartControllerJob();

                                            c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden);
                                            //Task.Run(() => c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden).Wait());
#else
                                            EightTwoCartControllerJob.E2CartAPIData dataJob = new EightTwoCartControllerJob.E2CartAPIData
                                            {
                                                username = usernameLogin,
                                                no_cust = tblCustomer.CUST,
                                                account_store = tblCustomer.PERSO,
                                                API_key = tblCustomer.API_KEY,
                                                API_credential = tblCustomer.Sort1_Cust,
                                                API_url = tblCustomer.PERSO,
                                                ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                DatabasePathErasoft = dbPathEra
                                            };

                                            //EightTwoCartControllerJob c82CartAPIJob = new EightTwoCartControllerJob();
                                            //Task.Run(() => c82CartAPIJob.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob)).Wait();

                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in list82Cart)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                EightTwoCartControllerJob.E2CartAPIData iden = new EightTwoCartControllerJob.E2CartAPIData
                                                {
                                                    username = usernameLogin,
                                                    no_cust = tblCustomer.CUST,
                                                    account_store = tblCustomer.PERSO,
                                                    API_key = tblCustomer.API_KEY,
                                                    API_credential = tblCustomer.Sort1_Cust,
                                                    API_url = tblCustomer.PERSO,
                                                    ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                    DatabasePathErasoft = dbPathEra
                                                };
                                                EightTwoCartControllerJob c82CartAPI = new EightTwoCartControllerJob();

                                                var temp_brg = (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG);

                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
#if (Debug_AWS || DEBUG)
                                                c82CartAPI.E2Cart_UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", iden);
#else
                                                clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", iden));
#endif

                                                //Task.Run(() => shoAPI.UpdateImage(iden, temp_brg, stf02h.BRG_MP).Wait());
                                                //string[] brg_mp = stf02h.BRG_MP.Split(';');
                                                if (updateHarga)
                                                {
                                                    //if (brg_mp.Count() == 2)
                                                    //{
                                                    //    if (brg_mp[1] == "0")
                                                    //    {
#if (Debug_AWS || DEBUG)
                                                    Task.Run(() => c82CartAPI.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, "0")).Wait();
#else
                                                clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, "0"));
#endif
                                                    //Task.Run(() => c82CartAPI.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, 0)).Wait();
                                                    //}
                                                    //else if (brg_mp[1] != "")
                                                    //{
                                                    //    Task.Run(() => c82CartAPI.UpdateVariationPrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                    //}
                                                    //}
                                                }
                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);


#if (DEBUG || Debug_AWS)
                                                    EightTwoCartController.E2CartAPIData iden = new EightTwoCartController.E2CartAPIData
                                                    {
                                                        username = usernameLogin,
                                                        no_cust = tblCustomer.CUST,
                                                        account_store = tblCustomer.PERSO,
                                                        API_key = tblCustomer.API_KEY,
                                                        API_credential = tblCustomer.Sort1_Cust,
                                                        API_url = tblCustomer.PERSO,
                                                        //ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                        DatabasePathErasoft = dbPathEra
                                                    };
                                                    EightTwoCartController c82CartAPI = new EightTwoCartController();

                                                    //c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden);
                                                    //Task.Run(() => c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden).Wait());
#else
                                                    EightTwoCartControllerJob.E2CartAPIData dataJob = new EightTwoCartControllerJob.E2CartAPIData
                                                    {
                                                        username = usernameLogin,
                                                        no_cust = tblCustomer.CUST,
                                                        account_store = tblCustomer.PERSO,
                                                        API_key = tblCustomer.API_KEY,
                                                        API_credential = tblCustomer.Sort1_Cust,
                                                        API_url = tblCustomer.PERSO,
                                                        ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                        DatabasePathErasoft = dbPathEra
                                                    };

                                                    //EightTwoCartControllerJob c82CartAPIJob = new EightTwoCartControllerJob();
                                                    //Task.Run(() => c82CartAPIJob.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob)).Wait();

                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    //clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob));
#endif
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        protected void saveBarang82CartVariant(int mode, string dataBarang_Stf02_BRG, bool updateHarga)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == dataBarang_Stf02_BRG);
            //var kd82Cart = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "82CART");
            var kd82Cart = "20";
            if (barangInDb != null && kd82Cart != null)
            {
                var list82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kd82Cart).ToList();
                if (list82Cart.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in list82Cart)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

#if (DEBUG || Debug_AWS)
                                            EightTwoCartControllerJob.E2CartAPIData iden = new EightTwoCartControllerJob.E2CartAPIData
                                            {
                                                username = usernameLogin,
                                                no_cust = tblCustomer.CUST,
                                                account_store = tblCustomer.PERSO,
                                                API_key = tblCustomer.API_KEY,
                                                API_credential = tblCustomer.Sort1_Cust,
                                                API_url = tblCustomer.PERSO,
                                                ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                DatabasePathErasoft = dbPathEra
                                            };
                                            EightTwoCartControllerJob c82CartAPI = new EightTwoCartControllerJob();

                                            c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden);
                                            //Task.Run(() => c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden).Wait());
#else
                                            EightTwoCartControllerJob.E2CartAPIData dataJob = new EightTwoCartControllerJob.E2CartAPIData
                                            {
                                                username = usernameLogin,
                                                no_cust = tblCustomer.CUST,
                                                account_store = tblCustomer.PERSO,
                                                API_key = tblCustomer.API_KEY,
                                                API_credential = tblCustomer.Sort1_Cust,
                                                API_url = tblCustomer.PERSO,
                                                ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                DatabasePathErasoft = dbPathEra
                                            };

                                            //EightTwoCartControllerJob c82CartAPIJob = new EightTwoCartControllerJob();
                                            //Task.Run(() => c82CartAPIJob.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob)).Wait();

                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                foreach (ARF01 tblCustomer in list82Cart)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                EightTwoCartControllerJob.E2CartAPIData iden = new EightTwoCartControllerJob.E2CartAPIData
                                                {
                                                    username = usernameLogin,
                                                    no_cust = tblCustomer.CUST,
                                                    account_store = tblCustomer.PERSO,
                                                    API_key = tblCustomer.API_KEY,
                                                    API_credential = tblCustomer.Sort1_Cust,
                                                    API_url = tblCustomer.PERSO,
                                                    ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                    DatabasePathErasoft = dbPathEra
                                                };
                                                EightTwoCartControllerJob c82CartAPI = new EightTwoCartControllerJob();

                                                var temp_brg = (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG);

                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
#if (Debug_AWS || DEBUG)
                                                c82CartAPI.E2Cart_UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", iden);
#else
                                                clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_UpdateProduct(dbPathEra, temp_brg, tblCustomer.CUST, "Barang", "Update Produk", iden));
#endif

                                                //Task.Run(() => shoAPI.UpdateImage(iden, temp_brg, stf02h.BRG_MP).Wait());
                                                //string[] brg_mp = stf02h.BRG_MP.Split(';');
                                                if (updateHarga)
                                                {
                                                    //if (brg_mp.Count() == 2)
                                                    //{
                                                    //    if (brg_mp[1] == "0")
                                                    //    {
#if (Debug_AWS || DEBUG)
                                                    Task.Run(() => c82CartAPI.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, "0")).Wait();
#else
                                                    clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, "0"));
#endif
                                                    //Task.Run(() => c82CartAPI.E2Cart_UpdatePrice_82Cart(dbPathEra, stf02h.BRG, tblCustomer.CUST, "Price", "Update Price", iden, stf02h.BRG_MP, (int)stf02h.HJUAL, 0)).Wait();
                                                    //}
                                                    //else if (brg_mp[1] != "")
                                                    //{
                                                    //    Task.Run(() => c82CartAPI.UpdateVariationPrice(iden, stf02h.BRG_MP, (float)stf02h.HJUAL)).Wait();
                                                    //}
                                                    //}
                                                }
                                            }
                                            else
                                            {
                                                if (stf02h.DISPLAY)
                                                {
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);


#if (DEBUG || Debug_AWS)
                                                    EightTwoCartControllerJob.E2CartAPIData iden = new EightTwoCartControllerJob.E2CartAPIData
                                                    {
                                                        username = usernameLogin,
                                                        no_cust = tblCustomer.CUST,
                                                        account_store = tblCustomer.PERSO,
                                                        API_key = tblCustomer.API_KEY,
                                                        API_credential = tblCustomer.Sort1_Cust,
                                                        API_url = tblCustomer.PERSO,
                                                        ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                        DatabasePathErasoft = dbPathEra
                                                    };
                                                    EightTwoCartControllerJob c82CartAPI = new EightTwoCartControllerJob();

                                                    c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden);
                                                    //Task.Run(() => c82CartAPI.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", iden).Wait());
#else
                                                    EightTwoCartControllerJob.E2CartAPIData dataJob = new EightTwoCartControllerJob.E2CartAPIData
                                                    {
                                                        username = usernameLogin,
                                                        no_cust = tblCustomer.CUST,
                                                        account_store = tblCustomer.PERSO,
                                                        API_key = tblCustomer.API_KEY,
                                                        API_credential = tblCustomer.Sort1_Cust,
                                                        API_url = tblCustomer.PERSO,
                                                        ID_MARKET = tblCustomer.RecNum.Value.ToString(),
                                                        DatabasePathErasoft = dbPathEra
                                                    };

                                                    //EightTwoCartControllerJob c82CartAPIJob = new EightTwoCartControllerJob();
                                                    //Task.Run(() => c82CartAPIJob.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob)).Wait();

                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_CreateProduct(dbPathEra, (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG), tblCustomer.CUST, "Barang", "Buat Produk", dataJob));
#endif
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }


        protected void saveBarangBlibli(int mode, BarangViewModel dataBarang)
        {
            var barangInDb = ErasoftDbContext.STF02.AsNoTracking().SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI");
            if (barangInDb != null && kdBlibli != null)
            {
                var listBlibli = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBlibli.IdMarket.ToString()).ToList();
                if (listBlibli.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listBlibli)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Kode))
                                    {
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            //change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                            //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                            //{
                                            //    merchant_code = tblCustomer.Sort1_Cust,
                                            //    API_client_password = tblCustomer.API_CLIENT_P,
                                            //    API_client_username = tblCustomer.API_CLIENT_U,
                                            //    API_secret_key = tblCustomer.API_KEY,
                                            //    token = tblCustomer.TOKEN,
                                            //    mta_username_email_merchant = tblCustomer.EMAIL,
                                            //    mta_password_password_merchant = tblCustomer.PASSWORD,
                                            //    idmarket = tblCustomer.RecNum.Value
                                            //};
                                            BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                                            {
                                                merchant_code = tblCustomer.Sort1_Cust,
                                                API_client_password = tblCustomer.API_CLIENT_P,
                                                API_client_username = tblCustomer.API_CLIENT_U,
                                                API_secret_key = tblCustomer.API_KEY,
                                                //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                token = tblCustomer.TOKEN,
                                                mta_username_email_merchant = tblCustomer.EMAIL,
                                                mta_password_password_merchant = tblCustomer.PASSWORD,
                                                idmarket = tblCustomer.RecNum.Value,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin,
                                                versiToken = tblCustomer.KD_ANALISA
                                            };
                                            //end change by calvin 9 juni 2019, ganti jadi pakai hangfire


                                            //BlibliControllerJob.BlibliProductData data = new BlibliControllerJob.BlibliProductData
                                            //{
                                            //    kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG,
                                            //    nama = dataBarang.Stf02.NAMA + ' ' + dataBarang.Stf02.NAMA2 + ' ' + dataBarang.Stf02.NAMA3,
                                            //    berat = (dataBarang.Stf02.BERAT).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                            //    Keterangan = dataBarang.Stf02.Deskripsi,
                                            //    Qty = "0",
                                            //    MinQty = "0",
                                            //    PickupPoint = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).PICKUP_POINT.ToString(),
                                            //    IDMarket = tblCustomer.RecNum.ToString(),
                                            //    Length = Convert.ToString(dataBarang.Stf02.PANJANG),
                                            //    Width = Convert.ToString(dataBarang.Stf02.LEBAR),
                                            //    Height = Convert.ToString(dataBarang.Stf02.TINGGI),
                                            //    type = Convert.ToString(dataBarang.Stf02.TYPE),
                                            //    dataBarangInDb = barangInDb
                                            //};

                                            //data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                                            //data.Price = barangInDb.HJUAL.ToString();
                                            //data.MarketPrice = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).HJUAL.ToString();
                                            //data.CategoryCode = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).CATEGORY_CODE.ToString();

                                            //data.display = display ? "true" : "false";
                                            //BlibliController bliAPI = new BlibliController();
                                            //Task.Run(() => bliAPI.CreateProduct(iden, data).Wait());
                                            string data_kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG;
                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                            Task.Run(() => new BlibliControllerJob().CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<BlibliControllerJob>(x => x.CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null));
#endif
                                        }
                                        //new BlibliController().GetQueueFeedDetail(iden, null);
                                        //}
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                var qtyOnHand = GetQOHSTF08A(string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG, "ALL");
                                foreach (ARF01 tblCustomer in listBlibli)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Kode))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                var BliApi = new BlibliController();
                                                BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust,
                                                    API_client_password = tblCustomer.API_CLIENT_P,
                                                    API_client_username = tblCustomer.API_CLIENT_U,
                                                    API_secret_key = tblCustomer.API_KEY,
                                                    token = tblCustomer.TOKEN,
                                                    mta_username_email_merchant = tblCustomer.EMAIL,
                                                    mta_password_password_merchant = tblCustomer.PASSWORD,
                                                    idmarket = tblCustomer.RecNum.Value,
                                                    versiToken = tblCustomer.KD_ANALISA
                                                };
                                                if (stf02h.BRG_MP == "PENDING")
                                                {
                                                    var BliApiJob = new BlibliControllerJob();
                                                    BlibliControllerJob.BlibliAPIData iden2 = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    string data_kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG;
                                                    var listLog = ErasoftDbContext.API_LOG_MARKETPLACE.Where(m => m.REQUEST_ACTION == "Create Product" && m.MARKETPLACE.ToUpper() == "BLIBLI" && m.REQUEST_STATUS.ToLower() == "pending" && m.REQUEST_ATTRIBUTE_1 == data_kode).OrderByDescending(m => m.REQUEST_DATETIME).ToList();
                                                    if (listLog.Count > 0)
                                                    {
                                                        foreach(var insertLog in listLog)
                                                        {

                                                            var queBlibli = EDB.GetDataSet("CString", "QUEUE_FEED_BLIBLI", "SELECT * FROM QUEUE_FEED_BLIBLI WHERE LOG_REQUEST_ID = '" + insertLog.REQUEST_ID + "' AND MERCHANT_CODE='" + iden2.merchant_code + "' AND STATUS = '1'");
                                                            if (queBlibli.Tables[0].Rows.Count > 0)
                                                            {
                                                                var queData = new BlibliControllerJob.BlibliQueueFeedData
                                                                {
                                                                    log_request_id = queBlibli.Tables[0].Rows[0]["LOG_REQUEST_ID"].ToString(),
                                                                    request_id = queBlibli.Tables[0].Rows[0]["REQUESTID"].ToString()
                                                                };
                                                                string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION = 'Cek Status Review') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                                EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
    #if (DEBUG || Debug_AWS)
                                                                Task.Run(() => BliApiJob.GetQueueFeedDetail(iden2, queData).Wait());
    #else
                                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                        clientJobServer.Enqueue<BlibliControllerJob>(x => x.GetQueueFeedDetail(iden2, queData));
    #endif
                                                                    break;
                                                            }
                                                        }

                                                    }
                                                    //Task.Run(() => BliApi.GetQueueFeedDetail(iden, null).Wait());
                                                }
                                                else if (stf02h.BRG_MP.Contains("NEED_CORRECTION"))
                                                {
                                                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                        //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    string data_kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG;
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION = 'Cek Status Review') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new BlibliControllerJob().ReviseProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", idenJob, null, null).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<BlibliControllerJob>(x => x.ReviseProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", idenJob, null, null));
#endif
                                                }
                                                else
                                                {
                                                    #region update
                                                    BlibliController.BlibliProductData data = new BlibliController.BlibliProductData
                                                    {
                                                        kode = barangInDb.BRG,
                                                        kode_mp = stf02h.BRG_MP,
                                                        Qty = Convert.ToString(qtyOnHand),
                                                        MinQty = "0"
                                                    };
                                                    data.Price = barangInDb.HJUAL.ToString();
                                                    data.MarketPrice = stf02h.HJUAL.ToString();
                                                    var display = Convert.ToBoolean(stf02h.DISPLAY);
                                                    data.display = display ? "true" : "false";
                                                    Task.Run(() => BliApi.UpdateProdukQOH_Display(iden, data).Wait());
                                                    #endregion
                                                }
                                            }
                                            else
                                            {
                                                var display = Convert.ToBoolean(stf02h.DISPLAY);
                                                if (display)
                                                {
                                                    #region insert
                                                    //change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                                    //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                                    //{
                                                    //    merchant_code = tblCustomer.Sort1_Cust,
                                                    //    API_client_password = tblCustomer.API_CLIENT_P,
                                                    //    API_client_username = tblCustomer.API_CLIENT_U,
                                                    //    API_secret_key = tblCustomer.API_KEY,
                                                    //    token = tblCustomer.TOKEN,
                                                    //    mta_username_email_merchant = tblCustomer.EMAIL,
                                                    //    mta_password_password_merchant = tblCustomer.PASSWORD,
                                                    //    idmarket = tblCustomer.RecNum.Value
                                                    //};
                                                    BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                        //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    //end change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                                    //BlibliControllerJob.BlibliProductData data = new BlibliControllerJob.BlibliProductData
                                                    //{
                                                    //    kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG,
                                                    //    nama = dataBarang.Stf02.NAMA + ' ' + dataBarang.Stf02.NAMA2 + ' ' + dataBarang.Stf02.NAMA3,
                                                    //    berat = (dataBarang.Stf02.BERAT).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                                    //    Keterangan = dataBarang.Stf02.Deskripsi,
                                                    //    Qty = "0",
                                                    //    MinQty = "0",
                                                    //    PickupPoint = stf02h.PICKUP_POINT,
                                                    //    IDMarket = tblCustomer.RecNum.ToString(),
                                                    //    Length = Convert.ToString(dataBarang.Stf02.PANJANG),
                                                    //    Width = Convert.ToString(dataBarang.Stf02.LEBAR),
                                                    //    Height = Convert.ToString(dataBarang.Stf02.TINGGI),
                                                    //    type = Convert.ToString(dataBarang.Stf02.TYPE),
                                                    //    dataBarangInDb = barangInDb
                                                    //};
                                                    //data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                                                    //data.Price = Convert.ToString(barangInDb.HJUAL);
                                                    //data.MarketPrice = Convert.ToString(stf02h.HJUAL);
                                                    //data.CategoryCode = Convert.ToString(stf02h.CATEGORY_CODE);

                                                    //data.display = display ? "true" : "false";
                                                    //BlibliController bliAPI = new BlibliController();
                                                    //Task.Run(() => bliAPI.CreateProduct(iden, data).Wait());
                                                    string data_kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG;
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new BlibliControllerJob().CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null).Wait());
#else
                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<BlibliControllerJob>(x => x.CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null));
#endif
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        protected void saveBarangBlibliVariant(int mode, string dataBarang_Stf02_BRG)
        {
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == dataBarang_Stf02_BRG);
            var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI");
            if (barangInDb != null && kdBlibli != null)
            {
                var listBlibli = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBlibli.IdMarket.ToString()).ToList();
                if (listBlibli.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                foreach (ARF01 tblCustomer in listBlibli)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Kode))
                                    {
                                        //if (string.IsNullOrEmpty(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).BRG_MP))
                                        //{

                                        //var fileExtension = Path.GetExtension(file.FileName);
                                        //var namaFile = $"FotoProduk-{dataBarang.Stf02.USERNAME}-{dataBarang.Stf02.BRG}-foto-{i + 1}{fileExtension}";
                                        //var path = Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile);
                                        var display = Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY);
                                        if (display)
                                        {
                                            //change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                            //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                            //{
                                            //    merchant_code = tblCustomer.Sort1_Cust,
                                            //    API_client_password = tblCustomer.API_CLIENT_P,
                                            //    API_client_username = tblCustomer.API_CLIENT_U,
                                            //    API_secret_key = tblCustomer.API_KEY,
                                            //    token = tblCustomer.TOKEN,
                                            //    mta_username_email_merchant = tblCustomer.EMAIL,
                                            //    mta_password_password_merchant = tblCustomer.PASSWORD,
                                            //    idmarket = tblCustomer.RecNum.Value
                                            //};
                                            BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                                            {
                                                merchant_code = tblCustomer.Sort1_Cust,
                                                API_client_password = tblCustomer.API_CLIENT_P,
                                                API_client_username = tblCustomer.API_CLIENT_U,
                                                API_secret_key = tblCustomer.API_KEY,
                                                //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                token = tblCustomer.TOKEN,
                                                mta_username_email_merchant = tblCustomer.EMAIL,
                                                mta_password_password_merchant = tblCustomer.PASSWORD,
                                                idmarket = tblCustomer.RecNum.Value,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin,
                                                versiToken = tblCustomer.KD_ANALISA
                                            };
                                            //end change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                            //                                            BlibliControllerJob.BlibliProductData data = new BlibliControllerJob.BlibliProductData
                                            //                                            {
                                            //                                                kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG,
                                            //                                                nama = barangInDb.NAMA + ' ' + barangInDb.NAMA2 + ' ' + barangInDb.NAMA3,
                                            //                                                berat = (barangInDb.BERAT).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                            //                                                Keterangan = barangInDb.Deskripsi,
                                            //                                                Qty = "0",
                                            //                                                MinQty = "0",
                                            //                                                PickupPoint = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).PICKUP_POINT.ToString(),
                                            //                                                IDMarket = tblCustomer.RecNum.ToString(),
                                            //                                                Length = Convert.ToString(barangInDb.PANJANG),
                                            //                                                Width = Convert.ToString(barangInDb.LEBAR),
                                            //                                                Height = Convert.ToString(barangInDb.TINGGI),
                                            //                                                dataBarangInDb = barangInDb
                                            //                                            };
                                            //                                            data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == barangInDb.Sort2 && m.LEVEL == "2").KET;
                                            //                                            data.Price = barangInDb.HJUAL.ToString();
                                            //                                            data.MarketPrice = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).HJUAL.ToString();
                                            //                                            data.CategoryCode = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG) && m.IDMARKET == tblCustomer.RecNum).CATEGORY_CODE.ToString();
                                            //
                                            //                                            data.display = display ? "true" : "false";
                                            //BlibliController bliAPI = new BlibliController();
                                            //Task.Run(() => bliAPI.CreateProduct(iden, data).Wait());
                                            string data_kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG;
                                            string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                            Task.Run(() => new BlibliControllerJob().CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null)).Wait();
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<BlibliControllerJob>(x => x.CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null));
#endif
                                        }
                                        //new BlibliController().GetQueueFeedDetail(iden, null);
                                        //}
                                    }
                                }
                            }
                            break;
                        #endregion
                        case 2:
                            {
                                var qtyOnHand = GetQOHSTF08A(string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG, "ALL");
                                foreach (ARF01 tblCustomer in listBlibli)
                                {
                                    if (!string.IsNullOrEmpty(tblCustomer.Kode))
                                    {
                                        var stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == barangInDb.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                        if (stf02h != null)
                                        {
                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                            {
                                                var BliApi = new BlibliController();
                                                BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                                {
                                                    merchant_code = tblCustomer.Sort1_Cust,
                                                    API_client_password = tblCustomer.API_CLIENT_P,
                                                    API_client_username = tblCustomer.API_CLIENT_U,
                                                    API_secret_key = tblCustomer.API_KEY,
                                                    token = tblCustomer.TOKEN,
                                                    mta_username_email_merchant = tblCustomer.EMAIL,
                                                    mta_password_password_merchant = tblCustomer.PASSWORD,
                                                    idmarket = tblCustomer.RecNum.Value,
                                                    versiToken = tblCustomer.KD_ANALISA
                                                };
                                                if (stf02h.BRG_MP == "PENDING")
                                                {
                                                    var BliApiJob = new BlibliControllerJob();
                                                    BlibliControllerJob.BlibliAPIData iden2 = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    string data_kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG;
                                                    var listLog = ErasoftDbContext.API_LOG_MARKETPLACE.Where(m => m.REQUEST_ACTION == "Create Product" && m.MARKETPLACE.ToUpper() == "BLIBLI" && m.REQUEST_STATUS.ToLower() == "pending" && m.REQUEST_ATTRIBUTE_1 == data_kode).OrderByDescending(m => m.REQUEST_DATETIME).ToList();
                                                    if (listLog != null)
                                                    {
                                                        foreach (var insertLog in listLog)
                                                        {
                                                            var queBlibli = EDB.GetDataSet("CString", "QUEUE_FEED_BLIBLI", "SELECT * FROM QUEUE_FEED_BLIBLI WHERE LOG_REQUEST_ID = '" + insertLog.REQUEST_ID + "' AND MERCHANT_CODE='" + iden2.merchant_code + "' AND STATUS = '1'");
                                                            if (queBlibli.Tables[0].Rows.Count > 0)
                                                            {
                                                                var queData = new BlibliControllerJob.BlibliQueueFeedData
                                                                {
                                                                    log_request_id = queBlibli.Tables[0].Rows[0]["LOG_REQUEST_ID"].ToString(),
                                                                    request_id = queBlibli.Tables[0].Rows[0]["REQUESTID"].ToString()
                                                                };
                                                                string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION = 'Cek Status Review') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                                EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                                Task.Run(() => BliApiJob.GetQueueFeedDetail(iden2, queData).Wait());
#else
                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<BlibliControllerJob>(x => x.GetQueueFeedDetail(iden2, queData));
#endif
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    //Task.Run(() => BliApi.GetQueueFeedDetail(iden, null).Wait());
                                                }
                                                else if (stf02h.BRG_MP.Contains("NEED_CORRECTION"))
                                                {
                                                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                        //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    string data_kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG;
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND (REQUEST_ACTION = 'Buat Produk' OR REQUEST_ACTION = 'Cek Status Review') AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new BlibliControllerJob().ReviseProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", idenJob, null, null).Wait());
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<BlibliControllerJob>(x => x.ReviseProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", idenJob, null, null));
#endif
                                                }
                                                else
                                                {
                                                    #region update
                                                    var listvar = ErasoftDbContext.STF02.Where(m => m.PART == barangInDb.BRG).ToList();
                                                    foreach (var varian in listvar)
                                                    {
                                                        stf02h = ErasoftDbContext.STF02H.Where(p => p.BRG == varian.BRG && p.IDMARKET == tblCustomer.RecNum).FirstOrDefault();
                                                        if (stf02h != null)
                                                        {
                                                            if (!string.IsNullOrEmpty(stf02h.BRG_MP))
                                                            {
                                                                BlibliController.BlibliProductData data = new BlibliController.BlibliProductData
                                                                {
                                                                    kode = barangInDb.BRG,
                                                                    kode_mp = stf02h.BRG_MP,
                                                                    Qty = Convert.ToString(qtyOnHand),
                                                                    MinQty = "0"
                                                                };
                                                                data.Price = barangInDb.HJUAL.ToString();
                                                                data.MarketPrice = stf02h.HJUAL.ToString();
                                                                var display = Convert.ToBoolean(stf02h.DISPLAY);
                                                                data.display = display ? "true" : "false";
                                                                var BliApi2 = new BlibliController();
                                                                Task.Run(() => BliApi2.UpdateProdukQOH_Display(iden, data).Wait());
                                                            }
                                                        }
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else
                                            {
                                                var display = Convert.ToBoolean(stf02h.DISPLAY);
                                                if (display)
                                                {
                                                    #region insert
                                                    //change by calvin 9 juni 2019, ganti jadi pakai hangfire
                                                    //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                                    //{
                                                    //    merchant_code = tblCustomer.Sort1_Cust,
                                                    //    API_client_password = tblCustomer.API_CLIENT_P,
                                                    //    API_client_username = tblCustomer.API_CLIENT_U,
                                                    //    API_secret_key = tblCustomer.API_KEY,
                                                    //    token = tblCustomer.TOKEN,
                                                    //    mta_username_email_merchant = tblCustomer.EMAIL,
                                                    //    mta_password_password_merchant = tblCustomer.PASSWORD,
                                                    //    idmarket = tblCustomer.RecNum.Value
                                                    //};
                                                    BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                                                    {
                                                        merchant_code = tblCustomer.Sort1_Cust,
                                                        API_client_password = tblCustomer.API_CLIENT_P,
                                                        API_client_username = tblCustomer.API_CLIENT_U,
                                                        API_secret_key = tblCustomer.API_KEY,
                                                        //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                                                        //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                                                        token = tblCustomer.TOKEN,
                                                        mta_username_email_merchant = tblCustomer.EMAIL,
                                                        mta_password_password_merchant = tblCustomer.PASSWORD,
                                                        idmarket = tblCustomer.RecNum.Value,
                                                        DatabasePathErasoft = dbPathEra,
                                                        username = usernameLogin,
                                                        versiToken = tblCustomer.KD_ANALISA
                                                    };
                                                    //end change by calvin 9 juni 2019, ganti jadi pakai hangfire

                                                    //                                                    BlibliControllerJob.BlibliProductData data = new BlibliControllerJob.BlibliProductData
                                                    //                                                    {
                                                    //                                                        kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG,
                                                    //                                                        nama = barangInDb.NAMA + ' ' + barangInDb.NAMA2 + ' ' + barangInDb.NAMA3,
                                                    //                                                        berat = (barangInDb.BERAT).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                                    //                                                        Keterangan = barangInDb.Deskripsi,
                                                    //                                                        Qty = "0",
                                                    //                                                        MinQty = "0",
                                                    //                                                        PickupPoint = stf02h.PICKUP_POINT,
                                                    //                                                        IDMarket = tblCustomer.RecNum.ToString(),
                                                    //                                                        Length = Convert.ToString(barangInDb.PANJANG),
                                                    //                                                        Width = Convert.ToString(barangInDb.LEBAR),
                                                    //                                                        Height = Convert.ToString(barangInDb.TINGGI),
                                                    //                                                        dataBarangInDb = barangInDb
                                                    //                                                    };
                                                    //                                                    data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == barangInDb.Sort2 && m.LEVEL == "2").KET;
                                                    //                                                    data.Price = Convert.ToString(barangInDb.HJUAL);
                                                    //                                                    data.MarketPrice = Convert.ToString(stf02h.HJUAL);
                                                    //                                                    data.CategoryCode = Convert.ToString(stf02h.CATEGORY_CODE);
                                                    //
                                                    //                                                    data.display = display ? "true" : "false";
                                                    //BlibliController bliAPI = new BlibliController();
                                                    //Task.Run(() => bliAPI.CreateProduct(iden, data).Wait());
                                                    string data_kode = string.IsNullOrEmpty(dataBarang_Stf02_BRG) ? barangInDb.BRG : dataBarang_Stf02_BRG;
                                                    string sSQL = "DELETE FROM API_LOG_MARKETPLACE WHERE REQUEST_ATTRIBUTE_5 = 'HANGFIRE' AND REQUEST_ACTION = 'Buat Produk' AND CUST = '" + tblCustomer.CUST + "' AND CUST_ATTRIBUTE_1 = '" + data_kode + "'";
                                                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
#if (DEBUG || Debug_AWS)
                                                    Task.Run(() => new BlibliControllerJob().CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null).Wait());
#else
                                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                    clientJobServer.Enqueue<BlibliControllerJob>(x => x.CreateProduct(dbPathEra, data_kode, tblCustomer.CUST, "Barang", "Buat Produk", iden, null, null));
#endif
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        protected void saveBarangElevenia(int mode, BarangViewModel dataBarang, string[] imgPath)
        {
            //mode 1 Create Product - Hide Item, 2 Update, 3 Display / Hide Item
            var barangInDb = ErasoftDbContext.STF02.SingleOrDefault(b => b.ID == dataBarang.Stf02.ID || b.BRG == dataBarang.Stf02.BRG);
            var kdEl = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA");
            if (barangInDb != null && kdEl != null)
            {
                var listElShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdEl.IdMarket.ToString()).ToList();
                if (listElShop.Count > 0)
                {
                    switch (mode)
                    {
                        #region Create Product lalu Hide Item
                        case 1:
                            {
                                #region getUrlImage, remark by calvin 19 nov 2018
                                //                                //string[] imgID = new string[Request.Files.Count];
                                //                                string[] imgID = new string[3];
                                //                                //if (Request.Files.Count > 0)
                                //                                //{
                                //                                for (int i = 0; i < 3; i++)
                                //                                {
                                //                                    //var file = Request.Files[i];

                                //                                    //if (file != null && file.ContentLength > 0)
                                //                                    //{
                                //                                    //    var fileExtension = Path.GetExtension(file.FileName);

                                //                                    //imgID[i] = "https://masteronline.co.id/ele/image?id=" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}.jpg";
                                //#if AWS
                                //                                    imgID[i] = "https://masteronline.co.id/ele/image/" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}";
                                //#else
                                //                                    imgID[i] = "https://dev.masteronline.co.id/ele/image/" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}";
                                //#endif
                                //                                    //imgID[i] = Convert.ToString(imgID[i]).Replace(" ", "%20");

                                //                                    //}
                                //                                }
                                //                                //}
                                #endregion
                                foreach (ARF01 tblCustomer in listElShop)
                                {
                                    var stf02h = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum);
                                    if (stf02h != null)
                                    {
                                        var display = Convert.ToBoolean(stf02h.DISPLAY);
                                        if (display)
                                        {
                                            EleveniaControllerJob.EleveniaProductData data = new EleveniaControllerJob.EleveniaProductData
                                            {
                                                api_key = tblCustomer.API_KEY,
                                                kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG,
                                                nama = dataBarang.Stf02.NAMA + ' ' + dataBarang.Stf02.NAMA2 + ' ' + dataBarang.Stf02.NAMA3,
                                                berat = (dataBarang.Stf02.BERAT / 1000).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                                imgUrl = imgPath,
                                                Keterangan = dataBarang.Stf02.Deskripsi,
                                                //Qty = "1",
                                                Qty = "0",
                                                DeliveryTempNo = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DeliveryTempElevenia.ToString(),
                                                IDMarket = tblCustomer.RecNum.ToString(),
                                            };
                                            data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                                            data.Price = stf02h.HJUAL.ToString();
#if (DEBUG || Debug_AWS)
                                            var result = new EleveniaControllerJob().CreateProduct(dbPathEra, data, display, usernameLogin);
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<EleveniaControllerJob>(x => x.CreateProduct(dbPathEra, data, display, usernameLogin));
#endif
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion
                        #region Update Product
                        case 2:
                            {
                                #region getUrlImage, remark by calvin 19 nov 2018
                                //                                //string[] imgID = new string[Request.Files.Count];
                                //                                string[] imgID = new string[3];
                                //                                //if (Request.Files.Count > 0)
                                //                                //{
                                //                                for (int i = 0; i < 3; i++)
                                //                                {
                                //                                    //var file = Request.Files[i];

                                //                                    //if (file != null && file.ContentLength > 0)
                                //                                    //{
                                //                                    //    var fileExtension = Path.GetExtension(file.FileName);

                                //                                    //imgID[i] = "https://masteronline.co.id/ele/image?id=" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}.jpg";
                                //#if AWS
                                //                                    imgID[i] = "https://masteronline.co.id/ele/image/" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}";
                                //#else
                                //                                    imgID[i] = "https://dev.masteronline.co.id/ele/image/" + $"FotoProduk-{barangInDb.USERNAME}-{barangInDb.BRG}-foto-{i + 1}";
                                //#endif
                                //                                    //imgID[i] = Convert.ToString(imgID[i]).Replace(" ", "%20");

                                //                                    //}
                                //                                }
                                //                                //}
                                #endregion
                                foreach (ARF01 tblCustomer in listElShop)
                                {
                                    var stf02h = ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum);
                                    if (stf02h != null)
                                    {
                                        var qtyOnHand = GetQOHSTF08A(string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG, "ALL");

                                        EleveniaControllerJob.EleveniaProductData data = new EleveniaControllerJob.EleveniaProductData
                                        {
                                            api_key = tblCustomer.API_KEY,
                                            kode = string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG,
                                            nama = dataBarang.Stf02.NAMA + ' ' + dataBarang.Stf02.NAMA2 + ' ' + dataBarang.Stf02.NAMA3,
                                            berat = (dataBarang.Stf02.BERAT / 1000).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                                            imgUrl = imgPath,
                                            Keterangan = dataBarang.Stf02.Deskripsi,
                                            Qty = Convert.ToString(qtyOnHand),
                                            IDMarket = tblCustomer.RecNum.ToString(),
                                        };
                                        data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataBarang.Stf02.Sort2 && m.LEVEL == "2").KET;
                                        data.Price = stf02h.HJUAL.ToString();
                                        data.DeliveryTempNo = string.IsNullOrEmpty(stf02h.DeliveryTempElevenia) ? "" : stf02h.DeliveryTempElevenia;
                                        data.kode_mp = Convert.ToString(stf02h.BRG_MP);

                                        var display = Convert.ToBoolean(stf02h.DISPLAY);
                                        if (string.IsNullOrEmpty(data.kode_mp) && display)
                                        {
                                            //var result = new EleveniaController().CreateProduct(data, display);
#if (DEBUG || Debug_AWS)
                                            var result = new EleveniaControllerJob().CreateProduct(dbPathEra, data, display, usernameLogin);
#else
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            clientJobServer.Enqueue<EleveniaControllerJob>(x => x.CreateProduct(dbPathEra, data, display, usernameLogin));
#endif
                                        }
                                        else if (!string.IsNullOrEmpty(data.kode_mp))
                                        {
                                            var result = new EleveniaControllerJob().UpdateProduct(dbPathEra, data, usernameLogin);
                                        }
                                        //if (result.resultCode.Equals("200"))
                                        //{
                                        //    #region Hide Item
                                        //    EleveniaController.EleveniaProductData data2 = new EleveniaController.EleveniaProductData
                                        //    {
                                        //        api_key = tblCustomer.TOKEN,
                                        //        kode = Convert.ToString(result.productNo)
                                        //    };
                                        //    var resultHide = new EleveniaController().HideItem(data2);
                                        //    #endregion
                                        //}
                                    }
                                }
                            }
                            break;
                        #endregion
                        #region Display/Hide Item
                        case 3:
                            foreach (ARF01 tblCustomer in listElShop)
                            {
                                EleveniaController.EleveniaProductData data = new EleveniaController.EleveniaProductData
                                {
                                    api_key = tblCustomer.API_KEY,
                                    kode = Convert.ToString(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).BRG_MP)
                                };
                                if (Convert.ToBoolean(ErasoftDbContext.STF02H.SingleOrDefault(m => m.BRG == (string.IsNullOrEmpty(dataBarang.Stf02.BRG) ? barangInDb.BRG : dataBarang.Stf02.BRG) && m.IDMARKET == tblCustomer.RecNum).DISPLAY))
                                {
                                    var result = new EleveniaController().DisplayItem(data);
                                }
                                else if (!string.IsNullOrEmpty(data.kode_mp))//add by Tri, tidak perlu panggil api jika kode_mp == null
                                {
                                    var result = new EleveniaController().HideItem(data);
                                }
                            }
                            break;
                        #endregion
                        default:
                            break;
                    }
                }
            }
        }

        [Route("manage/EditBarang")]
        public ActionResult EditBarang(string barangId)
        {
            try
            {
                //remark by calvin 23 april 2019
                ////add by calvin 9 nov 2018
                //var kdBli = MoDbContext.Marketplaces.Single(m => m.NamaMarket.ToUpper() == "BLIBLI");
                //var listBLIShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdBli.IdMarket.ToString()).ToList();
                //if (listBLIShop.Count > 0)
                //{
                //    var BliApi = new BlibliController();
                //    foreach (ARF01 tblCustomer in listBLIShop)
                //    {
                //        if (!string.IsNullOrEmpty(tblCustomer.API_CLIENT_P) && !string.IsNullOrEmpty(tblCustomer.API_CLIENT_U))
                //        {
                //            BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                //            {
                //                API_client_username = tblCustomer.API_CLIENT_U,
                //                API_client_password = tblCustomer.API_CLIENT_P,
                //                API_secret_key = tblCustomer.API_KEY,
                //                mta_username_email_merchant = tblCustomer.EMAIL,
                //                mta_password_password_merchant = tblCustomer.PASSWORD,
                //                merchant_code = tblCustomer.Sort1_Cust,
                //                token = tblCustomer.TOKEN,
                //                idmarket = tblCustomer.RecNum.Value
                //            };
                //            Task.Run(() => BliApi.GetQueueFeedDetail(data, null).Wait());
                //        }
                //    }
                //}
                ////end add by calvin 9 nov 2018
                //end remark by calvin 23 april 2019

                var vm = new BarangViewModel()
                {
                    //change by nurul 18/1/2019 -- Stf02 = ErasoftDbContext.STF02.Single(b => b.BRG == barangId),
                    Stf02 = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").Single(b => b.BRG == barangId),
                    //change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList(),

                    //remark by calvin 23 april 2019
                    //ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),
                    //end remark by calvin 23 april 2019

                    //ListCategoryBlibli = MoDbContext.CategoryBlibli.Where(p => string.IsNullOrEmpty(p.PARENT_CODE)).ToList(),
                    ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                    ListHargaJualPermarketView = ErasoftDbContext.STF02H.AsNoTracking().Where(h => h.BRG == barangId).OrderBy(p => p.IDMARKET).ToList(),
                    //StatusLog = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_PER_ITEM>("SELECT * FROM API_LOG_MARKETPLACE_PER_ITEM WHERE REQUEST_ATTRIBUTE_1 = '" + barangId + "' AND REQUEST_ACTION IN ('Create Product','create brg','create Produk')").ToList()
                };

                return PartialView("FormBarangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult RefreshFormBarang()
        {
            var vm = new BarangViewModel()
            {
                //remark by calvin 23 april 2019
                //ListKategoriMerk = ErasoftDbContext.STF02E.ToList(),
                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                ListHargaJualPermarketView = ErasoftDbContext.STF02H.Where(p => 0 == 1).OrderBy(p => p.IDMARKET).ToList(),
                //ListCategoryBlibli = MoDbContext.CategoryBlibli.Where(p => string.IsNullOrEmpty(p.PARENT_CODE)).ToList(),
                DataUsaha = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1),
                //StatusLog = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_PER_ITEM>("SELECT * FROM API_LOG_MARKETPLACE_PER_ITEM WHERE 0 = 1").ToList()
            };

            return PartialView("FormBarangPartial", vm);
        }

        public ActionResult DeleteBarang(string barangId)
        {
            //change by nurul 18/1/2019 -- var barangInDb = ErasoftDbContext.STF02.Single(b => b.BRG == barangId);
            var barangInDb = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").Single(b => b.BRG == barangId);

            //add by nurul 30/7/2018
            var vmError = new StokViewModel() { };

            var cekFaktur = ErasoftDbContext.SIT01B.Count(k => k.BRG == barangInDb.BRG);
            var cekPembelian = ErasoftDbContext.PBT01B.Count(k => k.BRG == barangInDb.BRG);
            var cekTransaksi = ErasoftDbContext.STT01B.Count(k => k.Kobar == barangInDb.BRG);
            var cekPesanan = ErasoftDbContext.SOT01B.Count(k => k.BRG == barangInDb.BRG);
            var cekPromosi = ErasoftDbContext.DETAILPROMOSI.Count(k => k.KODE_BRG == barangInDb.BRG);

            if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0 || cekPromosi > 0)
            {
                vmError.Errors.Add("Barang sudah dipakai di transaksi !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //end add

            var stf02hh = ErasoftDbContext.STF02H.Where(h => h.BRG == barangId).ToList();
            if (stf02hh.Count > 0)
            {
                ErasoftDbContext.STF02H.RemoveRange(stf02hh);
            }

            //add by calvin 25 april 2019
            var variasi = ErasoftDbContext.STF02.Where(p => p.PART == barangId).ToList();
            var variasi_brg_list = variasi.Select(p => p.BRG).ToList();
            if (variasi_brg_list.Count > 0)
            {
                var STF02H_Variasi = ErasoftDbContext.STF02H.Where(p => variasi_brg_list.Contains(p.BRG)).ToList();
                if (STF02H_Variasi.Count > 0)
                {
                    ErasoftDbContext.STF02H.RemoveRange(STF02H_Variasi);
                }
                ErasoftDbContext.STF02.RemoveRange(variasi);
            }
            var strukturVar = ErasoftDbContext.STF02I.Where(p => p.BRG == barangId).ToList();
            if (strukturVar.Count > 0)
            {
                ErasoftDbContext.STF02I.RemoveRange(strukturVar);
            }
            //end add by calvin 25 april 2019

            ErasoftDbContext.STF02.Remove(barangInDb);
            ErasoftDbContext.SaveChanges();

            var partialVm = new BarangViewModel()
            {
                //remark by calvin 23 april 2019
                ////change by nurul 18/1/2019 -- ListStf02S = ErasoftDbContext.STF02.ToList()
                //ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList()
                //end remark by calvin 23 april 2019
            };

            partialVm.Errors = null;
            return Json(partialVm, JsonRequestBehavior.AllowGet);
        }

        [Route("manage/promptdeliverytempelevenia")]
        public ActionResult PromptDeliveryTempElevenia(string recnum)
        {
            try
            {
                var PromptModel = ErasoftDbContext.DeliveryTemplateElevenia.Where(a => a.RECNUM_ARF01.ToString() == recnum).ToList();
                return View("PromptDeliveryTempElevenia", PromptModel);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        [Route("manage/promptetalasetokped")]
        public ActionResult PromptEtalaseTokped(string recnum)
        {
            try
            {
                int recnum_int = Convert.ToInt32(recnum);
                var tblCustomer = ErasoftDbContext.ARF01.Where(m => m.RecNum == recnum_int).FirstOrDefault();
                var tokopediaApi = new TokopediaController();

                TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData
                {
                    merchant_code = tblCustomer.Sort1_Cust, //FSID
                    API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                    API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                    API_secret_key = tblCustomer.API_KEY, //Shop ID 
                    token = tblCustomer.TOKEN,
                    idmarket = tblCustomer.RecNum.Value
                };
                var PromptModel = tokopediaApi.GetEtalase(iden);
                return View("PromptEtalaseTokopedia", PromptModel);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }


        [Route("manage/PromptDeliveryProviderLazada")]
        public ActionResult PromptDeliveryProviderLazada(string cust)
        {
            try
            {
                var PromptModel = ErasoftDbContext.DELIVERY_PROVIDER_LAZADA.Where(a => a.CUST == cust).ToList();
                return View("PromptDeliveryProviderLazada", PromptModel);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult PromptPickupPointBlibli(string merchant_code)
        {
            try
            {
                var PromptModel = ErasoftDbContext.PICKUP_POINT_BLIBLI.Where(a => a.MERCHANT_CODE.ToString() == merchant_code).ToList();
                //add by nurul 24/7/2020
                if (PromptModel.Count() == 0)
                {
                    var tblcustomer = ErasoftDbContext.ARF01.Where(a => a.Sort1_Cust == merchant_code).FirstOrDefault();
                    if (tblcustomer != null)
                    {
                        if (!string.IsNullOrEmpty(tblcustomer.API_CLIENT_P) && !string.IsNullOrEmpty(tblcustomer.API_CLIENT_U))
                        {
                            var BliApi = new BlibliController();
                            BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                            {
                                API_client_username = tblcustomer.API_CLIENT_U,
                                API_client_password = tblcustomer.API_CLIENT_P,
                                API_secret_key = tblcustomer.API_KEY,
                                mta_username_email_merchant = tblcustomer.EMAIL,
                                mta_password_password_merchant = tblcustomer.PASSWORD,
                                merchant_code = tblcustomer.Sort1_Cust,
                                idmarket = tblcustomer.RecNum.Value,
                                versiToken = tblcustomer.KD_ANALISA
                            };
                            Task.Run(() => BliApi.GetPickupPoint(data));
                            PromptModel = ErasoftDbContext.PICKUP_POINT_BLIBLI.Where(a => a.MERCHANT_CODE.ToString() == merchant_code).ToList();
                        }
                    }
                }
                //end add by nurul 24/7/2020
                return View("PromptPickupPointBlibli", PromptModel);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult PromptBrandLazada(string merchant_code)
        {
            try
            {
                return View("PromptBrandLazada");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult RefreshBrandLazada(int? page, string search = "")
        {

            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;


            var BrandLazada = (from p in MoDbContext.BrandLazada
                               where p.name.Contains(search)
                               orderby p.name
                               select p);
            var PromptModel = BrandLazada.Skip(pagenumber * 5).Take(5).ToList();

            IPagedList<BRAND_LAZADA> pageOrders = new StaticPagedList<BRAND_LAZADA>(PromptModel, pagenumber + 1, 5, BrandLazada.Count());
            return PartialView("TablePromptBrandLazada", pageOrders);
        }

        public ActionResult PromptBrandBlibli(string merchant_code, string category)
        {
            try
            {
                ViewData["cust"] = merchant_code;
                ViewData["category"] = category;
                return View("PromptBrandBlibli");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult PromptBrandShopify(string merchant_code, string category)
        {
            try
            {
                ViewData["cust"] = merchant_code;
                ViewData["category"] = category;
                return View("PromptBrandShopify");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }


        public ActionResult PromptBrand82Cart(string merchant_code, string category)
        {
            try
            {
                ViewData["cust"] = merchant_code;
                ViewData["category"] = category;
                return View("PromptBrand82Cart");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult PromptBrandJDID(string merchant_code, string category)
        {
            try
            {
                ViewData["cust"] = merchant_code;
                ViewData["category"] = category;
                return View("PromptBrandJDID");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public ActionResult PromptAttribute82Cart(string cust, string attribute)
        {
            try
            {
                ViewData["cust"] = cust;
                ViewData["attribute"] = attribute;
                return View("PromptAttribute82Cart");
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        public static long CurrentTimeMillis()
        {
            //        return (long)DateTime.Now.ToUniversalTime().Subtract(
            //new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)
            //).TotalMilliseconds;
            return (long)DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        }
        private string CreateToken(string urlBlili, string secretMTA)
        {
            secretMTA = secretMTA ?? "";
            var encoding = new System.Text.ASCIIEncoding();
            byte[] keyByte = encoding.GetBytes(secretMTA);
            byte[] messageBytes = encoding.GetBytes(urlBlili);
            using (var hmacsha256 = new System.Security.Cryptography.HMACSHA256(keyByte))
            {
                byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
                return Convert.ToBase64String(hashmessage);
                //return BitConverter.ToString(hashmessage).Replace("-", "").ToLower();

            }
        }

        public async Task<ActionResult> RefreshBrandBlibli(string category, string cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["cust"] = cust;
            ViewData["category"] = category;
            if (string.IsNullOrEmpty(search))
                search = "a";
            var marketPlace = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).SingleOrDefault();
            if (marketPlace != null)
            {
                BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData
                {
                    merchant_code = marketPlace.Sort1_Cust,
                    API_client_password = marketPlace.API_CLIENT_P,
                    API_client_username = marketPlace.API_CLIENT_U,
                    API_secret_key = marketPlace.API_KEY,
                    token = marketPlace.TOKEN,
                    mta_username_email_merchant = marketPlace.EMAIL,
                    mta_password_password_merchant = marketPlace.PASSWORD,
                    idmarket = marketPlace.RecNum.Value,
                    versiToken = marketPlace.KD_ANALISA
                };

                long milis = CurrentTimeMillis();
                DateTime milisBack = DateTimeOffset.FromUnixTimeMilliseconds(milis).UtcDateTime.AddHours(7);// Jan1st1970.AddMilliseconds(Convert.ToDouble(milis)).AddHours(7);

                string apiId = data.API_client_username + ":" + data.API_client_password;//<-- diambil dari profil API
                string userMTA = data.mta_username_email_merchant;//<-- email user merchant
                string passMTA = data.mta_password_password_merchant;//<-- pass merchant

                //add by nurul 13/7/2020
                string urll = "https://api.blibli.com/v2/proxy/mta/api/businesspartner/v2/product/getBrands";
                System.Net.HttpWebRequest myReq = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(urll);
                //end add by nurul 13/7/2020

                //change by nurul 13/7/2020
                if (data.versiToken != "2")
                {
                    //string signature = CreateToken("GET\n\n\n" + milisBack.ToString("ddd MMM dd HH:mm:ss WIB yyyy") + "\n/mtaapi/api/businesspartner/v1/product/getBrands", data.API_secret_key);

                    //string urll = "https://api.blibli.com/v2/proxy/mta/api/businesspartner/v1/product/getBrands?requestId=" + Uri.EscapeDataString("MasterOnline-" + milis.ToString()) + "&businessPartnerCode=" + Uri.EscapeDataString(data.merchant_code) + "&channelId=MasterOnline&brands=" + search + "&masterCategoryCode=" + category + "&page=" + pagenumber + "&size=10";
                    string signature = CreateToken("GET\n\n\n" + milisBack.ToString("ddd MMM dd HH:mm:ss WIB yyyy") + "\n/mtaapi/api/businesspartner/v2/product/getBrands", data.API_secret_key);

                    urll = "https://api.blibli.com/v2/proxy/mta/api/businesspartner/v2/product/getBrands?requestId=" + Uri.EscapeDataString("MasterOnline-" + milis.ToString()) + "&businessPartnerCode=" + Uri.EscapeDataString(data.merchant_code) + "&channelId=MasterOnline&brandName=" + search + "&username=" + Uri.EscapeDataString(data.mta_username_email_merchant) + "&page=" + pagenumber + "&size=50&storeId=10001";

                    myReq = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(urll);
                    myReq.Method = "GET";
                    myReq.Headers.Add("Authorization", ("bearer " + data.token));
                    myReq.Headers.Add("x-blibli-mta-authorization", ("BMA " + userMTA + ":" + signature));
                    myReq.Headers.Add("x-blibli-mta-date-milis", (milis.ToString()));
                    myReq.Accept = "application/json";
                    myReq.ContentType = "application/json";
                    myReq.Headers.Add("requestId", milis.ToString());
                    myReq.Headers.Add("sessionId", milis.ToString());
                    myReq.Headers.Add("username", userMTA);
                }
                else
                {
                    string usernameMO = data.API_client_username;
                    //string passMO = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk";
                    string passMO = data.API_client_password;
                    urll = "https://api.blibli.com/v2/proxy/mta/api/businesspartner/v2/product/getBrands?requestId=" + Uri.EscapeDataString("MasterOnline-" + milis.ToString()) + "&businessPartnerCode=" + Uri.EscapeDataString(data.merchant_code) + "&channelId=MasterOnline&brandName=" + search + "&username=" + Uri.EscapeDataString(data.mta_username_email_merchant) + "&page=" + pagenumber + "&size=50&storeId=10001";

                    myReq = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(urll);
                    myReq.Method = "GET";
                    myReq.Headers.Add("Authorization", ("Basic " + Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(usernameMO + ":" + passMO))));
                    myReq.Accept = "application/json";
                    myReq.ContentType = "application/json";
                    myReq.Headers.Add("Api-Seller-Key", data.API_secret_key.ToString());
                    myReq.Headers.Add("Signature-Time", milis.ToString());
                }
                string responseFromServer = "";
                try
                {
                    using (System.Net.WebResponse response = myReq.GetResponse())
                    {
                        using (Stream stream = response.GetResponseStream())
                        {
                            StreamReader reader = new StreamReader(stream);
                            responseFromServer = reader.ReadToEnd();
                        }
                    }
                }
                catch (Exception ex)
                {

                }

                if (responseFromServer != "")
                {
                    //var ret = Newtonsoft.Json.JsonConvert.DeserializeObject(responseFromServer, typeof(BlibliBrand)) as BlibliBrand;BlibliBrandV2
                    try
                    {
                        var ret = Newtonsoft.Json.JsonConvert.DeserializeObject(responseFromServer, typeof(BlibliBrandV2)) as BlibliBrandV2;
                        var list_value = new List<BRAND_BLIBLI>();
                        foreach (var item in ret.content)
                        {
                            if (item.brandApprovalStatus == "APPROVED")
                            {
                                list_value.Add(new BRAND_BLIBLI()
                                {
                                    brand_id = item.brandName,
                                    name = item.brandName
                                });
                            }

                        }
                        IPagedList<BRAND_BLIBLI> pageOrders = new StaticPagedList<BRAND_BLIBLI>(list_value, pagenumber + 1, 10, 10);
                        return PartialView("TablePromptBrandBlibli", pageOrders);
                    }
                    catch (Exception ex)
                    {

                    }

                }
            }

            return PartialView("TablePromptBrandBlibli");
        }

        public async Task<ActionResult> RefreshBrandJDID(string category, string cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["cust"] = cust;
            ViewData["category"] = category;
            if (string.IsNullOrEmpty(search))
                search = "a";
            var marketPlace = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).SingleOrDefault();
            if (marketPlace != null)
            {
                var brandJDID = MoDbContext.BrandJDID.OrderBy(p => p.brandName).ToList();
                //var list_value = new List<BRAND_JDID>();
                //foreach (var item in ret.content)
                //{
                //    if (item.brandApprovalStatus == "APPROVED")
                //    {
                //        list_value.Add(new BRAND_BLIBLI()
                //        {
                //            brand_id = item.brandName,
                //            name = item.brandName
                //        });
                //    }

                //}
                IPagedList<BRAND_JDID> pageOrders = new StaticPagedList<BRAND_JDID>(brandJDID, pagenumber + 1, 10, 10);
                return PartialView("TablePromptBrandJDID", pageOrders);
            }

            return PartialView("TablePromptBrandJDID");
        }

        public async Task<ActionResult> RefreshBrand82Cart(string category, string cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["cust"] = cust;
            ViewData["category"] = category;
            var marketPlace = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).SingleOrDefault();
            if (marketPlace != null)
            {
                EightTwoCartController.E2CartAPIData data = new EightTwoCartController.E2CartAPIData
                {
                    no_cust = marketPlace.CUST,
                    account_store = marketPlace.PERSO,
                    API_key = marketPlace.API_KEY,
                    API_credential = marketPlace.Sort1_Cust,
                    API_url = marketPlace.PERSO,
                    DatabasePathErasoft = dbPathEra
                };

                //string url = "dev.api.82cart.com";
                string urll = string.Format("{0}/api/v1/getManufacturer?apiKey={1}&apiCredential={2}", data.API_url, data.API_key, data.API_credential);

                HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(urll);
                myReq.Method = "GET";
                myReq.ContentType = "application/json";
                string responseServer = "";

                try
                {
                    using (WebResponse response = myReq.GetResponse())
                    {
                        using (Stream stream = response.GetResponseStream())
                        {
                            StreamReader reader = new StreamReader(stream);
                            responseServer = reader.ReadToEnd();
                        }
                    }
                }
                catch (Exception ex)
                {
                }

                if (!string.IsNullOrEmpty(responseServer))
                {
                    var vResultManifactureAPI = Newtonsoft.Json.JsonConvert.DeserializeObject(responseServer, typeof(E2CartManufactureResult)) as E2CartManufactureResult;
                    var list_value = new List<BRAND_82CART>();
                    if (vResultManifactureAPI != null)
                    {
                        if (vResultManifactureAPI.error.ToString() == "none" && vResultManifactureAPI.data.Length > 0)
                        {
                            foreach (var item in vResultManifactureAPI.data)
                            {
                                list_value.Add(new BRAND_82CART()
                                {
                                    id_manufacturer = item.id_manufacturer,
                                    name = item.name,
                                    active = item.active
                                });
                            }
                            IPagedList<BRAND_82CART> pageOrders = new StaticPagedList<BRAND_82CART>(list_value, pagenumber + 1, 10, 10);
                            return PartialView("TablePromptBrand82Cart", pageOrders);
                        }
                    }
                }
            }

            return PartialView("TablePromptBrand82Cart");
        }

        public async Task<ActionResult> RefreshAttribute82Cart(string attribute, int cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["cust"] = cust;
            ViewData["attribute"] = attribute;
            var marketPlace = ErasoftDbContext.ARF01.Where(p => p.RecNum == cust).SingleOrDefault();
            if (marketPlace != null)
            {
                EightTwoCartController.E2CartAPIData data = new EightTwoCartController.E2CartAPIData
                {
                    no_cust = marketPlace.CUST,
                    account_store = marketPlace.PERSO,
                    API_key = marketPlace.API_KEY,
                    API_credential = marketPlace.Sort1_Cust,
                    API_url = marketPlace.PERSO,
                    DatabasePathErasoft = dbPathEra
                };

                //string url = "dev.api.82cart.com";
                string urll = string.Format("{0}/api/v1/getAttribute?apiKey={1}&apiCredential={2}", data.API_url, data.API_key, data.API_credential);

                HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(urll);
                myReq.Method = "GET";
                myReq.ContentType = "application/json";
                string responseServer = "";

                try
                {
                    using (WebResponse response = myReq.GetResponse())
                    {
                        using (Stream stream = response.GetResponseStream())
                        {
                            StreamReader reader = new StreamReader(stream);
                            responseServer = reader.ReadToEnd();
                        }
                    }
                }
                catch (Exception ex)
                {
                }

                if (!string.IsNullOrEmpty(responseServer))
                {
                    var vresult = Newtonsoft.Json.JsonConvert.DeserializeObject(responseServer, typeof(E2CartAttributeResult)) as E2CartAttributeResult;
                    var list_value = new List<ATTRIBUTE_82CART_LIST>();
                    if (vresult != null)
                    {
                        if (vresult.error.ToString() == "none" && vresult.data.Length > 0)
                        {
                            if (vresult.data != null)
                            {
                                foreach (var item in vresult.data)
                                {

                                    if (item.attribute.Count() > 0)
                                    {
                                        if (item.id_attribute_group == attribute)
                                        {
                                            foreach (var detail in item.attribute)
                                            {
                                                list_value.Add(new ATTRIBUTE_82CART_LIST()
                                                {
                                                    id_attribute = detail.id_attribute,
                                                    attribute_name = detail.attribute_name,
                                                    color_attribute = detail.color
                                                });
                                            }
                                        }
                                    }

                                }
                                IPagedList<ATTRIBUTE_82CART_LIST> pageOrders = new StaticPagedList<ATTRIBUTE_82CART_LIST>(list_value, pagenumber + 1, 10, 10);
                                return PartialView("TablePromptAttribute82Cart", pageOrders);
                            }
                        }
                    }
                }
            }

            return PartialView("TablePromptAttribute82Cart");
        }

        protected JsonResult JsonErrorMessage(string message)
        {
            var vmError = new InvoiceViewModel()
            {
            };
            vmError.Errors.Add(message);
            return Json(vmError, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveKategoriBarang(KategoriBarangViewModel dataKategori)
        {
            if (!ModelState.IsValid)
            {
                var vm = new KategoriBarangViewModel()
                {
                    Kategori = dataKategori.Kategori,
                    ListKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "1").ToList()
                };

                return View("KategoriBarang", vm);
            }

            if (dataKategori.Kategori.RecNum == null)
            {
                //change by Tri 2 Juli 2019, kategori : level = 1
                //var checkData = ErasoftDbContext.STF02E.SingleOrDefault(k => k.KODE == dataKategori.Kategori.KODE);
                var checkData = ErasoftDbContext.STF02E.SingleOrDefault(k => k.KODE == dataKategori.Kategori.KODE && k.LEVEL == "1");
                //end change by Tri 2 Juli 2019, kategori : level = 1

                if (checkData == null)
                {
                    ErasoftDbContext.STF02E.Add(dataKategori.Kategori);
                }
                else
                {
                    //change by nurul 2/7/2019
                    //ModelState.AddModelError("", $@"Kategori dengan kode {dataKategori.Kategori.KODE} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");

                    //var kategoriVm = new KategoriBarangViewModel()
                    //{
                    //    Kategori = dataKategori.Kategori,
                    //    ListKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "1").ToList()
                    //};

                    //return View("KategoriBarang", kategoriVm);
                    dataKategori.Errors.Add($@"Kategori dengan kode {dataKategori.Kategori.KODE} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");
                    return Json(dataKategori, JsonRequestBehavior.AllowGet);
                    //end change by nurul 2/7/2019
                }
            }
            else
            {
                //var katInDb = ErasoftDbContext.STF02E.Single(k => k.KODE == dataKategori.Kategori.KODE);
                var katInDb = ErasoftDbContext.STF02E.Single(k => k.RecNum == dataKategori.Kategori.RecNum);

                //katInDb.KODE = dataKategori.Kategori.KODE;
                katInDb.KET = dataKategori.Kategori.KET;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            return RedirectToAction("RefreshTableKategori");
        }

        public ActionResult RefreshTableKategori()
        {
            var listKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "1").OrderByDescending(k => k.RecNum).ToList();

            return PartialView("TableKategoriPartial", listKategori.ToPagedList(1, 10));
        }

        public ActionResult EditKategori(int? recNum)
        {
            var vm = new KategoriBarangViewModel()
            {
                Kategori = ErasoftDbContext.STF02E.Single(k => k.RecNum == recNum)
            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult CekStrukturVar(string kode)
        {
            int validd = 0;
            var cekVariasi = ErasoftDbContext.STF20.Where(p => p.CATEGORY_MO == kode).FirstOrDefault();
            var cekOpsiVariasi = ErasoftDbContext.STF20B.Where(p => p.CATEGORY_MO == kode).FirstOrDefault();
            if (cekVariasi != null && cekOpsiVariasi != null)
            {
                validd = 1;
            }
            var data = new
            {
                adaVariasi = validd
            };
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetStrukturVar(string kode, string brg)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == kode);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var vm = new BarangStrukturVarViewModel()
            {
                Barang = ErasoftDbContext.STF02.Where(p => p.BRG == brg).FirstOrDefault(),
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                VariantPerMP = ErasoftDbContext.STF02I.Where(p => p.BRG == brg).ToList(),
                VariantOptMaster = ErasoftDbContext.STF20B.Where(p => p.CATEGORY_MO == kategori.KODE).ToList(),
                BarangPerMP = ErasoftDbContext.STF02H.Where(p => p.BRG == brg).ToList()
            };
            return PartialView("BarangVarPartial", vm);
        }
        [HttpPost]
        public ActionResult GetOptVariantBarang(string brg, string code, int level)
        {
            var VariantOptInDb = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == code && m.LEVEL_VAR == level).ToList();
            var VariantSelected = ErasoftDbContext.STF02I.Where(m => m.BRG == brg && m.CATEGORY_MO == code && m.LEVEL_VAR == level).ToList();
            string selectedValues = "";
            foreach (var item in VariantSelected)
            {
                selectedValues += item.KODE_VAR + ",";
            }
            var data = new
            {
                selected = selectedValues,
                options = VariantOptInDb
            };
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult SaveOptVariantBarang(string brg, string shopee_code, string tokped_code, string blibli_code, string lazada_code, string e2cart_code, string shopify_code, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var VariantOptMaster = ErasoftDbContext.STF20B.Where(p => p.CATEGORY_MO == kategori.KODE).ToList();

            #region logging map variasi
            var Variasi1 = "";
            if (opt_selected_1 != null)
            {
                foreach (var item in opt_selected_1)
                {
                    Variasi1 += item + ",";
                }
            }
            var Variasi2 = "";
            if (opt_selected_2 != null)
            {
                foreach (var item2 in opt_selected_2)
                {
                    Variasi2 += item2 + ",";
                }
            }
            var Variasi3 = "";
            if (opt_selected_3 != null)
            {
                foreach (var item3 in opt_selected_3)
                {
                    Variasi3 += item3 + ",";
                }
            }
            if (Variasi1.Length > 0)
            {
                Variasi1 = Variasi1.Substring(0, Variasi1.Length - 1);
            }
            if (Variasi2.Length > 0)
            {
                Variasi2 = Variasi2.Substring(0, Variasi2.Length - 1);
            }
            if (Variasi3.Length > 0)
            {
                Variasi3 = Variasi3.Substring(0, Variasi3.Length - 1);
            }

            MasterOnline.API_LOG_MARKETPLACE currentLog = new API_LOG_MARKETPLACE
            {

                REQUEST_ID = DateTime.UtcNow.AddHours(7).ToString("yyyyMMddHHmmss"),
                REQUEST_ACTION = "Mapping Variasi",
                REQUEST_DATETIME = DateTime.UtcNow.AddHours(7),
                REQUEST_ATTRIBUTE_1 = brg,
                REQUEST_ATTRIBUTE_2 = "New Mapping [ 1 : " + Variasi1 + " ; 2 : " + Variasi2 + " ; 3 : " + Variasi3 + " ; ]",
                REQUEST_STATUS = "VARIATION_LOG",
            };

            ErasoftDbContext.API_LOG_MARKETPLACE.Add(currentLog);
            ErasoftDbContext.SaveChanges();
            #endregion

            List<STF02I> listNewData = new List<STF02I>();
            {
                var Histori_Shopee_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "SHOPEE" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == shopee_code).OrderByDescending(p => p.RECNUM).ToList();
                var Histori_Tokped_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "TOKPED" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == tokped_code).OrderByDescending(p => p.RECNUM).ToList();
                var Histori_Blibli_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "BLIBLI" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == blibli_code).OrderByDescending(p => p.RECNUM).ToList();
                var Histori_Lazada_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "LAZADA" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == lazada_code).OrderByDescending(p => p.RECNUM).ToList();
                var Histori_82Cart_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "82CART" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == e2cart_code).OrderByDescending(p => p.RECNUM).ToList();
                var Histori_shopify_stf02i = ErasoftDbContext.STF02I.Where(p => p.MARKET == "SHOPIFY" && p.CATEGORY_MO == code && p.MP_CATEGORY_CODE == shopify_code).OrderByDescending(p => p.RECNUM).ToList();

                if (opt_selected_1 != null)
                {
                    var Histori_Shopee = Histori_Shopee_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Tokped = Histori_Tokped_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Blibli = Histori_Blibli_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Lazada = Histori_Lazada_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_82Cart = Histori_82Cart_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_shopify = Histori_shopify_stf02i.Where(p => p.LEVEL_VAR == 1).OrderByDescending(p => p.RECNUM).ToList();
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            string JudulShopee = "";
                            var FoundHistoriJudulShopee = Histori_Shopee.FirstOrDefault();
                            if (FoundHistoriJudulShopee != null)
                            {
                                JudulShopee = FoundHistoriJudulShopee.MP_JUDUL_VAR;
                                if (string.IsNullOrWhiteSpace(JudulShopee))
                                {
                                    JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                                }
                            }
                            else
                            {
                                JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                            }
                            string ValueShopee = "";
                            var FoundHistoriValueShopee = Histori_Shopee.FirstOrDefault(p => p.KODE_VAR == item);
                            if (FoundHistoriValueShopee != null)
                            {
                                ValueShopee = FoundHistoriValueShopee.MP_VALUE_VAR;
                                if (string.IsNullOrWhiteSpace(ValueShopee))
                                {
                                    ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(1) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                                }
                            }
                            else
                            {
                                ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(1) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                            }

                            STF02I newdata = new STF02I()
                            {
                                MARKET = "SHOPEE",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = JudulShopee,
                                MP_VALUE_VAR = ValueShopee,
                                MP_CATEGORY_CODE = shopee_code
                            };
                            listNewData.Add(newdata);

                            STF02I newdataTokped = new STF02I()
                            {
                                MARKET = "TOKPED",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = Histori_Tokped.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Tokped.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = tokped_code
                            };
                            listNewData.Add(newdataTokped);

                            STF02I newdataBlibli = new STF02I()
                            {
                                MARKET = "BLIBLI",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = Histori_Blibli.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Blibli.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = blibli_code
                            };
                            listNewData.Add(newdataBlibli);

                            STF02I newdataLazada = new STF02I()
                            {
                                MARKET = "LAZADA",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = Histori_Lazada.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Lazada.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = lazada_code
                            };
                            listNewData.Add(newdataLazada);

                            STF02I newdata82Cart = new STF02I()
                            {
                                MARKET = "82CART",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = Histori_82Cart.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_82Cart.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = e2cart_code
                            };
                            listNewData.Add(newdata82Cart);

                            STF02I newdatashopify = new STF02I()
                            {
                                MARKET = "SHOPIFY",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 1,
                                MP_JUDUL_VAR = Histori_shopify.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_shopify.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = shopify_code
                            };
                            listNewData.Add(newdatashopify);
                        }
                    }
                }
                if (opt_selected_2 != null)
                {
                    var Histori_Shopee = Histori_Shopee_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Tokped = Histori_Tokped_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Blibli = Histori_Blibli_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Lazada = Histori_Lazada_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_82Cart = Histori_82Cart_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_shopify = Histori_shopify_stf02i.Where(p => p.LEVEL_VAR == 2).OrderByDescending(p => p.RECNUM).ToList();
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            string JudulShopee = "";
                            var FoundHistoriJudulShopee = Histori_Shopee.FirstOrDefault();
                            if (FoundHistoriJudulShopee != null)
                            {
                                JudulShopee = FoundHistoriJudulShopee.MP_JUDUL_VAR;
                                if (string.IsNullOrWhiteSpace(JudulShopee))
                                {
                                    JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                                }
                            }
                            else
                            {
                                JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                            }
                            string ValueShopee = "";
                            var FoundHistoriValueShopee = Histori_Shopee.FirstOrDefault(p => p.KODE_VAR == item);
                            if (FoundHistoriValueShopee != null)
                            {
                                ValueShopee = FoundHistoriValueShopee.MP_VALUE_VAR;
                                if (string.IsNullOrWhiteSpace(ValueShopee))
                                {
                                    ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(2) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                                }
                            }
                            else
                            {
                                ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(2) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                            }

                            STF02I newdata = new STF02I()
                            {
                                MARKET = "SHOPEE",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = JudulShopee,
                                MP_VALUE_VAR = ValueShopee,
                                MP_CATEGORY_CODE = shopee_code
                            };
                            listNewData.Add(newdata);

                            STF02I newdataTokped = new STF02I()
                            {
                                MARKET = "TOKPED",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = Histori_Tokped.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Tokped.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = tokped_code
                            };
                            listNewData.Add(newdataTokped);

                            STF02I newdataBlibli = new STF02I()
                            {
                                MARKET = "BLIBLI",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = Histori_Blibli.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Blibli.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = blibli_code
                            };
                            listNewData.Add(newdataBlibli);

                            STF02I newdataLazada = new STF02I()
                            {
                                MARKET = "LAZADA",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = Histori_Lazada.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Lazada.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = lazada_code
                            };
                            listNewData.Add(newdataLazada);

                            STF02I newdata82Cart = new STF02I()
                            {
                                MARKET = "82CART",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = Histori_82Cart.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_82Cart.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = e2cart_code
                            };
                            listNewData.Add(newdata82Cart);

                            STF02I newdatashopify = new STF02I()
                            {
                                MARKET = "SHOPIFY",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 2,
                                MP_JUDUL_VAR = Histori_shopify.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_shopify.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = shopify_code
                            };
                            listNewData.Add(newdatashopify);
                        }
                    }
                }
                if (opt_selected_3 != null)
                {
                    var Histori_Shopee = Histori_Shopee_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Tokped = Histori_Tokped_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Blibli = Histori_Blibli_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_Lazada = Histori_Lazada_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_82Cart = Histori_82Cart_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    var Histori_shopify = Histori_shopify_stf02i.Where(p => p.LEVEL_VAR == 3).OrderByDescending(p => p.RECNUM).ToList();
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            string JudulShopee = "";
                            var FoundHistoriJudulShopee = Histori_Shopee.FirstOrDefault();
                            if (FoundHistoriJudulShopee != null)
                            {
                                JudulShopee = FoundHistoriJudulShopee.MP_JUDUL_VAR;
                                if (string.IsNullOrWhiteSpace(JudulShopee))
                                {
                                    JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                                }
                            }
                            else
                            {
                                JudulShopee = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR;
                            }
                            string ValueShopee = "";
                            var FoundHistoriValueShopee = Histori_Shopee.FirstOrDefault(p => p.KODE_VAR == item);
                            if (FoundHistoriValueShopee != null)
                            {
                                ValueShopee = FoundHistoriValueShopee.MP_VALUE_VAR;
                                if (string.IsNullOrWhiteSpace(ValueShopee))
                                {
                                    ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(3) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                                }
                            }
                            else
                            {
                                ValueShopee = VariantOptMaster.Where(m => m.LEVEL_VAR.Equals(3) && m.KODE_VAR == item).FirstOrDefault()?.KET_VAR;
                            }

                            STF02I newdata = new STF02I()
                            {
                                MARKET = "SHOPEE",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = JudulShopee,
                                MP_VALUE_VAR = ValueShopee,
                                MP_CATEGORY_CODE = shopee_code
                            };
                            listNewData.Add(newdata);

                            STF02I newdataTokped = new STF02I()
                            {
                                MARKET = "TOKPED",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = Histori_Tokped.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Tokped.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = tokped_code
                            };
                            listNewData.Add(newdataTokped);

                            STF02I newdataBlibli = new STF02I()
                            {
                                MARKET = "BLIBLI",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = Histori_Blibli.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Blibli.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = blibli_code
                            };
                            listNewData.Add(newdataBlibli);

                            STF02I newdataLazada = new STF02I()
                            {
                                MARKET = "LAZADA",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = Histori_Lazada.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_Lazada.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = lazada_code
                            };
                            listNewData.Add(newdataLazada);

                            STF02I newdata82Cart = new STF02I()
                            {
                                MARKET = "82CART",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = Histori_82Cart.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_82Cart.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = e2cart_code
                            };
                            listNewData.Add(newdata82Cart);

                            STF02I newdatashopify = new STF02I()
                            {
                                MARKET = "SHOPIFY",
                                BRG = brg,
                                CATEGORY_MO = code,
                                KODE_VAR = item,
                                LEVEL_VAR = 3,
                                MP_JUDUL_VAR = Histori_shopify.FirstOrDefault()?.MP_JUDUL_VAR,
                                MP_VALUE_VAR = Histori_shopify.FirstOrDefault(p => p.KODE_VAR == item)?.MP_VALUE_VAR,
                                MP_CATEGORY_CODE = shopify_code
                            };
                            listNewData.Add(newdatashopify);
                        }
                    }
                }
            }
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg).ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBarang = ErasoftDbContext.STF02.Where(p => p.BRG == brg).FirstOrDefault();
                if (tempBarang != null)
                {
                    tempBarang.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }

            var vm = new BarangStrukturVarViewModel()
            {
                Barang = ErasoftDbContext.STF02.Where(p => p.BRG == brg).FirstOrDefault(),
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList(),
                VariantPerMP = ErasoftDbContext.STF02I.Where(p => p.BRG == brg).ToList(),
                VariantOptMaster = VariantOptMaster,
                BarangPerMP = ErasoftDbContext.STF02H.Where(p => p.BRG == brg).ToList()
            };
            return PartialView("BarangVarPartial", vm);
        }
        public class UpdateBatchHjualVariant
        {
            public int recnum { get; set; }
            public int hjual { get; set; }
        }
        public ActionResult UpdateHjualVariantBarang(string brg, List<UpdateBatchHjualVariant> newhjual)
        {
            List<int> ids = new List<int>();
            var partialVm = new BarangViewModel()
            {

            };
            foreach (var item in newhjual)
            {
                ids.Add(item.recnum);
            }
            var customer = ErasoftDbContext.ARF01.ToList();
            var brgInduk = ErasoftDbContext.STF02H.Where(m => m.BRG == brg).ToList();
            partialVm.Errors = new List<string>();
            string errorMsg = "";
            foreach (var record in ErasoftDbContext.STF02H.Where(x => ids.Contains(x.RecNum.HasValue ? x.RecNum.Value : 0)).ToList())
            {
                var newPrice = newhjual.Where(p => p.recnum == record.RecNum).SingleOrDefault().hjual;
                var currentCust = customer.Where(m => m.RecNum == record.IDMARKET).FirstOrDefault();
                //add 31 juli 2019, cek barang sedang dalam promo
                //var akunMP = ErasoftDbContext.ARF01.Where(m => m.RecNum == record.IDMARKET).SingleOrDefault();
                var dsPromo = EDB.GetDataSet("CString", "PROMOSIS", "select * from promosis a inner join detailpromosis b on a.recnum = b.RecNumPromosi where tgl_mulai < dateadd(hour,7,getutcdate()) and tgl_akhir > dateadd(hour,7,getutcdate()) and kode_brg = '" + record.BRG + "' and nama_market = '" + currentCust.CUST + "'");
                if (dsPromo.Tables[0].Rows.Count > 0)
                {
                    //var stf02hInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == barangInDb.BRG && m.IDMARKET == dataBaru.IDMARKET).FirstOrDefault();
                    //if (stf02hInDB != null)
                    if (record.HJUAL > 0)
                    {
                        //if (record.HJUAL != newhjual.Where(p => p.recnum == record.RecNum).SingleOrDefault().hjual)
                        if (record.HJUAL != newPrice)
                        {
                            //partialVm.Errors = new List<string>();
                            partialVm.Errors.Add("Harga barang " + record.BRG + " tidak dapat di update, karena sedang dalam masa promosi di akun : " + currentCust.PERSO);
                            return Json(partialVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                //end add 31 juli 2019, cek barang sedang dalam promo
                //add 23 Agustus 2019, validasi harga per mp
                var currentInduk = brgInduk.Where(m => m.IDMARKET == currentCust.RecNum).FirstOrDefault();
                if (currentInduk.DISPLAY)
                {
                    if (currentCust != null)
                    {
                        if (currentCust.NAMA != "18")//bukan marketplace offline
                        {
                            var retVal = ValidasiHarga(currentCust.NAMA, newPrice);
                            if (retVal.status == 0)
                            {
                                //partialVm.Errors.Add("Harga barang " + record.BRG + "di akun : " + currentCust.PERSO + " tidak valid, " + retVal.message + "\n" );
                                errorMsg += "Harga barang " + record.BRG + " di akun : " + currentCust.PERSO + " tidak valid, " + retVal.message + "\n";

                            }
                        }
                    }
                }
                //end add 23 Agustus 2019, validasi harga per mp
                //record.HJUAL = newhjual.Where(p => p.recnum == record.RecNum).SingleOrDefault().hjual;
                record.HJUAL = newPrice;

            }

            if (!string.IsNullOrEmpty(errorMsg))
            {
                partialVm.Errors.Add(errorMsg);
                return Json(partialVm, JsonRequestBehavior.AllowGet);
            }

            ErasoftDbContext.SaveChanges();

            ModelState.Clear();

            //remark by calvin 26 april 2019, create barang tetap jalan walaupun tidak link
            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //{
            //ingat ganti saat publish, by calvin
            saveBarangShopeeVariant(2, brg, false);
            saveBarangBlibliVariant(2, brg);
            saveBarangTokpedVariant(2, brg, false);
            createBarangLazadaVariant(brg);
            saveBarang82CartVariant(2, brg, false);
            //}

            //change by calvin 26 april 2019
            //var partialVm = new BarangViewModel()
            //{
            //    ListStf02S = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == "").ToList(),
            //    ListHargaJualPermarketView = ErasoftDbContext.STF02H.Where(p => 0 == 1).OrderBy(p => p.IDMARKET).ToList(),
            //};
            //return PartialView("TableBarang1Partial", partialVm);
            //var partialVm = new BarangViewModel()
            //{

            //};
            partialVm.Errors = null;
            return Json(partialVm, JsonRequestBehavior.AllowGet);
            //end change by calvin 26 april 2019
        }
        public ActionResult GetDetailBarangVar(string kode, string brg)
        {
            var VariantMO = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == brg).ToList();
            var listBrgVariantMO = VariantMO.Select(p => p.BRG).ToList();
            var VariantMO_H = ErasoftDbContext.STF02H.Where(p => listBrgVariantMO.Contains(p.BRG)).ToList();

            var vm = new BarangDetailVarViewModel()
            {
                VariantMO = VariantMO,
                VariantMO_H = VariantMO_H,
                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList()
            };
            vm.gambarInduk = ErasoftDbContext.STF02.Where(m => m.BRG == brg).FirstOrDefault();
            return PartialView("BarangDetailVarPartial", vm);
        }
        public class StrukturVariantMp
        {
            public string code { get; set; }
            public StrukturVariantMPJudul var_judul { get; set; }
            public StrukturVariantMPOpt var_detail { get; set; }
        }
        public class StrukturVariantMPJudul
        {
            public string lv_1 { get; set; }
            public string lv_2 { get; set; }
            public string lv_3 { get; set; }
        }
        public class StrukturVariantMPOpt
        {
            public string[] lv_1 { get; set; }
            public string[] lv_2 { get; set; }
            public string[] lv_3 { get; set; }
            public string[] fc_lv_1 { get; set; }
            public string[] fc_lv_2 { get; set; }
        }
        protected STF02 CopyStf02(STF02 source)
        {
            STF02 newCopy = new STF02()
            {
                BRG = source.BRG,
                ANTIBIOTIK = source.ANTIBIOTIK,
                BERAT = source.BERAT,
                BRG_NON_OS = source.BRG_NON_OS,
                BSK = source.BSK,
                DEFAULT_STN_HRG_JUAL = source.DEFAULT_STN_HRG_JUAL,
                DEFAULT_STN_JUAL = source.DEFAULT_STN_JUAL,
                Deskripsi = source.Deskripsi,
                DISPLAY_MARKET = source.DISPLAY_MARKET,
                FORMULARIUM = source.FORMULARIUM,
                GENERIC = source.GENERIC,
                HBELI = source.HBELI,
                HBESAR = source.HBESAR,
                HJUAL = source.HJUAL,
                HKECIL = source.HKECIL,
                HNA_PPN = source.HNA_PPN,
                HPP = source.HPP,
                HP_STD = source.HP_STD,
                H_STN_3 = source.H_STN_3,
                H_STN_4 = source.H_STN_4,
                ISI = source.ISI,
                ISI3 = source.ISI3,
                ISI4 = source.ISI4,
                JENIS = source.JENIS,
                KET_SORT1 = source.KET_SORT1,
                Ket_Sort10 = source.Ket_Sort10,
                KET_SORT2 = source.KET_SORT2,
                KET_SORT3 = source.KET_SORT3,
                KET_SORT4 = source.KET_SORT4,
                KET_SORT5 = source.KET_SORT5,
                Ket_Sort6 = source.Ket_Sort6,
                Ket_Sort7 = source.Ket_Sort7,
                Ket_Sort8 = source.Ket_Sort8,
                Ket_Sort9 = source.Ket_Sort9,
                KET_STN = source.KET_STN,
                KET_STN2 = source.KET_STN2,
                KET_STN3 = source.KET_STN3,
                KET_STN4 = source.KET_STN4,
                KLINK = source.KLINK,
                KUBILASI = source.KUBILASI,
                LABA = source.LABA,
                LEBAR = source.LEBAR,
                LINK_GAMBAR_1 = source.LINK_GAMBAR_1,
                LINK_GAMBAR_2 = source.LINK_GAMBAR_2,
                LINK_GAMBAR_3 = source.LINK_GAMBAR_3,
                LKS = source.LKS,
                LT = source.LT,
                MAXI = source.MAXI,
                MEREK = source.MEREK,
                Metoda = source.Metoda,
                METODA_HPP_PER_SN = source.METODA_HPP_PER_SN,
                MINI = source.MINI,
                MVC = source.MVC,
                NAMA = source.NAMA,
                NAMA2 = source.NAMA2,
                NAMA3 = source.NAMA3,
                NARKOTIK = source.NARKOTIK,
                OC = source.OC,
                PANJANG = source.PANJANG,
                PART = source.PART,
                Photo = source.Photo,
                PHOTO2 = source.PHOTO2,
                PSIKOTROPIK = source.PSIKOTROPIK,
                QPROD = source.QPROD,
                QSALES = source.QSALES,
                Qty_berat = source.Qty_berat,
                Sort1 = source.Sort1,
                Sort10 = source.Sort10,
                Sort2 = source.Sort2,
                Sort3 = source.Sort3,
                Sort4 = source.Sort4,
                Sort5 = source.Sort5,
                Sort6 = source.Sort6,
                Sort7 = source.Sort7,
                Sort8 = source.Sort8,
                Sort9 = source.Sort9,
                SS = source.SS,
                STN = source.STN,
                STN2 = source.STN2,
                STN3 = source.STN3,
                STN4 = source.STN4,
                Stn_berat = source.Stn_berat,
                SUP = source.SUP,
                Tgl_Input = source.Tgl_Input,
                TGL_KLR = source.TGL_KLR,
                TINGGI = source.TINGGI,
                TOLERANSI = source.TOLERANSI,
                TYPE = source.TYPE,
                USERNAME = source.USERNAME,
                WARNA = source.WARNA
            };
            return newCopy;
        }
        protected STF02H CopyStf02h(STF02H source)
        {
            STF02H newCopy = new STF02H()
            {
                BRG = source.BRG,
                DISPLAY = source.DISPLAY,
                AKUNMARKET = source.AKUNMARKET,
                BRG_MP = source.BRG_MP,
                HJUAL = source.HJUAL,
                IDMARKET = source.IDMARKET,
                USERNAME = source.USERNAME,
                #region Category && Attribute
                CATEGORY_CODE = source.CATEGORY_CODE,
                CATEGORY_NAME = source.CATEGORY_NAME,
                DeliveryTempElevenia = source.DeliveryTempElevenia,
                PICKUP_POINT = source.PICKUP_POINT,
                ACODE_1 = source.ACODE_1,
                ACODE_2 = source.ACODE_2,
                ACODE_3 = source.ACODE_3,
                ACODE_4 = source.ACODE_4,
                ACODE_5 = source.ACODE_5,
                ACODE_6 = source.ACODE_6,
                ACODE_7 = source.ACODE_7,
                ACODE_8 = source.ACODE_8,
                ACODE_9 = source.ACODE_9,
                ACODE_10 = source.ACODE_10,
                ACODE_11 = source.ACODE_11,
                ACODE_12 = source.ACODE_12,
                ACODE_13 = source.ACODE_13,
                ACODE_14 = source.ACODE_14,
                ACODE_15 = source.ACODE_15,
                ACODE_16 = source.ACODE_16,
                ACODE_17 = source.ACODE_17,
                ACODE_18 = source.ACODE_18,
                ACODE_19 = source.ACODE_19,
                ACODE_20 = source.ACODE_20,
                ACODE_21 = source.ACODE_21,
                ACODE_22 = source.ACODE_22,
                ACODE_23 = source.ACODE_23,
                ACODE_24 = source.ACODE_24,
                ACODE_25 = source.ACODE_25,
                ACODE_26 = source.ACODE_26,
                ACODE_27 = source.ACODE_27,
                ACODE_28 = source.ACODE_28,
                ACODE_29 = source.ACODE_29,
                ACODE_30 = source.ACODE_30,
                ACODE_31 = source.ACODE_31,
                ACODE_32 = source.ACODE_32,
                ACODE_33 = source.ACODE_33,
                ACODE_34 = source.ACODE_34,
                ACODE_35 = source.ACODE_35,
                ACODE_36 = source.ACODE_36,
                ACODE_37 = source.ACODE_37,
                ACODE_38 = source.ACODE_38,
                ACODE_39 = source.ACODE_39,
                ACODE_40 = source.ACODE_40,
                ACODE_41 = source.ACODE_41,
                ACODE_42 = source.ACODE_42,
                ACODE_43 = source.ACODE_43,
                ACODE_44 = source.ACODE_44,
                ACODE_45 = source.ACODE_45,
                ACODE_46 = source.ACODE_46,
                ACODE_47 = source.ACODE_47,
                ACODE_48 = source.ACODE_48,
                ACODE_49 = source.ACODE_49,
                ACODE_50 = source.ACODE_50,

                ANAME_1 = source.ANAME_1,
                ANAME_2 = source.ANAME_2,
                ANAME_3 = source.ANAME_3,
                ANAME_4 = source.ANAME_4,
                ANAME_5 = source.ANAME_5,
                ANAME_6 = source.ANAME_6,
                ANAME_7 = source.ANAME_7,
                ANAME_8 = source.ANAME_8,
                ANAME_9 = source.ANAME_9,
                ANAME_10 = source.ANAME_10,
                ANAME_11 = source.ANAME_11,
                ANAME_12 = source.ANAME_12,
                ANAME_13 = source.ANAME_13,
                ANAME_14 = source.ANAME_14,
                ANAME_15 = source.ANAME_15,
                ANAME_16 = source.ANAME_16,
                ANAME_17 = source.ANAME_17,
                ANAME_18 = source.ANAME_18,
                ANAME_19 = source.ANAME_19,
                ANAME_20 = source.ANAME_20,
                ANAME_21 = source.ANAME_21,
                ANAME_22 = source.ANAME_22,
                ANAME_23 = source.ANAME_23,
                ANAME_24 = source.ANAME_24,
                ANAME_25 = source.ANAME_25,
                ANAME_26 = source.ANAME_26,
                ANAME_27 = source.ANAME_27,
                ANAME_28 = source.ANAME_28,
                ANAME_29 = source.ANAME_29,
                ANAME_30 = source.ANAME_30,
                ANAME_31 = source.ANAME_31,
                ANAME_32 = source.ANAME_32,
                ANAME_33 = source.ANAME_33,
                ANAME_34 = source.ANAME_34,
                ANAME_35 = source.ANAME_35,
                ANAME_36 = source.ANAME_36,
                ANAME_37 = source.ANAME_37,
                ANAME_38 = source.ANAME_38,
                ANAME_39 = source.ANAME_39,
                ANAME_40 = source.ANAME_40,
                ANAME_41 = source.ANAME_41,
                ANAME_42 = source.ANAME_42,
                ANAME_43 = source.ANAME_43,
                ANAME_44 = source.ANAME_44,
                ANAME_45 = source.ANAME_45,
                ANAME_46 = source.ANAME_46,
                ANAME_47 = source.ANAME_47,
                ANAME_48 = source.ANAME_48,
                ANAME_49 = source.ANAME_49,
                ANAME_50 = source.ANAME_50,

                AVALUE_1 = source.AVALUE_1,
                AVALUE_2 = source.AVALUE_2,
                AVALUE_3 = source.AVALUE_3,
                AVALUE_4 = source.AVALUE_4,
                AVALUE_5 = source.AVALUE_5,
                AVALUE_6 = source.AVALUE_6,
                AVALUE_7 = source.AVALUE_7,
                AVALUE_8 = source.AVALUE_8,
                AVALUE_9 = source.AVALUE_9,
                AVALUE_10 = source.AVALUE_10,
                AVALUE_11 = source.AVALUE_11,
                AVALUE_12 = source.AVALUE_12,
                AVALUE_13 = source.AVALUE_13,
                AVALUE_14 = source.AVALUE_14,
                AVALUE_15 = source.AVALUE_15,
                AVALUE_16 = source.AVALUE_16,
                AVALUE_17 = source.AVALUE_17,
                AVALUE_18 = source.AVALUE_18,
                AVALUE_19 = source.AVALUE_19,
                AVALUE_20 = source.AVALUE_20,
                AVALUE_21 = source.AVALUE_21,
                AVALUE_22 = source.AVALUE_22,
                AVALUE_23 = source.AVALUE_23,
                AVALUE_24 = source.AVALUE_24,
                AVALUE_25 = source.AVALUE_25,
                AVALUE_26 = source.AVALUE_26,
                AVALUE_27 = source.AVALUE_27,
                AVALUE_28 = source.AVALUE_28,
                AVALUE_29 = source.AVALUE_29,
                AVALUE_30 = source.AVALUE_30,
                AVALUE_31 = source.AVALUE_31,
                AVALUE_32 = source.AVALUE_32,
                AVALUE_33 = source.AVALUE_33,
                AVALUE_34 = source.AVALUE_34,
                AVALUE_35 = source.AVALUE_35,
                AVALUE_36 = source.AVALUE_36,
                AVALUE_37 = source.AVALUE_37,
                AVALUE_38 = source.AVALUE_38,
                AVALUE_39 = source.AVALUE_39,
                AVALUE_40 = source.AVALUE_40,
                AVALUE_41 = source.AVALUE_41,
                AVALUE_42 = source.AVALUE_42,
                AVALUE_43 = source.AVALUE_43,
                AVALUE_44 = source.AVALUE_44,
                AVALUE_45 = source.AVALUE_45,
                AVALUE_46 = source.AVALUE_46,
                AVALUE_47 = source.AVALUE_47,
                AVALUE_48 = source.AVALUE_48,
                AVALUE_49 = source.AVALUE_49,
                AVALUE_50 = source.AVALUE_50,
                #endregion
            };
            return newCopy;
        }
        protected string GetKodeVariantTemporary(string brg, string item, string item2, string item3)
        {
            string prefixVar = "";
            if (item != "")
            {
                prefixVar += "." + item;
            }
            if (item2 != "")
            {
                prefixVar += "." + item2;
            }
            if (item3 != "")
            {
                prefixVar += "." + item3;
            }
            return brg + prefixVar;
        }
        protected string GetNamaVariantTemporary(List<STF20B> stf20b, string NAMA2, string brg, string item, string item2, string item3)
        {
            string ket_varlv1 = item != "" ? stf20b.Where(p => p.LEVEL_VAR == 1 && p.KODE_VAR == item).FirstOrDefault()?.KET_VAR : "";
            string ket_varlv2 = item2 != "" ? stf20b.Where(p => p.LEVEL_VAR == 2 && p.KODE_VAR == item2).FirstOrDefault()?.KET_VAR : "";
            string ket_varlv3 = item3 != "" ? stf20b.Where(p => p.LEVEL_VAR == 3 && p.KODE_VAR == item3).FirstOrDefault()?.KET_VAR : "";

            return NAMA2 += " " + ket_varlv1 + " " + ket_varlv2 + " " + ket_varlv3;
        }

        protected void createNewVariant(List<string> listStf02inDbCekDuplikat, List<STF02> ListNewVariantData_Stf02, List<STF02H> listStf02HinDbCekDuplikat, List<STF02H> ListNewVariantData_Stf02H, List<STF20B> stf20b, STF02 STF02_Induk, List<STF02H> List_STF02H_Induk, string brg, string item, string item2, string item3, List<VariationCodeInput> code_input)
        {
            string prefixVar = "";
            if (item != "")
            {
                prefixVar += "." + item;
            }
            if (item2 != "")
            {
                prefixVar += "." + item2;
            }
            if (item3 != "")
            {
                prefixVar += "." + item3;
            }
            if (prefixVar != "")
            {
                string KodeBarangVariasi = STF02_Induk.BRG + prefixVar;
                //add by calvin 10 mei 2019
                var cekCodeCustom = code_input.Where(p => p.kode == KodeBarangVariasi).FirstOrDefault();
                if (cekCodeCustom != null)
                {
                    KodeBarangVariasi = cekCodeCustom.customKode;
                }
                //end add by calvin 10 mei 2019

                if (!listStf02inDbCekDuplikat.Contains(KodeBarangVariasi))
                {
                    STF02 newVariantData = new STF02();
                    newVariantData = CopyStf02(STF02_Induk);
                    newVariantData.BRG = KodeBarangVariasi;
                    string ket_varlv1 = item != "" ? stf20b.Where(p => p.LEVEL_VAR == 1 && p.KODE_VAR == item).FirstOrDefault()?.KET_VAR : "";
                    string ket_varlv2 = item2 != "" ? stf20b.Where(p => p.LEVEL_VAR == 2 && p.KODE_VAR == item2).FirstOrDefault()?.KET_VAR : "";
                    string ket_varlv3 = item3 != "" ? stf20b.Where(p => p.LEVEL_VAR == 3 && p.KODE_VAR == item3).FirstOrDefault()?.KET_VAR : "";
                    newVariantData.NAMA2 += " " + ket_varlv1 + " " + ket_varlv2 + " " + ket_varlv3;
                    newVariantData.Sort8 = item;
                    newVariantData.Sort9 = item2;
                    newVariantData.Sort10 = item3;
                    newVariantData.Ket_Sort8 = ket_varlv1;
                    newVariantData.Ket_Sort9 = ket_varlv2;
                    newVariantData.Ket_Sort10 = ket_varlv3;
                    newVariantData.PART = STF02_Induk.BRG;
                    newVariantData.TYPE = "3";

                    //add by nurul 27/11/2019, add tgl last edit
                    newVariantData.Tgl_Input = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    //add by Tri 9 Des 2019, kosongkan gambar varian baru
                    newVariantData.LINK_GAMBAR_1 = "";
                    newVariantData.LINK_GAMBAR_2 = "";
                    newVariantData.LINK_GAMBAR_3 = "";
                    newVariantData.Sort5 = "";
                    newVariantData.Sort6 = "";
                    newVariantData.Sort7 = "";
                    //end add by Tri 9 Des 2019, kosongkan gambar varian baru

                    ListNewVariantData_Stf02.Add(newVariantData);
                }
                else
                {
                    var UpdateStf02Sorts = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == brg && p.BRG == (KodeBarangVariasi)).SingleOrDefault();
                    if (UpdateStf02Sorts != null)
                    {
                        string ket_varlv1 = item != "" ? stf20b.Where(p => p.LEVEL_VAR == 1 && p.KODE_VAR == item).FirstOrDefault()?.KET_VAR : "";
                        string ket_varlv2 = item2 != "" ? stf20b.Where(p => p.LEVEL_VAR == 2 && p.KODE_VAR == item2).FirstOrDefault()?.KET_VAR : "";
                        string ket_varlv3 = item3 != "" ? stf20b.Where(p => p.LEVEL_VAR == 3 && p.KODE_VAR == item3).FirstOrDefault()?.KET_VAR : "";
                        UpdateStf02Sorts.Sort8 = item;
                        UpdateStf02Sorts.Sort9 = item2;
                        UpdateStf02Sorts.Sort10 = item3;
                        UpdateStf02Sorts.Ket_Sort8 = ket_varlv1;
                        UpdateStf02Sorts.Ket_Sort9 = ket_varlv2;
                        UpdateStf02Sorts.Ket_Sort10 = ket_varlv3;

                        //add by nurul 27/11/2019, add tgl last edit
                        UpdateStf02Sorts.Tgl_Input = DateTime.Today;
                        //end add by nurul 27/11/2019, add tgl last edit

                        ErasoftDbContext.SaveChanges();
                    }
                }

                foreach (var stf02h_induk in List_STF02H_Induk)
                {
                    var cekAdaSTF02HVariasi = listStf02HinDbCekDuplikat.Where(p => p.BRG == KodeBarangVariasi && p.IDMARKET == stf02h_induk.IDMARKET).FirstOrDefault();
                    if (cekAdaSTF02HVariasi == null)
                    {
                        STF02H newVariantDataStf02H = new STF02H();
                        newVariantDataStf02H = CopyStf02h(stf02h_induk);
                        newVariantDataStf02H.BRG = KodeBarangVariasi;
                        newVariantDataStf02H.BRG_MP = "";
                        ListNewVariantData_Stf02H.Add(newVariantDataStf02H);
                    }
                }
            }
        }
        [HttpPost]
        public ActionResult UpdateGambarVariantBarang()
        {
            bool first = true;
            bool adaGambarInduk = false;
            //int i = 0;//add 6/9/2019, barang varian 2 gambar
            Dictionary<int, string> same_uploaded = new Dictionary<int, string>();
            foreach (var item in Request.Files.AllKeys)
            {
                var itemId = item.Split('_');
                //int stf02_id = Convert.ToInt32(item);
                int stf02_id = Convert.ToInt32(itemId[0]);
                var itemVar = ErasoftDbContext.STF02.Where(p => p.ID == stf02_id).SingleOrDefault();
                if (itemVar != null)
                {
                    var file = Request.Files[item];

                    if (file != null && file.ContentLength > 0)
                    {
                        if (!same_uploaded.ContainsKey(file.ContentLength))
                        {
                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                            //change 6/9/2019, barang varian 2 gambar
                            //itemVar.LINK_GAMBAR_1 = image.data.link_l;
                            if (itemId.Length == 1)
                            {
                                itemVar.LINK_GAMBAR_1 = image.data.link_l;
                            }
                            else if (itemId.Length > 1)
                            {
                                //itemVar.LINK_GAMBAR_2 = image.data.link_l;
                                if (itemVar.TYPE == "3")
                                {
                                    //itemVar.LINK_GAMBAR_2 = image.data.link_l;
                                }
                                else
                                {
                                    adaGambarInduk = true;
                                    switch (itemId[1])
                                    {
                                        case "1":
                                            itemVar.LINK_GAMBAR_1 = image.data.link_l;
                                            break;
                                        case "2":
                                            itemVar.LINK_GAMBAR_2 = image.data.link_l;
                                            break;
                                        case "3":
                                            itemVar.LINK_GAMBAR_3 = image.data.link_l;
                                            break;
                                        case "4":
                                            itemVar.LINK_GAMBAR_4 = image.data.link_l;
                                            break;
                                        case "5":
                                            itemVar.LINK_GAMBAR_5 = image.data.link_l;
                                            break;
                                    }
                                }
                            }
                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                            //end change 6/9/2019, barang varian 2 gambar
                        }
                        else
                        {
                            //change 6/9/2019, barang varian 2 gambar
                            //itemVar.LINK_GAMBAR_1 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                            if (itemId.Length == 1)
                            {
                                itemVar.LINK_GAMBAR_1 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                            }
                            else if (itemId.Length > 1)
                            {
                                //itemVar.LINK_GAMBAR_2 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                if (itemVar.TYPE == "3")
                                {
                                    //itemVar.LINK_GAMBAR_2 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                }
                                else
                                {
                                    adaGambarInduk = true;
                                    switch (itemId[1])
                                    {
                                        case "1":
                                            itemVar.LINK_GAMBAR_1 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                            break;
                                        case "2":
                                            itemVar.LINK_GAMBAR_2 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                            break;
                                        case "3":
                                            itemVar.LINK_GAMBAR_3 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                            break;
                                        case "4":
                                            itemVar.LINK_GAMBAR_4 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                            break;
                                        case "5":
                                            itemVar.LINK_GAMBAR_5 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                            break;
                                    }
                                }
                            }
                            //end change 6/9/2019, barang varian 2 gambar
                        }

                        //add by calvin 13 februari 2019, untuk compare size gambar, agar saat upload barang, tidak perlu upload gambar duplikat
                        //change 6/9/2019, barang varian 2 gambar
                        //itemVar.Sort5 = Convert.ToString(file.ContentLength);
                        if (itemId.Length == 1)
                        {
                            itemVar.Sort5 = Convert.ToString(file.ContentLength);
                        }
                        else if (itemId.Length > 1)
                        {
                            //itemVar.Sort6 = Convert.ToString(file.ContentLength);
                            if (itemVar.TYPE == "3")
                            {
                                //itemVar.Sort6 = Convert.ToString(file.ContentLength);
                            }
                            else
                            {
                                switch (itemId[1])
                                {
                                    case "1":
                                        itemVar.Sort5 = Convert.ToString(file.ContentLength);
                                        break;
                                    case "2":
                                        itemVar.Sort6 = Convert.ToString(file.ContentLength);
                                        break;
                                    case "3":
                                        itemVar.Sort7 = Convert.ToString(file.ContentLength);
                                        break;
                                    case "4":
                                        itemVar.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                        break;
                                    case "5":
                                        itemVar.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                        break;
                                }
                            }
                        }
                        //end change 6/9/2019, barang varian 2 gambar

                        //change 6/9/2019, barang varian 2 gambar
                        //if (first)
                        if (itemId.Length == 1 && itemVar.TYPE == "3" && !adaGambarInduk)
                        //end change 6/9/2019, barang varian 2 gambar
                        {
                            var itemInduk = ErasoftDbContext.STF02.Where(p => p.BRG == itemVar.PART).SingleOrDefault();
                            if (itemInduk != null)
                            {
                                if (string.IsNullOrWhiteSpace(itemInduk.Sort5))
                                {
                                    itemInduk.Sort5 = Convert.ToString(file.ContentLength);
                                    itemInduk.LINK_GAMBAR_1 = itemVar.LINK_GAMBAR_1;
                                    //add by nurul 27/11/2019, add tgl last edit
                                    itemInduk.Tgl_Input = DateTime.Today;
                                    //end add by nurul 27/11/2019, add tgl last edit
                                }
                            }
                        }
                        ////add 6/9/2019, barang varian 2 gambar
                        //else if (itemId.Length > 1)
                        //{
                        //    var itemInduk = ErasoftDbContext.STF02.Where(p => p.BRG == itemVar.PART).SingleOrDefault();
                        //    if (itemInduk != null)
                        //    {
                        //        if (string.IsNullOrWhiteSpace(itemInduk.Sort6))
                        //        {
                        //            itemInduk.Sort6 = Convert.ToString(file.ContentLength);
                        //            itemInduk.LINK_GAMBAR_2 = itemVar.LINK_GAMBAR_2;
                        //        }
                        //    }
                        //}
                        ////end add 6/9/2019, barang varian 2 gambar
                    }
                    ErasoftDbContext.SaveChanges();
                }
                first = false;
                //i++;//add 6/9/2019, barang varian 2 gambar
            }
            return Json($"Update Gambar Variant Berhasil.", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UpdateGambarBlibli()
        {
            if (Request.Files.AllKeys.Count() > 0)
            {
                Dictionary<int, string> same_uploaded = new Dictionary<int, string>();
                string first_key = Convert.ToString(Request.Files.AllKeys.FirstOrDefault());
                string brg = first_key.Split(';')[2];

                var itemVarAllMarket = ErasoftDbContext.STF02H.Where(p => p.BRG == brg).ToList();
                foreach (var item in Request.Files.AllKeys)
                {
                    string[] key_split = item.Split(';');
                    int urutan = Convert.ToInt32(key_split[0]);
                    int idmarket = Convert.ToInt32(key_split[1]);
                    var itemVar = itemVarAllMarket.Where(p => p.IDMARKET == idmarket).SingleOrDefault();
                    if (itemVar != null)
                    {
                        var file = Request.Files[item];

                        if (file != null && file.ContentLength > 0)
                        {
                            switch (urutan)
                            {
                                case 1:
                                    {
                                        if (!same_uploaded.ContainsKey(file.ContentLength))
                                        {
                                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                            itemVar.AVALUE_50 = image.data.link_l;
                                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                                        }
                                        else
                                        {
                                            itemVar.AVALUE_50 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                        }

                                        itemVar.ACODE_50 = Convert.ToString(file.ContentLength);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    break;
                                case 2:
                                    {
                                        if (!same_uploaded.ContainsKey(file.ContentLength))
                                        {
                                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                            itemVar.AVALUE_49 = image.data.link_l;
                                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                                        }
                                        else
                                        {
                                            itemVar.AVALUE_49 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                        }

                                        itemVar.ACODE_49 = Convert.ToString(file.ContentLength);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    break;
                                case 3:
                                    {
                                        if (!same_uploaded.ContainsKey(file.ContentLength))
                                        {
                                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                            itemVar.AVALUE_48 = image.data.link_l;
                                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                                        }
                                        else
                                        {
                                            itemVar.AVALUE_48 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                        }

                                        itemVar.ACODE_48 = Convert.ToString(file.ContentLength);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    break;
                                //add 6/9/2019, barang varian 2 gambar
                                case 4:
                                    {
                                        if (!same_uploaded.ContainsKey(file.ContentLength))
                                        {
                                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                            itemVar.LINK_GAMBAR_4 = image.data.link_l;
                                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                                        }
                                        else
                                        {
                                            itemVar.LINK_GAMBAR_4 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                        }

                                        itemVar.SIZE_GAMBAR_4 = Convert.ToString(file.ContentLength);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    break;
                                case 5:
                                    {
                                        if (!same_uploaded.ContainsKey(file.ContentLength))
                                        {
                                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                                            itemVar.LINK_GAMBAR_5 = image.data.link_l;
                                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                                        }
                                        else
                                        {
                                            itemVar.LINK_GAMBAR_5 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                                        }

                                        itemVar.SIZE_GAMBAR_5 = Convert.ToString(file.ContentLength);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    break;
                                    //end add 6/9/2019, barang varian 2 gambar
                            }
                        }
                    }
                }
            }
            return Json($"Update Gambar Variant Berhasil.", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UpdateGambarVariantBlibli()
        {
            Dictionary<int, string> same_uploaded = new Dictionary<int, string>();
            //int i = 0;//add 6/9/2019, barang varian 2 gambar
            foreach (var item in Request.Files.AllKeys)
            {
                var itemId = item.Split('_');
                //int stf02h_recnum = Convert.ToInt32(item);
                int stf02h_recnum = Convert.ToInt32(itemId[0]);
                var itemVar = ErasoftDbContext.STF02H.Where(p => p.RecNum == stf02h_recnum).SingleOrDefault();
                if (itemVar != null)
                {
                    var file = Request.Files[item];

                    if (file != null && file.ContentLength > 0)
                    {
                        if (!same_uploaded.ContainsKey(file.ContentLength))
                        {
                            ImgurImageResponse image = UploadImageService.UploadSingleImageToImgur(file, "uploaded-image");
                            //change 6/9/2019, barang varian 2 gambar
                            //itemVar.AVALUE_50 = image.data.link_l;
                            if (itemId.Length == 1)
                            {
                                itemVar.AVALUE_50 = image.data.link_l;
                            }
                            //else if (itemId.Length > 1)
                            //{
                            //    itemVar.AVALUE_49 = image.data.link_l;
                            //}
                            same_uploaded.Add(file.ContentLength, image.data.link_l);
                            //end change 6/9/2019, barang varian 2 gambar
                        }
                        else
                        {
                            //change 6/9/2019, barang varian 2 gambar
                            //itemVar.AVALUE_50 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                            if (itemId.Length == 1)
                            {
                                itemVar.AVALUE_50 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                            }
                            //else if (itemId.Length > 1)
                            //{
                            //    itemVar.AVALUE_49 = same_uploaded.Where(p => p.Key == file.ContentLength).FirstOrDefault().Value;
                            //}
                            //end change 6/9/2019, barang varian 2 gambar
                        }

                        //change 6/9/2019, barang varian 2 gambar
                        //itemVar.ACODE_50 = Convert.ToString(file.ContentLength);
                        if (itemId.Length == 1)
                        {
                            itemVar.ACODE_50 = Convert.ToString(file.ContentLength);
                        }
                        //else if (itemId.Length > 1)
                        //{
                        //    itemVar.ACODE_49 = Convert.ToString(file.ContentLength);
                        //}
                        //end change 6/9/2019, barang varian 2 gambar
                    }
                    ErasoftDbContext.SaveChanges();
                }
                //i++;//add 6/9/2019, barang varian 2 gambar
            }
            return Json($"Update Gambar Variant Berhasil.", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SettingKodeVariasiPartial(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3)
        {
            Dictionary<string, string> MapKodeVariasi = new Dictionary<string, string>();
            Dictionary<string, string> MapNamaVariasi = new Dictionary<string, string>();
            var STF02_Induk = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20b = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            if (STF02_Induk != null)
            {
                if (opt_selected_1 != null) //jika tidak ada varian level 1 di STF20B, maka akan menjadi null
                {
                    if (opt_selected_1.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 1, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                    {
                        foreach (var item in opt_selected_1.Where(p => p.Trim() != "").ToList())
                        {
                            if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                                    {
                                        if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                        {
                                            if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                            {
                                                #region level 1, 2, dan 3
                                                foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                                {
                                                    string KodeTemp = GetKodeVariantTemporary(brg, item, item2, item3);
                                                    MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                                    string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, item2, item3);
                                                    MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                //ada varian lv 3, tapi tidak dipakai
                                                #region hanya level 1 dan 2
                                                string KodeTemp = GetKodeVariantTemporary(brg, item, item2, "");
                                                MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                                string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, item2, "");
                                                MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            //tidak ada varian level 3 di STF20B
                                            #region hanya level 1 dan 2
                                            string KodeTemp = GetKodeVariantTemporary(brg, item, item2, "");
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, item2, "");
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            #endregion
                                        }
                                    }
                                }
                                else
                                {
                                    //ada varian lv 2, tapi tidak dipakai
                                    if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                    {
                                        if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                        {
                                            #region hanya level 1 dan 3
                                            foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                            {
                                                string KodeTemp = GetKodeVariantTemporary(brg, item, "", item3);
                                                MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                                string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", item3);
                                                MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //ada varian lv 3, tapi tidak dipakai
                                            #region hanya level 1
                                            string KodeTemp = GetKodeVariantTemporary(brg, item, "", "");
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", "");
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        //tidak ada varian level 3 di STF20B
                                        #region hanya level 1
                                        string KodeTemp = GetKodeVariantTemporary(brg, item, "", "");
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", "");
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                //tidak ada varian level 2 di STF20B
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        #region hanya level 1 dan 3
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            string KodeTemp = GetKodeVariantTemporary(brg, item, "", item3);
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", item3);
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //ada varian lv 3, tapi tidak dipakai
                                        #region hanya level 1
                                        string KodeTemp = GetKodeVariantTemporary(brg, item, "", "");
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", "");
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                                else
                                {
                                    //tidak ada varian level 3 di STF20B
                                    #region hanya level 1
                                    string KodeTemp = GetKodeVariantTemporary(brg, item, "", "");
                                    MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                    string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, item, "", "");
                                    MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                    #endregion
                                }
                            }
                        }
                    }
                    else
                    {
                        //ada varian lv 1, tapi tidak dipakai
                        if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                        {
                            if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                            {
                                foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                                {
                                    if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                    {
                                        if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                        {
                                            #region hanya level 2 dan 3
                                            foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                            {
                                                string KodeTemp = GetKodeVariantTemporary(brg, "", item2, item3);
                                                MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                                string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, item3);
                                                MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //ada varian lv 3, tapi tidak dipakai
                                            #region hanya level 2
                                            string KodeTemp = GetKodeVariantTemporary(brg, "", item2, "");
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, "");
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        //tidak ada varian level 3 di STF20B
                                        #region hanya level 2
                                        string KodeTemp = GetKodeVariantTemporary(brg, "", item2, "");
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, "");
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                //ada varian lv 2, tapi tidak dipakai
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            #region hanya level 3
                                            string KodeTemp = GetKodeVariantTemporary(brg, "", "", item3);
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", "", item3);
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                            #endregion
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //tidak ada varian level 2 di STF20B
                            if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                    {
                                        #region hanya level 3
                                        string KodeTemp = GetKodeVariantTemporary(brg, "", "", item3);
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", "", item3);
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                }
                else //jika tidak ada varian level 1, cari level 2
                {
                    //tidak ada varian level 1 di STF20B
                    if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                    {
                        if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                        {
                            foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                            {
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        #region hanya level 2 dan 3
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            string KodeTemp = GetKodeVariantTemporary(brg, "", item2, item3);
                                            MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                            string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, item3);
                                            MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //ada varian lv 3, tapi tidak dipakai
                                        #region hanya level 2
                                        string KodeTemp = GetKodeVariantTemporary(brg, "", item2, "");
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, "");
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                                else
                                {
                                    //tidak ada varian level 3 di STF20B
                                    #region hanya level 2
                                    string KodeTemp = GetKodeVariantTemporary(brg, "", item2, "");
                                    MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                    string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", item2, "");
                                    MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                    #endregion
                                }
                            }
                        }
                        else
                        {
                            //ada varian lv 2, tapi tidak dipakai
                            if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                    {
                                        #region hanya level 3
                                        string KodeTemp = GetKodeVariantTemporary(brg, "", "", item3);
                                        MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                        string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", "", item3);
                                        MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //tidak ada varian level 2 di STF20B
                        if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                        {
                            if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                            {
                                foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                {
                                    #region hanya level 3
                                    string KodeTemp = GetKodeVariantTemporary(brg, "", "", item3);
                                    MapKodeVariasi.Add(KodeTemp, KodeTemp);
                                    string NamaTemp = GetNamaVariantTemporary(stf20b, (STF02_Induk.NAMA2 ?? ""), brg, "", "", item3);
                                    MapNamaVariasi.Add(KodeTemp, NamaTemp);
                                    #endregion
                                }
                            }
                        }
                    }
                }
            }

            var vm = new SettingKodeVariasiPartialViewModel()
            {
                MapKodeVariasiTemp = MapKodeVariasi,
                MapNamaVariasiTemp = MapNamaVariasi
            };

            return PartialView("SettingKodeVariasiPartial", vm);
        }

        public class VariationCodeInput
        {
            public string kode { get; set; }
            public string customKode { get; set; }
        }

        [HttpPost]
        public ActionResult AutoloadVariantBarang(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, List<VariationCodeInput> kode_custom)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();

            var vmError = new MasterStrukturVarViewModel()
            {

            };
            bool adaError = false;
            foreach (var item in kode_custom)
            {
                var cekKeStf02 = ErasoftDbContext.STF02.Where(p => p.PART != brg && p.BRG == item.customKode).FirstOrDefault();
                if (cekKeStf02 != null)
                {
                    vmError.Errors.Add(item.kode);
                    adaError = true;
                }
            }
            if (adaError)
            {
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            //Autoload (Overwrite) STF02 ( delete stf02 dan stf02h variasi ( yang belum link ke marketplace )

            #region logging map variasi
            var Variasi1 = "";
            if (opt_selected_1 != null)
            {
                foreach (var item in opt_selected_1)
                {
                    Variasi1 += item + ",";
                }
            }
            var Variasi2 = "";
            if (opt_selected_2 != null)
            {
                foreach (var item2 in opt_selected_2)
                {
                    Variasi2 += item2 + ",";
                }
            }
            var Variasi3 = "";
            if (opt_selected_3 != null)
            {
                foreach (var item3 in opt_selected_3)
                {
                    Variasi3 += item3 + ",";
                }
            }
            if (Variasi1.Length > 0)
            {
                Variasi1 = Variasi1.Substring(0, Variasi1.Length - 1);
            }
            if (Variasi2.Length > 0)
            {
                Variasi2 = Variasi2.Substring(0, Variasi2.Length - 1);
            }
            if (Variasi3.Length > 0)
            {
                Variasi3 = Variasi3.Substring(0, Variasi3.Length - 1);
            }

            MasterOnline.API_LOG_MARKETPLACE currentLog = new API_LOG_MARKETPLACE
            {

                REQUEST_ID = DateTime.UtcNow.AddHours(7).ToString("yyyyMMddHHmmss"),
                REQUEST_ACTION = "Create Variasi",
                REQUEST_DATETIME = DateTime.UtcNow.AddHours(7),
                REQUEST_ATTRIBUTE_1 = brg,
                REQUEST_ATTRIBUTE_2 = "With Mapping [ 1 : " + Variasi1 + " ; 2 : " + Variasi2 + " ; 3 : " + Variasi3 + " ; ]",
                REQUEST_STATUS = "VARIATION_LOG",
            };

            ErasoftDbContext.API_LOG_MARKETPLACE.Add(currentLog);
            ErasoftDbContext.SaveChanges();
            #endregion

            List<STF02> ListNewVariantData_Stf02 = new List<STF02>();
            List<STF02H> ListNewVariantData_Stf02H = new List<STF02H>();
            var STF02_Induk = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
            var List_STF02H_Induk = ErasoftDbContext.STF02H.Where(p => p.BRG == brg).ToList();

            #region stf02h yg sudah berhasil link ke marketplace ( tidak di delete )
            //get variasi in db
            var listBrgVariasiStf02 = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == brg).Select(p => p.BRG).ToList();

            //stf02h yang tidak di delete
            var listStf02HinDbCekDuplikat = ErasoftDbContext.STF02H.Where(p => listBrgVariasiStf02.Contains(p.BRG) && ((p.BRG_MP == null ? "" : p.BRG_MP) != "")).ToList();

            //stf02 yang tidak di delete
            var listStf02inDbCekDuplikat = listStf02HinDbCekDuplikat.Select(p => p.BRG).ToList();
            #endregion

            var stf20b = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            if (STF02_Induk != null)
            {
                if (opt_selected_1 != null) //jika tidak ada varian level 1 di STF20B, maka akan menjadi null
                {
                    if (opt_selected_1.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 1, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                    {
                        foreach (var item in opt_selected_1.Where(p => p.Trim() != "").ToList())
                        {
                            if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                                    {
                                        if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                        {
                                            if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                            {
                                                #region level 1, 2, dan 3
                                                foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                                {
                                                    createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, item2, item3, kode_custom);
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                //ada varian lv 3, tapi tidak dipakai
                                                #region hanya level 1 dan 2
                                                createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, item2, "", kode_custom);
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            //tidak ada varian level 3 di STF20B
                                            #region hanya level 1 dan 2
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, item2, "", kode_custom);
                                            #endregion
                                        }
                                    }
                                }
                                else
                                {
                                    //ada varian lv 2, tapi tidak dipakai
                                    if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                    {
                                        if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                        {
                                            #region hanya level 1 dan 3
                                            foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                            {
                                                createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", item3, kode_custom);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //ada varian lv 3, tapi tidak dipakai
                                            #region hanya level 1
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", "", kode_custom);
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        //tidak ada varian level 3 di STF20B
                                        #region hanya level 1
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", "", kode_custom);
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                //tidak ada varian level 2 di STF20B
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        #region hanya level 1 dan 3
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", item3, kode_custom);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //ada varian lv 3, tapi tidak dipakai
                                        #region hanya level 1
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", "", kode_custom);
                                        #endregion
                                    }
                                }
                                else
                                {
                                    //tidak ada varian level 3 di STF20B
                                    #region hanya level 1
                                    createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, item, "", "", kode_custom);
                                    #endregion
                                }
                            }
                        }
                    }
                    else
                    {
                        //ada varian lv 1, tapi tidak dipakai
                        if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                        {
                            if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                            {
                                foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                                {
                                    if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                    {
                                        if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                        {
                                            #region hanya level 2 dan 3
                                            foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                            {
                                                createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, item3, kode_custom);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //ada varian lv 3, tapi tidak dipakai
                                            #region hanya level 2
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, "", kode_custom);
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        //tidak ada varian level 3 di STF20B
                                        #region hanya level 2
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, "", kode_custom);
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                //ada varian lv 2, tapi tidak dipakai
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            #region hanya level 3
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", "", item3, kode_custom);
                                            #endregion
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //tidak ada varian level 2 di STF20B
                            if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                    {
                                        #region hanya level 3
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", "", item3, kode_custom);
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                }
                else //jika tidak ada varian level 1, cari level 2
                {
                    //tidak ada varian level 1 di STF20B
                    if (opt_selected_2 != null) //jika tidak ada varian level 2 di STF20B, maka akan menjadi null
                    {
                        if (opt_selected_2.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 2, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                        {
                            foreach (var item2 in opt_selected_2.Where(p => p.Trim() != "").ToList())
                            {
                                if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                                {
                                    if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                    {
                                        #region hanya level 2 dan 3
                                        foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                        {
                                            createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, item3, kode_custom);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //ada varian lv 3, tapi tidak dipakai
                                        #region hanya level 2
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, "", kode_custom);
                                        #endregion
                                    }
                                }
                                else
                                {
                                    //tidak ada varian level 3 di STF20B
                                    #region hanya level 2
                                    createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", item2, "", kode_custom);
                                    #endregion
                                }
                            }
                        }
                        else
                        {
                            //ada varian lv 2, tapi tidak dipakai
                            if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                            {
                                if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                                {
                                    foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                    {
                                        #region hanya level 3
                                        createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", "", item3, kode_custom);
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //tidak ada varian level 2 di STF20B
                        if (opt_selected_3 != null) //jika tidak ada varian level 3 di STF20B, maka akan menjadi null
                        {
                            if (opt_selected_3.Where(p => p.Trim() != "").ToList().Count() > 0) // jika ada varian lv 3, tapi tidak dipakai, maka akan ada isi count 1 dengan nilai blank
                            {
                                foreach (var item3 in opt_selected_3.Where(p => p.Trim() != "").ToList())
                                {
                                    #region hanya level 3
                                    createNewVariant(listStf02inDbCekDuplikat, ListNewVariantData_Stf02, listStf02HinDbCekDuplikat, ListNewVariantData_Stf02H, stf20b, STF02_Induk, List_STF02H_Induk, brg, "", "", item3, kode_custom);
                                    #endregion
                                }
                            }
                        }
                    }
                }
            }

            //delete stf02 dan stf02h yang belum link ke marketplace
            var listStf02ToDelete = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == brg && !listStf02inDbCekDuplikat.Contains(p.BRG)).ToList();
            if (listStf02ToDelete.Count() > 0)
            {
                ErasoftDbContext.STF02.RemoveRange(listStf02ToDelete);
                ErasoftDbContext.SaveChanges();
            }
            var listStf02hToDelete = ErasoftDbContext.STF02H.Where(p => listBrgVariasiStf02.Contains(p.BRG) && ((p.BRG_MP == null ? "" : p.BRG_MP) == "")).ToList();
            if (listStf02hToDelete.Count() > 0)
            {
                ErasoftDbContext.STF02H.RemoveRange(listStf02hToDelete);
                ErasoftDbContext.SaveChanges();
            }

            //add by Tri 3 jun 2020, update nama barang varian
            var listStf02ToUpdate = ErasoftDbContext.STF02.Where(p => (p.PART == null ? "" : p.PART) == brg && listStf02inDbCekDuplikat.Contains(p.BRG)).ToList();

            if (listStf02ToUpdate.Count > 0)
            {
                foreach (var items in listStf02ToUpdate)
                {
                    var namaBarang = items.NAMA + ' ' + (items.NAMA2 ?? "");
                    var namaBarangInduk = STF02_Induk.NAMA + ' ' + (STF02_Induk.NAMA2 ?? "");
                    //if (STF02_Induk.NAMA != items.NAMA || !items.NAMA2.Contains(STF02_Induk.NAMA2))
                    if (!namaBarang.Contains(namaBarangInduk))
                    {
                        string ket_varlv1 = "";
                        string ket_varlv2 = "";
                        string ket_varlv3 = "";
                        if (!string.IsNullOrEmpty(items.Sort8))
                        {
                            ket_varlv1 = stf20b.Where(p => p.LEVEL_VAR == 1 && p.KODE_VAR == items.Sort8).FirstOrDefault()?.KET_VAR;
                        }
                        if (!string.IsNullOrEmpty(items.Sort9))
                        {
                            ket_varlv2 = stf20b.Where(p => p.LEVEL_VAR == 2 && p.KODE_VAR == items.Sort9).FirstOrDefault()?.KET_VAR;
                        }
                        if (!string.IsNullOrEmpty(items.Sort10))
                        {
                            ket_varlv3 = stf20b.Where(p => p.LEVEL_VAR == 3 && p.KODE_VAR == items.Sort10).FirstOrDefault()?.KET_VAR;
                        }

                        if (string.IsNullOrEmpty(ket_varlv1) && string.IsNullOrEmpty(ket_varlv2) && string.IsNullOrEmpty(ket_varlv3))
                        {
                            //belum ada mapping
                        }
                        else
                        {
                            var nama2Var = STF02_Induk.NAMA2;
                            nama2Var += (string.IsNullOrEmpty(ket_varlv1) ? "" : " " + ket_varlv1);
                            nama2Var += (string.IsNullOrEmpty(ket_varlv2) ? "" : " " + ket_varlv2);
                            nama2Var += (string.IsNullOrEmpty(ket_varlv3) ? "" : " " + ket_varlv3);
                            EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE STF02 SET NAMA = '" + STF02_Induk.NAMA + "', NAMA2 = '" + nama2Var + "' WHERE BRG = '" + items.BRG + "'");
                        }
                    }

                }
            }

            //end add by Tri 3 jun 2020, update nama barang varian

            #region Save Variant
            if (ListNewVariantData_Stf02.Count() > 0)
            {
                ErasoftDbContext.STF02.AddRange(ListNewVariantData_Stf02);
                ErasoftDbContext.SaveChanges();
            }

            if (ListNewVariantData_Stf02H.Count() > 0)
            {
                ErasoftDbContext.STF02H.AddRange(ListNewVariantData_Stf02H);
                ErasoftDbContext.SaveChanges();
            }
            #endregion
            //end Autoload (Overwrite) STF02

            var VariantMO = ErasoftDbContext.STF02.AsNoTracking().Where(p => (p.PART == null ? "" : p.PART) == brg).ToList();
            var listBrgVariantMO = VariantMO.Select(p => p.BRG).ToList();
            var VariantMO_H = ErasoftDbContext.STF02H.Where(p => listBrgVariantMO.Contains(p.BRG)).ToList();

            var vm = new BarangDetailVarViewModel()
            {
                VariantMO = VariantMO,
                VariantMO_H = VariantMO_H,
                ListMarket = ErasoftDbContext.ARF01.OrderBy(p => p.RecNum).ToList()
            };
            vm.gambarInduk = ErasoftDbContext.STF02.Where(m => m.BRG == brg).FirstOrDefault();
            return PartialView("BarangDetailVarPartial", vm);
        }

        public ActionResult SaveMappingVarShopee(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp shopee)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPEE",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = shopee.var_judul.lv_1,
                                    MP_VALUE_VAR = shopee.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = shopee.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPEE",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = shopee.var_judul.lv_2,
                                    MP_VALUE_VAR = shopee.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = shopee.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPEE",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = shopee.var_judul.lv_3,
                                    MP_VALUE_VAR = shopee.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = shopee.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "SHOPEE").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion
            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveMappingVar82Cart(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp e2cart)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "82CART",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = e2cart.var_judul.lv_1,
                                    MP_VALUE_VAR = e2cart.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = e2cart.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "82CART",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = e2cart.var_judul.lv_2,
                                    MP_VALUE_VAR = e2cart.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = e2cart.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "82CART",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = e2cart.var_judul.lv_3,
                                    MP_VALUE_VAR = e2cart.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = e2cart.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "82CART").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion
            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveMappingVarshopify(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp shopify)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPIFY",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = shopify.var_judul.lv_1,
                                    MP_VALUE_VAR = shopify.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = shopify.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPIFY",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = shopify.var_judul.lv_2,
                                    MP_VALUE_VAR = shopify.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = shopify.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdata = new STF02I()
                                {
                                    MARKET = "SHOPIFY",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = shopify.var_judul.lv_3,
                                    MP_VALUE_VAR = shopify.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = shopify.code
                                };
                                listNewData.Add(newdata);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "SHOPIFY").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion
            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveMappingVarTokped(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp tokped)
        {

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataTokped = new STF02I()
                                {
                                    MARKET = "TOKPED",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = tokped.var_judul.lv_1,
                                    MP_VALUE_VAR = tokped.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = tokped.code
                                };
                                listNewData.Add(newdataTokped);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataTokped = new STF02I()
                                {
                                    MARKET = "TOKPED",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = tokped.var_judul.lv_2,
                                    MP_VALUE_VAR = tokped.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = tokped.code
                                };
                                listNewData.Add(newdataTokped);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataTokped = new STF02I()
                                {
                                    MARKET = "TOKPED",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = tokped.var_judul.lv_3,
                                    MP_VALUE_VAR = tokped.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = tokped.code
                                };
                                listNewData.Add(newdataTokped);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "TOKPED").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion

            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveMappingVarBlibli(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp blibli)
        {

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataBlibli = new STF02I()
                                {
                                    MARKET = "BLIBLI",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = blibli.var_judul.lv_1,
                                    MP_VALUE_VAR = blibli.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = blibli.code
                                };
                                if (blibli.var_detail.fc_lv_1 != null)
                                {
                                    if (blibli.var_detail.fc_lv_1.Length > 0)
                                    {
                                        newdataBlibli.MP_VALUE_FC_VAR = blibli.var_detail.fc_lv_1[i];
                                    }
                                }
                                listNewData.Add(newdataBlibli);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataBlibli = new STF02I()
                                {
                                    MARKET = "BLIBLI",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = blibli.var_judul.lv_2,
                                    MP_VALUE_VAR = blibli.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = blibli.code
                                };
                                listNewData.Add(newdataBlibli);
                                if (blibli.var_detail.fc_lv_2 != null)
                                {
                                    if (blibli.var_detail.fc_lv_2.Length > 0)
                                    {
                                        newdataBlibli.MP_VALUE_FC_VAR = blibli.var_detail.fc_lv_2[i];
                                    }
                                }
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataBlibli = new STF02I()
                                {
                                    MARKET = "BLIBLI",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = blibli.var_judul.lv_3,
                                    MP_VALUE_VAR = blibli.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = blibli.code
                                };
                                listNewData.Add(newdataBlibli);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "BLIBLI").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion

            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveMappingVarLazada(string brg, string code, string[] opt_selected_1, string[] opt_selected_2, string[] opt_selected_3, StrukturVariantMp lazada)
        {

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == code);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            List<STF02I> listNewData = new List<STF02I>();
            #region Create Ulang STF02I
            {
                if (opt_selected_1 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_1)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataLazada = new STF02I()
                                {
                                    MARKET = "LAZADA",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 1,
                                    MP_JUDUL_VAR = lazada.var_judul.lv_1,
                                    MP_VALUE_VAR = lazada.var_detail.lv_1[i],
                                    MP_CATEGORY_CODE = lazada.code
                                };
                                listNewData.Add(newdataLazada);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_2 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_2)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataLazada = new STF02I()
                                {
                                    MARKET = "LAZADA",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 2,
                                    MP_JUDUL_VAR = lazada.var_judul.lv_2,
                                    MP_VALUE_VAR = lazada.var_detail.lv_2[i],
                                    MP_CATEGORY_CODE = lazada.code
                                };
                                listNewData.Add(newdataLazada);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
                if (opt_selected_3 != null)
                {
                    var i = 0;
                    foreach (var item in opt_selected_3)
                    {
                        if (item != "")
                        {
                            try
                            {
                                STF02I newdataLazada = new STF02I()
                                {
                                    MARKET = "LAZADA",
                                    BRG = brg,
                                    CATEGORY_MO = code,
                                    KODE_VAR = item,
                                    LEVEL_VAR = 3,
                                    MP_JUDUL_VAR = lazada.var_judul.lv_3,
                                    MP_VALUE_VAR = lazada.var_detail.lv_3[i],
                                    MP_CATEGORY_CODE = lazada.code
                                };
                                listNewData.Add(newdataLazada);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        i++;
                    }
                }
            }
            #endregion

            #region Save STF02I
            if (listNewData.Count() > 0)
            {
                var listStf02IinDb = ErasoftDbContext.STF02I.Where(p => p.BRG == brg && p.MARKET == "LAZADA").ToList();
                ErasoftDbContext.STF02I.RemoveRange(listStf02IinDb);
                ErasoftDbContext.SaveChanges();

                ErasoftDbContext.STF02I.AddRange(listNewData);

                //add by nurul 27/11/2019, add tgl last edit
                var tempBrg = ErasoftDbContext.STF02.Where(p => p.BRG == brg).SingleOrDefault();
                if (tempBrg != null)
                {
                    tempBrg.Tgl_Input = DateTime.Today;
                }
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SaveChanges();
            }
            #endregion

            var vm = new BarangDetailVarViewModel()
            {

            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult EditStrukturVar(int? recNum)
        {
            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.RecNum == recNum);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var vm = new MasterStrukturVarViewModel()
            {
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_1 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 1
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_2 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 2
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_3 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 3
                },
                VariantOptInDb = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).OrderBy(m => m.LEVEL_VAR).ToList()
            };

            return PartialView("StrukturVarPartial", vm);
        }

        public ActionResult UpdateStrukturVar(int? recNum, string JUDUL_VAR_1, string JUDUL_VAR_2, string JUDUL_VAR_3)
        {
            var kategori = ErasoftDbContext.STF02E.SingleOrDefault(k => k.LEVEL == "1" && k.RecNum == recNum);
            if (kategori != null)
            {
                List<STF20> batchNewStf20 = new List<STF20>();
                var updateStf20_1 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE && m.LEVEL_JUDUL_VAR == 1).SingleOrDefault();
                if (updateStf20_1 != null)
                {
                    updateStf20_1.VALUE_JUDUL_VAR = JUDUL_VAR_1;
                }
                else
                {
                    STF20 newStf20 = new STF20()
                    {
                        CATEGORY_MO = kategori.KODE,
                        LEVEL_JUDUL_VAR = 1,
                        VALUE_JUDUL_VAR = JUDUL_VAR_1
                    };
                    batchNewStf20.Add(newStf20);
                }
                var updateStf20_2 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE && m.LEVEL_JUDUL_VAR == 2).SingleOrDefault();
                if (updateStf20_2 != null)
                {
                    updateStf20_2.VALUE_JUDUL_VAR = JUDUL_VAR_2;
                }
                else
                {
                    STF20 newStf20 = new STF20()
                    {
                        CATEGORY_MO = kategori.KODE,
                        LEVEL_JUDUL_VAR = 2,
                        VALUE_JUDUL_VAR = JUDUL_VAR_2
                    };
                    batchNewStf20.Add(newStf20);
                }
                var updateStf20_3 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE && m.LEVEL_JUDUL_VAR == 3).SingleOrDefault();
                if (updateStf20_3 != null)
                {
                    updateStf20_3.VALUE_JUDUL_VAR = JUDUL_VAR_3;
                }
                else
                {
                    STF20 newStf20 = new STF20()
                    {
                        CATEGORY_MO = kategori.KODE,
                        LEVEL_JUDUL_VAR = 3,
                        VALUE_JUDUL_VAR = JUDUL_VAR_3
                    };
                    batchNewStf20.Add(newStf20);
                }
                if (batchNewStf20.Count() > 0)
                {
                    ErasoftDbContext.STF20.AddRange(batchNewStf20);
                }
                ErasoftDbContext.SaveChanges();
            }
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var vm = new MasterStrukturVarViewModel()
            {
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_1 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 1
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_2 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 2
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_3 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 3
                },
                VariantOptInDb = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).OrderBy(m => m.LEVEL_VAR).ToList()
            };

            return PartialView("StrukturVarPartial", vm);
        }

        public ActionResult SaveVariantOptLevel(string JUDUL_VAR, STF20B data)
        {
            //add by nurul 18/2/2019
            var stf20b = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == data.CATEGORY_MO && m.LEVEL_VAR == data.LEVEL_VAR && m.KODE_VAR == data.KODE_VAR).FirstOrDefault();
            var vmError = new MasterStrukturVarViewModel() { };
            if (data.KODE_VAR == null || data.KODE_VAR == "" || data.KET_VAR == null || data.KET_VAR == "")
            {
                vmError.Errors.Add("Mohon lengkapi Opsi Variasi " + data.LEVEL_VAR + " !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            if (stf20b != null)
            {
                if (stf20b.KODE_VAR.ToUpper() == data.KODE_VAR.ToUpper())
                {
                    vmError.Errors.Add("Kode Opsi Variasi " + data.LEVEL_VAR + " '" + data.KODE_VAR.ToUpper() + "' sudah ada !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
            }
            //end add by nurul 18/2/2019
            var updateStf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == data.CATEGORY_MO && m.LEVEL_JUDUL_VAR == data.LEVEL_VAR).SingleOrDefault();
            if (updateStf20 != null)
            {
                updateStf20.VALUE_JUDUL_VAR = JUDUL_VAR;
            }
            else
            {
                STF20 newStf20 = new STF20()
                {
                    CATEGORY_MO = data.CATEGORY_MO,
                    LEVEL_JUDUL_VAR = data.LEVEL_VAR,
                    VALUE_JUDUL_VAR = JUDUL_VAR
                };
                ErasoftDbContext.STF20.Add(newStf20);
            }
            ErasoftDbContext.SaveChanges();

            //var stf20b = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == data.CATEGORY_MO && m.LEVEL_VAR == data.LEVEL_VAR && m.KODE_VAR == data.KODE_VAR).FirstOrDefault();
            if (stf20b == null)
            {
                ErasoftDbContext.STF20B.Add(data);
                ErasoftDbContext.SaveChanges();
            }

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.KODE == data.CATEGORY_MO);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var vm = new MasterStrukturVarViewModel()
            {
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_1 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 1
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_2 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 2
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_3 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 3
                },
                VariantOptInDb = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).OrderBy(m => m.LEVEL_VAR).ToList()
            };

            return PartialView("StrukturVarPartial", vm);
        }

        public ActionResult DeleteVariantOptLevel(int? recNum, int? recNumVariantOpt)
        {
            var deleteStf20b = ErasoftDbContext.STF20B.Where(m => m.RECNUM == recNumVariantOpt.Value).SingleOrDefault();
            if (deleteStf20b != null)
            {
                ErasoftDbContext.STF20B.Remove(deleteStf20b);
                ErasoftDbContext.SaveChanges();
            }

            var kategori = ErasoftDbContext.STF02E.Single(k => k.LEVEL == "1" && k.RecNum == recNum.Value);
            var stf20 = ErasoftDbContext.STF20.Where(m => m.CATEGORY_MO == kategori.KODE).ToList();
            var vm = new MasterStrukturVarViewModel()
            {
                Kategori = kategori,
                Variant_Level_1 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 1,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(1)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_1 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 1
                },
                Variant_Level_2 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 2,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(2)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_2 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 2
                },
                Variant_Level_3 = new STF20()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_JUDUL_VAR = 3,
                    VALUE_JUDUL_VAR = stf20.Where(m => m.LEVEL_JUDUL_VAR.Equals(3)).FirstOrDefault()?.VALUE_JUDUL_VAR
                },
                VariantOpt_Level_3 = new STF20B()
                {
                    CATEGORY_MO = kategori.KODE,
                    LEVEL_VAR = 3
                },
                VariantOptInDb = ErasoftDbContext.STF20B.Where(m => m.CATEGORY_MO == kategori.KODE).OrderBy(m => m.LEVEL_VAR).ToList()
            };

            return PartialView("StrukturVarPartial", vm);
        }

        public ActionResult DeleteKategori(int? recNum)
        {
            var kategoriInDb = ErasoftDbContext.STF02E.Single(k => k.RecNum == recNum);

            ErasoftDbContext.STF02E.Remove(kategoriInDb);
            ErasoftDbContext.SaveChanges();

            return RedirectToAction("RefreshTableKategori");
        }

        [HttpPost]
        public ActionResult SaveMerkBarang(MerkBarangViewModel dataMerk)
        {
            if (!ModelState.IsValid)
            {
                var vm = new MerkBarangViewModel()
                {
                    Merk = dataMerk.Merk,
                    ListMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL == "2").ToList()
                };

                return View("MerkBarang", vm);
            }

            var checkData = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == dataMerk.Merk.KODE && m.LEVEL == "2");

            ////add by nurul 3/10/2018
            //var vmError = new StokViewModel() { };
            //var check = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KET == dataMerk.Merk.KET && m.USERNAME == dataMerk.Merk.USERNAME);
            //if (check != null)
            //{
            //    vmError.Errors.Add("Nama Merk ini sudah digunakan !");
            //    return Json(vmError, JsonRequestBehavior.AllowGet);
            //}
            ////end add

            if (dataMerk.Merk.RecNum == null)
            {
                if (checkData == null)
                {
                    ErasoftDbContext.STF02E.Add(dataMerk.Merk);
                }
                else
                {
                    //change by nurul 2/7/2019
                    //ModelState.AddModelError("", $@"Merk dengan kode {dataMerk.Merk.KODE} sudah ada! Coba kode yang lain!");

                    //var merkVm = new MerkBarangViewModel()
                    //{
                    //    Merk = dataMerk.Merk,
                    //    ListMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL == "2").ToList()
                    //};

                    //return View("MerkBarang", merkVm);
                    dataMerk.Errors.Add($@"Merk dengan kode {dataMerk.Merk.KODE} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");
                    return Json(dataMerk, JsonRequestBehavior.AllowGet);
                    //end change by nurul 2/7/2019
                }
            }
            else
            {
                var merkInDb = ErasoftDbContext.STF02E.Single(m => m.RecNum == dataMerk.Merk.RecNum && m.LEVEL == "2");

                //merkInDb.KODE = dataMerk.Merk.KODE;
                merkInDb.KET = dataMerk.Merk.KET;
            }

            ErasoftDbContext.SaveChanges();

            //return RedirectToAction("RefreshTableMerk");
            dataMerk.Errors = null;
            return Json(dataMerk, JsonRequestBehavior.AllowGet);
        }

        //remark by nurul 1/7/2019
        //public ActionResult RefreshTableMerk()
        //{
        //    var listKategori = ErasoftDbContext.STF02E.Where(k => k.LEVEL == "2").ToList();

        //    return PartialView("TableMerkPartial", listKategori.ToPagedList(1, 10));
        //}
        //remark by nurul 1/7/2019

        public ActionResult EditMerk(int? recNum)
        {
            var vm = new MerkBarangViewModel()
            {
                Merk = ErasoftDbContext.STF02E.Single(m => m.RecNum == recNum)
            };

            return Json(vm, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteMerk(int? recNum)
        {
            var merkInDb = ErasoftDbContext.STF02E.Single(m => m.RecNum == recNum);

            ErasoftDbContext.STF02E.Remove(merkInDb);
            ErasoftDbContext.SaveChanges();

            //change by nurul 1/7/2019
            //return RedirectToAction("RefreshTableMerk");
            var partialVm = new MerkBarangViewModel()
            {
                Errors = null
            };

            return Json(partialVm, JsonRequestBehavior.AllowGet);
            //end change by nurul 1/7/2019
        }

        // =============================================== Bagian Barang (START)

        // =============================================== Bagian User (START)

        [Route("manage/master/akun")]
        public ActionResult Akun()
        {
            var dataSession = Session["SessionInfo"] as AccountUserViewModel;
            //change by nurul 8/2/2019
            //if (dataSession?.User != null)
            //    return View("NoPermission");
            var userAc = new List<User>();
            var accountId = new long();
            if (dataSession?.User != null)
            {
                accountId = MoDbContext.Account.SingleOrDefault(a => a.AccountId == dataSession.User.AccountId).AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            else if (dataSession?.Account != null)
            {
                accountId = dataSession.Account.AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            //end change by nurul 8/2/2019

            var vm = new AccountUserViewModel()
            {
                //change by nurul 8/2/2019
                //ListUser = MoDbContext.User.Where(u => u.AccountId == dataSession.Account.AccountId).ToList(),
                ListUser = userAc,
                //end change by nurul 8/2/2019
                ListSec = MoDbContext.SecUser.ToList(),

                //add by nurul 1/3/2019
                ListSubs = MoDbContext.Subscription.ToList()
                //end add by nurul 1/3/2019
            };

            return View(vm);
        }

        public ActionResult RefreshTableAkun()
        {
            var dataSession = Session["SessionInfo"] as AccountUserViewModel;

            //change by nurul 8/2/2019
            //if (dataSession?.User != null)
            //    return View("NoPermission");
            var userAc = new List<User>();
            var accountId = new long();
            if (dataSession?.User != null)
            {
                accountId = MoDbContext.Account.SingleOrDefault(a => a.AccountId == dataSession.User.AccountId).AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            else if (dataSession?.Account != null)
            {
                accountId = dataSession.Account.AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            //end change by nurul 8/2/2019

            var vm = new AccountUserViewModel()
            {
                //change by nurul 8/2/2019
                //ListUser = MoDbContext.User.Where(u => u.AccountId == dataSession.Account.AccountId).ToList(),
                ListUser = userAc,
                //end change by nurul 8/2/2019
                ListSec = MoDbContext.SecUser.ToList()
            };

            return PartialView("TableAkunPartial", vm);
        }

        public ActionResult RefreshAkunForm()
        {
            try
            {
                var vm = new AccountUserViewModel();

                return PartialView("FormAkunPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        [Route("manage/submit/user")]
        public ActionResult SaveUser(AccountUserViewModel viewModel)
        {
            if (!ModelState.IsValid)
            {
                if (!ModelState.IsValid)
                {
                    viewModel.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                    return Json(viewModel, JsonRequestBehavior.AllowGet);
                }
            }

            if (viewModel.User.UserId == null)
            {
                var checkUser = MoDbContext.User.SingleOrDefault(u => u.Email == viewModel.User.Email);
                var checkAkun = MoDbContext.Account.SingleOrDefault(u => u.Email == viewModel.User.Email);

                if (checkUser == null && checkAkun == null)
                {
                    var accInDb = MoDbContext.Account.Single(ac => ac.AccountId == viewModel.User.AccountId);

                    var key = accInDb.VCode;
                    var originPassword = viewModel.User.Password;
                    var encodedPassword = Helper.EncodePassword(originPassword, key);

                    viewModel.User.Password = encodedPassword;
                    viewModel.User.KonfirmasiPassword = encodedPassword;
                    viewModel.User.Status = true; // Otomatis aktif
                    MoDbContext.User.Add(viewModel.User);
                }
                else
                {
                    viewModel.Errors.Add("Email sudah terdaftar!");
                    return Json(viewModel, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var userInDb = MoDbContext.User.Single(c => c.UserId == viewModel.User.UserId);
                var accInDb = MoDbContext.Account.Single(ac => ac.AccountId == viewModel.User.AccountId);

                var key = accInDb.VCode;
                var originPassword = viewModel.User.Password;
                var encodedPassword = Helper.EncodePassword(originPassword, key);

                userInDb.Email = viewModel.User.Email;
                userInDb.Username = viewModel.User.Username;
                userInDb.NoHp = viewModel.User.NoHp;

                if (userInDb.Password != encodedPassword)
                {
                    userInDb.Password = encodedPassword;
                    userInDb.KonfirmasiPassword = encodedPassword;
                }
            }

            MoDbContext.SaveChanges();
            ModelState.Clear();

            var dataSession = Session["SessionInfo"] as AccountUserViewModel;

            //change by nurul 8/2/2019
            //if (dataSession?.User != null)
            //    return View("NoPermission");
            var userAc = new List<User>();
            var accountId = new long();
            if (dataSession?.User != null)
            {
                accountId = MoDbContext.Account.SingleOrDefault(a => a.AccountId == dataSession.User.AccountId).AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            else if (dataSession?.Account != null)
            {
                accountId = dataSession.Account.AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            //end change by nurul 8/2/2019

            var vm = new AccountUserViewModel()
            {
                //change by nurul 8/2/2019
                //ListUser = MoDbContext.User.Where(u => u.AccountId == dataSession.Account.AccountId).ToList(),
                ListUser = userAc,
                //end change by nurul 8/2/2019
                ListSec = MoDbContext.SecUser.ToList()
            };

            return PartialView("TableAkunPartial", vm);
        }

        public ActionResult EditUser(int? userId)
        {
            try
            {
                var vm = new AccountUserViewModel()
                {
                    User = MoDbContext.User.Single(u => u.UserId == userId)
                };

                return PartialView("FormAkunPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteUser(int? userId)
        {
            var user = MoDbContext.User.Single(u => u.UserId == userId);

            MoDbContext.User.Remove(user);
            MoDbContext.SaveChanges();

            var dataSession = Session["SessionInfo"] as AccountUserViewModel;

            //change by nurul 8/2/2019
            //if (dataSession?.User != null)
            //    return View("NoPermission");
            var userAc = new List<User>();
            var accountId = new long();
            if (dataSession?.User != null)
            {
                accountId = MoDbContext.Account.SingleOrDefault(a => a.AccountId == dataSession.User.AccountId).AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            else if (dataSession?.Account != null)
            {
                accountId = dataSession.Account.AccountId;
                userAc = MoDbContext.User.Where(a => a.AccountId == accountId).ToList();
            }
            //end change by nurul 8/2/2019

            var vm = new AccountUserViewModel()
            {
                //change by nurul 8/2/2019
                //ListUser = MoDbContext.User.Where(u => u.AccountId == dataSession.Account.AccountId).ToList(),
                ListUser = userAc,
                //end change by nurul 8/2/2019
                ListSec = MoDbContext.SecUser.ToList()
            };

            return PartialView("TableAkunPartial", vm);
        }

        //add by nurul 1/3/2019
        public ActionResult CekJumlahUser(long accId)
        {
            var accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accId);

            if (accInDb == null)
            {
                var accIdByUser = MoDbContext.User.FirstOrDefault(u => u.AccountId == accId)?.AccountId;
                accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accIdByUser);
            }

            var accSubs = MoDbContext.Subscription.FirstOrDefault(s => s.KODE == accInDb.KODE_SUBSCRIPTION);
            var cekuser = MoDbContext.User.Where(a => a.AccountId == accId).Count();
            var jmluser = false;
            if (accSubs.KODE == "03")
            {
                if (cekuser >= accInDb.jumlahUser) //basic dan gold
                {
                    jmluser = true;
                }
            }
            else if (accSubs.KODE == "02")
            {
                if (cekuser >= 2) //silver
                {
                    jmluser = true;
                }
            }
            else if (accSubs.KODE == "01")
            {
                if (cekuser >= 0)
                {
                    jmluser = true;
                }
            }


            var valSubs = new ValidasiSubs()
            {
                //JumlahUserLebih = (cekuser >= accInDb.jumlahUser)
                JumlahUserLebih = jmluser
            };

            return Json(valSubs, JsonRequestBehavior.AllowGet);
        }
        //end add by nurul 1/3/2019

        // =============================================== Bagian User (END)

        // =============================================== Bagian Security (START)

        [HttpPost]
        public ActionResult SaveSecUser(DataSecUser dataSec)
        {
            var userId = Session["UserId"] as long?;

            foreach (var entity in MoDbContext.SecUser.Where(s => s.UserId == userId).ToList())
                MoDbContext.SecUser.Remove(entity);

            var dataSession = Session["SessionInfo"] as AccountUserViewModel;
            var counter = 0;
            //List<SecUser> _testList = new List<SecUser>();

            foreach (var form in dataSec.FormArray)
            {
                var secUser = new SecUser
                {
                    AccountId = dataSession?.Account.AccountId,
                    UserId = userId,
                    FormId = Convert.ToInt32(form),
                    ParentId = Convert.ToInt32(dataSec.ParentArray[counter]),
                    Permission = true
                };
                counter++;
                //_testList.Add(secUser);
                MoDbContext.SecUser.Add(secUser);
            }

            MoDbContext.SaveChanges();
            ModelState.Clear();

            var secuserVm = new SecurityUserViewModel()
            {
                User = MoDbContext.User.SingleOrDefault(u => u.UserId == userId),
                ListForms = MoDbContext.FormMoses.Where(f => f.Show).ToList(),
                ListSec = MoDbContext.SecUser.Where(s => s.UserId == userId).ToList(),
                ListUser = MoDbContext.User.ToList(),
            };

            return Json($"Settingan security untuk user {secuserVm.User.Username} berhasil disimpan.", JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Security (END)

        // =============================================== Bagian Faktur Penjualan (START)

        [HttpGet]
        public ActionResult GetFaktur()
        {
            var listFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList();
            var listKodeFaktur = new List<FakturJson>();

            foreach (var faktur in listFaktur)
            {
                listKodeFaktur.Add(new FakturJson()
                {
                    RecNum = faktur.RecNum,
                    NO_BUKTI = faktur.NO_BUKTI
                });
            }

            return Json(listKodeFaktur, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetFakturByMarketplace(string kodeMarket)
        {
            //change by nurul 29/8/2019, ubah jd cek no si yg blm ada di no_ref yg jenis_form 3
            //var listFaktur = ErasoftDbContext.SIT01A
            //                // change by ega 9/8/2018 , katanya calvin dibikin kaya gini aja, jadi tanya dia aja
            //                //.Where(f => f.JENIS_FORM == "2" && f.CUST == kodeMarket && String.IsNullOrEmpty(f.NO_REF))
            //                .Where(f => f.JENIS_FORM == "2" && f.CUST == kodeMarket && (String.IsNullOrEmpty(f.NO_REF) || f.NO_REF == "-"))
            //                .OrderBy(f => f.NO_BUKTI).ToList();

            var sSql = "";
            sSql = "SELECT * FROM SIT01A WHERE JENIS_FORM='2' AND CUST = '" + kodeMarket + "' AND STATUS IN (0,1) AND NO_BUKTI NOT IN ";
            sSql += "(SELECT DISTINCT NO_REF FROM SIT01A WHERE JENIS_FORM='3' AND STATUS IN (0,1)) ";

            var listFaktur = ErasoftDbContext.Database.SqlQuery<SIT01A>(sSql).ToList();
            //end change by nurul 29/8/2019

            var listKodeFaktur = new List<FakturJson>();

            foreach (var faktur in listFaktur)
            {
                listKodeFaktur.Add(new FakturJson()
                {
                    RecNum = faktur.RecNum,
                    NO_BUKTI = faktur.NO_BUKTI
                });
            }

            return Json(listKodeFaktur, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveFaktur(FakturViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Faktur.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listFakturInDb = ErasoftDbContext.SIT01A.OrderBy(p => p.RecNum).ToList();
                //var listFakturInDb = ErasoftDbContext.SIT01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listFakturInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                //}
                //else
                //{
                //    //var lastRecNum = listFakturInDb.Last().RecNum;
                //    var lastRecNum = listFakturInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}

                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "SI", "SIT01A", "NO_BUKTI");
                var noOrder = "SI" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                //add by calvin, validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.FakturDetail.BRG, dataVm.FakturDetail.GUDANG);
                if (qtyOnHand < dataVm.FakturDetail.QTY)
                {
                    dataVm.Errors.Add("Qty penjualan melebihi qty siap jual ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(dataVm, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                dataVm.Faktur.NO_BUKTI = noOrder;
                dataVm.Faktur.NO_F_PAJAK = "";
                dataVm.Faktur.NAMA_CUST = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).NAMA;
                dataVm.Faktur.AL = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL;
                dataVm.Faktur.AL2 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL2;
                dataVm.Faktur.AL3 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL3;
                dataVm.Faktur.PPN_Bln_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("MM"));
                dataVm.Faktur.PPN_Thn_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("yyyy").Substring(2, 2));

                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NILAI_PPNBM)))
                {
                    dataVm.Faktur.NILAI_PPNBM = 0;
                }
                #region add by calvin 6 juni 2018, agar sit01a field yang penting tidak null
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_SO)))
                {
                    dataVm.Faktur.NO_SO = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_REF)))
                {
                    dataVm.Faktur.NO_REF = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.DISCOUNT)))
                {
                    dataVm.Faktur.DISCOUNT = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.CUST_QQ)))
                {
                    dataVm.Faktur.CUST_QQ = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMA_CUST_QQ)))
                {
                    dataVm.Faktur.NAMA_CUST_QQ = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.STATUS_LOADING)))
                {
                    dataVm.Faktur.STATUS_LOADING = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_PO_CUST)))
                {
                    dataVm.Faktur.NO_PO_CUST = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PENGIRIM)))
                {
                    dataVm.Faktur.PENGIRIM = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMAPENGIRIM)))
                {
                    dataVm.Faktur.NAMAPENGIRIM = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.ZONA)))
                {
                    dataVm.Faktur.ZONA = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.UCAPAN)))
                {
                    dataVm.Faktur.UCAPAN = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_UCAPAN)))
                {
                    dataVm.Faktur.N_UCAPAN = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PEMESAN)))
                {
                    dataVm.Faktur.PEMESAN = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.SUPP)))
                {
                    dataVm.Faktur.SUPP = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.KOMISI)))
                {
                    dataVm.Faktur.KOMISI = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_KOMISI)))
                {
                    dataVm.Faktur.N_KOMISI = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.TOTAL_TITIPAN)))
                {
                    dataVm.Faktur.TOTAL_TITIPAN = 0;
                }
                #endregion

                dataVm.FakturDetail.NO_BUKTI = noOrder;

                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_1)))
                {
                    dataVm.FakturDetail.NILAI_DISC_1 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_2)))
                {
                    dataVm.FakturDetail.NILAI_DISC_2 = 0;
                }
                dataVm.FakturDetail.NILAI_DISC = dataVm.FakturDetail.NILAI_DISC_1 + dataVm.FakturDetail.NILAI_DISC_2;

                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_KIRIM)))
                {
                    dataVm.FakturDetail.QTY_KIRIM = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_RETUR)))
                {
                    dataVm.FakturDetail.QTY_RETUR = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_3)))
                {
                    dataVm.FakturDetail.DISCOUNT_3 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_4)))
                {
                    dataVm.FakturDetail.DISCOUNT_4 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_5)))
                {
                    dataVm.FakturDetail.DISCOUNT_5 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_3)))
                {
                    dataVm.FakturDetail.NILAI_DISC_3 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_4)))
                {
                    dataVm.FakturDetail.NILAI_DISC_4 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_5)))
                {
                    dataVm.FakturDetail.NILAI_DISC_5 = 0;
                }

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                //ErasoftDbContext.SaveChanges();
                try
                {
                    ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.Faktur.NO_BUKTI).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.NO_BUKTI == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "SI" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Faktur.NO_BUKTI = noOrder;
                            ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                            dataVm.FakturDetail.NO_BUKTI = noOrder;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.FakturDetail.NO_URUT == null)
                {
                    ErasoftDbContext.SIT01B.Add(dataVm.FakturDetail);
                    ErasoftDbContext.SIT01A.Where(p => p.NO_BUKTI == noOrder && p.JENIS_FORM == "2").Update(p => new SIT01A() { BRUTO = dataVm.Faktur.BRUTO });
                }
            }
            else
            {
                var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.JENIS_FORM == "2");

                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.FakturDetail.BRG, dataVm.FakturDetail.GUDANG);

                if (qtyOnHand < dataVm.FakturDetail.QTY)
                {
                    dataVm.Errors.Add("Qty penjualan melebihi qty yang ada di gudang ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(dataVm, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                fakturInDb.NETTO = dataVm.Faktur.NETTO;
                fakturInDb.BRUTO = dataVm.Faktur.BRUTO;
                //change by nurul 6/9/2019, samain dg form faktur pakenya NILAI_DISC dan tambah ongkos kirim 
                //fakturInDb.DISCOUNT = dataVm.Faktur.DISCOUNT;
                fakturInDb.NILAI_DISC = dataVm.Faktur.NILAI_DISC;
                fakturInDb.MATERAI = dataVm.Faktur.MATERAI;
                //end change by nurul 6/9/2019, samain dg form faktur pakenya NILAI_DISC 
                fakturInDb.PPN = dataVm.Faktur.PPN;
                fakturInDb.NILAI_PPN = dataVm.Faktur.NILAI_PPN;
                //add 25/9/2019 by Tri, fix nilai null
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_1)))
                {
                    dataVm.FakturDetail.NILAI_DISC_1 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_2)))
                {
                    dataVm.FakturDetail.NILAI_DISC_2 = 0;
                }
                dataVm.FakturDetail.NILAI_DISC = dataVm.FakturDetail.NILAI_DISC_1 + dataVm.FakturDetail.NILAI_DISC_2;

                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_KIRIM)))
                {
                    dataVm.FakturDetail.QTY_KIRIM = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_RETUR)))
                {
                    dataVm.FakturDetail.QTY_RETUR = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_3)))
                {
                    dataVm.FakturDetail.DISCOUNT_3 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_4)))
                {
                    dataVm.FakturDetail.DISCOUNT_4 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_5)))
                {
                    dataVm.FakturDetail.DISCOUNT_5 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_3)))
                {
                    dataVm.FakturDetail.NILAI_DISC_3 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_4)))
                {
                    dataVm.FakturDetail.NILAI_DISC_4 = 0;
                }
                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_5)))
                {
                    dataVm.FakturDetail.NILAI_DISC_5 = 0;
                }
                //end add 25/9/2019 by Tri, fix nilai null

                dataVm.FakturDetail.NO_BUKTI = dataVm.Faktur.NO_BUKTI;
                dataVm.FakturDetail.NILAI_DISC = dataVm.FakturDetail.NILAI_DISC_1 + dataVm.FakturDetail.NILAI_DISC_2;

                if (dataVm.FakturDetail.NO_URUT == null)
                {
                    ErasoftDbContext.SIT01B.Add(dataVm.FakturDetail);
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            listBrg.Add(dataVm.FakturDetail.BRG);
            updateStockMarketPlace(listBrg, "[INS_SI][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == dataVm.Faktur.NO_BUKTI && pd.JENIS_FORM == "2").ToList();
            var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();
            var vm = new FakturViewModel()
            {
                Faktur = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.JENIS_FORM == "2"),
                ListFakturDetail = ListFakturDetail,
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/12019
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListNFaktur = ErasoftDbContext.ART03B.ToList(),
            };

            return PartialView("BarangFakturPartial", vm);
        }

        public ActionResult SaveReturFaktur(FakturViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            bool returBaru = false;

            if (dataVm.Faktur.RecNum == null)
            {

                var cekREf = ErasoftDbContext.SIT01A.SingleOrDefault(f => f.NO_REF == dataVm.Faktur.NO_REF);
                if (cekREf == null)
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    ////var listFakturInDb = ErasoftDbContext.SIT01A.OrderBy(p => p.RecNum).ToList();
                    //var listFakturInDb = ErasoftDbContext.SIT01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                    //var digitAkhir = "";
                    //var noOrder = "";

                    //if (listFakturInDb == null)
                    //{
                    //    digitAkhir = "000001";
                    //    noOrder = $"RJ{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                    //}
                    //else
                    //{
                    //    //var lastRecNum = listFakturInDb.Last().RecNum;
                    //    var lastRecNum = listFakturInDb.RecNum;
                    //    lastRecNum++;

                    //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                    //    noOrder = $"RJ{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //}
                    var lastBukti = GenerateAutoNumber(ErasoftDbContext, "RJ", "SIT01A", "NO_BUKTI");
                    var noOrder = "RJ" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    var fakturInDb = ErasoftDbContext.SIT01A.SingleOrDefault(f => f.NO_BUKTI == dataVm.Faktur.NO_REF);

                    if (fakturInDb != null)
                    {
                        //remark by nurul 29/8/2019 no_ref faktur nya tidak simpan no bukti retur, req pak dani 
                        //fakturInDb.NO_REF = noOrder;
                        //end remark by nurul 29/8/2019
                        dataVm.Faktur.PEMESAN = fakturInDb.PEMESAN;
                        dataVm.Faktur.NAMAPEMESAN = fakturInDb.NAMAPEMESAN;
                    }

                    //var recNumCust = ParseInt(dataVm.Faktur.CUST);
                    var CustInDb = ErasoftDbContext.ARF01.SingleOrDefault(p => p.CUST == dataVm.Faktur.CUST);
                    if (CustInDb != null)
                    {
                        dataVm.Faktur.NAMA_CUST = CustInDb.NAMA;
                        dataVm.Faktur.AL = CustInDb.AL;
                        dataVm.Faktur.AL2 = CustInDb.AL2;
                        dataVm.Faktur.AL3 = CustInDb.AL3;
                    }
                    dataVm.Faktur.NO_BUKTI = noOrder;
                    dataVm.Faktur.NO_F_PAJAK = "";
                    //dataVm.Faktur.NAMA_CUST = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).NAMA;
                    //dataVm.Faktur.AL = ErasoftDbContext.ARF01.Single(p => p.RecNum == recNumCust).AL;
                    //dataVm.Faktur.AL2 = ErasoftDbContext.ARF01.Single(p => p.RecNum == recNumCust).AL2;
                    //dataVm.Faktur.AL3 = ErasoftDbContext.ARF01.Single(p => p.RecNum == recNumCust).AL3;
                    dataVm.Faktur.PPN_Bln_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("MM"));
                    dataVm.Faktur.PPN_Thn_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("yyyy").Substring(2, 2));

                    //add by nurul 27/11/2019, add tgl last edit
                    dataVm.Faktur.TGLINPUT = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    //change by nurul 23/12/2019, perbaikan no bukti
                    //ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                    //ErasoftDbContext.SaveChanges();
                    try
                    {
                        ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                        ErasoftDbContext.SaveChanges();
                    }
                    catch (Exception ex)
                    {
                        var tempSI = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.Faktur.NO_BUKTI).Single();
                        if (tempSI != null)
                        {
                            if (tempSI.NO_BUKTI == noOrder)
                            {
                                var lastBuktiNew = Convert.ToInt32(lastBukti);
                                lastBuktiNew++;
                                noOrder = "RJ" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                dataVm.Faktur.NO_BUKTI = noOrder;
                                ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                            return Json(dataVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    //add by ega
                    returBaru = true;
                    //end add by ega
                }
                else
                {
                    dataVm.Faktur.NO_BUKTI = cekREf.NO_BUKTI;
                }
            }
            else
            {
                //add by calvin 16 nov 2018, cek jika tidak ada detail, autoload
                var cekdetail = ErasoftDbContext.SIT01B.FirstOrDefault(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI);
                if (cekdetail != null)
                {
                    //UPDATE ANAK
                    var FakturDetailDB = ErasoftDbContext.SIT01B.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.BRG == dataVm.FakturDetail.BRG);

                    //add by calvin, validasi QOH
                    var qtyOnHand = GetQOHSTF08A(FakturDetailDB.BRG, FakturDetailDB.GUDANG);

                    if (qtyOnHand - FakturDetailDB.QTY + dataVm.FakturDetail.QTY < 0)
                    {
                        var vmError = new InvoiceViewModel()
                        {

                        };
                        vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + FakturDetailDB.BRG + " ) di gudang " + FakturDetailDB.GUDANG + " sisa ( " + Convert.ToString(qtyOnHand) + " ).");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }
                    //end add by calvin, validasi QOH

                    FakturDetailDB.QTY = dataVm.FakturDetail.QTY;
                    FakturDetailDB.DISCOUNT = dataVm.FakturDetail.DISCOUNT;
                    FakturDetailDB.DISCOUNT_2 = dataVm.FakturDetail.DISCOUNT_2;
                    FakturDetailDB.NILAI_DISC_1 = dataVm.FakturDetail.NILAI_DISC_1;
                    FakturDetailDB.NILAI_DISC_2 = dataVm.FakturDetail.NILAI_DISC_2;
                    FakturDetailDB.NILAI_DISC = dataVm.FakturDetail.NILAI_DISC_1 + dataVm.FakturDetail.NILAI_DISC_2;
                    FakturDetailDB.HARGA = (dataVm.FakturDetail.QTY) * (FakturDetailDB.H_SATUAN) - (FakturDetailDB.NILAI_DISC_1 + FakturDetailDB.NILAI_DISC_2);
                    ErasoftDbContext.SaveChanges();

                    //UPDATE BAPAK
                    var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.JENIS_FORM == "3");
                    double bruto_ = (double)ErasoftDbContext.SIT01B.Where(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI).Sum(p => p.HARGA);
                    //vm.NilaiPesananHariIni = vm.ListPesanan?.Where(p => p.TGL == selectedDate).Sum(p => p.BRUTO - p.NILAI_DISC);

                    fakturInDb.BRUTO = bruto_;
                    fakturInDb.NILAI_DISC = dataVm.Faktur.NILAI_DISC;
                    fakturInDb.PPN = dataVm.Faktur.PPN;
                    fakturInDb.NILAI_PPN = dataVm.Faktur.NILAI_PPN;
                    fakturInDb.MATERAI = dataVm.Faktur.MATERAI;
                    fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;

                    //add by nurul 27/11/2019, add tgl last edit
                    fakturInDb.TGLINPUT = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    ErasoftDbContext.SaveChanges();

                    returBaru = false;

                    //add by calvin 8 nov 2018, update stok marketplace
                    List<string> listBrg = new List<string>();
                    listBrg.Add(FakturDetailDB.BRG);
                    updateStockMarketPlace(listBrg, "[INS_RJ][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                    //end add by calvin 8 nov 2018
                }
                else
                {
                    returBaru = true;
                }
            }

            // autoload detail item, jika buat retur baru
            if (returBaru)
            {
                object[] spParams = {
                    new SqlParameter("@NOBUK",dataVm.Faktur.NO_BUKTI),
                    new SqlParameter("@NO_REF",dataVm.Faktur.NO_REF)
                };

                ErasoftDbContext.Database.ExecuteSqlCommand("exec [SP_AUTOLOADRETUR_PENJUALAN] @NOBUK, @NO_REF", spParams);

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                var detailReturFakturInDb = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == dataVm.Faktur.NO_BUKTI && pd.JENIS_FORM == "3").ToList();
                foreach (var item in detailReturFakturInDb)
                {
                    listBrg.Add(item.BRG);
                }
                updateStockMarketPlace(listBrg, "[INS_RJ][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018
            }
            ModelState.Clear();

            //add by nurul 9/7/2019, tuning
            var ListFakturDetail = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == dataVm.Faktur.NO_BUKTI && pd.JENIS_FORM == "3").ToList();
            var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new FakturViewModel()
            {
                Faktur = ErasoftDbContext.SIT01A.AsNoTracking().Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.JENIS_FORM == "3"),
                //Faktur = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI && p.JENIS_FORM == "3"),
                //ListFakturDetail = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == dataVm.Faktur.NO_BUKTI && pd.JENIS_FORM == "3").ToList(),
                ListFakturDetail = ListFakturDetail,
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
            };


            return PartialView("BarangReturPartial", vm);
        }

        //public ActionResult RefreshTableFaktur1()
        //{
        //    var vm = new FakturViewModel()
        //    {
        //        ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList(),
        //        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
        //        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
        //        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
        //        ListPelanggan = ErasoftDbContext.ARF01.ToList(),
        //        ListMarketplace = MoDbContext.Marketplaces.ToList(),
        //        ListNFaktur = ErasoftDbContext.ART03B.ToList(),
        //        ListPesanan = ErasoftDbContext.SOT01A.ToList(),


        //    };

        //    return PartialView("TableFakturPartial", vm);
        //}

        public ActionResult RefreshTableFaktur1(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLref = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            string sSQLkurir = "";
            string sSQLstatus = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLmarket += " and ";
                            sSQLref += " and ";
                            sSQLpembeli += " and ";
                            sSQLnetto += " and ";
                            sSQLkurir += " and ";
                            sSQLstatus += " and ";
                        }


                        //sSQLkode += " ( A.NO_BUKTI like '%" + getkata[i] + "%' ) ";
                        //sSQLmarket += "  ( (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ) ";
                        //sSQLref += " ( A.NO_REF like '%" + getkata[i] + "%' ) ";
                        //sSQLpembeli += "  ( A.NAMAPEMESAN like '%" + getkata[i] + "%' ) ";
                        //sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' ) ";
                        //sSQLkurir += " ( ISNULL(A.NAMAPENGIRIM,'') LIKE '%" + getkata[i] + "%' ) ";
                        sSQLkode += " ( A.NO_FAKTUR like '%" + getkata[i] + "%' ) ";
                        sSQLmarket += "  ( (isnull(A.MARKET,'') + ' (' + isnull(A.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ) ";
                        sSQLref += " ( A.REFERENSI like '%" + getkata[i] + "%' ) ";
                        sSQLpembeli += "  ( A.PEMBELI like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( A.TOTAL like '%" + getkata[i] + "%' ) ";
                        sSQLkurir += " ( ISNULL(A.KURIR,'') LIKE '%" + getkata[i] + "%' ) ";
                        sSQLstatus += " ( ISNULL(A.STATUS_FAKTUR,'') LIKE '%" + getkata[i] + "%' ) ";
                    }
                }
            }
            //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLperso + " or " + sSQLpembeli + " ) ";
            //END ADD BY NURUL 27/9/2019
            string sSQLFirstSelect = "select * from ( ";
            string sSQLSelect = "";
            //sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NO_FAKTUR, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.NO_REF AS REFERENSI, A.ST_POSTING AS POSTING, ISNULL(D.STATUS_TRANSAKSI,'') AS [STATUS], ISNULL(A.NO_SO,'') AS NOSO, ISNULL(E.NO_BUKTI,'') AS PEMBAYARAN, ISNULL(A.STATUS,'') AS STATUS_FAKTUR, ISNULL(F.BUKTI_RET,'') AS FKT_RETUR ";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NO_FAKTUR, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.NO_REF AS REFERENSI, A.ST_POSTING AS POSTING, ISNULL(D.STATUS_TRANSAKSI,'') AS [STATUS], ISNULL(A.NO_SO,'') AS NOSO, ISNULL(E.NO_BUKTI,'') AS PEMBAYARAN, ISNULL(F.BUKTI_RET,'') AS FKT_RETUR ";
            //ADD BY NURUL 4/3/2020
            sSQLSelect += ",ISNULL(A.NAMAPENGIRIM,'') AS KURIR ";
            //END ADD BY NURUL 4/3/2020
            //ADD BY NURUL 16/6/2020
            sSQLSelect += ",CASE WHEN ISNULL(A.STATUS,'')='2' THEN 'BATAL' WHEN ISNULL(F.BUKTI_RET,'') <> '' THEN 'RETUR' ELSE 'SELESAI' END AS STATUS_FAKTUR ";
            //END ADD BY NURUL 16/6/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH FROM ( ";
            string sSQL2 = "";
            //add by nurul 16/6/2020
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SIT01A FROM SIT01A WHERE ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SIT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SIT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SIT01A A ";
                    }
                    break;
            }
            //end add by nurul 16/6/2020
            //sSQL2 += "FROM SIT01A A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN SOT01A D ON A.NO_SO = D.NO_BUKTI ";
            //sSQL2 += "LEFT JOIN ART03B E ON A.NO_BUKTI = E.NFAKTUR ";
            sSQL2 += "LEFT JOIN (SELECT DISTINCT NO_BUKTI FROM SIT01A A INNER JOIN ART03B B ON A.NO_BUKTI = B.NFAKTUR)E ON A.NO_BUKTI = E.NO_BUKTI ";
            sSQL2 += "LEFT JOIN (select ret.jenis_form,ret.no_bukti as bukti_ret,ret.no_ref as no_si,fkt.no_bukti as bukti_faktur from sit01a ret inner join sit01a fkt on fkt.no_bukti=ret.no_ref where ret.jenis_form='3') F ON A.NO_BUKTI=F.BUKTI_FAKTUR ";
            string sSQLWhere = "";
            //string sSQLWhere2 = "";
            sSQLWhere += "WHERE A.JENIS_FORM = '2')A ";
            string sSQLEndSelect = "";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR B.PERSO LIKE '%" + search + "%' OR A.NO_REF LIKE '%" + search + "%') ";
                sSQLEndSelect += " WHERE ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLref + " or " + sSQLpembeli + " or " + sSQLnetto + " OR " + sSQLkurir + " OR " + sSQLstatus + " ) ";
            }

            //sSQLWhere2 += ")A ";

            if (filter == "status" && filtervalue != null && filtervalue != "Harap Pilih")
            {
                if (sSQLEndSelect == "")
                {
                    sSQLEndSelect += "WHERE A.STATUS_FAKTUR LIKE '%" + filtervalue + "%'";
                }
                else
                {
                    sSQLEndSelect += "AND A.STATUS_FAKTUR LIKE '%" + filtervalue + "%'";
                }
            }
            string sSQLEndCount = ")A ";
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQLFirstSelect + sSQLSelect + sSQL2 + sSQLWhere + sSQLEndSelect + sSQLEndCount).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            //add by nurul 16/6/2020
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_FAKTUR ASC ";
            }
            else if (search != "")
            {
                sSQLSelect2 += "ORDER BY A.NO_FAKTUR DESC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_FAKTUR DESC ";
            }
            //end add by nurul 16/6/2020
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLFirstSelect + sSQLSelect + sSQL2 + sSQLWhere + sSQLEndSelect + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturPartial", pageOrders);
        }

        public ActionResult RefreshTableFakturLunas(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            //IEnumerable<ART01D> FakturSudahLunas = ErasoftDbContext.ART01D.Where(a => a.NETTO.Value - a.KREDIT.Value > 0);
            //var vm = new FakturViewModel()
            //{
            //    ListFaktur = ErasoftDbContext.SIT01A.Wher e(f => f.JENIS_FORM == "2" && FakturSudahLunas.Any(a => a.FAKTUR == f.NO_BUKTI))
            //                .ToList(),
            //    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListNFaktur = ErasoftDbContext.ART03B.ToList(),
            //    ListPesanan = ErasoftDbContext.SOT01A.ToList(),

            //};
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            string sSQLref = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLmarket += " and ";
                            sSQLpembeli += " and ";
                            sSQLnetto += " and ";
                            sSQLref += " and ";
                        }


                        sSQLkode += " ( A.NO_BUKTI like '%" + getkata[i] + "%' ) ";
                        sSQLmarket += "  ( (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ) ";
                        sSQLpembeli += "  ( A.NAMAPEMESAN like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( (D.NETTO + D.DEBET - D.KREDIT - D.BAYAR) like '%" + getkata[i] + "%' ) ";
                        sSQLref += " ( A.NO_REF like '%" + getkata[i] + "%' ) ";
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NO_FAKTUR, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.TGL_JT_TEMPO AS TGLJTTEMPO ";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect += ",ISNULL(SUM(D.NETTO + D.DEBET - D.KREDIT - D.BAYAR),0) AS SISA_FAKTUR ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            //add by nurul 16/6/2020
            sSQLSelect += ", isnull(A.NO_REF,'') AS REFERENSI ";
            //end add by nurul 16/6/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //add by nurul 16/6/2020
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SIT01A FROM SIT01A WHERE ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SIT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SIT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SIT01A A ";
                    }
                    break;
            }
            //end add by nurul 16/6/2020
            //sSQL2 += "FROM SIT01A A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN ART01D D ON A.NO_BUKTI = D.FAKTUR ";
            sSQL2 += "WHERE A.JENIS_FORM = '2' AND (D.NETTO - D.KREDIT > 0) ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR B.PERSO LIKE '%" + search + "%' OR A.TGL_JT_TEMPO LIKE '%" + search + "%') ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLpembeli + " or " + sSQLnetto + " or " + sSQLref + " ) ";
            }
            string sSQLSelect2 = "";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "GROUP BY A.RECNUM, A.NO_BUKTI, A.TGL, C.NamaMarket, B.PERSO, A.NAMAPEMESAN, A.NETTO, A.TGL_JT_TEMPO, A.NO_REF ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            //sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            //add by nurul 16/6/2020
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //end add by nurul 16/6/2020
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturLunasPartial", pageOrders);

            //return PartialView("TableFakturLunasPartial", vm);
        }
        public ActionResult RefreshTableFakturTempo(string tgl, int? page, string search = "", string filter = "", string filtervalue = "")
        {
            ////IEnumerable<ART01D> FakturJatuhTempo = ErasoftDbContext.ART01D.Where(a => a.NETTO.Value - a.KREDIT.Value > 0);
            ////add by nurul 10/1/2019
            //var tanggal = DateTime.ParseExact(tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            ////end add
            //var vm = new FakturViewModel()
            //{
            //    //change by nurul 10/1/2019 -- ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2" && f.TGL_JT_TEMPO <= DateTime.Now).ToList(),
            //    ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2" && f.TGL_JT_TEMPO <= tanggal).ToList(),
            //    //end change 
            //    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListNFaktur = ErasoftDbContext.ART03B.ToList(),
            //    ListPesanan = ErasoftDbContext.SOT01A.ToList(),

            //}; 
            var tglNow = DateTime.Now.ToString("yyyy-MM-dd");
            if (tgl != null)
            {
                tglNow = DateTime.ParseExact(tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            }
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            string sSQLref = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLmarket += " and ";
                            sSQLpembeli += " and ";
                            sSQLnetto += " and ";
                            sSQLref += " and ";
                        }


                        sSQLkode += " ( A.NO_BUKTI like '%" + getkata[i] + "%' ) ";
                        sSQLmarket += "  ( (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ) ";
                        sSQLpembeli += "  ( A.NAMAPEMESAN like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( (D.NETTO + D.DEBET - D.KREDIT - D.BAYAR) like '%" + getkata[i] + "%' ) ";
                        sSQLref += "  ( A.NO_REF like '%" + getkata[i] + "%' ) ";
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NO_FAKTUR, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.TGL_JT_TEMPO AS TGLJTTEMPO ";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect += ",ISNULL(SUM(D.NETTO + D.DEBET - D.KREDIT - D.BAYAR),0) AS SISA_FAKTUR ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            //add by nurul 16/6/2020
            sSQLSelect += ", isnull(A.NO_REF,'') AS REFERENSI ";
            //end add by nurul 16/6/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //add by nurul 16/6/2020
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SIT01A FROM SIT01A WHERE ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SIT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SIT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SIT01A A ";
                    }
                    break;
            }
            //end add by nurul 16/6/2020
            //sSQL2 += "FROM SIT01A A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN ART01D D ON A.NO_BUKTI = D.FAKTUR ";
            sSQL2 += "WHERE A.JENIS_FORM = '2' AND (A.TGL_JT_TEMPO <= '" + tglNow + "') AND (D.NETTO - D.KREDIT > 0) ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR B.PERSO LIKE '%" + search + "%' OR A.TGL_JT_TEMPO LIKE '%" + search + "%') ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLpembeli + " or " + sSQLnetto + " or " + sSQLref + " ) ";
            }
            string sSQLSelect2 = "";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "GROUP BY A.RECNUM, A.NO_BUKTI, A.TGL, C.NamaMarket, B.PERSO, A.NAMAPEMESAN, A.NETTO, A.TGL_JT_TEMPO, A.NO_REF ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            //sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            //add by nurul 16/6/2020
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //end add by nurul 16/6/2020
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturTempoPartial", pageOrders);
            //return PartialView("TableFakturLunasPartial", vm);
        }


        //public ActionResult RefreshTableRetur1()
        //{
        //    var vm = new FakturViewModel()
        //    {
        //        ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "3").ToList(),
        //        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
        //        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
        //        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
        //        ListPelanggan = ErasoftDbContext.ARF01.ToList(),
        //        ListMarketplace = MoDbContext.Marketplaces.ToList(),
        //        ListNFaktur = ErasoftDbContext.ART03B.ToList()
        //    };

        //    return PartialView("TableReturPartial", vm);
        //}
        public ActionResult RefreshTableRetur1(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLfaktur = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.NO_BUKTI like '%" + getkata[i] + "%' )";
                            sSQLmarket += " ( (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' )";
                            sSQLfaktur += " ( A.NO_REF like '%" + getkata[i] + "%' )";
                            sSQLpembeli += " ( A.NAMAPEMESAN like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.NO_BUKTI like '%" + getkata[i] + "%'";
                                sSQLmarket += " ( (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%'";
                                sSQLfaktur += " ( A.NO_REF like '%" + getkata[i] + "%'";
                                sSQLpembeli += "( A.NAMAPEMESAN like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.NO_BUKTI like '%" + getkata[i] + "%' )";
                                sSQLmarket += " and (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' )";
                                sSQLfaktur += " and A.NO_REF like '%" + getkata[i] + "%' )";
                                sSQLpembeli += " and A.NAMAPEMESAN like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and A.NETTO like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.NO_BUKTI like '%" + getkata[i] + "%' ";
                                sSQLmarket += " and (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                                sSQLfaktur += " and A.NO_REF like '%" + getkata[i] + "%' ";
                                sSQLpembeli += " and A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and A.NETTO like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NO_BUKTI AS NO_FAKTUR, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.NO_REF AS REFERENSI, A.ST_POSTING AS POSTING, ISNULL(E.NO_BUKTI,'') AS PEMBAYARAN, A.TGLINPUT AS TGL_LASTEDIT ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM SIT01A A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            //sSQL2 += "LEFT JOIN ART03B E ON A.NO_BUKTI = E.NFAKTUR ";
            sSQL2 += "LEFT JOIN (SELECT DISTINCT NO_BUKTI FROM SIT01A A INNER JOIN ART03B B ON A.NO_BUKTI = B.NFAKTUR)E ON A.NO_BUKTI = E.NO_BUKTI ";
            sSQL2 += "WHERE A.JENIS_FORM = '3' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR B.PERSO LIKE '%" + search + "%' OR A.NO_REF LIKE '%" + search + "%') ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLfaktur + " or " + sSQLpembeli + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableReturPartial", pageOrders);
        }

        //public ActionResult RefreshTableReturInvoice()
        //{
        //    var vm = new InvoiceViewModel()
        //    {
        //        ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").ToList(),
        //        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
        //        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
        //        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
        //        ListPelanggan = ErasoftDbContext.ARF01.ToList(),
        //        ListMarketplace = MoDbContext.Marketplaces.ToList()
        //    };

        //    return PartialView("TableReturInvoicePartial", vm);
        //}
        public ActionResult RefreshTableReturInvoice(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLfaktur = "";
            string sSQLpembeli = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.INV like '%" + getkata[i] + "%' )";
                            sSQLfaktur += " ( A.REF like '%" + getkata[i] + "%' )";
                            sSQLpembeli += " ( A.NAMA like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.INV like '%" + getkata[i] + "%'";
                                sSQLfaktur += " ( A.REF like '%" + getkata[i] + "%'";
                                sSQLpembeli += "( A.NAMA like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.INV like '%" + getkata[i] + "%' )";
                                sSQLfaktur += " and A.REF like '%" + getkata[i] + "%' )";
                                sSQLpembeli += " and A.NAMA like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and A.NETTO like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.INV like '%" + getkata[i] + "%' ";
                                sSQLfaktur += " and A.REF like '%" + getkata[i] + "%' ";
                                sSQLpembeli += " and A.NAMA like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and A.NETTO like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.INV AS NO_FAKTUR, A.TGL AS TGL, A.NAMA AS SUPPLIER, A.NETTO AS TOTAL, A.POSTING AS POSTING, ISNULL(E.INV,'') AS PEMBAYARAN, A.REF AS REFERENSI, A.TGLINPUT AS TGL_LASTEDIT ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PBT01A A ";
            //sSQL2 += "LEFT JOIN APT03B E ON A.INV = E.NINV ";
            sSQL2 += "LEFT JOIN (SELECT DISTINCT INV FROM PBT01A A INNER JOIN APT03B B ON A.INV = B.NINV)E ON A.INV = E.INV ";
            sSQL2 += "WHERE A.JENISFORM = '2' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.INV LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR A.NAMA LIKE '%" + search + "%' OR A.REF LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLfaktur + " or " + sSQLpembeli + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.INV DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableReturInvoicePartial", pageOrders);
        }

        public ActionResult RefreshFakturForm()
        {
            try
            {
                var vm = new FakturViewModel()
                {
                    //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList(),
                    ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                    //ListNFaktur = ErasoftDbContext.ART03B.ToList()
                };

                return PartialView("BarangFakturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult RefreshReturFakturForm()
        {
            try
            {
                var vm = new FakturViewModel()
                {
                    //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "3").ToList(),
                    ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListMarketplace = MoDbContext.Marketplaces.ToList()
                };

                return PartialView("BarangReturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult GetDataFaktur(int? recNum)
        {
            try
            {
                var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == recNum);

                var vm = new FakturViewModel()
                {
                    Faktur = fakturInDb,
                    ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                    ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "2").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangReturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditFaktur(int? orderId)
        {
            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == orderId && p.JENIS_FORM == "2");
            var vm = new FakturViewModel()
            {
                Faktur = fakturInDb,
                //ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "2").ToList(),
                //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
            };
            var listBarangInFakturDetail = vm.ListFakturDetail.Select(p => p.BRG).ToList();
            vm.ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && (a.TYPE == "3" || a.TYPE == "6")).ToList();
            return PartialView("BarangFakturPartial", vm);
        }

        public ActionResult EditReturFaktur(int? orderId)
        {
            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == orderId && p.JENIS_FORM == "3");
            var noref = "";
            var ceknoref = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == fakturInDb.NO_REF).Select(a => a.NO_REF).SingleOrDefault();
            if (ceknoref != null)
            {
                var temp = ceknoref.Split(';');
                noref = temp.Last();
            }

            var ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "3").ToList();
            var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();

            var vm = new FakturViewModel()
            {
                Faktur = fakturInDb,
                //ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                //ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "3").ToList(),
                ListFakturDetail = ListFakturDetail,
                //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && (a.TYPE == "3" || a.TYPE == "6")).ToList(),
                noRef = noref
            };

            return PartialView("BarangReturPartial", vm);
        }

        public ActionResult DeleteFaktur(int? orderId)
        {
            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == orderId && p.JENIS_FORM == "2");

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            var detailFakturInDb = ErasoftDbContext.SIT01B.Where(p => p.NO_BUKTI == fakturInDb.NO_BUKTI && p.JENIS_FORM == "2").ToList();
            foreach (var item in detailFakturInDb)
            {
                listBrg.Add(item.BRG);
            }
            //end add by calvin 8 nov 2018

            ErasoftDbContext.SIT01A.Remove(fakturInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_SI_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new FakturViewModel()
            {
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                //ListNFaktur = ErasoftDbContext.ART03B.ToList(),
                Errors = null

            };

            //return PartialView("TableFakturPartial", vm);
            return Json(fakturInDb, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteReturFaktur(int? orderId)
        {
            var returFakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == orderId && p.JENIS_FORM == "3");
            var fakturInDbWithRef = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == returFakturInDb.NO_REF && p.JENIS_FORM == "2");
            fakturInDbWithRef.NO_REF = "";

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            //end add by calvin 8 nov 2018

            //add by calvin, validasi QOH
            var returFakturDetailInDb = ErasoftDbContext.SIT01B.Where(b => b.NO_BUKTI == returFakturInDb.NO_BUKTI && b.JENIS_FORM == "3").ToList();
            foreach (var item in returFakturDetailInDb)
            {
                var qtyOnHand = GetQOHSTF08A(item.BRG, item.GUDANG);

                if (qtyOnHand - item.QTY < 0)
                {
                    var vmError = new InvoiceViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //add by calvin 8 nov 2018, update stok marketplace
                listBrg.Add(item.BRG);
                //end add by calvin 8 nov 2018
            }
            //end add by calvin, validasi QOH

            ErasoftDbContext.SIT01A.Remove(returFakturInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_RJ_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new FakturViewModel()
            {
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "3").ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListNFaktur = ErasoftDbContext.ART03B.ToList()
                Errors = null
            };

            return Json(returFakturInDb, JsonRequestBehavior.AllowGet);

            //return PartialView("TableReturPartial", vm);
        }

        [HttpGet]
        public ActionResult DeleteBarangFaktur(int noUrut)
        {
            try
            {
                var barangFakturInDb = ErasoftDbContext.SIT01B.Single(b => b.NO_URUT == noUrut && b.JENIS_FORM == "2");
                var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == barangFakturInDb.NO_BUKTI && p.JENIS_FORM == "2");

                fakturInDb.BRUTO -= barangFakturInDb.HARGA;
                //change by nurul 2/10/2019
                //fakturInDb.NILAI_PPN = Math.Ceiling((double)fakturInDb.PPN * (double)fakturInDb.BRUTO / 100);
                ////change by nurul 8/10/2018  fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN;
                //fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;
                fakturInDb.NILAI_PPN = Math.Ceiling((double)fakturInDb.PPN * ((double)fakturInDb.BRUTO - (double)fakturInDb.NILAI_DISC) / 100);
                fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;
                //end change by nurul 2/10/2019

                ErasoftDbContext.SIT01B.Remove(barangFakturInDb);
                ErasoftDbContext.SaveChanges();

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangFakturInDb.BRG);
                updateStockMarketPlace(listBrg, "[DEL_SI_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018

                var vm = new FakturViewModel()
                {
                    Faktur = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == fakturInDb.NO_BUKTI && p.JENIS_FORM == "2"),
                    ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList(),
                    ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "2").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangFakturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpGet]
        public ActionResult DeleteBarangReturFaktur(int noUrut)
        {
            try
            {
                var barangFakturInDb = ErasoftDbContext.SIT01B.Single(b => b.NO_URUT == noUrut && b.JENIS_FORM == "3");
                var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == barangFakturInDb.NO_BUKTI && p.JENIS_FORM == "3");

                //add by calvin, validasi QOH
                var qtyOnHand = GetQOHSTF08A(barangFakturInDb.BRG, barangFakturInDb.GUDANG);

                if (qtyOnHand - barangFakturInDb.QTY < 0)
                {
                    var vmError = new InvoiceViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                fakturInDb.BRUTO -= barangFakturInDb.HARGA;
                fakturInDb.NILAI_PPN = Math.Ceiling((double)fakturInDb.PPN * ((double)fakturInDb.BRUTO - (double)fakturInDb.NILAI_DISC) / 100);
                fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;

                //add by nurul 27/11/2019, add tgl last edit
                fakturInDb.TGLINPUT = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.SIT01B.Remove(barangFakturInDb);
                ErasoftDbContext.SaveChanges();

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangFakturInDb.BRG);
                updateStockMarketPlace(listBrg, "[DEL_RJ_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018

                var vm = new FakturViewModel()
                {
                    Faktur = ErasoftDbContext.SIT01A.AsNoTracking().Single(p => p.NO_BUKTI == fakturInDb.NO_BUKTI && p.JENIS_FORM == "3"),
                    ListFaktur = ErasoftDbContext.SIT01A.AsNoTracking().Where(f => f.JENIS_FORM == "2").ToList(),
                    ListFakturDetail = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "3").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangReturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateFaktur(UpdateData dataUpdate)
        {
            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataUpdate.OrderId && p.JENIS_FORM == "2");
            fakturInDb.BRUTO = dataUpdate.Bruto;
            fakturInDb.NILAI_DISC = dataUpdate.NilaiDisc;
            fakturInDb.PPN = dataUpdate.Ppn;
            fakturInDb.NILAI_PPN = dataUpdate.NilaiPpn;
            fakturInDb.MATERAI = dataUpdate.OngkosKirim;
            fakturInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            fakturInDb.CUST = dataUpdate.Cust;
            fakturInDb.TERM = dataUpdate.Term;
            fakturInDb.PEMESAN = dataUpdate.Buyer;
            //add by nurul 7/7/2020
            fakturInDb.NAMAPEMESAN = dataUpdate.NamaBuyer;
            //end add by nurul 7/7/2020
            fakturInDb.TGL_JT_TEMPO = DateTime.ParseExact(dataUpdate.Tempo, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;
            //ADD BY NURUL 5/3/2020
            fakturInDb.PENGIRIM = dataUpdate.Kurir;
            fakturInDb.NAMAPENGIRIM = dataUpdate.NamaKurir;
            //ADD BY NURUL 5/3/2020
            //add by nurul 3/4/2020
            fakturInDb.NO_REF = dataUpdate.Noref;
            //end add by nurul 3/4/2020

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }


        [HttpPost]
        public ActionResult UpdateReturFaktur(UpdateData dataUpdate)
        {
            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == dataUpdate.OrderId && p.JENIS_FORM == "3");
            fakturInDb.BRUTO = dataUpdate.Bruto;
            fakturInDb.NILAI_DISC = dataUpdate.NilaiDisc;
            fakturInDb.PPN = dataUpdate.Ppn;
            fakturInDb.NILAI_PPN = dataUpdate.NilaiPpn;
            fakturInDb.MATERAI = dataUpdate.OngkosKirim;
            fakturInDb.NETTO = fakturInDb.BRUTO - fakturInDb.NILAI_DISC + fakturInDb.NILAI_PPN + fakturInDb.MATERAI;

            //add by nurul 27/11/2019, add tgl last edit
            fakturInDb.TGLINPUT = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        //add by nurul 16/11/2018 FakturViewModel dataVm
        [HttpGet]
        public ActionResult GetRecnumReturFaktur(string noUrut)
        {
            string a = (noUrut.Split('-')[noUrut.Split('-').Length - 1]);
            int urut = Convert.ToInt32(a);
            //var Recnum = ErasoftDbContext.SIT01B.Single(p => p.NO_BUKTI == dataVm.Faktur.NO_BUKTI).TRANS_NO_URUT;
            var Recnum = ErasoftDbContext.SIT01B.Single(b => b.NO_URUT == urut && b.JENIS_FORM == "3").TRANS_NO_URUT;

            return Json(Recnum, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetQtyReturFaktur(string param)
        {
            string order = (param.Split(';')[param.Split(';').Length - 3]);
            string brg = (param.Split(';')[param.Split(';').Length - 2]);
            Int32 recnumBrg = Convert.ToInt32(param.Split(';')[param.Split(';').Length - 1]);

            var res = new mdlGetQty()
            {
                OrderId = order,
                BrgId = brg,
                Recnum = recnumBrg
            };

            var spQTY = ErasoftDbContext.SIT01B.Single(p => p.NO_BUKTI == order && p.BRG == brg && p.NO_URUT == recnumBrg).QTY;

            return Json(spQTY, JsonRequestBehavior.AllowGet);
        }
        public class mdlGetQty
        {
            public string OrderId { get; set; }
            public string BrgId { get; set; }
            public Int32 Recnum { get; set; }
        }
        public ActionResult GetReturFaktur(string orderId)
        {
            var listDetail = ErasoftDbContext.SIT01B.Where(b => b.NO_BUKTI == orderId).ToList();
            var detail = listDetail.Count();

            return Json(detail, JsonRequestBehavior.AllowGet);
        }
        //end add 

        //add by nurul 27/5/2019
        public ActionResult TambahBaruFaktur()
        {
            try
            {
                var fakturInDb = new SIT01A();

                var vm = new FakturViewModel()
                {
                    //Faktur = fakturInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => 0 == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangFakturPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }
        //end add by nurul 27/5/2019

        // =============================================== Bagian Faktur Penjualan (END)

        // =============================================== Bagian Pembelian Invoice (START)

        [HttpGet]
        public ActionResult GetInvoice()
        {
            var listInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1").ToList();
            var listKodeInvoice = new List<InvoiceJson>();

            foreach (var invoice in listInvoice)
            {
                listKodeInvoice.Add(new InvoiceJson()
                {
                    RecNum = invoice.RecNum,
                    INV = invoice.INV
                });
            }

            return Json(listKodeInvoice, JsonRequestBehavior.AllowGet);
        }

        //[HttpGet]
        //public ActionResult GetInvoiceBySupp(string kodeSupplier)
        //{
        //    //change by nurul 5 / 11 / 2018
        //    var listInvoice = ErasoftDbContext.PBT01A
        //                        //change by nurul 5/11/2018  --  
        //                        .Where(f => f.JENISFORM == "1" && f.SUPP == kodeSupplier)
        //                        //.Where(f => f.JENISFORM == "1" && f.SUPP == kodeSupplier && (String.IsNullOrEmpty(f.REF) || f.REF == "-"))
        //                        .OrderBy(f => f.INV).ThenByDescending(f => f.TGLINPUT).ToList();

        //    //string sSQL = "";
        //    //sSQL += "SELECT * ";
        //    //sSQL += "FROM PBT01A A LEFT JOIN PBT01A B ON ";
        //    //sSQL += "A.JENISFORM = '1' ";
        //    //sSQL += "AND B.JENISFORM = '2' ";
        //    //sSQL += "AND A.INV = B.REF ";
        //    //sSQL += "WHERE ISNULL(B.INV, '') = '' ";
        //    //sSQL += "AND A.JENISFORM = '1' ";
        //    //sSQL += "AND A.SUPP = '" + kodeSupplier + "' ";
        //    //sSQL += "ORDER BY A.INV ASC, A.TGLINPUT DESC ";
        //    //var listInvoice = ErasoftDbContext.Database.SqlQuery<PBT01A>(sSQL).ToList();
        //    //end change 
        //    var listKodeInvoice = new List<InvoiceJson>();

        //    foreach (var invoice in listInvoice)
        //    {
        //        listKodeInvoice.Add(new InvoiceJson()
        //        {
        //            RecNum = invoice.RecNum,
        //            INV = invoice.INV
        //        });
        //    }

        //    return Json(listKodeInvoice, JsonRequestBehavior.AllowGet);
        //}

        [HttpGet]
        public ActionResult GetInvoiceBySupp(string kodeSupplier)
        {
            //change by nurul 5/11/2018
            var listInvoice = ErasoftDbContext.PBT01A
                                .Where(f => f.JENISFORM == "1" && f.SUPP == kodeSupplier)
                                .OrderBy(f => f.INV).ThenByDescending(f => f.TGLINPUT).ToList();
            ////end change 
            var listKodeInvoice = new List<InvoiceJson>();

            foreach (var invoice in listInvoice)
            {
                listKodeInvoice.Add(new InvoiceJson()
                {
                    RecNum = invoice.RecNum,
                    INV = invoice.INV
                });
            }

            return Json(listKodeInvoice, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 5/11/2018
        [HttpGet]
        public ActionResult GetInvoiceBySuppNew(string kodeSupplier)
        {

            string sSQL = "";
            sSQL += "SELECT * ";
            sSQL += "FROM PBT01A A LEFT JOIN PBT01A B ON ";
            sSQL += "A.JENISFORM = '1' ";
            sSQL += "AND B.JENISFORM = '2' ";
            sSQL += "AND A.INV = B.REF ";
            sSQL += "WHERE ISNULL(B.INV, '') = '' ";
            sSQL += "AND A.JENISFORM = '1' ";
            sSQL += "AND A.SUPP = '" + kodeSupplier + "' ";
            sSQL += "ORDER BY A.INV ASC, A.TGLINPUT DESC ";
            var listInvoice = ErasoftDbContext.Database.SqlQuery<PBT01A>(sSQL).ToList();
            //end change 
            var listKodeInvoice = new List<InvoiceJson>();

            foreach (var invoice in listInvoice)
            {
                listKodeInvoice.Add(new InvoiceJson()
                {
                    RecNum = invoice.RecNum,
                    INV = invoice.INV
                });
            }

            return Json(listKodeInvoice, JsonRequestBehavior.AllowGet);
        }
        //end add

        [HttpGet]
        public ActionResult GetListPesanan()
        {
            //change by nurul 23/7/2019
            //var listPesanan = ErasoftDbContext.SOT01A.ToList();
            var listPesanan = ErasoftDbContext.SOT01A.Where(a => a.STATUS_TRANSAKSI == "01").ToList();
            //end change by nurul 23/7/2019

            return Json(listPesanan, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveInvoice(InvoiceViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Invoice.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no_bukti
                ////var listInvoiceInDb = ErasoftDbContext.PBT01A.OrderBy(p => p.RecNum).ToList();
                //var listInvoiceInDb = ErasoftDbContext.PBT01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listInvoiceInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"PB{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (PBT01A, RESEED, 0)");
                //}
                //else
                //{
                //    //var lastRecNum = listInvoiceInDb.Last().RecNum;
                //    var lastRecNum = listInvoiceInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"PB{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "PB", "PBT01A", "INV");
                var noOrder = "PB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Invoice.INV = noOrder;
                dataVm.Invoice.F_PAJAK = "";
                dataVm.Invoice.NAMA = ErasoftDbContext.APF01.Single(p => p.SUPP == dataVm.Invoice.SUPP).NAMA;
                dataVm.Invoice.PPN_Bln_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("MM") ?? "0");
                dataVm.Invoice.PPN_Thn_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("yyyy").Substring(2, 2) ?? "0");

                dataVm.InvoiceDetail.INV = noOrder;

                //add by nurul 27/11/2019, add tgl last edit
                dataVm.Invoice.TGLINPUT = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                //ErasoftDbContext.SaveChanges();
                try
                {
                    ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.PBT01A.Where(a => a.INV == dataVm.Invoice.INV).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.INV == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "PB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Invoice.INV = noOrder;
                            ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                            dataVm.InvoiceDetail.INV = noOrder;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.InvoiceDetail.NO == null)
                {
                    ErasoftDbContext.PBT01B.Add(dataVm.InvoiceDetail);
                    ErasoftDbContext.PBT01A.Where(p => p.INV == noOrder && p.JENISFORM == "1").Update(p => new PBT01A() { BRUTO = dataVm.Invoice.BRUTO });
                }
            }
            else
            {
                var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "1");

                invoiceInDb.NETTO = dataVm.Invoice.NETTO;
                invoiceInDb.BRUTO = dataVm.Invoice.BRUTO;
                invoiceInDb.NDISC1 = dataVm.Invoice.NDISC1;
                invoiceInDb.PPN = dataVm.Invoice.PPN;
                invoiceInDb.NPPN = dataVm.Invoice.NPPN;
                //ADD BY NURUL 7/12/2018
                invoiceInDb.BIAYA_LAIN = dataVm.Invoice.BIAYA_LAIN;
                //END ADD
                invoiceInDb.NILAI_PPN = dataVm.Invoice.NILAI_PPN;
                invoiceInDb.KODE_REF_PESANAN = dataVm.Invoice.KODE_REF_PESANAN;
                //add by nurul 27/11/2019, add tgl last edit
                invoiceInDb.TGLINPUT = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit
                dataVm.InvoiceDetail.INV = dataVm.Invoice.INV;

                if (dataVm.InvoiceDetail.NO == null)
                {
                    ErasoftDbContext.PBT01B.Add(dataVm.InvoiceDetail);
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            listBrg.Add(dataVm.InvoiceDetail.BRG);
            updateStockMarketPlace(listBrg, "[INS_PB][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            //add by nurul 8/7/2019, tuning
            var ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "1").ToList();
            var listBarangInInvoiceDetail = ListInvoiceDetail.Select(p => p.BRG).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new InvoiceViewModel()
            {
                Invoice = ErasoftDbContext.PBT01A.Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "1"),
                //ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "1").ToList(),
                ListInvoiceDetail = ListInvoiceDetail,
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInInvoiceDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return PartialView("BarangInvoicePartial", vm);
        }

        public ActionResult SaveReturInvoice(InvoiceViewModel dataVm)
        {

            //if (!ModelState.IsValid)
            //{
            //    dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
            //    return Json(dataVm, JsonRequestBehavior.AllowGet);
            //}

            bool returBaru = false;

            if (dataVm.Invoice.RecNum == null)
            {
                var cekREf = ErasoftDbContext.PBT01A.SingleOrDefault(f => f.REF == dataVm.Invoice.REF);
                if (cekREf == null)
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    ////var listInvoiceInDb = ErasoftDbContext.PBT01A.OrderBy(p => p.RecNum).ToList();
                    //var listInvoiceInDb = ErasoftDbContext.PBT01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                    //var digitAkhir = "";
                    //var noOrder = "";

                    //if (listInvoiceInDb == null)
                    //{
                    //    digitAkhir = "000001";
                    //    noOrder = $"RB{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (PBT01A, RESEED, 0)");
                    //}
                    //else
                    //{
                    //    //var lastRecNum = listInvoiceInDb.Last().RecNum;
                    //    var lastRecNum = listInvoiceInDb.RecNum;
                    //    lastRecNum++;

                    //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                    //    noOrder = $"RB{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //}
                    var lastBukti = GenerateAutoNumber(ErasoftDbContext, "RB", "PBT01A", "INV");
                    var noOrder = "RB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    //add by calvin, validasi QOH
                    var invoiceDetailInDb = ErasoftDbContext.PBT01B.Where(b => b.INV == dataVm.Invoice.REF).ToList();
                    foreach (var item in invoiceDetailInDb)
                    {
                        var qtyOnHand = GetQOHSTF08A(item.BRG, item.GD);

                        if (qtyOnHand - item.QTY < 0)
                        {
                            var vmError = new InvoiceViewModel()
                            {

                            };
                            vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + item.BRG + " ) di gudang " + item.GD + " sisa ( " + Convert.ToString(qtyOnHand) + " ).");
                            return Json(vmError, JsonRequestBehavior.AllowGet);
                        }
                    }
                    //end add by calvin, validasi QOH

                    var returInDb = ErasoftDbContext.PBT01A.SingleOrDefault(f => f.INV == dataVm.Invoice.REF);
                    if (returInDb != null)
                    {
                        dataVm.Invoice.TERM = returInDb.TERM;
                        dataVm.Invoice.TGJT = returInDb.TGJT;
                        dataVm.Invoice.BRUTO = returInDb.BRUTO;
                        dataVm.Invoice.NETTO = returInDb.NETTO;
                        //add by nurul 10/12/2018
                        dataVm.Invoice.PPN = returInDb.PPN;
                        dataVm.Invoice.NPPN = returInDb.NPPN;
                        dataVm.Invoice.NDISC1 = returInDb.NDISC1;
                        dataVm.Invoice.BIAYA_LAIN = returInDb.BIAYA_LAIN;
                        //end add 
                    }

                    //var recNumCust = ParseInt(dataVm.Invoice.SUPP);
                    dataVm.Invoice.INV = noOrder;
                    dataVm.Invoice.F_PAJAK = "";
                    dataVm.Invoice.NAMA = ErasoftDbContext.APF01.Single(p => p.SUPP == dataVm.Invoice.SUPP).NAMA;
                    dataVm.Invoice.PPN_Bln_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("MM") ?? "0");
                    dataVm.Invoice.PPN_Thn_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("yyyy").Substring(2, 2) ?? "0");

                    //dataVm.InvoiceDetail.INV = noOrder;

                    //add by nurul 27/11/2019, add tgl last edit
                    dataVm.Invoice.TGLINPUT = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit

                    //change by nurul 23/12/2019, perbaikan no_bukti
                    //ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                    try
                    {
                        ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                        ErasoftDbContext.SaveChanges();
                    }
                    catch (Exception ex)
                    {
                        var tempSI = ErasoftDbContext.PBT01A.Where(a => a.INV == dataVm.Invoice.INV).Single();
                        if (tempSI != null)
                        {
                            if (tempSI.INV == noOrder)
                            {
                                var lastBuktiNew = Convert.ToInt32(lastBukti);
                                lastBuktiNew++;
                                noOrder = "RB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                dataVm.Invoice.INV = noOrder;
                                ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                            return Json(dataVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    //if (dataVm.InvoiceDetail.NO == null)
                    //{
                    //    ErasoftDbContext.PBT01B.Add(dataVm.InvoiceDetail);
                    //}
                    returBaru = true;
                }
            }
            else
            {
                //add by calvin 16 nov 2018, cek jika tidak ada detail, autoload
                var cekdetail = ErasoftDbContext.PBT01B.FirstOrDefault(p => p.INV == dataVm.Invoice.INV);
                if (cekdetail != null)
                {
                    var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "2");

                    //UPDATE ANAK
                    var invDetailDb = ErasoftDbContext.PBT01B.Single(p => p.INV == dataVm.Invoice.INV && p.BRG == dataVm.InvoiceDetail.BRG);

                    //add by calvin, validasi QOH
                    var qtyOnHand = GetQOHSTF08A(invDetailDb.BRG, invDetailDb.GD);

                    if (qtyOnHand + invDetailDb.QTY - dataVm.InvoiceDetail.QTY < 0)
                    {
                        var vmError = new InvoiceViewModel()
                        {

                        };
                        vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + invDetailDb.BRG + " ) di gudang " + invDetailDb.GD + " sisa ( " + Convert.ToString(qtyOnHand + invDetailDb.QTY) + " ).");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }
                    //end add by calvin, validasi QOH

                    invDetailDb.QTY = dataVm.InvoiceDetail.QTY;
                    invDetailDb.NILAI_DISC_1 = dataVm.InvoiceDetail.NILAI_DISC_1;
                    invDetailDb.NILAI_DISC_2 = dataVm.InvoiceDetail.NILAI_DISC_2;
                    invDetailDb.THARGA = (dataVm.InvoiceDetail.QTY) * (invDetailDb.HBELI) - (invDetailDb.NILAI_DISC_1 + invDetailDb.NILAI_DISC_2);

                    //UPDATE BAPAK
                    invoiceInDb.NETTO = dataVm.Invoice.NETTO;
                    invoiceInDb.BRUTO = dataVm.Invoice.BRUTO;
                    invoiceInDb.NDISC1 = dataVm.Invoice.NDISC1;
                    invoiceInDb.PPN = dataVm.Invoice.PPN;
                    //invoiceInDb.NILAI_PPN = dataVm.Invoice.NILAI_PPN;
                    invoiceInDb.NPPN = dataVm.Invoice.NPPN;
                    //add by nurul 10/12/2018
                    invoiceInDb.BIAYA_LAIN = dataVm.Invoice.BIAYA_LAIN;
                    //end add
                    //add by nurul 27/11/2019, add tgl last edit
                    invoiceInDb.TGLINPUT = DateTime.Today;
                    //end add by nurul 27/11/2019, add tgl last edit
                    //dataVm.InvoiceDetail.INV = dataVm.Invoice.INV;
                    //if (dataVm.InvoiceDetail.NO == null)
                    //{
                    //    ErasoftDbContext.PBT01B.Add(dataVm.InvoiceDetail);
                    //}

                    returBaru = false;
                }
                else
                {
                    returBaru = true;
                }
            }

            ErasoftDbContext.SaveChanges();

            // autoload detail item, jika buat retur baru
            if (returBaru)
            {
                object[] spParams = {
                new SqlParameter("@NOBUK",dataVm.Invoice.INV),
                new SqlParameter("@NO_REF",dataVm.Invoice.REF)
                };

                ErasoftDbContext.Database.ExecuteSqlCommand("exec [SP_AUTOLOADRETUR_PEMBELIAN] @NOBUK, @NO_REF", spParams);

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                var detailReturInvoiceInDb = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "2").ToList();
                foreach (var item in detailReturInvoiceInDb)
                {
                    listBrg.Add(item.BRG);
                }
                updateStockMarketPlace(listBrg, "[INS_RB][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018
            }
            else
            {
                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(dataVm.InvoiceDetail.BRG);
                updateStockMarketPlace(listBrg, "[INS_RB][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018
            }
            ModelState.Clear();

            var cek = ErasoftDbContext.PBT01A.AsNoTracking().Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "2");
            var cek2 = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "2").ToList();
            //add by nurul 9/7/2019, tuning
            var ListInvoiceDetail = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "2").ToList();
            var listBarangInInvoiceDetail = ListInvoiceDetail.Select(p => p.BRG).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new InvoiceViewModel()
            {
                //Invoice = ErasoftDbContext.PBT01A.Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "2"),
                Invoice = ErasoftDbContext.PBT01A.AsNoTracking().Single(p => p.INV == dataVm.Invoice.INV && p.JENISFORM == "2"),
                //ListInvoiceDetail = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == dataVm.Invoice.INV && pd.JENISFORM == "2").ToList(),
                ListInvoiceDetail = ListInvoiceDetail,
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInInvoiceDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return PartialView("BarangReturInvoicePartial", vm);
        }

        public ActionResult EditReturInvoice(int? orderId)
        {
            var InvoiceInDB = ErasoftDbContext.PBT01A.Single(p => p.RecNum == orderId && p.JENISFORM == "2");

            var ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == InvoiceInDB.INV && pd.JENISFORM == "2").ToList();
            var listBarangInFakturDetail = ListInvoiceDetail.Select(p => p.BRG).ToList();
            var vm = new InvoiceViewModel()
            {
                Invoice = ErasoftDbContext.PBT01A.Single(p => p.INV == InvoiceInDB.INV && p.JENISFORM == "2"),
                //ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == InvoiceInDB.INV && pd.JENISFORM == "2").ToList(),
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
                ListInvoiceDetail = ListInvoiceDetail,
                ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3" && listBarangInFakturDetail.Contains(a.BRG)).ToList()
            };

            return PartialView("BarangReturInvoicePartial", vm);
        }
        //public ActionResult RefreshTableInvoice1()
        //{
        //    var vm = new InvoiceViewModel()
        //    {
        //        ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1").ToList(),
        //        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
        //        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
        //        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
        //        ListPelanggan = ErasoftDbContext.ARF01.ToList(),
        //        ListMarketplace = MoDbContext.Marketplaces.ToList(),
        //        ListNInvoice = ErasoftDbContext.APT03B.ToList()
        //    };

        //    return PartialView("TableInvoicePartial", vm);
        //}
        public ActionResult RefreshTableInvoice1(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                            sSQLnetto += " and ";
                        }


                        sSQLkode += " ( A.INV like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( A.NAMA like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( A.NETTO like '%" + getkata[i] + "%' ) ";

                    }
                }
            }
            //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLperso + " or " + sSQLpembeli + " ) ";
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.INV AS NO_FAKTUR, A.TGL AS TGL, A.NAMA AS SUPPLIER, A.NETTO AS TOTAL, A.POSTING AS POSTING, ISNULL(E.INV,'') AS PEMBAYARAN, A.TGLINPUT AS TGL_LASTEDIT ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PBT01A A ";
            //sSQL2 += "LEFT JOIN APT03B E ON A.INV = E.NINV ";
            sSQL2 += "LEFT JOIN (SELECT DISTINCT INV FROM PBT01A A INNER JOIN APT03B B ON A.INV = B.NINV)E ON A.INV = E.INV ";
            sSQL2 += "WHERE A.JENISFORM = '1' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.INV LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR A.NAMA LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.INV DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableInvoicePartial", pageOrders);
        }


        public ActionResult RefreshTableInvoiceLunas(int? page, string search = "")
        {
            //IEnumerable<APT01D> InvBelumLunas = ErasoftDbContext.APT01D.Where(a => a.NETTO - a.DEBET > 0);
            //var vm = new InvoiceViewModel()
            //{
            //    ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1" && InvBelumLunas.Any(a => a.INV == f.INV)).ToList(),
            //    //ListBarang = ErasoftDbContext.STF02.ToList(), change by nurul 21/1/2019
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListNInvoice = ErasoftDbContext.APT03B.ToList()
            //};
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                            sSQLnetto += " and ";
                        }


                        sSQLkode += " ( A.INV like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( A.NAMA like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( (D.NETTO - D.DEBET + D.KREDIT - D.BAYAR) like '%" + getkata[i] + "%' ) ";

                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.INV AS NO_FAKTUR, A.TGL AS TGL, A.NAMA AS SUPPLIER, A.NETTO AS TOTAL, A.TGJT AS TGLJTTEMPO ";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect += ",ISNULL(SUM(D.NETTO + D.KREDIT - D.DEBET - D.BAYAR),0) AS SISA_FAKTUR ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PBT01A A ";
            sSQL2 += "LEFT JOIN APT01D D ON A.INV = D.INV ";
            sSQL2 += "WHERE A.JENISFORM = '1' AND D.NETTO - D.DEBET > 0 ";
            if (search != "")
            {
                //sSQL2 += "AND (A.INV LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR A.NAMA LIKE '%" + search + "%' OR A.TGJT LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLnetto + " ) ";
            }
            string sSQLSelect2 = "";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "GROUP BY A.RECNUM, A.INV, A.TGL, A.NAMA, A.NETTO,A.TGJT ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.INV DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);

            //return PartialView("TableInvoiceLunasPartial", vm);
            return PartialView("TableInvoiceLunasPartial", pageOrders);
        }

        public ActionResult RefreshTableInvoiceTempo(string tgl, int? page, string search = "")
        {
            ////add by nurul 10/1/2019
            //var tanggal = DateTime.ParseExact(tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            ////end add 
            //var vm = new InvoiceViewModel()
            //{
            //    //change by nurul 10/1/2019 -- ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1" && f.TGJT <= DateTime.Now).ToList(),
            //    ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1" && f.TGJT <= tanggal).ToList(),
            //    //end change 
            //    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListNInvoice = ErasoftDbContext.APT03B.ToList()
            //};
            var tglNow = DateTime.Now.ToString("yyyy-MM-dd");
            if (tgl != null)
            {
                tglNow = DateTime.ParseExact(tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            }
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLnama = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                            sSQLnetto += " and ";
                        }


                        sSQLkode += " ( A.INV like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( A.NAMA like '%" + getkata[i] + "%' ) ";
                        sSQLnetto += " ( (D.NETTO - D.DEBET + D.KREDIT - D.BAYAR) like '%" + getkata[i] + "%' ) ";

                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.INV AS NO_FAKTUR, A.TGL AS TGL, A.NAMA AS SUPPLIER, A.NETTO AS TOTAL, A.TGJT AS TGLJTTEMPO ";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect += ",ISNULL(SUM(D.NETTO + D.KREDIT - D.DEBET - D.BAYAR),0) AS SISA_FAKTUR ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PBT01A A ";
            sSQL2 += "LEFT JOIN APT01D D ON A.INV = D.INV ";
            sSQL2 += "WHERE A.JENISFORM = '1' AND A.TGJT <= '" + tglNow + "' AND D.NETTO - D.DEBET > 0 ";
            if (search != "")
            {
                //sSQL2 += "AND (A.INV LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR A.NAMA LIKE '%" + search + "%' OR A.TGJT LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLnetto + " ) ";
            }
            string sSQLSelect2 = "";
            //add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "GROUP BY A.RECNUM, A.INV, A.TGL, A.NAMA, A.NETTO,A.TGJT ";
            //end add by nurul 16/1/2020, tampil sisa faktur
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.INV DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);

            //return PartialView("TableInvoiceLunasPartial", vm);
            return PartialView("TableInvoiceTempoPartial", pageOrders);
        }

        public ActionResult RefreshTableReturInvoice1()
        {
            var vm = new InvoiceViewModel()
            {
                ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").ToList(),
                //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList(),
                ListNInvoice = ErasoftDbContext.APT03B.ToList()
            };

            return PartialView("TableReturInvoicePartial", vm);
        }

        public ActionResult RefreshInvoiceForm()
        {
            try
            {
                var vm = new InvoiceViewModel()
                {
                    //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1").ToList(),
                    ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListMarketplace = MoDbContext.Marketplaces.ToList()
                };

                return PartialView("BarangInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult RefreshReturInvoiceForm()
        {
            try
            {
                var vm = new InvoiceViewModel()
                {
                    //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").ToList(),
                    ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListMarketplace = MoDbContext.Marketplaces.ToList()
                };

                return PartialView("BarangReturInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult GetDataInvoice(int? recNum)
        {
            try
            {
                var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.RecNum == recNum);

                var vm = new InvoiceViewModel()
                {
                    Invoice = invoiceInDb,
                    ListInvoice = ErasoftDbContext.PBT01A.ToList(),
                    ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == invoiceInDb.INV && pd.JENISFORM == "1").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangReturInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditInvoice(int? orderId)
        {
            try
            {
                var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.RecNum == orderId && p.JENISFORM == "1");

                var vm = new InvoiceViewModel()
                {
                    Invoice = invoiceInDb,
                    //ListInvoice = ErasoftDbContext.PBT01A.ToList(),
                    ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == invoiceInDb.INV && pd.JENISFORM == "1").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };
                var listBarangInInvDetail = vm.ListInvoiceDetail.Select(p => p.BRG).ToList();
                vm.ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInInvDetail.Contains(a.BRG) && a.TYPE == "3").ToList();
                return PartialView("BarangInvoicePartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        //add by nurul 28/5/2019
        public ActionResult TambahBaruInvoice()
        {
            try
            {
                var invoiceInDb = new PBT01A();

                var vm = new InvoiceViewModel()
                {
                    Invoice = invoiceInDb,
                    ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => 0 == 1).ToList(),
                };

                return PartialView("BarangInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }
        //end add by nurul 28/5/2019

        public ActionResult DeleteInvoice(int? orderId)
        {
            var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.RecNum == orderId && p.JENISFORM == "1");

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            //end add by calvin 8 nov 2018

            //add by calvin, validasi QOH
            var invoiceDetailInDb = ErasoftDbContext.PBT01B.Where(b => b.INV == invoiceInDb.INV && b.JENISFORM == "1").ToList();
            foreach (var item in invoiceDetailInDb)
            {
                var qtyOnHand = GetQOHSTF08A(item.BRG, item.GD);

                if (qtyOnHand - item.QTY < 0)
                {
                    var vmError = new InvoiceViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //add by calvin 8 nov 2018, update stok marketplace
                listBrg.Add(item.BRG);
                //end add by calvin 8 nov 2018
            }
            //end add by calvin, validasi QOH

            ErasoftDbContext.PBT01A.Remove(invoiceInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_PB_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new InvoiceViewModel()
            {
                //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "1").ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListNInvoice = ErasoftDbContext.APT03B.ToList()
                Errors = null
            };

            return Json(invoiceInDb, JsonRequestBehavior.AllowGet);

            //return PartialView("TableInvoicePartial", vm);
        }

        public ActionResult DeleteReturInvoice(int? orderId)
        {
            var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.RecNum == orderId && p.JENISFORM == "2");

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            var detailReturInvoiceInDb = ErasoftDbContext.PBT01B.Where(pd => pd.INV == invoiceInDb.INV && pd.JENISFORM == "2").ToList();
            foreach (var item in detailReturInvoiceInDb)
            {
                listBrg.Add(item.BRG);
            }
            //end add by calvin 8 nov 2018

            ErasoftDbContext.PBT01A.Remove(invoiceInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_RB_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new InvoiceViewModel()
            {
                //ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").ToList(),
                ////ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //ListNInvoice = ErasoftDbContext.APT03B.ToList()
                Errors = null
            };

            return Json(invoiceInDb, JsonRequestBehavior.AllowGet);

            //return PartialView("TableReturInvoicePartial", vm);
        }

        [HttpGet]
        public ActionResult DeleteBarangInvoice(int noUrut)
        {
            try
            {
                var barangInvoiceInDb = ErasoftDbContext.PBT01B.Single(b => b.NO == noUrut && b.JENISFORM == "1");
                var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == barangInvoiceInDb.INV && p.JENISFORM == "1");

                //add by calvin, validasi QOH
                var qtyOnHand = GetQOHSTF08A(barangInvoiceInDb.BRG, barangInvoiceInDb.GD);

                if (qtyOnHand - barangInvoiceInDb.QTY < 0)
                {
                    var vmError = new InvoiceViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                invoiceInDb.BRUTO -= barangInvoiceInDb.THARGA;
                //invoiceInDb.NILAI_PPN = Math.Ceiling((double)invoiceInDb.PPN * (double)invoiceInDb.BRUTO / 100);
                invoiceInDb.NPPN = Math.Ceiling((double)invoiceInDb.PPN * ((double)invoiceInDb.BRUTO - (double)invoiceInDb.NDISC1) / 100);
                //change by nurul 10/12/2018 -- invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NILAI_PPN;
                invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN + invoiceInDb.BIAYA_LAIN;

                //add by nurul 27/11/2019, add tgl last edit
                invoiceInDb.TGLINPUT = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.PBT01B.Remove(barangInvoiceInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new InvoiceViewModel()
                {
                    Invoice = ErasoftDbContext.PBT01A.Single(p => p.INV == invoiceInDb.INV && p.JENISFORM == "1"),
                    ListInvoice = ErasoftDbContext.PBT01A.Where(f => f.JENISFORM == "2").ToList(),
                    ListInvoiceDetail = ErasoftDbContext.PBT01B.Where(pd => pd.INV == invoiceInDb.INV && pd.JENISFORM == "1").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangInvoiceInDb.BRG);
                updateStockMarketPlace(listBrg, "[DEL_PB_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018

                return PartialView("BarangInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpGet]
        public ActionResult DeleteBarangReturInvoice(int noUrut)
        {
            try
            {
                var barangInvoiceInDb = ErasoftDbContext.PBT01B.Single(b => b.NO == noUrut && b.JENISFORM == "2");
                var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == barangInvoiceInDb.INV && p.JENISFORM == "2");

                invoiceInDb.BRUTO -= barangInvoiceInDb.THARGA;
                //invoiceInDb.NILAI_PPN = Math.Ceiling((double)invoiceInDb.PPN * (double)invoiceInDb.BRUTO / 100);
                invoiceInDb.NPPN = Math.Ceiling((double)invoiceInDb.PPN * ((double)invoiceInDb.BRUTO - (double)invoiceInDb.NDISC1) / 100);
                //change by nurul 10/12/2018 -- invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NILAI_PPN;
                invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN + invoiceInDb.BIAYA_LAIN;

                //add by nurul 27/11/2019, add tgl last edit
                invoiceInDb.TGLINPUT = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.PBT01B.Remove(barangInvoiceInDb);
                ErasoftDbContext.SaveChanges();

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangInvoiceInDb.BRG);
                updateStockMarketPlace(listBrg, "[DEL_RB_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018

                var vm = new InvoiceViewModel()
                {
                    Invoice = ErasoftDbContext.PBT01A.AsNoTracking().Single(p => p.INV == invoiceInDb.INV && p.JENISFORM == "2"),
                    ListInvoice = ErasoftDbContext.PBT01A.AsNoTracking().Where(f => f.JENISFORM == "2").ToList(),
                    ListInvoiceDetail = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == invoiceInDb.INV && pd.JENISFORM == "2").ToList(),
                    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    ListMarketplace = MoDbContext.Marketplaces.ToList()

                };

                return PartialView("BarangReturInvoicePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpGet]
        public ActionResult GetPelangganAkunBukalapak()
        {
            var mp = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToUpper() == "BUKALAPAK").FirstOrDefault();
            if (mp != null)
            {
                var listPelanggan = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).Where(m => m.NAMA == mp.IdMarket.ToString()).ToList();

                return Json(listPelanggan, JsonRequestBehavior.AllowGet);
            }
            return JsonErrorMessage("failed to get marketplace bukalapak");
        }

        [HttpPost]
        public ActionResult UpdateInvoice(UpdateData dataUpdate)
        {
            var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == dataUpdate.OrderId);
            invoiceInDb.BRUTO = dataUpdate.Bruto;
            invoiceInDb.NDISC1 = dataUpdate.NilaiDisc;
            invoiceInDb.PPN = dataUpdate.Ppn;
            //change by nurul 16/11/2018 -- invoiceInDb.NPPN = dataUpdate.Bruto * (invoiceInDb.PPN / 100);
            invoiceInDb.NPPN = dataUpdate.NilaiPpn;
            //end change 
            //ADD BY NURUL 7/12/2018
            invoiceInDb.BIAYA_LAIN = dataUpdate.OngkosKirim;
            //END ADD
            invoiceInDb.KODE_REF_PESANAN = dataUpdate.KodeRefPesanan;
            invoiceInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl.Substring(0, 10), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            invoiceInDb.SUPP = dataUpdate.Supp;
            invoiceInDb.TERM = dataUpdate.TermInvoice;
            invoiceInDb.NAMA = ErasoftDbContext.APF01.Single(s => s.SUPP == dataUpdate.Supp).NAMA;
            invoiceInDb.TGJT = DateTime.ParseExact(dataUpdate.Tempo, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            //CHANGE BY NURUL 7/12/2018 -- invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN;
            invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN + invoiceInDb.BIAYA_LAIN;
            //END CHANGE 
            //add by nurul 24/7/2019
            invoiceInDb.DROPSHIPPER = dataUpdate.Dropship;
            //end add by nurul 24/7/2019

            //add by nurul 27/11/2019, add tgl last edit
            invoiceInDb.TGLINPUT = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        [HttpPost]
        public ActionResult UpdateReturInvoice(UpdateData dataUpdate)
        {
            var invoiceInDb = ErasoftDbContext.PBT01A.Single(p => p.INV == dataUpdate.OrderId);
            invoiceInDb.BRUTO = dataUpdate.Bruto;
            invoiceInDb.NDISC1 = dataUpdate.NilaiDisc;
            invoiceInDb.PPN = dataUpdate.Ppn;
            //change by nurul 6/11/2018 -- invoiceInDb.NPPN = dataUpdate.Bruto * (invoiceInDb.PPN / 100);
            invoiceInDb.NPPN = ((dataUpdate.Bruto - invoiceInDb.NDISC1) * invoiceInDb.PPN / 100);
            //invoiceInDb.KODE_REF_PESANAN = dataUpdate.KodeRefPesanan;
            //add by nurul 10/12/2018
            invoiceInDb.BIAYA_LAIN = dataUpdate.OngkosKirim;
            //end add
            //change by nurul 10/12/2018 -- invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN;
            invoiceInDb.NETTO = invoiceInDb.BRUTO - invoiceInDb.NDISC1 + invoiceInDb.NPPN + invoiceInDb.BIAYA_LAIN;
            //end change 

            //add by nurul 27/11/2019, add tgl last edit
            invoiceInDb.TGLINPUT = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        //add by nurul 16/11/2018
        [HttpGet]
        public ActionResult GetRecnumReturInvoice(string noUrut)
        {
            string a = (noUrut.Split('-')[noUrut.Split('-').Length - 1]);
            int urut = Convert.ToInt32(a);
            var Recnum = ErasoftDbContext.PBT01B.Single(p => p.NO == urut && p.JENISFORM == "2").NO_URUT_PO;

            return Json(Recnum, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetQtyReturInvoice(string param)
        {
            string order = (param.Split(';')[param.Split(';').Length - 3]);
            string brg = (param.Split(';')[param.Split(';').Length - 2]);
            Int32 recnumBrg = Convert.ToInt32(param.Split(';')[param.Split(';').Length - 1]);

            var res = new mdlGetQty()
            {
                OrderId = order,
                BrgId = brg,
                Recnum = recnumBrg
            };

            var spQTY = ErasoftDbContext.PBT01B.Single(p => p.INV == order && p.BRG == brg && p.NO == recnumBrg).QTY;

            return Json(spQTY, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetReturInvoice(string orderId)
        {
            var listDetail = ErasoftDbContext.PBT01B.Where(b => b.INV == orderId).ToList();
            var detail = listDetail.Count();

            return Json(detail, JsonRequestBehavior.AllowGet);
        }
        //end add 

        // =============================================== Bagian Pembelian Invoice (END)

        // =============================================== Bagian Pesanan (START)

        [HttpGet]
        public ActionResult GetPelanggan()
        {
            var listPelanggan = MoDbContext.Marketplaces.ToList();

            return Json(listPelanggan, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetPelangganAkun()
        {
            var listPelanggan = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).ToList();

            return Json(listPelanggan, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetPelangganAkunPromo()
        {
            //var listPelanggan = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).ToList();
            var listPelanggan = ErasoftDbContext.ARF01.Where(m => m.NAMA != "16").OrderBy(m => m.NAMA).ToList();

            return Json(listPelanggan, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetPelangganAkunTokpedShopee()
        {
            //change by Tri, 16/7/2019, filter tokped, bl dan offline
            //change by nurul 29/4/2019, filter hanya tokped 
            //var listPelanggan = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).Where(m => m.NAMA == "15" || m.NAMA == "17").ToList();
            var listPelanggan = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).Where(m => m.NAMA == "15" || m.NAMA == "8" || m.NAMA == "18").ToList();
            //end change by nurul 29/4/2019
            //end change by Tri, 16/7/2019, filter tokped, bl dan offline

            return Json(listPelanggan, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetPembeli()
        {
            var listPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList();

            return Json(listPembeli, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 4/12/2018
        [HttpGet]
        public ActionResult GetPembeliPesanan(string kode)
        {
            //var listPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList();
            var pembeli = ErasoftDbContext.ARF01C.Single(x => x.BUYER_CODE == kode);

            return Json(pembeli, JsonRequestBehavior.AllowGet);
        }
        //end add 

        [HttpGet]
        public ActionResult GetDataBarangPesanan(string code)
        {
            //var listBarang = ErasoftDbContext.STF02.ToList();
            var listBarang = (from a in ErasoftDbContext.STF02
                              join b in ErasoftDbContext.STF02H on a.BRG equals b.BRG
                              join c in ErasoftDbContext.ARF01 on b.IDMARKET equals c.RecNum
                              //change by nurul 21/1/2019 -- where c.CUST == code
                              where c.CUST == code && a.TYPE == "3"
                              select new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = b.HJUAL });

            return Json(listBarang, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetDataBarang(string code)
        {
            //var listBarang = ErasoftDbContext.STF02.ToList(); 'change by nurul 21/1/2019 
            //var listBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
            var listBarang = from stf02 in ErasoftDbContext.STF02
                             where stf02.TYPE == "3"
                             select new smolSTF02
                             {
                                 BRG = stf02.BRG,
                                 HJUAL = stf02.HJUAL,
                                 NAMA = stf02.NAMA,
                                 NAMA2 = string.IsNullOrEmpty(stf02.NAMA2) ? "" : stf02.NAMA2,
                                 STN2 = stf02.STN2
                             };

            //change by Tri 5 April 2019, max length json
            //var serializer = new JavaScriptSerializer();

            //serializer.MaxJsonLength = Int32.MaxValue;
            //var result = new ContentResult();
            //try
            //{

            //    result.Content = serializer.Serialize(listBarang);
            //    result.ContentType = "application/json";

            //}
            //catch (Exception ex)
            //{

            //}

            return Json(listBarang, JsonRequestBehavior.AllowGet);
            //return Json(result, JsonRequestBehavior.AllowGet);

            //end change by Tri 5 April 2019, max length json

        }

        [HttpGet]
        public ActionResult GetDataBarangPromosi(int? promoId)
        {
            //var listBarang = ErasoftDbContext.STF02.ToList(); 'change by nurul 21/1/2019 
            var listBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
            //var listBarang = (from a in ErasoftDbContext.STF02
            //                  where a.TYPE == "3"
            //                  select new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL });

            if (promoId == null)
            {
                return Json(listBarang.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            }

            var listBarangSesuaiPromo = ErasoftDbContext.DETAILPROMOSI.Where(dp => dp.RecNumPromosi == promoId).ToList();
            //List<STF02> listBarangUntukPromo = null;

            if (listBarangSesuaiPromo != null && listBarangSesuaiPromo.Count > 0)
            {
                var listBarangUntukPromo = listBarang.Where(b => !listBarangSesuaiPromo.Any(bp => bp.KODE_BRG == b.BRG)).ToList();
                return Json(listBarangUntukPromo.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(listBarang.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            }

            //return Json(listBarangUntukPromo, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetDataBarangPromosi2(int? promoId, string cust)
        {
            //var listBarang = ErasoftDbContext.STF02.ToList(); 'change by nurul 21/1/2019 
            //var listBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
            //var listBarang = (from a in ErasoftDbContext.STF02
            //                  where a.TYPE == "3"
            //                  select new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL });
            var listBrg = new List<smolSTF02>();
            var customer = ErasoftDbContext.ARF01.Where(m => m.CUST == cust).FirstOrDefault();
            if (customer != null)
            {
                var dsBarang = EDB.GetDataSet("CString", "tblBrg", "SELECT A.BRG, A.NAMA, ISNULL(A.NAMA2, '') NAMA2, A.STN2, B.HJUAL FROM STF02 A INNER JOIN STF02H B ON A.BRG = B.BRG WHERE TYPE = 3 AND IDMARKET = " + customer.RecNum);
                var listBarangSesuaiPromo = new List<DetailPromosi>();
                if (promoId != null)
                {
                    listBarangSesuaiPromo = ErasoftDbContext.DETAILPROMOSI.Where(dp => dp.RecNumPromosi == promoId).ToList();
                }
                if (dsBarang.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsBarang.Tables[0].Rows.Count; i++)
                    {
                        var barang = new smolSTF02
                        {
                            BRG = dsBarang.Tables[0].Rows[i]["BRG"].ToString(),
                            NAMA = dsBarang.Tables[0].Rows[i]["NAMA"].ToString(),
                            NAMA2 = dsBarang.Tables[0].Rows[i]["NAMA2"].ToString(),
                            STN2 = dsBarang.Tables[0].Rows[i]["STN2"].ToString(),
                            HJUAL = Convert.ToDouble(dsBarang.Tables[0].Rows[i]["HJUAL"].ToString()),
                        };
                        if (promoId != null)
                        {
                            if (!listBarangSesuaiPromo.Select(m => m.KODE_BRG).Contains(barang.BRG))
                                listBrg.Add(barang);
                        }
                        else
                        {
                            listBrg.Add(barang);
                        }
                    }
                }

            }
            //if (promoId == null)
            //{
            //    return Json(listBarang.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            //}

            //var listBarangSesuaiPromo = ErasoftDbContext.DETAILPROMOSI.Where(dp => dp.RecNumPromosi == promoId).ToList();
            ////List<STF02> listBarangUntukPromo = null;

            //if (listBarangSesuaiPromo != null && listBarangSesuaiPromo.Count > 0)
            //{
            //    var listBarangUntukPromo = listBarang.Where(b => !listBarangSesuaiPromo.Any(bp => bp.KODE_BRG == b.BRG)).ToList();
            //    return Json(listBarangUntukPromo.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            //}
            //else
            //{
            //    return Json(listBarang.Select(a => new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = a.HJUAL }), JsonRequestBehavior.AllowGet);
            //}

            return Json(listBrg, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetEkspedisi()
        {
            var listEkspedisi = MoDbContext.Ekspedisi.ToList();

            return Json(listEkspedisi, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        //change by nurul 21/2/2019
        //public ActionResult CekJumlahPesananBulanIni(string uname)
        public ActionResult CekJumlahPesananBulanIni(long accId)
        {
            var jumlahPesananBulanIni = ErasoftDbContext.SOT01A.Count(p => p.TGL.Value.Year == DateTime.Today.Year && p.TGL.Value.Month == DateTime.Today.Month);
            var accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accId);

            if (accInDb == null)
            {
                var accIdByUser = MoDbContext.User.FirstOrDefault(u => u.AccountId == accId)?.AccountId;
                accInDb = MoDbContext.Account.FirstOrDefault(a => a.AccountId == accIdByUser);
            }

            var accSubs = MoDbContext.Subscription.FirstOrDefault(s => s.KODE == accInDb.KODE_SUBSCRIPTION);
            //remark by Tri 23 juli 2019, selalu tampilkan button upload faktur
            //var cekTokped = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).Where(m => m.NAMA == "15").ToList().Count();
            //end remark by Tri 23 juli 2019, selalu tampilkan button upload faktur

            var valSubs = new ValidasiSubs()
            {
                JumlahPesananBulanIni = jumlahPesananBulanIni,
                JumlahPesananMax = accSubs?.JUMLAH_PESANAN,
                //change by nurul 8/2/2019
                //SudahSampaiBatasTanggal = (accInDb?.TGL_SUBSCRIPTION <= DateTime.Today.Date && accInDb.KODE_SUBSCRIPTION != "01")
                SudahSampaiBatasTanggal = (accInDb?.TGL_SUBSCRIPTION <= DateTime.Today.Date),
                //en change by nurul 8/2/2019
                //change by Tri 23 juli 2019, selalu tampilkan button upload faktur
                //adaTokped = (cekTokped > 0),
                adaTokped = true,
                //end change by Tri 23 juli 2019, selalu tampilkan button upload faktur
            };

            return Json(valSubs, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetPesananInfo(string nobuk)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == nobuk);
            var pesananDetailInDb = ErasoftDbContext.SOT01B.FirstOrDefault(p => p.NO_BUKTI == nobuk && p.BRG == "NOT_FOUND");
            var marketInDb = ErasoftDbContext.ARF01.Single(m => m.CUST == pesananInDb.CUST);
            var idMarket = Convert.ToInt32(marketInDb.NAMA);
            var namaMarketplace = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).NamaMarket;
            var namaAkunMarket = $"{namaMarketplace} ({marketInDb.PERSO})";
            //change by Tri 11 Apr 2020, handle pembeli kosong
            //var namaBuyer = ErasoftDbContext.ARF01C.SingleOrDefault(b => b.BUYER_CODE == pesananInDb.PEMESAN).NAMA;
            var namaBuyer = pesananInDb.NAMAPEMESAN;
            var pembeli = ErasoftDbContext.ARF01C.Where(b => b.BUYER_CODE == (pesananInDb.PEMESAN ?? "")).FirstOrDefault();
            if (pembeli != null)
            {
                namaBuyer = pembeli.NAMA;
            }
            //end change by Tri 11 Apr 2020, handle pembeli kosong
            var listBarang = EDB.GetDataSet("CString", "SOT01B", "SELECT A.NO_URUT, ISNULL(B.NAMA + ' ' + ISNULL(B.NAMA2, ''), CATATAN) AS NAMA FROM SOT01B A LEFT JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + nobuk + "'");

            var infoPesanan = new InfoPesanan()
            {
                NoPesanan = pesananInDb.NO_BUKTI,
                TglPesanan = pesananInDb.TGL?.ToString("dd/MM/yyyy"),
                Marketplace = namaAkunMarket,
                Pembeli = namaBuyer,
                Total = String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", pesananInDb.NETTO),
                allowContinue = pesananDetailInDb == null ? 1 : 0,
                //add by Tri 12 Nov 2019, untuk cancel order
                ID_MARKETPLACE = marketInDb.NAMA,
                listBrg = new List<string>()
                //end add by Tri 12 Nov 2019, untuk cancel order
            };
            if (listBarang.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < listBarang.Tables[0].Rows.Count; i++)
                {
                    string namaBarang = listBarang.Tables[0].Rows[i]["NAMA"].ToString();
                    var catatan_split = listBarang.Tables[0].Rows[i]["NAMA"].ToString().Split(new string[] { "_;_" }, StringSplitOptions.None);

                    if (catatan_split.Count() > 2) //OrderNo_;_NamaBarang_;_IdBarang
                    {
                        namaBarang = catatan_split[1];
                    }
                    infoPesanan.listBrg.Add(listBarang.Tables[0].Rows[i]["NO_URUT"].ToString() + ";" + namaBarang);
                }
            }
            return Json(infoPesanan, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetAutoloadFaktur(int recNum)
        {
            //var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.RecNum == recNum);
            var listData = ErasoftDbContext.SIT01B.Where(pd => pd.SIT01A.RecNum == recNum && pd.JENIS_FORM == "2").ToList();

            return Json(listData, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SavePesanan(PesananViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Pesanan.RecNum == null)
            {
                //end change by nurul 23/12/2019, perbaikan no bukti
                ////var listPesananInDb = ErasoftDbContext.SOT01A.OrderBy(p => p.RecNum).ToList();
                //var listPesananInDb = ErasoftDbContext.SOT01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listPesananInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"SO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SOT01A, RESEED, 0)");
                //}
                //else
                //{
                //    //var lastRecNum = listPesananInDb.Last().RecNum;
                //    var lastRecNum = listPesananInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"SO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}

                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "SO", "SOT01A", "NO_BUKTI");
                var noOrder = "SO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti


                dataVm.Pesanan.NO_BUKTI = noOrder;
                dataVm.Pesanan.STATUS_TRANSAKSI = "0";
                dataVm.PesananDetail.NO_BUKTI = noOrder;
                dataVm.PesananDetail.NILAI_DISC = dataVm.PesananDetail.NILAI_DISC_1 + dataVm.PesananDetail.NILAI_DISC_2;

                //change by nurul 23/12/2019, perbaikan no_bukti
                ErasoftDbContext.SOT01A.Add(dataVm.Pesanan);
                try
                {
                    ErasoftDbContext.SOT01A.Add(dataVm.Pesanan);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == dataVm.Pesanan.NO_BUKTI).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.NO_BUKTI == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "SO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Pesanan.NO_BUKTI = noOrder;
                            ErasoftDbContext.SOT01A.Add(dataVm.Pesanan);
                            ErasoftDbContext.SaveChanges();
                            dataVm.PesananDetail.NO_BUKTI = noOrder;
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti


                if (dataVm.PesananDetail.NO_URUT == null)
                {
                    ErasoftDbContext.SOT01B.Add(dataVm.PesananDetail);
                }
            }
            else
            {
                var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == dataVm.Pesanan.NO_BUKTI);

                pesananInDb.NETTO = dataVm.Pesanan.NETTO;
                pesananInDb.BRUTO = dataVm.Pesanan.BRUTO;
                //change by nurul 6/9/2019, save disc di nilai_disc ngikutin di form
                //pesananInDb.DISCOUNT = dataVm.Pesanan.DISCOUNT;
                pesananInDb.NILAI_DISC = dataVm.Pesanan.NILAI_DISC;
                //end change by nurul 6/9/2019, save disc di nilai_disc ngikutin di form
                pesananInDb.PPN = dataVm.Pesanan.PPN;
                pesananInDb.NILAI_PPN = dataVm.Pesanan.NILAI_PPN;
                pesananInDb.ONGKOS_KIRIM = dataVm.Pesanan.ONGKOS_KIRIM;
                pesananInDb.ALAMAT_KIRIM = dataVm.Pesanan.ALAMAT_KIRIM;
                pesananInDb.TERM = dataVm.Pesanan.TERM;
                pesananInDb.TGL_JTH_TEMPO = dataVm.Pesanan.TGL_JTH_TEMPO;
                pesananInDb.CUST = dataVm.Pesanan.CUST;
                pesananInDb.PEMESAN = dataVm.Pesanan.PEMESAN;
                pesananInDb.NAMAPEMESAN = dataVm.Pesanan.NAMAPEMESAN;

                dataVm.PesananDetail.NO_BUKTI = dataVm.Pesanan.NO_BUKTI;
                dataVm.PesananDetail.NILAI_DISC = dataVm.PesananDetail.NILAI_DISC_1 + dataVm.PesananDetail.NILAI_DISC_2;

                if (dataVm.PesananDetail.NO_URUT == null)
                {
                    ErasoftDbContext.SOT01B.Add(dataVm.PesananDetail);
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            listBrg.Add(dataVm.PesananDetail.BRG);
            updateStockMarketPlace(listBrg, "[INS_SO][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            //add by nurul 8/7/2019, tuning
            var ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == dataVm.Pesanan.NO_BUKTI).ToList();
            var listBarangInPesananDetail = ListPesananDetail.Select(p => p.BRG).ToList();
            //end add by nurul 8/7/2019, tuning
            //change by nurul 13 / 5 / 2019
            var vm = new PesananViewModel()
            {
                Pesanan = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == dataVm.Pesanan.NO_BUKTI),
                //ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == dataVm.Pesanan.NO_BUKTI).ToList(),
                ListPesananDetail = ListPesananDetail,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInPesananDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                ////ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ////ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ////ListMarketplace = MoDbContext.Marketplaces.ToList(),
            };

            return PartialView("BarangPesananPartial", vm);

            //dataVm.Errors = null;
            //return Json(dataVm, JsonRequestBehavior.AllowGet);
            //end change by nurul 13/5/2019
        }

        public ActionResult UbahStatusPesanan(int? recNum, string tipeStatus, string cancelReason, string[] listData)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            if (tipeStatus == "04") // validasi di tab Siap dikirim
            {
                var dataVm = new PesananViewModel()
                {
                    Pesanan = pesananInDb
                };

                //if (pesananInDb.TRACKING_SHIPMENT.Trim() == "")
                //remark by nurul 23/11/2018 no resi boleh kosong 
                //if (dataVm.Pesanan.TRACKING_SHIPMENT == null || pesananInDb.TRACKING_SHIPMENT.Trim() == "")
                //{

                //    var vmError = new StokViewModel();
                //    vmError.Errors.Add("Resi belum diisi");
                //    return Json(vmError, JsonRequestBehavior.AllowGet);
                //}
                //end remark by nurul 23/11/2018 no resi boleh kosong 

                var pesananDetailInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                bool valid = true;
                foreach (var item in pesananDetailInDb)
                {
                    if (item.LOKASI.Trim() == "")
                    {
                        valid = false;
                    }
                }

                if (!valid)
                {
                    var vmError = new StokViewModel();
                    vmError.Errors.Add("Gd & Qty belum lengkap");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
            }

            //add by nurul 4/1/2019 (tambah validasi jika gudang belum diisi)
            if (tipeStatus == "03")
            {
                var pesananDetailInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                bool valid = true;
                foreach (var item in pesananDetailInDb)
                {
                    if (item.LOKASI.Trim() == "")
                    {
                        valid = false;
                    }
                }

                if (!valid)
                {
                    var vmError = new StokViewModel();
                    vmError.Errors.Add("Isi semua gudang / qty terlebih dahulu!");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
            }
            //end add

            //add 19 Nov 2019, validasi cancel reason
            string listVariable = "";
            if (tipeStatus == "11")
            {
                var sot01d = ErasoftDbContext.SOT01D.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).FirstOrDefault();
                if (sot01d == null)
                {
                    sot01d = new SOT01D();
                    sot01d.NO_BUKTI = pesananInDb.NO_BUKTI;
                    sot01d.USERNAME = usernameLogin;
                    ErasoftDbContext.SOT01D.Add(sot01d);
                    ErasoftDbContext.SaveChanges();
                }
                var customer = ErasoftDbContext.ARF01.Where(p => p.CUST == pesananInDb.CUST).FirstOrDefault();
                if (customer != null)
                {
                    if (customer.STATUS_API == "1")
                    {
                        if (customer.NAMA == "17")//shopee
                        {
                            if (!string.IsNullOrEmpty(cancelReason))
                            {
                                if (cancelReason.Contains("STOCK") && string.IsNullOrEmpty(listData[0]))
                                {
                                    var vmError = new StokViewModel();
                                    vmError.Errors.Add("Anda belum memilih barang yang stoknya habis di pesanan ini.");
                                    return Json(vmError, JsonRequestBehavior.AllowGet);
                                }
                                else
                                {
                                    for (int i = 0; i < listData.Count(); i++)
                                    {
                                        var data = listData[i];
                                        var detail = ErasoftDbContext.SOT01B.Where(p => p.NO_URUT.ToString() == data).FirstOrDefault();
                                        if (detail != null)
                                        {
                                            if (detail.BRG == "NOT_FOUND")
                                            {
                                                var catatan_split = detail.CATATAN.ToString().Split(new string[] { "_;_" }, StringSplitOptions.None);

                                                if (catatan_split.Count() > 2) //OrderNo_;_NamaBarang_;_IdBarang
                                                {
                                                    listVariable += catatan_split[2] + "|";
                                                }
                                            }
                                            else
                                            {
                                                var kdBrgMp = ErasoftDbContext.STF02H.Where(m => m.BRG == detail.BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                                                if (kdBrgMp != null)
                                                {
                                                    listVariable += kdBrgMp.BRG_MP + "|";
                                                }
                                            }
                                        }
                                    }
                                    sot01d.CATATAN_1 = cancelReason;
                                }
                            }
                            else
                            {
                                var vmError = new StokViewModel();
                                vmError.Errors.Add("Pilih alasan anda membatalkan pesanan ini.");
                                return Json(vmError, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else if (customer.NAMA == "15")//tokopedia
                        {
                            if (!string.IsNullOrEmpty(cancelReason))
                            {
                                if ((cancelReason == "0" || cancelReason == "4" || cancelReason == "7" || cancelReason == "8") && string.IsNullOrEmpty(listData[0]))
                                {
                                    var vmError = new StokViewModel();
                                    vmError.Errors.Add("Lengkapi field yang ada untuk membatalkan pesanan dengan alasan ini.");
                                    return Json(vmError, JsonRequestBehavior.AllowGet);
                                }
                                else
                                {
                                    string reason = cancelReason;
                                    listVariable = cancelReason + ";";
                                    switch (cancelReason)
                                    {
                                        case "0":
                                            reason = "Only for reject shipping case";
                                            break;
                                        case "1":
                                            reason = "Product(s) out of stock";
                                            break;
                                        case "2":
                                            reason = "Product variant unavailable";
                                            break;
                                        case "3":
                                            reason = "Wrong price or weight";
                                            break;
                                        case "4":
                                            reason = "Shop closed";
                                            break;
                                        case "5":
                                            reason = "Others";
                                            break;
                                        case "7":
                                            reason = "Courrier problem";
                                            break;
                                        case "8":
                                            reason = "Request from buyer";
                                            break;
                                    }
                                    sot01d.CATATAN_1 = reason;
                                    listVariable += reason;
                                    if (cancelReason == "0" || cancelReason == "4" || cancelReason == "7" || cancelReason == "8")
                                    {
                                        listVariable += ";" + listData[0];
                                    }
                                }
                            }
                            else
                            {
                                var vmError = new StokViewModel();
                                vmError.Errors.Add("Pilih alasan anda membatalkan pesanan ini.");
                                return Json(vmError, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else if (customer.NAMA == "7")//lazada
                        {
                            if (!string.IsNullOrEmpty(cancelReason))
                            {
                                var splitReason = cancelReason.Split(';');
                                if (splitReason.Count() == 2)
                                {
                                    sot01d.CATATAN_1 = splitReason[1];
                                }

                            }
                            else
                            {
                                var vmError = new StokViewModel();
                                vmError.Errors.Add("Pilih alasan anda membatalkan pesanan ini.");
                                return Json(vmError, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                }

            }
            //end add 19 Nov 2019, validasi cancel reason
            pesananInDb.STATUS_TRANSAKSI = tipeStatus;
            ErasoftDbContext.SaveChanges();

            //add by calvin 29 nov 2018
            if (tipeStatus == "11") // cancel, update qoh
            {
                var pesananDetailInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();

                List<string> listBrg = new List<string>();
                foreach (var item in pesananDetailInDb)
                {
                    listBrg.Add(item.BRG);
                }
                updateStockMarketPlace(listBrg, "[CANCEL_SO][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            }
            //end add by calvin 29 nov 2018

            //add by Tri, call marketplace api to update order status
            ChangeStatusPesanan(pesananInDb.NO_BUKTI, pesananInDb.STATUS_TRANSAKSI, false, cancelReason, listVariable);
            //end add by Tri, call marketplace api to update order status
            return new EmptyResult();
        }

        //add by Tri 27 Nov 2019
        public ActionResult GetCancelReasonLazada(string nobuk)
        {
            var order = ErasoftDbContext.SOT01A.Where(p => p.NO_BUKTI == nobuk).FirstOrDefault();
            if (order != null)
            {
                var cust = order.CUST;
                var customer = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).FirstOrDefault();
                if (customer != null)
                {
                    if (customer.STATUS_API == "1")
                    {
                        var lzdApi = new LazadaControllerJob();
                        var ret = lzdApi.getCancelReason(customer.TOKEN);
                        if (ret.Count > 0)
                        {
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            return JsonErrorMessage("Tidak berhasil mendapat Cancel Reason dari API Lazada");
                        }
                    }
                    else
                    {
                        return JsonErrorMessage("Akun Lazada untuk pesanan ini tidak aktif, silahkan cek akun Lazada anda di Link ke Marketplace");
                    }
                }
                else
                {
                    return JsonErrorMessage("Akun dari pesanan ini tidak ditemukan");
                }
            }
            return JsonErrorMessage("Pesanan ini tidak ditemukan");
        }
        //end add by Tri 27 Nov 2019

        //add by nurul 18/3/2019
        public ActionResult UbahStatusPesananDibayar(string[] get_selected)
        {
            List<String> listError = new List<String>();

            for (int i = 0; i < get_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(get_selected[i]))
                {
                    Int32 rec = Convert.ToInt32(get_selected[i]);
                    var pesananInDb = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec);
                    var getnobuk = pesananInDb.NO_BUKTI;
                    var pesananDetailInDb = ErasoftDbContext.SOT01B.FirstOrDefault(p => p.NO_BUKTI == getnobuk && p.BRG == "NOT_FOUND");
                    if (pesananDetailInDb == null)
                    {
                        if (pesananInDb.STATUS_TRANSAKSI == "01")
                        {
                            pesananInDb.STATUS_TRANSAKSI = "02";
                            ErasoftDbContext.SaveChanges();
                            //add by Tri, call marketplace api to update order status
                            ChangeStatusPesanan(pesananInDb.NO_BUKTI, pesananInDb.STATUS_TRANSAKSI, false, "", "");
                            //end add by Tri, call marketplace api to update order status
                        }
                    }
                    else
                    {
                        var nobuk = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec).NO_BUKTI;
                        listError.Add(nobuk);
                    }
                }
            }

            if (listError.Count() > 0)
            {
                var vmError = new PesananViewModel() { };

                for (int i = 0; i < listError.Count; i++)
                {
                    if (!string.IsNullOrEmpty(listError[i]))
                    {
                        var Error = listError[i];
                        vmError.Errors.Add(Error);
                    }
                }
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            return new EmptyResult();
        }
        public ActionResult UbahStatusPesananPacking(string[] get_selected, bool packinglist)
        {
            List<String> listError = new List<String>();
            //add 19/9/2019, packing list
            var listRecnumPackinglist = new List<string>();
            //EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE SIFSYS SET TITIPAN = " + (packinglist ? "1" : "0"));
            EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE SIFSYS SET EDIT_BONUS = " + (packinglist ? "1" : "0"));
            //end add 19/9/2019, packing list
            for (int i = 0; i < get_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(get_selected[i]))
                {
                    Int32 rec = Convert.ToInt32(get_selected[i]);
                    var pesananInDb = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec);
                    var getnobuk = pesananInDb.NO_BUKTI;
                    //var pesananDetailInDb = ErasoftDbContext.SOT01B.FirstOrDefault(p => p.NO_BUKTI == getnobuk && p.BRG == "NOT_FOUND");
                    //if (pesananDetailInDb == null)
                    //{
                    if (pesananInDb.STATUS_TRANSAKSI == "02")
                    {
                        var cekgudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == ErasoftDbContext.SIFSYS.FirstOrDefault().GUDANG).ToList();
                        var gudang = "";
                        if (cekgudang.Count() > 0)
                        {
                            gudang = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG;
                        }
                        else
                        {
                            gudang = ErasoftDbContext.STF18.FirstOrDefault().Kode_Gudang;
                        }
                        var cekpesananDetailInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                        double qty = 0;
                        SOT01B barangPesananInDb = new SOT01B();
                        //var barangPesananInDb = ErasoftDbContext.SOT01B.Single(b => b.NO_URUT == recNum);
                        for (int z = 0; z < cekpesananDetailInDb.Count; z++)
                        {
                            if (cekpesananDetailInDb[z] != null)
                            {
                                var Recnum = cekpesananDetailInDb[z].NO_URUT;
                                barangPesananInDb = ErasoftDbContext.SOT01B.Single(b => b.NO_URUT == Recnum);
                                qty = barangPesananInDb.QTY;

                                //add by Tri 13 Nov 2019, cek gudang yg sudah dipilih user
                                var kd_gudang = barangPesananInDb.LOKASI;
                                if (string.IsNullOrWhiteSpace(kd_gudang))
                                    kd_gudang = gudang;
                                //end add by Tri 13 Nov 2019, cek gudang yg sudah dipilih user

                                //add by calvin, 22 juni 2018 validasi QOH
                                var qtyOnHand = GetQOHSTF08A(barangPesananInDb.BRG, kd_gudang);
                                if (qtyOnHand + (barangPesananInDb.QTY_N.HasValue ? (barangPesananInDb.LOKASI == kd_gudang ? barangPesananInDb.QTY_N.Value : 0) : 0) - qty < 0)
                                {
                                    //var vmError = new StokViewModel(){};
                                    //vmError.Errors.Add("Tidak bisa save, Qty item ( " + barangPesananInDb.BRG + " ) di gudang ( " + gudang + " ) sisa ( " + Convert.ToString(qtyOnHand) + " )");
                                    //return Json(vmError, JsonRequestBehavior.AllowGet);
                                    var nobuk = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec).NO_BUKTI;
                                }
                                else
                                {
                                    barangPesananInDb.LOKASI = kd_gudang;
                                    barangPesananInDb.QTY_N = qty;

                                    //ErasoftDbContext.SOT01B.AddRange(barangPesananInDb);
                                    ErasoftDbContext.SaveChanges();
                                }
                            }
                        }
                        //}
                        //end add by calvin, validasi QOH


                        //-----------------
                        var cekLagipesananDetailInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                        bool valid = true;
                        foreach (var item in cekLagipesananDetailInDb)
                        {
                            if (item.LOKASI.Trim() == "")
                            {
                                valid = false;
                            }
                        }

                        if (!valid)
                        {
                            //var vmError = new StokViewModel();
                            //vmError.Errors.Add("Isi semua gudang / qty terlebih dahulu!");
                            //return Json(vmError, JsonRequestBehavior.AllowGet);
                            var nobuk = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec).NO_BUKTI;
                            //listError.Add(nobuk);
                            bool single = true;
                            if (listError.Count() > 0)
                            {
                                for (int x = 0; x < listError.Count; x++)
                                {
                                    var nob = listError[x];
                                    if (!string.IsNullOrEmpty(nob))
                                    {
                                        if (nob == nobuk)
                                        {
                                            single = false;
                                            //listError.Add(nobuk);
                                        }
                                    }
                                }
                                if (single)
                                {
                                    listError.Add(nobuk);
                                }
                            }
                            else
                            {
                                listError.Add(nobuk);
                            }


                            foreach (var item in cekLagipesananDetailInDb)
                            {
                                item.LOKASI = "";
                                item.QTY_N = 0;
                                ErasoftDbContext.SaveChanges();
                            }


                        }
                        else
                        {
                            pesananInDb.STATUS_TRANSAKSI = "03";

                            ErasoftDbContext.SaveChanges();
                            //add by Tri, call marketplace api to update order status
                            ChangeStatusPesanan(pesananInDb.NO_BUKTI, pesananInDb.STATUS_TRANSAKSI, false, "", "");
                            //end add by Tri, call marketplace api to update order status

                            //add by nurul 5/9/2019, langsung generate faktur
                            if (pesananInDb.STATUS_TRANSAKSI == "03")
                            {
                                GenerateFaktur(rec, pesananInDb.USER_NAME);
                            }
                            //end add by nurul 5/9/2019

                            //add by Tri 16/9/2019, packing list
                            if (packinglist)
                            {
                                listRecnumPackinglist.Add(get_selected[i]);
                            }
                            //end add by Tri 16/9/2019, packing list

                        }


                    }
                    //}
                    //else
                    //{
                    //    var nobuk = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec).NO_BUKTI;
                    //    //listError.Add(nobuk);
                    //    if (listError.Count() > 0)
                    //    {
                    //        //for (int w = 0; w < listError.Count; w++)
                    //        //{
                    //        //    if (!string.IsNullOrEmpty(listError[w]))
                    //        //    {
                    //        //        if (listError[w] != nobuk)
                    //        //        {
                    //        //            listError.Add(nobuk);
                    //        //        }
                    //        //    }
                    //        //}
                    //        foreach (var item in listError)
                    //        {
                    //            if (item != nobuk)
                    //            {
                    //                listError.Add(nobuk);
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        listError.Add(nobuk);
                    //    }
                    //}
                }
            }
            //add by Tri 16/9/2019, packing list
            if (packinglist && listRecnumPackinglist.Count > 0)
            {
                ProsesPesananToPackingList(listRecnumPackinglist);
            }
            //end add by Tri 16/9/2019, packing list

            if (listError.Count() > 0)
            {
                var vmError = new PesananViewModel() { };

                for (int b = 0; b < listError.Count; b++)
                {
                    if (!string.IsNullOrEmpty(listError[b]))
                    {
                        var Error = listError[b];
                        vmError.Errors.Add(Error);
                    }
                }
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            return new EmptyResult();
        }
        //end add by nurul 18/3/2019


        public ActionResult RefreshTablePesanan(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            //change by nurul 8/5/2019, paging 
            ////var vm = new PesananViewModel()
            ////{
            ////    //change by nurul 22/1/2019 -- ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "0").ToList(),
            ////    ListPesanan = ErasoftDbContext.SOT01A.ToList(),
            ////    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            ////    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            ////    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            ////    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            ////    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            ////    //add by nurul 10/4/2019
            ////    DataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1),
            ////    //end add by nurul 10/4/2019
            ////};

            ////return PartialView("TablePesananPartial", vm);

            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            //ADD BY NURUL 27/9/2019
            bool searchStatus = false;
            if (search.ToUpper() == "BELUM BAYAR")
            {
                search = "0";
                searchStatus = true;
            }
            else if (search.ToUpper() == "SUDAH BAYAR")
            {
                search = "01";
                searchStatus = true;
            }
            else if (search.ToUpper() == "PACKING")
            {
                search = "02";
                searchStatus = true;
            }
            else if (search.ToUpper() == "FAKTUR")
            {
                search = "03";
                searchStatus = true;
            }
            else if (search.ToUpper() == "SELESAI")
            {
                search = "04";
                searchStatus = true;
            }
            else if (search.ToUpper() == "BATAL")
            {
                search = "11";

            }
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLnetto = "";
            string sSQLpembeli = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";
            //string sSQLstatus = "";
            if (!searchStatus)
            {
                if (getkata.Length > 0)
                {
                    if (search != "")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (i > 0)
                            {
                                sSQLkode += " and ";
                                sSQLmarket += " and ";
                                sSQLnetto += " and ";
                                sSQLpembeli += " and ";
                                sSQLkurir += " and ";
                                sSQLreferensi += " and ";
                            }


                            sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                            sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                            sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                            sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                            sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                            sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, A.JAMKIRIM AS TGLKIRIM, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.STATUS_TRANSAKSI AS [STATUS], ISNULL(A.[USER_NAME],'') AS [USER_NAME], ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT] ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //add by nurul 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //end add by nurul 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            if (search != "")
            {
                //sSQL2 += "WHERE A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' ";
                if (searchStatus)
                {
                    sSQL2 += " WHERE ( A.STATUS_TRANSAKSI = '" + search + "' )";
                }
                else
                {
                    sSQL2 += " WHERE ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
                }
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            //add by nurul 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //end add by nurul 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePesananPartial", pageOrders);

            //end add by nurul 8/5/2019, paging 
        }
        //add by calvin 17 desember 2018

        //add by nurul 10/4/2019
        public ActionResult SaveStatusUpdate(string status)
        {
            try
            {
                var dataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1);

                bool ubahSettingSync = false;
                if (dataUsaha.JTRAN_RETUR != status)
                {
                    ubahSettingSync = true;
                    dataUsaha.JTRAN_RETUR = status;
                    ErasoftDbContext.SaveChanges();
                }
                else
                {
                    var vmError = new PesananViewModel() { };

                    vmError.Errors.Add("Tidak ada perubahan status update !");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }


                if (ubahSettingSync)
                {
                    AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                    string username = sessionData.Account != null ? sessionData.Account.Username : sessionData.User.Username;

                    Task.Run(() => new StokControllerJob().updateStockMarketPlace_ForItemInSTF08A("", dbPathEra, username));

                    var accControl = new AccountController();
                    Task.Run(() => accControl.SyncMarketplace(dbSourceEra, dbPathEra, EDB.GetConnectionString("ConnID"), dataUsaha.JTRAN_RETUR, username, 5, null).Wait());
                }

                //change by nurul 6/8/2019
                //var vm = new PesananViewModel()
                //{
                //    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                //    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //    //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                //    //DataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1),
                //    //ListSubs = MoDbContext.Subscription.ToList()
                //};

                //return PartialView("Pesanan", vm);

                var ceklistPesanan = ErasoftDbContext.SOT01A.Take(1).ToList();
                if (dataUsaha.JTRAN_RETUR != "1" && ceklistPesanan.Count() == 0)
                {
                    var vm = new PesananViewModel()
                    {
                        //ListSubs = MoDbContext.Subscription.ToList(),
                        //DataUsaha = dataUsaha,
                        //ListPesanan = ceklistPesanan
                    };
                    return PartialView("AktivasiPesananStokKeMarketplace", vm);
                }
                else
                {
                    var vm = new PesananViewModel
                    {
                        ListSubs = MoDbContext.Subscription.ToList(),
                        DataUsaha = dataUsaha,
                        ListPesanan = ceklistPesanan
                    };
                    return PartialView("Pesanan", vm);
                }
                //end change by nurul 6/8/2019
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }
        //end add by nurul 10/4/2019

        //add by fauzi 06/12/2019
        public async Task<ActionResult> SaveStatusSyncPesananStok(string custID, string statusSync)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(custID) && !string.IsNullOrWhiteSpace(statusSync))
                {
                    Boolean bstatusSync = Convert.ToBoolean(statusSync);
                    var dataCustomer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.CUST == custID);


                    //add by fauzi validasi expired account
                    var lastYear = DateTime.UtcNow.AddYears(-1);
                    var datenow = DateTime.UtcNow.AddHours(7);
                    var accountInDb = (from a in MoDbContext.Account
                                       where
                                       (a.DatabasePathErasoft == dbPathEra)
                                       &&
                                       (a.TGL_SUBSCRIPTION ?? lastYear) >= datenow
                                       orderby a.LAST_LOGIN_DATE descending
                                       select a).ToList();
                    if (accountInDb.Count() > 0)
                    {
                        dataCustomer.TIDAK_HIT_UANG_R = bstatusSync;
                        ErasoftDbContext.SaveChanges();
                        await new AccountController().SyncMarketplace(dbSourceEra, dbPathEra, EDB.GetConnectionString("ConnID"), "", usernameLogin, 5, dataCustomer.RecNum);
                        return Json(new { success = true, status = "Status Update Pesanan dan Stok Ke Marketplace berhasil disimpan!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        dataCustomer.TIDAK_HIT_UANG_R = false;
                        ErasoftDbContext.SaveChanges();
                        return Json(new { success = false, status = "Status Update Pesanan dan Stok Ke Marketplace berhasil disimpan! Tetapi account Anda sudah expired." }, JsonRequestBehavior.AllowGet);
                    }

                    //end by fauzi validasi expired account



                }
                else
                {
                    return Json(new { success = false, status = "Proses Update Pesanan dan Stok Ke Marketplace tidak dapat disimpan!" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = false, status = "Terjadi Kesalahan, mohon hubungi support." }, JsonRequestBehavior.AllowGet);
            }
        }
        //end add by fauzi 06/12/2019

        public ActionResult FillModalFixNotFound(string recNum)
        {
            var intRecnum = Convert.ToInt64(recNum);

            //change by nurul 24/3/2020
            //var PesananDetail = ErasoftDbContext.SOT01B.Where(b => b.NO_URUT == intRecnum).FirstOrDefault();
            //var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == PesananDetail.NO_BUKTI);
            //var marketInDb = ErasoftDbContext.ARF01.Single(m => m.CUST == pesananInDb.CUST);
            //var idMarket = Convert.ToInt32(marketInDb.RecNum);
            //var ListBarangMarket = ErasoftDbContext.STF02H.Where(p => p.IDMARKET == idMarket).ToList();
            //var ListKodeBarangMarket = ListBarangMarket.Select(p => p.BRG).ToList();
            ////var ListBarang = ErasoftDbContext.STF02.Where(p => ListKodeBarangMarket.Contains(p.BRG)).ToList(); 'change by nurul 21/1/2019
            //var ListBarang = ErasoftDbContext.STF02.Where(p => ListKodeBarangMarket.Contains(p.BRG) && p.TYPE == "3").ToList();

            var sSql1 = "select NO_BUKTI,CATATAN,NO_URUT from sot01b where NO_URUT = '" + recNum + "'";
            var PesananDetail = ErasoftDbContext.Database.SqlQuery<PesananDetail_NotFound>(sSql1).FirstOrDefault();
            var sSql = "select b.RecNum from SOT01A a inner join ARF01 b on a.CUST=b.CUST where a.NO_BUKTI='" + PesananDetail.NO_BUKTI + "'";
            var idMarket = ErasoftDbContext.Database.SqlQuery<Int32>(sSql).FirstOrDefault();
            var sSql2 = "select BRG,RecNum from stf02h where IDMARKET = '" + idMarket + "'";
            var ListBarangMarket = ErasoftDbContext.Database.SqlQuery<listBarangMarket_NotFound>(sSql2).ToList();
            var ListKodeBarangMarket = ListBarangMarket.Select(p => p.BRG).ToList();
            //var ListBarang = (from a in ErasoftDbContext.STF02
            //                  where a.TYPE == "3" && ListKodeBarangMarket.Any(y => a.BRG.Contains(y))
            //                  select new listBarang_NotFound { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2 }).ToList();
            var sSql3 = "select BRG,NAMA,NAMA2 from stf02 where ([type]='3' or [type]='6') and brg in (select brg from stf02h where idmarket='" + idMarket + "')";
            var ListBarang = ErasoftDbContext.Database.SqlQuery<listBarang_NotFound>(sSql3).ToList();
            //end change by nurul 24/3/2020
            var ListKodeBarangMarket2 = ListBarang.Select(p => p.BRG).ToList();
            ListBarangMarket = ListBarangMarket.Where(p => ListKodeBarangMarket2.Contains(p.BRG)).ToList();

            var vm = new PesananViewModel()
            {
                //change by nurul 24/3/2020
                //PesananDetail = PesananDetail,
                //ListBarangMarket = ListBarangMarket,
                //ListBarang = ListBarang
                PesananDetail_NotFound = PesananDetail,
                ListBarangMarket_NotFound = ListBarangMarket,
                ListBarang_NotFound = ListBarang
                //end change by nurul 24/3/2020
            };
            return PartialView("BarangFixNotFoundPartial", vm);
        }
        public ActionResult UpdateFixNotFound(string nourut)
        {
            try
            {
                var no_urut = nourut.Split(';');
                int no_urut_sot01b = Convert.ToInt32(no_urut[0]);
                int recnum_stf02h = Convert.ToInt32(no_urut[1]);
                var PesananDetail = ErasoftDbContext.SOT01B.Where(b => b.NO_URUT == no_urut_sot01b).SingleOrDefault();
                var dataStf02h = ErasoftDbContext.STF02H.Where(b => b.RecNum == recnum_stf02h).SingleOrDefault();

                var pesananInDb = ErasoftDbContext.SOT01A.SingleOrDefault(p => p.NO_BUKTI == PesananDetail.NO_BUKTI);
                //change by nurul 16/9/2020, brg multi sku
                //PesananDetail.BRG = dataStf02h.BRG;
                var cekTipeBrg = ErasoftDbContext.STF02.Where(a => a.BRG == dataStf02h.BRG).SingleOrDefault();
                if (cekTipeBrg.TYPE == "6")
                {
                    if (cekTipeBrg.KUBILASI == 1 && !string.IsNullOrEmpty(cekTipeBrg.BRG_NON_OS))
                    {
                        PesananDetail.BRG = cekTipeBrg.BRG_NON_OS;
                        PesananDetail.BRG_MULTISKU = dataStf02h.BRG;
                    }
                }
                else
                {
                    PesananDetail.BRG = dataStf02h.BRG;
                }
                //end change by nurul 16/9/2020, brg multi sku 

                //if (string.IsNullOrWhiteSpace(dataStf02h.BRG_MP))
                //{
                var catatan_split = PesananDetail.CATATAN.Split(new string[] { "_;_" }, StringSplitOptions.None);

                if (catatan_split.Count() > 2) //OrderNo_;_NamaBarang_;_IdBarang
                {
                    //change by Tri 29 mei 2020, tambah validasi tidak bisa pilih barang yg sudah link dengan brg lain dan hapus data di temp agar tidak bisa di sinkro lg
                    //dataStf02h.BRG_MP = catatan_split[2];
                    if (!string.IsNullOrEmpty(dataStf02h.BRG_MP))
                        if (dataStf02h.BRG_MP != catatan_split[2])
                        {
                            var cust = ErasoftDbContext.ARF01.Where(m => m.CUST == pesananInDb.CUST).SingleOrDefault();
                            if (cust.NAMA == "16")//blibli
                            {
                                var gdnSku = dataStf02h.BRG_MP.Split(';');
                                if (gdnSku[0] != catatan_split[2])
                                    return JsonErrorMessage("Barang :" + dataStf02h.BRG + " sudah link dengan barang lain(kode barang mp :" + dataStf02h.BRG_MP + ")\nSilahkan lakukan unlink produk ini terlebih dahulu.");
                            }
                            else
                            {
                                return JsonErrorMessage("Barang :" + dataStf02h.BRG + " sudah link dengan barang lain(kode barang mp :" + dataStf02h.BRG_MP + ")\nSilahkan lakukan unlink produk ini terlebih dahulu.");
                            }
                        }
                    dataStf02h.BRG_MP = catatan_split[2];
                    dataStf02h.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                    dataStf02h.LINK_STATUS = "Fix Barang Not Found Berhasil";
                    dataStf02h.LINK_ERROR = "0;;;";
                    EDB.ExecuteSQL("CString", CommandType.Text, "DELETE FROM TEMP_BRG_MP WHERE BRG_MP LIKE '%" + catatan_split[2] + "%' AND IDMARKET = " + dataStf02h.IDMARKET);
                    //end change by Tri 29 mei 2020, tambah validasi tidak bisa pilih barang yg sudah link dengan brg lain dan hapus data di temp agar tidak bisa di sinkro lg
                }
                //}
                ErasoftDbContext.SaveChanges();

                //var vm = new PesananViewModel()
                //{
                //    Pesanan = pesananInDb,
                //    ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                //    ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList(),
                //    //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //    ListEkspedisi = MoDbContext.Ekspedisi.ToList(),
                //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList()
                //};

                //add by calvin 21 Desember 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(PesananDetail.BRG);
                updateStockMarketPlace(listBrg, "[FIX_SO_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 21 Desember 2018

                //return PartialView("BarangPesananSelesaiPartial", vm);
                ActionResult ret = LihatPesanan(pesananInDb.RecNum);
                return ret;
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }
        //end add by calvn 17 desember 2018

        //add by calvin 17 desember 2018
        public ActionResult FillModalFixNotFoundFaktur(string recNum)
        {
            var intRecnum = Convert.ToInt64(recNum);
            var FakturDetail = ErasoftDbContext.SIT01B.Where(b => b.NO_URUT == intRecnum).FirstOrDefault();

            var fakturInDb = ErasoftDbContext.SIT01A.Single(p => p.NO_BUKTI == FakturDetail.NO_BUKTI);
            var marketInDb = ErasoftDbContext.ARF01.Single(m => m.CUST == fakturInDb.CUST);
            var idMarket = Convert.ToInt32(marketInDb.RecNum);
            var ListBarangMarket = ErasoftDbContext.STF02H.Where(p => p.IDMARKET == idMarket).ToList();
            var ListKodeBarangMarket = ListBarangMarket.Select(p => p.BRG).ToList();
            //var ListBarang = ErasoftDbContext.STF02.Where(p => ListKodeBarangMarket.Contains(p.BRG)).ToList(); 'change by nurul 21/1/2019
            var ListBarang = ErasoftDbContext.STF02.Where(p => ListKodeBarangMarket.Contains(p.BRG) && (p.TYPE == "3" ||  p.TYPE =="6")).ToList();
            //add 16 juli 2019 by Tri, barang yg diambil dari stf02h juga yg tipe = 3
            var ListKodeBarangMarket2 = ListBarang.Select(p => p.BRG).ToList();
            ListBarangMarket = ListBarangMarket.Where(p => ListKodeBarangMarket2.Contains(p.BRG)).ToList();
            //end add 16 juli 2019 by Tri, barang yg diambil dari stf02h juga yg tipe = 3
            var vm = new FakturViewModel()
            {
                FakturDetail = FakturDetail,
                ListBarangMarket = ListBarangMarket,
                ListBarang = ListBarang
            };
            return PartialView("BarangFixNotFoundPartialFaktur", vm);
        }
        public ActionResult UpdateFixNotFoundFaktur(string nourut)
        {
            try
            {
                var no_urut = nourut.Split(';');
                int no_urut_sit01b = Convert.ToInt32(no_urut[0]);
                int recnum_stf02h = Convert.ToInt32(no_urut[1]);
                var FakturDetail = ErasoftDbContext.SIT01B.Where(b => b.NO_URUT == no_urut_sit01b).SingleOrDefault();
                var dataStf02h = ErasoftDbContext.STF02H.Where(b => b.RecNum == recnum_stf02h).SingleOrDefault();

                var fakturInDb = ErasoftDbContext.SIT01A.SingleOrDefault(p => p.NO_BUKTI == FakturDetail.NO_BUKTI);
                //change by nurul 16/9/2020, brg multi sku
                //FakturDetail.BRG = dataStf02h.BRG;
                var cekTipeBrg = ErasoftDbContext.STF02.Where(a => a.BRG == dataStf02h.BRG).SingleOrDefault();
                if (cekTipeBrg.TYPE == "6")
                {
                    if (cekTipeBrg.KUBILASI == 1 && !string.IsNullOrEmpty(cekTipeBrg.BRG_NON_OS))
                    {
                        FakturDetail.BRG = cekTipeBrg.BRG_NON_OS;
                        FakturDetail.BRG_MULTISKU = dataStf02h.BRG;
                    }
                }
                else
                {
                    FakturDetail.BRG = dataStf02h.BRG;
                }
                //end change by nurul 16/9/2020, brg multi sku

                //if (string.IsNullOrWhiteSpace(dataStf02h.BRG_MP))
                //{
                var catatan_split = FakturDetail.CATATAN.Split(new string[] { "_;_" }, StringSplitOptions.None);

                if (catatan_split.Count() > 2) //OrderNo_;_NamaBarang_;_IdBarang
                {
                    //change by Tri 29 mei 2020, tambah validasi tidak bisa pilih barang yg sudah link dengan brg lain dan hapus data di temp agar tidak bisa di sinkro lg
                    //dataStf02h.BRG_MP = catatan_split[2];
                    if (!string.IsNullOrEmpty(dataStf02h.BRG_MP))
                        if (dataStf02h.BRG_MP != catatan_split[2])
                        {
                            var cust = ErasoftDbContext.ARF01.Where(m => m.CUST == fakturInDb.CUST).SingleOrDefault();
                            if (cust.NAMA == "16")//blibli
                            {
                                var gdnSku = dataStf02h.BRG_MP.Split(';');
                                if (gdnSku[0] != catatan_split[2])
                                    return JsonErrorMessage("Barang :" + dataStf02h.BRG + " sudah link dengan barang lain(kode barang mp :" + dataStf02h.BRG_MP + ")\nSilahkan lakukan unlink produk ini terlebih dahulu.");
                            }
                            else
                            {
                                return JsonErrorMessage("Barang :" + dataStf02h.BRG + " sudah link dengan barang lain(kode barang mp :" + dataStf02h.BRG_MP + ")\nSilahkan lakukan unlink produk ini terlebih dahulu.");
                            }
                        }
                    dataStf02h.BRG_MP = catatan_split[2];
                    dataStf02h.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                    dataStf02h.LINK_STATUS = "Fix Barang Not Found Berhasil";
                    dataStf02h.LINK_ERROR = "0;;;";
                    EDB.ExecuteSQL("CString", CommandType.Text, "DELETE FROM TEMP_BRG_MP WHERE BRG_MP LIKE '%" + catatan_split[2] + "%' AND IDMARKET = " + dataStf02h.IDMARKET);
                    //end change by Tri 29 mei 2020, tambah validasi tidak bisa pilih barang yg sudah link dengan brg lain dan hapus data di temp agar tidak bisa di sinkro lg
                }
                //}
                ErasoftDbContext.SaveChanges();

                //add by calvin 21 Desember 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(FakturDetail.BRG);
                updateStockMarketPlace(listBrg, "[FIX_SI_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 21 Desember 2018

                var ListFakturDetail = ErasoftDbContext.SIT01B.Where(pd => pd.NO_BUKTI == fakturInDb.NO_BUKTI && pd.JENIS_FORM == "2").ToList();
                var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();

                var vm = new FakturViewModel()
                {
                    Faktur = fakturInDb,
                    //ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                    ListFakturDetail = ListFakturDetail,
                    //ListBarang = ErasoftDbContext.STF02.ToList() 'change by nurul 21/1/2019 
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList()
                };

                return PartialView("BarangFakturPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }
        //end add by calvn 17 desember 2018
        public ActionResult RefreshGudangQtyPesanan(string noBuk)
        {
            //add by calvin 27 nov 2018, munculkan QOH di combobox gudang
            var ListPesananDetail = ErasoftDbContext.SOT01B.Where(b => b.NO_BUKTI == noBuk).ToList();

            List<string> items = new List<string>();
            string brg = "";
            foreach (var item in ListPesananDetail)
            {
                items.Add(item.BRG);
                if (brg != "")
                {
                    brg += "','";
                }
                brg += item.BRG;
            }

            //var ListBarang = ErasoftDbContext.STF02.Where(p => items.Contains(p.BRG)).ToList(); 'change by nurul 21/1/2019
            var ListBarang = ErasoftDbContext.STF02.Where(p => items.Contains(p.BRG) && p.TYPE == "3").ToList();
            string sSQL = "SELECT A.BRG, A.GD, B.Nama_Gudang, QOH = ISNULL(SUM(QAWAL+(QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12)-(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12)),0) ";
            //sSQL += "FROM STF08A A LEFT JOIN STF18 B ON A.GD = B.Kode_Gudang WHERE A.TAHUN=" + DateTime.UtcNow.AddHours(7).ToString("yyyy") + " AND A.BRG IN ('" + brg + "') GROUP BY A.BRG, A.GD, B.Nama_Gudang";
            sSQL += "FROM STF08A A LEFT JOIN STF18 B ON A.GD = B.Kode_Gudang WHERE A.TAHUN=" + DateTime.UtcNow.AddHours(7).ToString("yyyy") + " AND A.BRG IN ('" + brg + "') AND ISNULL(A.GD,'') <> '' AND ISNULL(B.Kode_Gudang,'') <> '' GROUP BY A.BRG, A.GD, B.Nama_Gudang";
            var ListQOHPerGD = ErasoftDbContext.Database.SqlQuery<QOH_PER_GD>(sSQL).ToList();
            //end add by calvin 27 nov 2018, munculkan QOH di combobox gudang
            sSQL = "SELECT BRG,GD = B.LOKASI, QSO = ISNULL(SUM(ISNULL(QTY,0)),0) FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN SIT01A C ON A.NO_BUKTI = C.NO_SO WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')  AND ISNULL(C.NO_BUKTI,'') = '' AND B.BRG IN ('" + brg + "') AND A.NO_BUKTI <> '" + noBuk + "' GROUP BY BRG, B.LOKASI";
            var ListQOOPerBRG = ErasoftDbContext.Database.SqlQuery<QOO_PER_BRG>(sSQL).ToList();
            //add by nurul 11/3/2019
            var cekgudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == ErasoftDbContext.SIFSYS.FirstOrDefault().GUDANG).ToList();
            var gudang = "";
            if (cekgudang.Count() > 0)
            {
                gudang = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG;
            }
            else
            {
                gudang = ErasoftDbContext.STF18.FirstOrDefault().Kode_Gudang;
            }
            //end add by nurul 11/3/2019
            var vm = new PesananViewModel()
            {
                //add by nurul 23/11/2018
                Pesanan = ErasoftDbContext.SOT01A.SingleOrDefault(b => b.NO_BUKTI == noBuk),
                //end add 
                ListPesananDetail = ListPesananDetail,
                ListBarang = ListBarang,
                ListQOHPerGD = ListQOHPerGD,
                ListQOOPerBRG = ListQOOPerBRG,
                //add by nurul 11/3/2019
                setGd = gudang
                //end add by nurul 11/3/2019
            };

            return PartialView("GudangQtyPartial", vm);
        }

        public ActionResult RefreshTablePesananSudahDibayar(string take, int? page, string search = "", string filter = "", string filtervalue = "")
        {
            //change by nurul 8/5/2019, paging 
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //};

            //return PartialView("TablePesananSudahDibayarPartial", vm);

            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["takeRecord"] = take;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLnetto = "";
            string sSQLpembeli = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " AND ";
                            sSQLmarket += " AND ";
                            sSQLnetto += " AND ";
                            sSQLpembeli += " AND ";
                            sSQLkurir += " and ";
                            sSQLreferensi += " and ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                        sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                    }
                }
            }
            //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLperso + " or " + sSQLpembeli + " ) ";
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.STATUS_TRANSAKSI AS [STATUS] ,ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT] ";
            //ADD BY NURUL 7/8/2020
            //sSQLSelect += ", ISNULL(CONVERT(VARCHAR,KET),'') AS catatanPembeli ";
            sSQLSelect += ", ISNULL(A.KET,'') AS catatanPembeli ";
            //END ADD BY NURUL 7/8/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //ADD BY NURUL 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '01' AND ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //END ADD BY NURUL 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='01' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
            }
            string sSQLSelect2 = "";
            //ADD BY NURUL 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //END ADD BY NURUL 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * Convert.ToInt32(take)) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT " + take + " ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //add by nurul 7/8/2020
            var cekTokped = listOrderNew.Where(a => a.MARKET.Contains("Tokopedia")).ToList();
            if (cekTokped.Count() > 0)
            {
                foreach (var getKetTokped in cekTokped)
                {
                    var tempKet = "";
                    var getKet = ErasoftDbContext.SOT01B.Where(a => a.NO_BUKTI == getKetTokped.NOSO).ToList();
                    foreach (var detail in getKet)
                    {
                        if (detail.KET_DETAIL != null && detail.KET_DETAIL != "" && detail.KET_DETAIL != "-")
                        {
                            tempKet = tempKet + detail.BRG + " - " + detail.KET_DETAIL + Environment.NewLine;
                        }
                    }
                    getKetTokped.catatanPembeli = tempKet;
                }
            }
            //end add by nurul 7/8/2020
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, Convert.ToInt32(take), totalCount.JUMLAH);
            return PartialView("TablePesananSudahDibayarPartial", pageOrders);

            //end change by nurul 8/5/2019, paging 
        }

        public ActionResult RefreshUndoStatusPesananBatch(string[] rows_selected)
        {
            if (rows_selected == null)
            {
                var vmError = new PesananViewModel() { };

                vmError.Errors.Add("Silahkan pilih pesanan yang akan diundo statusnya !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            var listRecnum = new List<int>();
            for (int i = 0; i < rows_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    listRecnum.Add(row);
                }
            }
            var xx = ErasoftDbContext.SOT01A.Where(a => listRecnum.Contains(a.RecNum.Value)).ToList();
            listorder.AddRange(xx);
            var buyer = xx.Select(a => a.PEMESAN).ToList();
            var xxBuyer = ErasoftDbContext.ARF01C.Where(a => buyer.Contains(a.BUYER_CODE)).ToList();
            listBuyer.AddRange(xxBuyer);

            var vm = new PesananViewModel()
            {
                //ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
                ListPesanan = listorder,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ListPembeli = listBuyer,
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };
            return PartialView("UbahStatusMultiPartial", vm);
        }

        public ActionResult RefreshUbahStatusPesananSelesaiBatch(string[] rows_selected)
        {
            if (rows_selected == null)
            {
                var vmError = new PesananViewModel() { };

                vmError.Errors.Add("Silahkan pilih pesanan yang akan diubah statusnya !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            var listRecnum = new List<int>();
            for (int i = 0; i < rows_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    listRecnum.Add(row);
                }
            }
            var xx = ErasoftDbContext.SOT01A.Where(a => listRecnum.Contains(a.RecNum.Value) && a.STATUS_TRANSAKSI == "03").ToList();
            listorder.AddRange(xx);
            var buyer = xx.Select(a => a.PEMESAN).ToList();
            var xxBuyer = ErasoftDbContext.ARF01C.Where(a => buyer.Contains(a.BUYER_CODE)).ToList();
            listBuyer.AddRange(xxBuyer);

            var vm = new PesananViewModel()
            {
                //ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
                ListPesanan = listorder,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ListPembeli = listBuyer,
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };
            return PartialView("UbahStatusMultiPartial", vm);
        }

        //add by nurul 24/03/2019
        public ActionResult RefreshUbahStatusDibayar(string[] rows_selected)
        {
            if (rows_selected == null)
            {
                var vmError = new PesananViewModel() { };

                vmError.Errors.Add("Silahkan pilih pesanan yang akan diubah statusnya !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            var listRecnum = new List<int>();
            for (int i = 0; i < rows_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    listRecnum.Add(row);
                }
            }
            var xx = ErasoftDbContext.SOT01A.Where(a => listRecnum.Contains(a.RecNum.Value) && a.STATUS_TRANSAKSI == "01").ToList();
            listorder.AddRange(xx);
            var buyer = xx.Select(a => a.PEMESAN).ToList();
            var xxBuyer = ErasoftDbContext.ARF01C.Where(a => buyer.Contains(a.BUYER_CODE)).ToList();
            listBuyer.AddRange(xxBuyer);

            var vm = new PesananViewModel()
            {
                //ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
                ListPesanan = listorder,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ListPembeli = listBuyer,
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };
            return PartialView("UbahStatusMultiPartial", vm);
        }

        public ActionResult RefreshUbahStatusPacking(string[] rows_selected)
        {
            if (rows_selected == null)
            {
                var vmError = new PesananViewModel() { };

                vmError.Errors.Add("Silahkan pilih pesanan yang akan diubah statusnya !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            var listRecnum = new List<int>();
            for (int i = 0; i < rows_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    listRecnum.Add(row);
                }
            }
            var xx = ErasoftDbContext.SOT01A.Where(a => listRecnum.Contains(a.RecNum.Value) && a.STATUS_TRANSAKSI == "02").ToList();
            listorder.AddRange(xx);
            var buyer = xx.Select(a => a.PEMESAN).ToList();
            var xxBuyer = ErasoftDbContext.ARF01C.Where(a => buyer.Contains(a.BUYER_CODE)).ToList();
            listBuyer.AddRange(xxBuyer);

            var vm = new PesananViewModel()
            {
                //ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "01").ToList(),
                ListPesanan = listorder,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                ListPembeli = listBuyer,
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };
            //add by Tri 19/9/19
            //vm.createPackinglist = ErasoftDbContext.SIFSYS.FirstOrDefault().TITIPAN;
            vm.createPackinglist = Convert.ToInt32(ErasoftDbContext.SIFSYS.FirstOrDefault().EDIT_BONUS);
            //end add by Tri 19/9/19
            return PartialView("UbahStatusMultiPacking", vm);
        }

        //end add by nurul 24/03/2019

        //add by nurul 2/8/2019
        public ActionResult RefreshGenerateFaktur(string[] rows_selected)
        {
            if (rows_selected == null)
            {
                var vmError = new PesananViewModel() { };

                vmError.Errors.Add("Silahkan pilih pesanan yang akan dibuat fakturnya !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            string[] IRecnum = new string[rows_selected.Length];
            for (int i = 0; i < rows_selected.Length; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    //var cekfaktur = ErasoftDbContext.SIT01A.Where(b => b.NO_SO != null || b.NO_SO != "").Select(b => b.NO_SO).ToList();
                    //var xxPesanan = ErasoftDbContext.SOT01A.Where(a => a.RecNum == row && a.STATUS_TRANSAKSI == "03" && !cekfaktur.Contains(a.NO_BUKTI)).ToList();
                    var xxPesanan = ErasoftDbContext.SOT01A.Where(a => a.RecNum == row && a.STATUS_TRANSAKSI == "03").ToList();
                    listorder.AddRange(xxPesanan);
                    var buyer = xxPesanan.Select(a => a.PEMESAN).ToList();
                    var xxBuyer = ErasoftDbContext.ARF01C.Where(a => buyer.Contains(a.BUYER_CODE)).ToList();
                    listBuyer.AddRange(xxBuyer);
                }
            }


            var vm = new PesananViewModel()
            {
                ListPesanan = listorder,
                ListPembeli = listBuyer,
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };
            return PartialView("KonfirmasiGenerateFakturNew", vm);
        }
        //end add by nurul 2/8/2019

        public ActionResult RefreshTablePesananSiapKirim(string take, int? page, string search = "", string filter = "", string filtervalue = "")
        {
            // change by nurul 8/5/2019, paging 
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "02").ToList(),
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList()
            //};

            //return PartialView("TablePesananSiapKirimPartial", vm);
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["takeRecord"] = take;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLnetto = "";
            string sSQLpembeli = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " AND ";
                            sSQLmarket += " AND ";
                            sSQLnetto += " AND ";
                            sSQLpembeli += " AND ";
                            sSQLkurir += " and ";
                            sSQLreferensi += " and ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                        sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                    }
                }
            }

            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.STATUS_TRANSAKSI AS [STATUS] ,ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT] ";
            //ADD BY NURUL 7/8/2020
            //sSQLSelect += ", ISNULL(CONVERT(VARCHAR,KET),'') AS catatanPembeli ";
            sSQLSelect += ", ISNULL(A.KET,'') AS catatanPembeli ";
            //END ADD BY NURUL 7/8/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //ADD BY NURUL 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '02' AND ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //END ADD BY NURUL 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='02' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
            }
            string sSQLSelect2 = "";
            //ADD BY NURUL 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //END ADD BY NURUL 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * Convert.ToInt32(take)) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT " + take + " ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //add by nurul 7/8/2020
            var cekTokped = listOrderNew.Where(a => a.MARKET.Contains("Tokopedia")).ToList();
            if (cekTokped.Count() > 0)
            {
                foreach (var getKetTokped in cekTokped)
                {
                    var tempKet = "";
                    var getKet = ErasoftDbContext.SOT01B.Where(a => a.NO_BUKTI == getKetTokped.NOSO).ToList();
                    foreach (var detail in getKet)
                    {
                        if (detail.KET_DETAIL != null && detail.KET_DETAIL != "" && detail.KET_DETAIL != "-")
                        {
                            tempKet = tempKet + detail.BRG + " - " + detail.KET_DETAIL + Environment.NewLine;
                        }
                    }
                    getKetTokped.catatanPembeli = tempKet;
                }
            }
            //end add by nurul 7/8/2020
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, Convert.ToInt32(take), totalCount.JUMLAH);
            return PartialView("TablePesananSiapKirimPartial", pageOrders);

            //end change by nurul 8/5/2019, paging 
        }

        public ActionResult RefreshTablePesananSudahKirim(string take, int? page, string search = "", string filter = "", string filtervalue = "")
        {
            // change by nurul 8/5/2019, paging 
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "03").ToList(),
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListFaktur = ErasoftDbContext.SIT01A.ToList()
            //};

            //return PartialView("TablePesananSudahKirimPartial", vm);
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["takeRecord"] = take;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLpembeli = "";
            string sSQLfaktur = "";
            string sSQLresi = "";
            string sSQLnetto = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLmarket += " and ";
                            sSQLpembeli += " and ";
                            sSQLfaktur += " and ";
                            sSQLresi += " and ";
                            sSQLnetto += " and ";
                            sSQLkurir += " and ";
                            sSQLreferensi += " and ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLpembeli += " A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLfaktur += "  D.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLresi += "  A.TRACKING_SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                        sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";
                    }
                }
            }

            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, ISNULL(D.NO_BUKTI,'') AS NO_FAKTUR, A.TRACKING_SHIPMENT as RESI, ISNULL(D.NO_SO,'') as FAKTUR, ISNULL(D.TGL,'') as TGL_FAKTUR, A.CUST as CUST, A.STATUS_TRANSAKSI AS [STATUS] ,ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT] ";
            //ADD BY CALVIN 29 NOV 2019
            sSQLSelect += ", A.status_kirim, A.status_print, ISNULL(E.NO_BUKTI,'') AS PACKINGNO ";
            //END ADD BY CALVIN 29 NOV 2019
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                        var queryfilter = "";
                        foreach (var item in listCustSesuaiFilter)
                        {
                            if (queryfilter != "") { queryfilter += ","; }
                            queryfilter += "'" + item + "'";
                        }

                        sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '03'";

                        if (queryfilter != "")
                        {
                            sSQLTemp += " AND CUST IN (" + queryfilter + ");" + Environment.NewLine;
                        }
                        else
                        {
                            sSQLTemp += " AND 0=1;" + Environment.NewLine;
                        }
                        sSQL2 += "FROM #SOT01A A ";
                    }
                    break;
                case "statuskirim":
                    {
                        sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '03' AND ISNULL(STATUS_KIRIM,'') = '" + filtervalue + "';" + Environment.NewLine;
                        sSQL2 += " FROM #SOT01A A ";
                    }
                    break;
                case "statusprint":
                    {
                        sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '03' AND ISNULL(STATUS_PRINT,'0') = '" + filtervalue + "';" + Environment.NewLine;
                        sSQL2 += " FROM #SOT01A A ";
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }

            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN SIT01A D ON A.NO_BUKTI = D.NO_SO ";
            sSQL2 += "LEFT JOIN SOT03B E ON A.NO_BUKTI = E.NO_PESANAN ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='03' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR D.NO_BUKTI LIKE '%" + search + "%' OR A.TRACKING_SHIPMENT LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLfaktur + ") or (" + sSQLresi + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
            }
            string sSQLSelect2 = "";
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * Convert.ToInt32(take)) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT " + take + " ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, Convert.ToInt32(take), totalCount.JUMLAH);
            return PartialView("TablePesananSudahKirimPartial", pageOrders);

            //end change by nurul 8/5/2019, paging 
        }

        public class getTotalCount
        {
            public int JUMLAH { get; set; }
        }

        public ActionResult RefreshTablePesananSelesai(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            // change by nurul 8/5/2019, paging
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "04").ToList(),
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList(),
            //    ListFaktur = ErasoftDbContext.SIT01A.ToList()
            //};

            //return PartialView("TablePesananSelesaiPartial", vm);
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLnetto = "";
            string sSQLpembeli = "";
            string sSQLfaktur = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " AND ";
                            sSQLmarket += " AND ";
                            sSQLnetto += " AND ";
                            sSQLpembeli += " AND ";
                            sSQLfaktur += " AND ";
                            sSQLkurir += " and ";
                            sSQLreferensi += " and ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                        sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLfaktur += "  D.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, ISNULL(D.NO_BUKTI,'') AS NO_FAKTUR, A.STATUS_TRANSAKSI AS [STATUS] ,ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT] ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //sSQL2 += "FROM SOT01A A ";
            //ADD BY NURUL 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '04' AND ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //END ADD BY NURUL 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN SIT01A D ON A.NO_BUKTI = D.NO_SO ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='04' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%' OR D.NO_BUKTI LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLfaktur + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
            }
            string sSQLSelect2 = "";
            //ADD BY NURUL 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //END ADD BY NURUL 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            //IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listPesanan, pagenumber + 1, 10, totalCount);
            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePesananSelesaiPartial", pageOrders);

            //end change by nurul 8/5/2019, paging
        }

        public ActionResult RefreshTablePesananCancel(int? page, string search = "", string filter = "", string filtervalue = "")
        {
            // change by nurul 8/5/2019, paging
            //var vm = new PesananViewModel()
            //{
            //    ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "11").ToList(),
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListMarketplace = MoDbContext.Marketplaces.ToList()
            //};

            //return PartialView("TablePesananCancelPartial", vm);
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLnetto = "";
            string sSQLpembeli = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " AND ";
                            sSQLmarket += " AND ";
                            sSQLnetto += " AND ";
                            sSQLpembeli += " AND ";
                            sSQLkurir += " and ";
                            sSQLreferensi += " and ";
                        }

                        sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(B.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLnetto += "  A.NETTO like '%" + getkata[i] + "%' ";
                        sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                        sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, [USER_NAME], A.NO_BUKTI AS NOSO, A.TGL AS TGL, ISNULL(C.NamaMarket,'') AS MARKET, ISNULL(B.PERSO,'') AS PERSO, A.NAMAPEMESAN AS PEMBELI, A.NETTO AS TOTAL, A.STATUS_TRANSAKSI AS [STATUS] ,ISNULL(NO_REFERENSI, '') AS [REFERENSI], ISNULL(SHIPMENT, '') AS [SHIPMENT], D.CATATAN_1 AS CancelReason ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            //ADD BY NURUL 4/12/2019
            string sSQLTemp = "";
            switch (filter)
            {
                case "marketplace":
                    {
                        if (filtervalue != null && filtervalue != "Harap Pilih")
                        {
                            var listCustSesuaiFilter = ErasoftDbContext.ARF01.Where(p => p.NAMA == filtervalue).Select(p => p.CUST).ToList();
                            var queryfilter = "";
                            foreach (var item in listCustSesuaiFilter)
                            {
                                if (queryfilter != "") { queryfilter += ","; }
                                queryfilter += "'" + item + "'";
                            }
                            sSQLTemp = "SELECT * INTO #SOT01A FROM SOT01A WHERE STATUS_TRANSAKSI = '11' AND ";
                            if (queryfilter != "")
                            {
                                sSQLTemp += " CUST IN(" + queryfilter + "); " + Environment.NewLine;
                            }
                            else
                            {
                                sSQLTemp += " 0 = 1; " + Environment.NewLine;
                            }
                            sSQL2 += "FROM #SOT01A A ";
                        }
                        else
                        {
                            sSQL2 += "FROM SOT01A A ";
                        }
                    }
                    break;
                default:
                    {
                        sSQL2 += "FROM SOT01A A ";
                    }
                    break;
            }
            //END ADD BY NURUL 4/12/2019
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            //add by Tri 2 Des 2019, tambah cancel reason
            sSQL2 += "LEFT JOIN SOT01D D ON A.NO_BUKTI = D.NO_BUKTI ";
            //end add by Tri 2 Des 2019, tambah cancel reason
            sSQL2 += "WHERE A.STATUS_TRANSAKSI='11' ";
            if (search != "")
            {
                //sSQL2 += "AND (A.NO_BUKTI LIKE '%" + search + "%' OR A.TGL LIKE '%" + search + "%' OR C.NamaMarket LIKE '%" + search + "%' OR A.NAMAPEMESAN LIKE '%" + search + "%') ";
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLnetto + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
            }
            string sSQLSelect2 = "";
            //ADD BY NURUL 4/12/2019
            if (filter == "tanggal" && filtervalue == "asc")
            {
                sSQLSelect2 += "ORDER BY A.TGL ASC, A.NO_BUKTI ASC ";
            }
            else
            {
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            }
            //END ADD BY NURUL 4/12/2019
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlPesanan>(sSQLTemp + sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLTemp + sSQLCount + sSQL2).Single();

            IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            //IPagedList<mdlPesanan> pageOrders = new StaticPagedList<mdlPesanan>(listPesanan, pagenumber + 1, 10, totalCount);
            return PartialView("TablePesananCancelPartial", pageOrders);

            //end change by nurul 8/5/2019, paging
        }

        //add by Tri 13 jan 2020
        public ActionResult findCancelReason(string reqId)
        {
            if (reqId != null || reqId != "")
            {
                var ex = ErasoftDbContext.SOT01D.Where(a => a.NO_BUKTI == reqId).FirstOrDefault();
                if (ex != null)
                {
                    return Json(ex.CATATAN_1, JsonRequestBehavior.AllowGet);
                }
            }
            return Json("Gagal mendapatkan pesan error.", JsonRequestBehavior.AllowGet);
        }
        //end add by Tri 13 jan 2020

        public ActionResult RefreshPesananForm()
        {
            try
            {
                var vm = new PesananViewModel()
                {
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListMarketplace = MoDbContext.Marketplaces.ToList()
                };

                return PartialView("BarangPesananPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditPesanan(int? orderId)
        {
            try
            {
                var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == orderId);

                var ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                var listBarangInPesananDetail = ListPesananDetail.Select(p => p.BRG).ToList();
                //ADD BY NURUL 5/5/2020
                var sSQLGetMarket = "select namamarket from sot01a a inner join arf01 b on a.cust=b.cust inner join mo..marketplace c on b.nama=c.idmarket where no_bukti='" + pesananInDb.NO_BUKTI + "'";
                var GetMarket = ErasoftDbContext.Database.SqlQuery<string>(sSQLGetMarket).SingleOrDefault();
                //END ADD BY NURUL 5/5/2020

                var vm = new PesananViewModel()
                {
                    Pesanan = pesananInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListPesananDetail = ListPesananDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInPesananDetail.Contains(a.BRG) && (a.TYPE == "3" || a.TYPE == "6")).ToList(),
                    //ADD BY NURUL 5/5/2020
                    namaMarket = GetMarket
                    //end ADD BY NURUL 5/5/2020
                };

                return PartialView("BarangPesananPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult TambahBaruPesanan()
        {
            try
            {
                var pesananInDb = new SOT01A();

                var vm = new PesananViewModel()
                {
                    //Pesanan = pesananInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => 0 == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangPesananPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }
        //add by Tri, call marketplace api to change status
        [HttpGet]
        public void ChangeStatusPesanan(string nobuk, string status, bool lazadaPickup, string cancelReason, string listVariable)
        {
            var pesanan = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == nobuk);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesanan.CUST);
            var mp = MoDbContext.Marketplaces.Single(p => p.IdMarket.ToString() == marketPlace.NAMA);

            //remark by fauzi tgl 16 Januari 2020
            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //{
            //var blAPI = new BukaLapakController();
            //var lzdAPI = new LazadaController();
            //add by fauzi tgl 16 Januari 2020
            if (marketPlace.TIDAK_HIT_UANG_R == true)
            {
                switch (status)
                {
                    case "11"://cancel
                        {
                            if (mp.NamaMarket.ToUpper().Contains("SHOPEE"))
                            {
                                //var shoAPI = new ShopeeController();
                                //change by calvin 10 april 2019, jadi pakai backgroundjob
                                //ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                //{
                                //    merchant_code = marketPlace.Sort1_Cust,
                                //};
                                //Task.Run(() => shoAPI.AcceptBuyerCancellation(data, pesanan.NO_REFERENSI).Wait());
                                ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                {
                                    merchant_code = marketPlace.Sort1_Cust,
                                    DatabasePathErasoft = dbPathEra,
                                    username = usernameLogin
                                };

                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.AcceptBuyerCancellation(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", data, pesanan.NO_REFERENSI));
                                //change by nurul 16/6/2020
                                //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CancelOrder(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", data, pesanan.NO_REFERENSI, cancelReason, listVariable));
                                clientJobServer.Enqueue<ShopeeControllerJob>(x => x.CancelOrder(dbPathEra, pesanan.NO_BUKTI, marketPlace.CUST, "Pesanan", "Cancel Order", data, pesanan.NO_REFERENSI, cancelReason, listVariable));
                                //end change by nurul 16/6/2020
                                //Task.Run(() => new ShopeeControllerJob().CancelOrder(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", data, pesanan.NO_REFERENSI, cancelReason, listVariable).Wait());
                                //end change by calvin 10 april 2019, jadi pakai backgroundjob
                            }

                            if (mp.NamaMarket.ToUpper().Contains("LAZADA"))
                            {
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == nobuk).ToList();
                                if (sot01b.Count > 0)
                                {
                                    foreach (var tbl in sot01b)
                                    {
                                        //change by calvin 10 april 2019, jadi pakai backgroundjob
                                        //new LazadaControllerJob().SetStatusToCanceled(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", tbl.ORDER_ITEM_ID, marketPlace.TOKEN, usernameLogin, cancelReason);
                                        clientJobServer.Enqueue<LazadaControllerJob>(x => x.SetStatusToCanceled(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", tbl.ORDER_ITEM_ID, marketPlace.TOKEN, usernameLogin, cancelReason));
                                        //end change by calvin 10 april 2019, jadi pakai backgroundjob
                                    }
                                }
                            }

                            if (mp.NamaMarket.ToUpper().Contains("TOKOPEDIA"))
                            {
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                {
                                    merchant_code = marketPlace.Sort1_Cust, //FSID
                                    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                                    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                                    API_secret_key = marketPlace.API_KEY, //Shop ID 
                                    token = marketPlace.TOKEN,
                                    idmarket = marketPlace.RecNum.Value,
                                    DatabasePathErasoft = dbPathEra,
                                    username = usernameLogin
                                };

                                //change by calvin 10 april 2019, jadi pakai backgroundjob
                                //Task.Run(() => new TokopediaControllerJob().SetStatusToCanceled(iden, dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", pesanan.NO_REFERENSI, usernameLogin, listVariable).Wait());
                                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.SetStatusToCanceled(iden, dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Cancel Order", pesanan.NO_REFERENSI, usernameLogin, listVariable));
                                //end change by calvin 10 april 2019, jadi pakai backgroundjob

                            }

                            //add by fauzi for 82Cart
                            if (mp.NamaMarket.ToUpper().Contains("82CART"))
                            {
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                                idenJob.API_key = marketPlace.API_KEY;
                                idenJob.API_credential = marketPlace.Sort1_Cust;
                                idenJob.API_url = marketPlace.PERSO;
                                idenJob.DatabasePathErasoft = dbPathEra;
                                idenJob.username = usernameLogin;
                                idenJob.no_cust = marketPlace.CUST;

                                //add by fauzi for update status CANCELED CODE 6
#if (DEBUG || Debug_AWS)
                                new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Cancel Order", pesanan.NO_REFERENSI, "6");
#else
                                clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Cancel Order", pesanan.NO_REFERENSI, "6"));
#endif
                            }

                            //add by fauzi for shopify
                            if (mp.NamaMarket.ToUpper().Contains("SHOPIFY"))
                            {
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
                                idenJob.no_cust = marketPlace.CUST;
                                idenJob.username = usernameLogin;
                                idenJob.DatabasePathErasoft = dbPathEra;
                                idenJob.account_store = marketPlace.PERSO;
                                idenJob.API_key = marketPlace.API_KEY;
                                idenJob.API_password = marketPlace.API_CLIENT_P;

                                //add by fauzi for update status CANCELED
#if (DEBUG || Debug_AWS)
                                new ShopifyControllerJob().Shopify_SetOrderStatusCancelled(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Cancel Order", idenJob);
#else
                                clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusCancelled(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Cancel Order", idenJob));
#endif
                            }
                        }
                        break;
                    case "02":
                        if (mp.NamaMarket.ToUpper().Contains("BUKALAPAK"))
                        {

                        }
                        if (mp.NamaMarket.ToUpper().Contains("ELEVENIA"))
                        {
                            DataSet dsTEMP_ELV_ORDERS = new DataSet();
                            //dsTEMP_ELV_ORDERS = EDB.GetDataSet("Con", "TEMP_ELV_ORDERS", "SELECT ORDER_NO,ORDER_PROD_NO FROM TEMP_ELV_ORDERS WHERE DELIVERY_NO='" + Convert.ToString(pesanan.NO_REFERENSI) + "' GROUP BY ORDER_NO,ORDER_PROD_NO");
                            dsTEMP_ELV_ORDERS = EDB.GetDataSet("Con", "TEMP_ELV_ORDERS", "SELECT ORDER_NO,ORDER_PROD_NO FROM TEMP_ELV_ORDERS WHERE ORDER_NO='" + Convert.ToString(pesanan.NO_REFERENSI) + "' GROUP BY ORDER_NO,ORDER_PROD_NO");
                            if (dsTEMP_ELV_ORDERS.Tables[0].Rows.Count > 0)
                            {

                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                for (int i = 0; i < dsTEMP_ELV_ORDERS.Tables[0].Rows.Count; i++)
                                {
                                    string ordNo = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["ORDER_NO"]);
                                    string ordPrdSeq = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["ORDER_PROD_NO"]);
                                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                                    //var elApi = new EleveniaController();
                                    //elApi.AcceptOrder(marketPlace.API_KEY, ordNo, ordPrdSeq);
                                    clientJobServer.Enqueue<EleveniaControllerJob>(x => x.AcceptOrder(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Accept Order", marketPlace.API_KEY, ordNo, ordPrdSeq, usernameLogin));
                                    //new EleveniaControllerJob().AcceptOrder(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Accept Order", marketPlace.API_KEY, ordNo, ordPrdSeq, usernameLogin);
                                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                                }
                            }
                        }
                        if (mp.NamaMarket.ToUpper().Contains("LAZADA"))
                        {
                            //List<string> orderItemIds = new List<string>();
                            //var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == nobuk).ToList();
                            //if(sot01b.Count > 0)
                            //{
                            //    foreach(var tbl in sot01b)
                            //    {
                            //        orderItemIds.Add(tbl.ORDER_ITEM_ID);
                            //    }
                            //    lzdAPI.GetToPacked(orderItemIds, "JNE", marketPlace.TOKEN);
                            //}
                        }
                        if (mp.NamaMarket.ToUpper().Contains("TOKOPEDIA"))
                        {
                            //var TokoAPI = new TokopediaController();
                            if (!string.IsNullOrEmpty(marketPlace.Sort1_Cust))
                            {
                                //change by calvin 10 april 2019, jadi pakai backgroundjob
                                //TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData()
                                //{
                                //    merchant_code = marketPlace.Sort1_Cust, //FSID
                                //    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                                //    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                                //    API_secret_key = marketPlace.API_KEY, //Shop ID 
                                //    token = marketPlace.TOKEN,
                                //    idmarket = marketPlace.RecNum.Value
                                //};
                                //Task.Run(() => TokoAPI.PostAckOrder(iden, pesanan.NO_BUKTI, pesanan.NO_REFERENSI)).Wait();

                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                {
                                    merchant_code = marketPlace.Sort1_Cust, //FSID
                                    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                                    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                                    API_secret_key = marketPlace.API_KEY, //Shop ID 
                                    token = marketPlace.TOKEN,
                                    idmarket = marketPlace.RecNum.Value,
                                    DatabasePathErasoft = dbPathEra,
                                    username = usernameLogin
                                };
#if (DEBUG || Debug_AWS)
                                var tokpedController = new TokopediaControllerJob();
                                Task.Run(() => tokpedController.PostAckOrder(dbPathEra, pesanan.NO_BUKTI, marketPlace.CUST, "Pesanan", "Accept Order", iden, pesanan.NO_BUKTI, pesanan.NO_REFERENSI).Wait());
#else
                                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.PostAckOrder(dbPathEra, pesanan.NO_BUKTI, marketPlace.CUST, "Pesanan", "Accept Order", iden, pesanan.NO_BUKTI, pesanan.NO_REFERENSI));
#endif
                                //end change by calvin 10 april 2019, jadi pakai backgroundjob
                            }
                        }

                        //add by fauzi for 82Cart
                        if (mp.NamaMarket.ToUpper().Contains("82CART"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_credential = marketPlace.Sort1_Cust;
                            idenJob.API_url = marketPlace.PERSO;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.username = usernameLogin;
                            idenJob.no_cust = marketPlace.CUST;

                            //add by fauzi for update status TO PACKING PREPARATION IN PROGRESS CODE 3
#if (AWS || DEV)
                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Packing Order", pesanan.NO_REFERENSI, "3"));
#else
                            new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Packing Order", pesanan.NO_REFERENSI, "3");
#endif
                        }
                        
                        break;
                    case "03":
                        if (mp.NamaMarket.ToUpper().Contains("BUKALAPAK"))
                        {
                            if (!string.IsNullOrEmpty(pesanan.TRACKING_SHIPMENT))
                            {

                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                //change by calvin 10 april 2019, jadi pakai backgroundjob
                                //blAPI.KonfirmasiPengiriman(/*nobuk,*/ pesanan.TRACKING_SHIPMENT, pesanan.NO_REFERENSI, pesanan.SHIPMENT, marketPlace.API_KEY, marketPlace.TOKEN);
                                clientJobServer.Enqueue<BukaLapakControllerJob>(x => x.KonfirmasiPengiriman(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", usernameLogin, pesanan.TRACKING_SHIPMENT, pesanan.NO_REFERENSI, pesanan.SHIPMENT, marketPlace.API_KEY, marketPlace.TOKEN));
                                //end change by calvin 10 april 2019, jadi pakai backgroundjob
                            }

                        }
                        else if (mp.NamaMarket.ToUpper().Contains("LAZADA"))
                        {
                            //if (!string.IsNullOrEmpty(pesanan.TRACKING_SHIPMENT) && !string.IsNullOrEmpty(pesanan.SHIPMENT))
                            //{
                            if (lazadaPickup)
                            {
                                var pesananChild = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == nobuk).ToList();
                                if (pesananChild.Count > 0)
                                {
                                    var adaItem = false;
                                    var adaOrderItemIdNull = false;
                                    List<string> ordItemId = new List<string>();
                                    foreach (SOT01B item in pesananChild)
                                    {
                                        adaItem = true;
                                        if (string.IsNullOrWhiteSpace(item.ORDER_ITEM_ID))
                                        {
                                            adaOrderItemIdNull = true;
                                        }
                                        else
                                        {
                                            ordItemId.Add(item.ORDER_ITEM_ID);
                                        }
                                    }
                                    //if(typeDelivery == "0")//dropship
                                    //{
                                    //    lzdAPI.GetToDeliver(ordItemId, pesanan.SHIPMENT, pesanan.TRACKING_SHIPMENT, marketPlace.TOKEN);
                                    //}
                                    //else//pick up
                                    //{
                                    //    lzdAPI.GetToPacked(ordItemId, pesanan.SHIPMENT, marketPlace.TOKEN);
                                    //}
                                    //lzdAPI.GetToPacked(ordItemId, pesanan.SHIPMENT, marketPlace.TOKEN);

                                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                                    //lzdAPI.GetToDeliver(ordItemId, pesanan.SHIPMENT, pesanan.TRACKING_SHIPMENT, marketPlace.TOKEN);
                                    if (adaItem && !adaOrderItemIdNull && !string.IsNullOrWhiteSpace(pesanan.NO_REFERENSI))
                                    {

                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                        clientJobServer.Enqueue<LazadaControllerJob>(x => x.GetToDeliver(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", usernameLogin, ordItemId, pesanan.SHIPMENT, pesanan.TRACKING_SHIPMENT, marketPlace.TOKEN));
                                    }
                                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                                }
                            }
                            //}
                        }
                        else if (mp.NamaMarket.ToUpper().Contains("ELEVENIA"))
                        {
                            if (!string.IsNullOrEmpty(pesanan.TRACKING_SHIPMENT))
                            {
                                DataSet dsTEMP_ELV_ORDERS = new DataSet();
                                //dsTEMP_ELV_ORDERS = EDB.GetDataSet("Con", "TEMP_ELV_ORDERS", "SELECT DELIVERY_MTD_CD,DELIVERY_ETR_CD,ORDER_NO,DELIVERY_ETR_NAME,ORDER_PROD_NO FROM TEMP_ELV_ORDERS WHERE DELIVERY_NO='" + Convert.ToString(pesanan.NO_REFERENSI) + "' GROUP BY DELIVERY_MTD_CD,DELIVERY_ETR_CD,ORDER_NO,DELIVERY_ETR_NAME,ORDER_PROD_NO");
                                dsTEMP_ELV_ORDERS = EDB.GetDataSet("Con", "TEMP_ELV_ORDERS", "SELECT DELIVERY_NO,DELIVERY_MTD_CD,DELIVERY_ETR_CD,ORDER_NO,DELIVERY_ETR_NAME,ORDER_PROD_NO FROM TEMP_ELV_ORDERS WHERE ORDER_NO='" + Convert.ToString(pesanan.NO_REFERENSI) + "' GROUP BY DELIVERY_NO,DELIVERY_MTD_CD,DELIVERY_ETR_CD,ORDER_NO,DELIVERY_ETR_NAME,ORDER_PROD_NO");
                                if (dsTEMP_ELV_ORDERS.Tables[0].Rows.Count > 0)
                                {

                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                    var clientJobServer = new BackgroundJobClient(sqlStorage);

                                    for (int i = 0; i < dsTEMP_ELV_ORDERS.Tables[0].Rows.Count; i++)
                                    {
                                        string awb = Convert.ToString(pesanan.TRACKING_SHIPMENT);
                                        string dlvNo = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["DELIVERY_NO"]);
                                        string dlvMthdCd = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["DELIVERY_MTD_CD"]);
                                        string dlvEtprsCd = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["DELIVERY_ETR_CD"]);
                                        string ordNo = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["ORDER_NO"]);
                                        string dlvEtprsNm = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["DELIVERY_ETR_NAME"]);
                                        string ordPrdSeq = Convert.ToString(dsTEMP_ELV_ORDERS.Tables[0].Rows[i]["ORDER_PROD_NO"]);

                                        //var elApi = new EleveniaController();
                                        //change by calvin 10 april 2019, jadi pakai backgroundjob
                                        //elApi.UpdateAWBNumber(marketPlace.API_KEY, awb, dlvNo, dlvMthdCd, dlvEtprsCd, ordNo, dlvEtprsNm, ordPrdSeq);
                                        clientJobServer.Enqueue<EleveniaControllerJob>(x => x.UpdateAWBNumber(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", usernameLogin, marketPlace.API_KEY, awb, dlvNo, dlvMthdCd, dlvEtprsCd, ordNo, dlvEtprsNm, ordPrdSeq));
                                        //new EleveniaControllerJob().UpdateAWBNumber(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", usernameLogin, marketPlace.API_KEY, awb, dlvNo, dlvMthdCd, dlvEtprsCd, ordNo, dlvEtprsNm, ordPrdSeq);
                                        //end change by calvin 10 april 2019, jadi pakai backgroundjob
                                    }
                                }
                            }
                        }
                        else if (mp.NamaMarket.ToUpper().Contains("BLIBLI"))
                        {
                            if (!string.IsNullOrEmpty(pesanan.TRACKING_SHIPMENT))
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(pesanan.NO_REFERENSI)))
                                {

                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                    //var bliAPI = new BlibliController();
                                    var listDetail = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesanan.NO_BUKTI).ToList();
                                    foreach (var item in listDetail)
                                    {
                                        //change by calvin 10 april 2019, jadi pakai backgroundjob
                                        //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                                        //{
                                        //    merchant_code = marketPlace.Sort1_Cust,
                                        //    API_client_password = marketPlace.API_CLIENT_P,
                                        //    API_client_username = marketPlace.API_CLIENT_U,
                                        //    API_secret_key = marketPlace.API_KEY,
                                        //    token = marketPlace.TOKEN,
                                        //    mta_username_email_merchant = marketPlace.EMAIL,
                                        //    mta_password_password_merchant = marketPlace.PASSWORD,
                                        //    idmarket = marketPlace.RecNum.Value
                                        //};
                                        //bliAPI.fillOrderAWB(iden, pesanan.TRACKING_SHIPMENT, pesanan.NO_REFERENSI, item.ORDER_ITEM_ID);
                                        BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                                        {
                                            merchant_code = marketPlace.Sort1_Cust,
                                            API_client_password = marketPlace.API_CLIENT_P,
                                            API_client_username = marketPlace.API_CLIENT_U,
                                            API_secret_key = marketPlace.API_KEY,
                                            token = marketPlace.TOKEN,
                                            mta_username_email_merchant = marketPlace.EMAIL,
                                            mta_password_password_merchant = marketPlace.PASSWORD,
                                            idmarket = marketPlace.RecNum.Value,
                                            DatabasePathErasoft = dbPathEra,
                                            username = usernameLogin,
                                            versiToken = marketPlace.KD_ANALISA
                                        };
                                        clientJobServer.Enqueue<BlibliControllerJob>(x => x.fillOrderAWB(dbPathEra, pesanan.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", iden, pesanan.TRACKING_SHIPMENT, pesanan.NO_REFERENSI, item.ORDER_ITEM_ID));
                                        //end change by calvin 10 april 2019, jadi pakai backgroundjob
                                    }
                                }
                            }
                        }

                        //add by fauzi for 82Cart
                        else if (mp.NamaMarket.ToUpper().Contains("82CART"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_credential = marketPlace.Sort1_Cust;
                            idenJob.API_url = marketPlace.PERSO;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.username = usernameLogin;
                            idenJob.no_cust = marketPlace.CUST;

                            //add by fauzi for update status TO PREPARATION IN PROGRESS 3
#if (AWS || DEV)
                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Shipped Order", pesanan.NO_REFERENSI, "3"));
#else
                            new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Shipped Order", pesanan.NO_REFERENSI, "3");
#endif
                        }

                        //add by fauzi for shopify
//                        else if (mp.NamaMarket.ToUpper().Contains("SHOPIFY"))
//                        {
//                            var sqlStorage = new SqlServerStorage(EDBConnID);
//                            var clientJobServer = new BackgroundJobClient(sqlStorage);
//                            ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
//                            idenJob.no_cust = marketPlace.CUST;
//                            idenJob.username = usernameLogin;
//                            idenJob.DatabasePathErasoft = dbPathEra;
//                            idenJob.account_store = marketPlace.PERSO;
//                            idenJob.API_key = marketPlace.API_KEY;
//                            idenJob.API_password = marketPlace.API_CLIENT_P;

//                            //add by fauzi for update status TO PACKING
//#if (DEBUG || Debug_AWS)
//                            new ShopifyControllerJob().Shopify_SetOrderStatusFulfillment(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Shipped Order", idenJob);
//#else
//                            clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusFulfillment(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Shipped Order", idenJob));
//#endif
//                        }
                        break;
                    case "04":
                        //add by fauzi for 82Cart
                        if (mp.NamaMarket.ToUpper().Contains("82CART"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_credential = marketPlace.Sort1_Cust;
                            idenJob.API_url = marketPlace.PERSO;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.username = usernameLogin;
                            idenJob.no_cust = marketPlace.CUST;

                            //add by fauzi for update status TO DELIVERED CODE 5
#if (AWS || DEV)
                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Delivered Order", pesanan.NO_REFERENSI, "5"));
#else
                            new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Delivered Order", pesanan.NO_REFERENSI, "5");
#endif
                        }
                        else if (mp.NamaMarket.ToUpper().Contains("SHOPIFY"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
                            idenJob.no_cust = marketPlace.CUST;
                            idenJob.username = usernameLogin;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.account_store = marketPlace.PERSO;
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_password = marketPlace.API_CLIENT_P;

                            //add by fauzi for update status TO DELIVERED
#if (DEBUG || Debug_AWS)
                            new ShopifyControllerJob().Shopify_SetOrderStatusFulfillment(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Delivered Order", idenJob);
#else
                            clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusFulfillment(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Delivered Order", idenJob));
#endif
                        }
                        break;
                    case "01":
                        //add by fauzi for 82Cart
                        if (mp.NamaMarket.ToUpper().Contains("82CART"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_credential = marketPlace.Sort1_Cust;
                            idenJob.API_url = marketPlace.PERSO;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.username = usernameLogin;
                            idenJob.no_cust = marketPlace.CUST;

                            //add by fauzi for update status TO PAID CODE 1
#if (AWS || DEV)
                            clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Paid Order", pesanan.NO_REFERENSI, "2"));
#else
                            new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, marketPlace.CUST, "Pesanan", "Paid Order", pesanan.NO_REFERENSI, "2");
#endif
                        }

                        //add by fauzi for shopify
                        if (mp.NamaMarket.ToUpper().Contains("SHOPIFY"))
                        {
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
                            idenJob.no_cust = marketPlace.CUST;
                            idenJob.username = usernameLogin;
                            idenJob.DatabasePathErasoft = dbPathEra;
                            idenJob.account_store = marketPlace.PERSO;
                            idenJob.API_key = marketPlace.API_KEY;
                            idenJob.API_password = marketPlace.API_CLIENT_P;

                            //add by fauzi for update status TO PACKING
#if (DEBUG || Debug_AWS)
                            new ShopifyControllerJob().Shopify_SetOrderStatusPaid(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Paid Order", idenJob, pesanan.TOTAL_SEMUA);
#else
                            clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusPaid(dbPathEra, pesanan.NO_REFERENSI, marketPlace.CUST, "Pesanan", "Paid Order", idenJob, pesanan.TOTAL_SEMUA));
#endif
                        }
                        break;
                }
            }
        }
        //end add by Tri, call marketplace api to change status
        public ActionResult LazadaLabel(int recnum)
        {
            var pesanan = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recnum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesanan.CUST);
            var mp = MoDbContext.Marketplaces.Single(p => p.IdMarket.ToString() == marketPlace.NAMA);
            if (mp.NamaMarket.ToUpper().Contains("LAZADA"))
            {
                var lzdApi = new LazadaController();
                List<string> orderItemIds = new List<string>();
                var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesanan.NO_BUKTI).ToList();
                if (sot01b.Count > 0)
                {
                    foreach (var tbl in sot01b)
                    {
                        orderItemIds.Add(tbl.ORDER_ITEM_ID);
                    }
                    var retApi = lzdApi.GetLabel(orderItemIds, marketPlace.TOKEN);
                    if (retApi.code == "0")
                    {
                        var htmlString = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(retApi.data.document.file));
                        #region add button cetak
                        htmlString += "<button id='print-btn' >Cetak</button>";
                        htmlString += "<script>";
                        htmlString += "document.getElementsByClassName('awb lex')[0].style.width = '90%'; ";
                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.display = 'block'; ";
                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.fontSize  = 'small'; ";
                        htmlString += "var x = document.getElementById('item-desc-table').parentElement; ";
                        htmlString += "x.style.height = 'auto'; ";
                        //htmlString += "document.getElementsByClassName('item_sku')[0].style.fontSize  = 'small'; ";
                        //htmlString += "document.getElementsByClassName('item_name')[0].style.fontSize  = 'small'; ";
                        htmlString += "document.getElementsByClassName('order_item_table')[0].style.fontSize  = 'small'; ";
                        htmlString += " function run() { document.getElementById('print-btn').onclick = function () {";
                        htmlString += "document.getElementById('print-btn').style.visibility = 'hidden';";
                        htmlString += "window.print(); }; window.onafterprint = function () {";
                        htmlString += "document.getElementById('print-btn').style.visibility = 'visible'; } }";
                        htmlString += " if (document.readyState!='loading') run();";
                        htmlString += " else if (document.addEventListener) document.addEventListener('DOMContentLoaded', run);";
                        htmlString += "else document.attachEvent('onreadystatechange', function(){ if (document.readyState=='complete') run(); });";
                        htmlString += "</script>";
                        #endregion
                        return Json(htmlString, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return JsonErrorMessage(retApi.message);
                    }

                }
                else
                {
                    return JsonErrorMessage("Detail Order not found.");
                }
            }
            return JsonErrorMessage("This Function is for Lazada only");
        }

        public ActionResult LazadaGetResi(int recnum, string DeliveryProvider)
        {
            var pesanan = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recnum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesanan.CUST);
            var mp = MoDbContext.Marketplaces.Single(p => p.IdMarket.ToString() == marketPlace.NAMA);
            if (mp.NamaMarket.ToUpper().Contains("LAZADA"))
            {
                var lzdApi = new LazadaController();
                List<string> orderItemIds = new List<string>();
                var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesanan.NO_BUKTI).ToList();
                if (sot01b.Count > 0)
                {
                    List<string> ordItemId = new List<string>();
                    foreach (SOT01B item in sot01b)
                    {
                        ordItemId.Add(item.ORDER_ITEM_ID);
                    }

                    var retApi = lzdApi.GetToPacked(ordItemId, DeliveryProvider, marketPlace.TOKEN);
                    if (retApi.code == "0")
                    {
                        var ret = new LazadaGetResiObj();
                        //{
                        if (retApi.data != null)
                            ret.NoResi = retApi.data.order_items[0].tracking_number;
                        //};
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return JsonErrorMessage(retApi.message);
                    }

                }
                else
                {
                    return JsonErrorMessage("Detail Order not found.");
                }
            }
            return JsonErrorMessage("This Function is for Lazada only");
        }

        public ActionResult LihatPesanan(int? orderId)
        {
            try
            {
                var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == orderId);

                //add by nurul 16/4/2019
                var kota = "";
                var provinsi = "";
                var pos = "";
                var al_buyer = "";
                if (pesananInDb != null)
                {
                    if (pesananInDb.KOTA != null)
                    {
                        kota = pesananInDb.KOTA;
                    }
                    if (pesananInDb.PROPINSI != null)
                    {
                        provinsi = pesananInDb.PROPINSI;
                    }
                    if (pesananInDb.KODE_POS != null)
                    {
                        pos = pesananInDb.KODE_POS;
                    }
                    al_buyer = pesananInDb.ALAMAT_KIRIM + ' ' + kota + ' ' + provinsi + ' ' + pos;
                }
                //end add by nurul 16/4/2019

                var ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                var listBarangInPesananDetail = ListPesananDetail.Select(p => p.BRG).ToList();
                //ADD BY NURUL 5/5/2020
                var sSQLGetMarket = "select namamarket from sot01a a inner join arf01 b on a.cust=b.cust inner join mo..marketplace c on b.nama=c.idmarket where no_bukti='" + pesananInDb.NO_BUKTI + "'";
                var GetMarket = ErasoftDbContext.Database.SqlQuery<string>(sSQLGetMarket).SingleOrDefault();
                //END ADD BY NURUL 5/5/2020

                var vm = new PesananViewModel()
                {
                    Pesanan = pesananInDb,
                    ListPesanan = ErasoftDbContext.SOT01A.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList(),
                    ListPesananDetail = ListPesananDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInPesananDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    //ListEkspedisi = MoDbContext.Ekspedisi.ToList(),
                    //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                    //add by nurul 16/4/2019
                    alamatPenerima = al_buyer,
                    //end add by nurul 16/4/2019
                    //ADD BY NURUL 5/5/2020
                    namaMarket = GetMarket,
                    //END ADD BY NURUL 5/5/2020
                };

                return PartialView("BarangPesananSelesaiPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeletePesanan(int? orderId)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == orderId);

            // ========== Hapus Barang =============
            /*var listPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();

            if (listPesananDetail.Count > 0)
            {
                foreach (var pesananDetail in listPesananDetail)
                {
                    ErasoftDbContext.SOT01B.Remove(pesananDetail);
                }
            }*/

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            var detailPesananInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
            foreach (var item in detailPesananInDb)
            {
                listBrg.Add(item.BRG);
            }
            //end add by calvin 8 nov 2018

            ErasoftDbContext.SOT01A.Remove(pesananInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_SO_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new PesananViewModel()
            {
                //remark by nurul 13/5/2019
                ////change by nurul 22/1/2019 -- ListPesanan = ErasoftDbContext.SOT01A.Where(p => p.STATUS_TRANSAKSI == "00").ToList(),
                //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
                //end remark by nurul 13/5/2019
                Errors = null
            };

            //return PartialView("TablePesananPartial", vm);
            return Json(pesananInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangPesanan(int noUrut)
        {
            try
            {
                var barangPesananInDb = ErasoftDbContext.SOT01B.Single(b => b.NO_URUT == noUrut);
                var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == barangPesananInDb.NO_BUKTI);

                pesananInDb.BRUTO -= barangPesananInDb.HARGA;
                //change by nurul 2/10/2019
                //pesananInDb.NILAI_PPN = Math.Ceiling(pesananInDb.PPN * pesananInDb.BRUTO / 100);
                //pesananInDb.NETTO = pesananInDb.BRUTO - pesananInDb.DISCOUNT + pesananInDb.NILAI_PPN +
                //                    pesananInDb.ONGKOS_KIRIM;
                pesananInDb.NILAI_PPN = Math.Ceiling(pesananInDb.PPN * (pesananInDb.BRUTO - pesananInDb.NILAI_DISC) / 100);
                pesananInDb.NETTO = pesananInDb.BRUTO - pesananInDb.NILAI_DISC + pesananInDb.NILAI_PPN +
                                    pesananInDb.ONGKOS_KIRIM;
                //change by nurul 2/9/2019

                ErasoftDbContext.SOT01B.Remove(barangPesananInDb);
                ErasoftDbContext.SaveChanges();

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangPesananInDb.BRG);
                updateStockMarketPlace(listBrg, "[DEL_SO_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018
                var vm = new PesananViewModel()
                {
                    Pesanan = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == pesananInDb.NO_BUKTI),
                    ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListPesananDetail = ErasoftDbContext.SOT01B.Where(pd => pd.NO_BUKTI == pesananInDb.NO_BUKTI).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangPesananPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdatePesanan(UpdateData dataUpdate)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == dataUpdate.OrderId);
            pesananInDb.NILAI_DISC = dataUpdate.NilaiDisc;
            pesananInDb.ONGKOS_KIRIM = dataUpdate.OngkosKirim;
            pesananInDb.PPN = dataUpdate.Ppn;
            pesananInDb.NILAI_PPN = dataUpdate.NilaiPpn;
            pesananInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            pesananInDb.CUST = dataUpdate.Cust;
            pesananInDb.TERM = dataUpdate.Term;
            pesananInDb.EXPEDISI = dataUpdate.Exp;
            pesananInDb.PEMESAN = dataUpdate.Buyer;
            var buyer = ErasoftDbContext.ARF01C.FirstOrDefault(k => k.BUYER_CODE == dataUpdate.Buyer);
            pesananInDb.NAMAPEMESAN = buyer.NAMA;
            pesananInDb.TGL_JTH_TEMPO = DateTime.ParseExact(dataUpdate.Tempo, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            pesananInDb.NETTO = pesananInDb.BRUTO - pesananInDb.NILAI_DISC + pesananInDb.NILAI_PPN +
                                pesananInDb.ONGKOS_KIRIM;

            //add by fauzi 01/07/2020 tambah untuk nama kurir jika diisi manual di form pesanan
            if (!string.IsNullOrEmpty(dataUpdate.Exp))
            {
                int recnumEkpedisi = Convert.ToInt32(dataUpdate.Exp);
                var namaKurir = MoDbContext.Ekspedisi.Where(p => p.RecNum == recnumEkpedisi).SingleOrDefault().NamaEkspedisi;
                pesananInDb.SHIPMENT = namaKurir.ToString();
            }

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        [HttpGet]
        public ActionResult GetResi(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);

            //change by nurul 22/11/2018
            //string[] shipment = new string[2];
            //shipment[0] = pesananInDb.TRACKING_SHIPMENT;
            //shipment[1] = pesananInDb.SHIPMENT;
            string[] shipment = new string[5];
            shipment[0] = pesananInDb.TRACKING_SHIPMENT;
            shipment[1] = pesananInDb.SHIPMENT;
            shipment[2] = pesananInDb.NO_BUKTI;
            shipment[3] = pesananInDb.NAMAPEMESAN;
            shipment[4] = pesananInDb.NAMAPENGIRIM;
            //end change 


            return Json(shipment, JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public async Task<ActionResult> GetResiTokped(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            //var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);

            string[] shipment = new string[6];
            shipment[0] = pesananInDb.TRACKING_SHIPMENT;
            shipment[1] = pesananInDb.SHIPMENT;
            shipment[2] = pesananInDb.NO_BUKTI;
            shipment[3] = pesananInDb.NAMAPEMESAN;
            shipment[4] = pesananInDb.NAMAPENGIRIM;

            string parameters = "";
            shipment[5] = "";
            if (string.IsNullOrWhiteSpace(pesananInDb.TRACKING_SHIPMENT))
            {
                //var shoAPI = new ShopeeController();
                //ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                //{
                //    merchant_code = marketPlace.Sort1_Cust,
                //};
                //ShopeeController.ShopeeGetParameterForInitLogisticResult InitParam;
                //InitParam = await shoAPI.GetParameterForInitLogistic(data, pesananInDb.NO_REFERENSI);

                //if (InitParam.dropoff != null)
                //{
                //    parameters += "DROPOFF;";

                //    if (InitParam.dropoff.Contains("branch_id"))
                //    {
                //        parameters += "BRANCH_ID;";
                //    }
                //    if (InitParam.dropoff.Contains("sender_real_name"))
                //    {
                //        parameters += "SENDER;";
                //    }
                //    if (InitParam.dropoff.Contains("tracking_no"))
                //    {
                //        parameters += "DROPOFF_TRACKING_NO;";
                //    }
                //}
                if (pesananInDb.SHIPMENT.Contains("Instant"))
                {
                    parameters += "PICKUP;";

                    //if (InitParam.pickup.Contains("address_id"))
                    //{
                    //    parameters += "ADDRESS_ID;";
                    //}
                    //if (InitParam.pickup.Contains("pickup_time_id"))
                    //{
                    //    parameters += "PICKUP_TIME;";
                    //}
                }
                //if (InitParam.non_integrated != null)
                //{
                //    parameters += "NON;";
                //    if (InitParam.non_integrated.Contains("tracking_no"))
                //    {
                //        parameters += "TRACKING_NO;";
                //    }
                //}
            }
            shipment[5] = parameters;
            return Json(shipment, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public async Task<ActionResult> GetResiShopee(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);


            string[] shipment = new string[6];
            shipment[0] = pesananInDb.TRACKING_SHIPMENT;
            shipment[1] = pesananInDb.SHIPMENT;
            shipment[2] = pesananInDb.NO_BUKTI;
            shipment[3] = pesananInDb.NAMAPEMESAN;
            shipment[4] = pesananInDb.NAMAPENGIRIM;

            string parameters = "";
            shipment[5] = "";
            if (string.IsNullOrWhiteSpace(pesananInDb.TRACKING_SHIPMENT))
            {
                var shoAPI = new ShopeeController();
                ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                {
                    merchant_code = marketPlace.Sort1_Cust,
                };
                ShopeeController.ShopeeGetParameterForInitLogisticResult InitParam;
                InitParam = await shoAPI.GetParameterForInitLogistic(data, pesananInDb.NO_REFERENSI);

                if (InitParam.dropoff != null)
                {
                    parameters += "DROPOFF;";

                    if (InitParam.dropoff.Contains("branch_id"))
                    {
                        parameters += "BRANCH_ID;";
                    }
                    if (InitParam.dropoff.Contains("sender_real_name"))
                    {
                        parameters += "SENDER;";
                    }
                    if (InitParam.dropoff.Contains("tracking_no"))
                    {
                        parameters += "DROPOFF_TRACKING_NO;";
                    }
                }
                if (InitParam.pickup != null)
                {
                    parameters += "PICKUP;";

                    if (InitParam.pickup.Contains("address_id"))
                    {
                        parameters += "ADDRESS_ID;";
                    }
                    if (InitParam.pickup.Contains("pickup_time_id"))
                    {
                        parameters += "PICKUP_TIME;";
                    }
                }
                if (InitParam.non_integrated != null)
                {
                    parameters += "NON;";
                    if (InitParam.non_integrated.Contains("tracking_no"))
                    {
                        parameters += "TRACKING_NO;";
                    }
                }
            }
            else
            {
                if (pesananInDb.TRACKING_SHIPMENT.Contains("[;]"))
                {
                    parameters = "AUTO_SHOPEE";
                }
            }
            shipment[5] = parameters;
            return Json(shipment, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult SaveResi(int? recNum, string noResi, string deliveryProv/*, string typeDelivery*/)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            //remark 15-02-2019, agar user tidak perlu kosongkan nmr resi yg didapan langsung dr api
            //add by Tri, check if user input new resi
            //bool changeStat = false;
            //if (string.IsNullOrEmpty(pesananInDb.TRACKING_SHIPMENT))
            //    changeStat = true;
            //end add by Tri, check if user input new resi
            //end remark 15-02-2019, agar user tidak perlu kosongkan nmr resi yg didapan langsung dr api

            //add by Tri, delivery provider lazada
            if (!string.IsNullOrEmpty(deliveryProv))
                pesananInDb.SHIPMENT = deliveryProv;
            //end add by Tri, delivery provider lazada
            pesananInDb.TRACKING_SHIPMENT = noResi;
            ErasoftDbContext.SaveChanges();

            //add by Tri, call mp api if user input new resi
            //remark 15-02-2019, agar user tidak perlu kosongkan nmr resi yg didapan langsung dr api
            //if (changeStat)
            //end remark 15-02-2019, agar user tidak perlu kosongkan nmr resi yg didapan langsung dr api
            ChangeStatusPesanan(pesananInDb.NO_BUKTI, "03", true/*, typeDelivery*/, "", "");
            //end add by Tri, call mp api if user input new resi

            return new EmptyResult();
        }

        [HttpGet]
        public async Task<ActionResult> SaveResiTokped(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.SingleOrDefault(p => p.RecNum == recNum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);
            if (!string.IsNullOrEmpty(marketPlace.Sort1_Cust))
            {
                //TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData()
                //{
                //    merchant_code = marketPlace.Sort1_Cust, //FSID
                //    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                //    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                //    API_secret_key = marketPlace.API_KEY, //Shop ID 
                //    token = marketPlace.TOKEN,
                //    idmarket = marketPlace.RecNum.Value
                //};
                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                {
                    merchant_code = marketPlace.Sort1_Cust, //FSID
                    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                    API_secret_key = marketPlace.API_KEY, //Shop ID 
                    token = marketPlace.TOKEN,
                    idmarket = marketPlace.RecNum.Value,
                    DatabasePathErasoft = dbPathEra,
                    username = usernameLogin
                };
                //var TokoAPI = new TokopediaController();
                string[] referensi = pesananInDb.NO_REFERENSI.Split(';');
                if (referensi.Count() > 0)
                {

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                    //await TokoAPI.PostRequestPickup(iden, pesananInDb.NO_BUKTI, referensi[0]);
                    clientJobServer.Enqueue<TokopediaControllerJob>(x => x.PostRequestPickup(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", iden, pesananInDb.NO_BUKTI, referensi[0]));
                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                }
            }

            return new EmptyResult();
        }

        [HttpGet]
        public async Task<ActionResult> SaveResiShopee(int? recNum, string metode,
            string dBranch, string dSender, string dTrackNo,
            string pAddress, string pTime,
            string nTrackNo)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.SingleOrDefault(p => p.RecNum == recNum);
            bool changeStat = false;
            if (string.IsNullOrEmpty(pesananInDb.TRACKING_SHIPMENT))
                changeStat = true;

            string nilaiTRACKING_SHIPMENT = "";
            if (metode == "0") // DROPOFF
            {
                //format : D[;]BRANCH_ID[;]SENDER_REAL_NAME[;]TRACKING_NO
                nilaiTRACKING_SHIPMENT = "D[;]" + dBranch + "[;]" + dSender + "[;]" + dTrackNo;
            }
            if (metode == "1") // PICKUP
            {
                //format : P[;]ADDRESS_ID[;]PICKUP_TIME
                nilaiTRACKING_SHIPMENT = "P[;]" + pAddress + "[;]" + pTime;
            }
            if (metode == "2") // NON INTEGRATED
            {
                //format : N[;]TRACKING_NO
                nilaiTRACKING_SHIPMENT = "N[;]" + nTrackNo;
            }
            if (metode == "3") // create manual
            {
                pesananInDb.TRACKING_SHIPMENT = nTrackNo;
                ErasoftDbContext.SaveChanges();
                changeStat = false;
            }
            //pesananInDb.TRACKING_SHIPMENT = nilaiTRACKING_SHIPMENT;
            //ErasoftDbContext.SaveChanges();

            if (changeStat)
            {
                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);
                //var shoAPI = new ShopeeController();
                //ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                //{
                //    merchant_code = marketPlace.Sort1_Cust,
                //};
                ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                {
                    merchant_code = marketPlace.Sort1_Cust,
                    DatabasePathErasoft = dbPathEra,
                    username = usernameLogin
                };
                if (metode == "0") // DROPOFF
                {
                    //ShopeeController.ShopeeInitLogisticDropOffDetailData detail = new ShopeeController.ShopeeInitLogisticDropOffDetailData()
                    //{
                    //    branch_id = 0,
                    //    sender_real_name = "",
                    //    tracking_no = ""
                    //};
                    ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData()
                    {
                        branch_id = 0,
                        sender_real_name = "",
                        tracking_no = ""
                    };
                    if (dBranch != "")
                    {
                        detail.branch_id = Convert.ToInt64(dBranch);
                    }
                    if (dSender != "")
                    {
                        detail.sender_real_name = dSender;
                    }
                    if (dTrackNo != "")
                    {
                        detail.tracking_no = dTrackNo;
                    }
                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                    //await new ShopeeControllerJob().InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, dBranch, dSender, dTrackNo);

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    //change by nurul 16/6/2020
                    //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, dBranch, dSender, dTrackNo, "0"));
                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, dBranch, dSender, dTrackNo, "0"));
                    //end change by nurul 16/6/2020
                    //await new ShopeeControllerJob().InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Change Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, dBranch, dSender, dTrackNo);
                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                }
                else if (metode == "1") // PICKUP
                {
                    //ShopeeController.ShopeeInitLogisticPickupDetailData detail = new ShopeeController.ShopeeInitLogisticPickupDetailData()
                    //{
                    //    address_id = 0,
                    //    pickup_time_id = ""
                    //};
                    ShopeeControllerJob.ShopeeInitLogisticPickupDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticPickupDetailData()
                    {
                        address_id = 0,
                        pickup_time_id = ""
                    };
                    if (pAddress != "")
                    {
                        detail.address_id = Convert.ToInt64(pAddress);
                    }
                    if (pTime != "")
                    {
                        detail.pickup_time_id = pTime;
                    }
                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                    //await shoAPI.InitLogisticPickup(data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT);
                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    //change by nurul 16/6/2020
                    //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticPickup(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT));
                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticPickup(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT));
                    //end change by nurul 16/6/2020
                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                }
                else if (metode == "2") // NON INTEGRATED
                {
                    //ShopeeController.ShopeeInitLogisticNotIntegratedDetailData detail = new ShopeeController.ShopeeInitLogisticNotIntegratedDetailData()
                    //{
                    //    tracking_no = ""
                    //};
                    ShopeeControllerJob.ShopeeInitLogisticNotIntegratedDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticNotIntegratedDetailData()
                    {
                        tracking_no = ""
                    };
                    if (nTrackNo != "")
                    {
                        detail.tracking_no = nTrackNo;
                    }
                    //change by calvin 10 april 2019, jadi pakai backgroundjob
                    //await shoAPI.InitLogisticNonIntegrated(data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT);

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    //change by nurul 16/6/2020
                    //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticNonIntegrated(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT));
                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticNonIntegrated(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT));
                    //end change by nurul 16/6/2020
                    //end change by calvin 10 april 2019, jadi pakai backgroundjob
                }
            }
            return new EmptyResult();
        }

        [HttpGet]
        public async Task<ActionResult> GetShopeeDropoffBranch(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);
            var shoAPI = new ShopeeController();
            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = marketPlace.Sort1_Cust,
            };
            var result = await shoAPI.GetBranch(data, pesananInDb.NO_REFERENSI);
            return new EmptyResult();
        }

        [HttpGet]
        public async Task<ActionResult> GetShopeePickupAddress(int? recNum)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);
            var shoAPI = new ShopeeController();
            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = marketPlace.Sort1_Cust,
            };
            var result = await shoAPI.GetAddress(data);
            return Json(result.address_list, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public async Task<ActionResult> GetShopeePickupTime(int? recNum, long address_id)
        {
            var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNum);
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == pesananInDb.CUST);
            var shoAPI = new ShopeeController();
            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = marketPlace.Sort1_Cust,
            };
            var result = await shoAPI.GetTimeSlot(data, address_id, pesananInDb.NO_REFERENSI);
            return Json(result.pickup_time, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 2/8/2019
        public ActionResult GenerateFakturMulti(string[] get_selected, string uname)
        {
            try
            {
                List<String> listError = new List<String>();

                for (int i = 0; i < get_selected.Count(); i++)
                {
                    if (!string.IsNullOrEmpty(get_selected[i]))
                    {
                        Int32 rec = Convert.ToInt32(get_selected[i]);
                        //var pesananInDb = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec);
                        //var getnobuk = pesananInDb.NO_BUKTI;
                        //var pesananDetailInDb = ErasoftDbContext.SOT01B.FirstOrDefault(p => p.NO_BUKTI == getnobuk && p.BRG == "NOT_FOUND");
                        //if (pesananDetailInDb == null)
                        //{
                        //    if (pesananInDb.STATUS_TRANSAKSI == "01")
                        //    {
                        //        pesananInDb.STATUS_TRANSAKSI = "02";
                        //        ErasoftDbContext.SaveChanges();
                        //        //add by Tri, call marketplace api to update order status
                        //        ChangeStatusPesanan(pesananInDb.NO_BUKTI, pesananInDb.STATUS_TRANSAKSI, false);
                        //        //end add by Tri, call marketplace api to update order status
                        //    }
                        //}
                        //else
                        //{
                        //    var nobuk = ErasoftDbContext.SOT01A.Single(a => a.RecNum == rec).NO_BUKTI;
                        //    listError.Add(nobuk);
                        //}
                        var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == rec);
                        var listBarangPesananInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                        var dataVm = new FakturViewModel()
                        {
                            Faktur = new SIT01A(),
                            FakturDetail = new SIT01B()
                        };
                        var cekNoSOExist = ErasoftDbContext.SIT01A.Where(p => p.NO_SO == pesananInDb.NO_BUKTI).FirstOrDefault();
                        if (cekNoSOExist == null)
                        {
                            // Bagian Save Faktur Generated

                            var digitAkhir = "";
                            var noOrder = "";

                            var listFakturInDb = ErasoftDbContext.SIT01A.Max(p => p.RecNum);

                            if (!listFakturInDb.HasValue)
                            {
                                digitAkhir = "000001";
                                noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                            }
                            else
                            {
                                //change by calvin 4 maret 2019
                                //var lastRecNum = listFakturInDb.Last().RecNum;
                                var lastRecNum = listFakturInDb.Value;
                                //end change by calvin 4 maret 2019

                                if (lastRecNum == 0)
                                {
                                    lastRecNum = 1;
                                }
                                lastRecNum++;

                                digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                                noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                            }
                            #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                            var pesanan_bruto = 0d;
                            var pesanan_netto = 0d;
                            var pesanan_nilai_ppn = 0d;
                            foreach (var item in listBarangPesananInDb)
                            {
                                double nilai_disc_1 = 0d;
                                double nilai_disc_2 = 0d;
                                double harga = 0d;
                                if (Math.Abs(item.DISCOUNT) > 0)
                                {
                                    nilai_disc_1 = (item.DISCOUNT * item.H_SATUAN * (item.QTY_N.HasValue ? item.QTY_N.Value : 0)) / 100;
                                }
                                else
                                {
                                    //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                                    nilai_disc_1 = (item.NILAI_DISC_1 / item.QTY) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0);
                                }

                                if (Math.Abs(item.DISCOUNT_2) > 0)
                                {
                                    nilai_disc_2 = (item.DISCOUNT * (item.H_SATUAN - nilai_disc_1) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0)) / 100;
                                }
                                else
                                {
                                    nilai_disc_2 = (item.NILAI_DISC_2 / item.QTY) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0);
                                }

                                harga = item.H_SATUAN * (item.QTY_N.HasValue ? item.QTY_N.Value : 0) - nilai_disc_1 -
                                                          nilai_disc_2;
                                pesanan_bruto += harga;
                            }

                            //change by nurul 1/10/2019, nilai ppn = ((bruto - nilai disc)*ppn)/100
                            //pesanan_nilai_ppn = (pesananInDb.PPN * pesanan_bruto) / 100;
                            pesanan_nilai_ppn = ((pesanan_bruto - pesananInDb.NILAI_DISC) * pesananInDb.PPN) / 100;
                            //end change by nurul 1/10/2019, nilai ppn = ((bruto - nilai disc)*ppn)/100

                            pesanan_netto = pesanan_bruto - pesananInDb.NILAI_DISC + pesanan_nilai_ppn + pesananInDb.ONGKOS_KIRIM;
                            #endregion

                            dataVm.Faktur.NO_BUKTI = noOrder;
                            dataVm.Faktur.NO_F_PAJAK = "-";
                            dataVm.Faktur.NO_SO = pesananInDb.NO_BUKTI;
                            dataVm.Faktur.CUST = pesananInDb.CUST;
                            dataVm.Faktur.NAMAPEMESAN = (pesananInDb.NAMAPEMESAN.Length > 20 ? pesananInDb.NAMAPEMESAN.Substring(0, 17) + "..." : pesananInDb.NAMAPEMESAN);
                            dataVm.Faktur.PEMESAN = pesananInDb.PEMESAN;
                            dataVm.Faktur.NAMA_CUST = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).PERSO;

                            //dari pesanan
                            dataVm.Faktur.NO_REF = pesananInDb.NO_REFERENSI;

                            //dataVm.Faktur.AL = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL;
                            dataVm.Faktur.AL = pesananInDb.ALAMAT_KIRIM;
                            dataVm.Faktur.AL2 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL2;
                            dataVm.Faktur.AL3 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL3;
                            //change by nurul 11/10/2019, req pak dani 
                            dataVm.Faktur.TGL = DateTime.Now;
                            //dataVm.Faktur.TGL = pesananInDb.TGL.Value;
                            //end change by nurul 11/10/2019, req pak dani 
                            dataVm.Faktur.PPN_Bln_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("MM"));
                            dataVm.Faktur.PPN_Thn_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("yyyy").Substring(2, 2));
                            dataVm.Faktur.USERNAME = uname;
                            dataVm.Faktur.JENIS_RETUR = "-";
                            dataVm.Faktur.JENIS_FORM = "2";
                            dataVm.Faktur.STATUS = "1";
                            dataVm.Faktur.ST_POSTING = "T";
                            dataVm.Faktur.VLT = "IDR";
                            dataVm.Faktur.NO_FA_OUTLET = "-";
                            dataVm.Faktur.NO_LPB = "-";
                            dataVm.Faktur.GROUP_LIMIT = "-";
                            dataVm.Faktur.KODE_ANGKUTAN = "-";
                            dataVm.Faktur.JENIS_MOBIL = "-";
                            dataVm.Faktur.JTRAN = "SI";
                            dataVm.Faktur.JENIS = "1";
                            dataVm.Faktur.NAMA_CUST = "-";
                            dataVm.Faktur.TUKAR = 1;
                            dataVm.Faktur.TUKAR_PPN = 1;
                            dataVm.Faktur.SOPIR = "-";
                            dataVm.Faktur.KET = "-";
                            dataVm.Faktur.PPNBM = 0;
                            dataVm.Faktur.NILAI_PPNBM = 0;
                            dataVm.Faktur.KODE_SALES = "-";
                            dataVm.Faktur.KODE_WIL = "-";
                            dataVm.Faktur.U_MUKA = 0;
                            dataVm.Faktur.U_MUKA_FA = 0;
                            dataVm.Faktur.TERM = pesananInDb.TERM;
                            dataVm.Faktur.TGL_JT_TEMPO = pesananInDb.TGL_JTH_TEMPO;

                            //change by calvin 31 okt 2018
                            //dataVm.Faktur.BRUTO = pesananInDb.BRUTO;
                            dataVm.Faktur.BRUTO = pesanan_bruto;
                            //end change by calvin 31 okt 2018

                            dataVm.Faktur.PPN = pesananInDb.PPN;

                            //change by calvin 31 okt 2018
                            //dataVm.Faktur.NILAI_PPN = pesananInDb.NILAI_PPN;
                            dataVm.Faktur.NILAI_PPN = pesanan_nilai_ppn;
                            //end change by calvin 31 okt 2018

                            dataVm.Faktur.DISCOUNT = pesananInDb.DISCOUNT;
                            dataVm.Faktur.NILAI_DISC = pesananInDb.NILAI_DISC;
                            dataVm.Faktur.MATERAI = pesananInDb.ONGKOS_KIRIM;

                            //change by calvin 31 okt 2018
                            //dataVm.Faktur.NETTO = pesananInDb.NETTO;
                            dataVm.Faktur.NETTO = pesanan_netto;
                            //end change by calvin 31 okt 2018

                            dataVm.Faktur.TGLINPUT = DateTime.Now;

                            #region add by calvin 6 juni 2018, agar sit01a field yang penting tidak null
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NILAI_DISC)))
                            {
                                dataVm.Faktur.NILAI_DISC = 0;
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_SO)))
                            {
                                dataVm.Faktur.NO_SO = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_REF)))
                            {
                                dataVm.Faktur.NO_REF = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.DISCOUNT)))
                            {
                                dataVm.Faktur.DISCOUNT = 0;
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.CUST_QQ)))
                            {
                                dataVm.Faktur.CUST_QQ = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMA_CUST_QQ)))
                            {
                                dataVm.Faktur.NAMA_CUST_QQ = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.STATUS_LOADING)))
                            {
                                dataVm.Faktur.STATUS_LOADING = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_PO_CUST)))
                            {
                                dataVm.Faktur.NO_PO_CUST = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PENGIRIM)))
                            {
                                dataVm.Faktur.PENGIRIM = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMAPENGIRIM)))
                            {
                                dataVm.Faktur.NAMAPENGIRIM = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.ZONA)))
                            {
                                dataVm.Faktur.ZONA = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.UCAPAN)))
                            {
                                dataVm.Faktur.UCAPAN = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_UCAPAN)))
                            {
                                dataVm.Faktur.N_UCAPAN = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PEMESAN)))
                            {
                                dataVm.Faktur.PEMESAN = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.SUPP)))
                            {
                                dataVm.Faktur.SUPP = "-";
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.KOMISI)))
                            {
                                dataVm.Faktur.KOMISI = 0;
                            }
                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_KOMISI)))
                            {
                                dataVm.Faktur.N_KOMISI = 0;
                            }
                            #endregion

                            if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.TOTAL_TITIPAN)))
                            {
                                dataVm.Faktur.TOTAL_TITIPAN = 0;
                            }
                            ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                            ErasoftDbContext.SaveChanges();

                            dataVm.FakturDetail.NO_BUKTI = noOrder;
                            dataVm.FakturDetail.USERNAME = uname;
                            dataVm.FakturDetail.CATATAN = "-";
                            dataVm.FakturDetail.JENIS_FORM = "2";
                            dataVm.FakturDetail.TGLINPUT = DateTime.Now;

                            //add by calvin 8 nov 2018, update stok marketplace
                            List<string> listBrg = new List<string>();
                            //end add by calvin 8 nov 2018

                            foreach (var pesananDetail in listBarangPesananInDb)
                            {
                                #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                                double nilai_disc_1 = 0d;
                                double nilai_disc_2 = 0d;
                                double harga = 0d;
                                if (Math.Abs(pesananDetail.DISCOUNT) > 0)
                                {
                                    nilai_disc_1 = (pesananDetail.DISCOUNT * pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                }
                                else
                                {
                                    //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                                    nilai_disc_1 = (pesananDetail.NILAI_DISC_1 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                }

                                if (Math.Abs(pesananDetail.DISCOUNT_2) > 0)
                                {
                                    nilai_disc_2 = (pesananDetail.DISCOUNT * (pesananDetail.H_SATUAN - nilai_disc_1) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                }
                                else
                                {
                                    nilai_disc_2 = (pesananDetail.NILAI_DISC_2 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                }

                                harga = pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0) - nilai_disc_1 -
                                                          nilai_disc_2;
                                #endregion

                                //change by calvin 31 okt 2018
                                //dataVm.FakturDetail.NILAI_DISC = pesananDetail.NILAI_DISC_1 + pesananDetail.NILAI_DISC_2;
                                dataVm.FakturDetail.NILAI_DISC = nilai_disc_1 + nilai_disc_2;
                                //end change by calvin 31 okt 2018


                                dataVm.FakturDetail.BRG = pesananDetail.BRG;
                                dataVm.FakturDetail.SATUAN = pesananDetail.SATUAN;
                                dataVm.FakturDetail.H_SATUAN = pesananDetail.H_SATUAN;
                                dataVm.FakturDetail.GUDANG = pesananDetail.LOKASI;

                                //change by calvin 31 okt 2018
                                //dataVm.FakturDetail.QTY = pesananDetail.QTY;
                                dataVm.FakturDetail.QTY = pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0;
                                //end change by calvin 31 okt 2018

                                dataVm.FakturDetail.DISCOUNT = pesananDetail.DISCOUNT;
                                dataVm.FakturDetail.DISCOUNT_2 = pesananDetail.DISCOUNT_2;

                                //change by calvin 31 okt 2018
                                //dataVm.FakturDetail.NILAI_DISC_1 = pesananDetail.NILAI_DISC_1;
                                //dataVm.FakturDetail.NILAI_DISC_2 = pesananDetail.NILAI_DISC_2;
                                //dataVm.FakturDetail.HARGA = pesananDetail.HARGA;
                                dataVm.FakturDetail.NILAI_DISC_1 = nilai_disc_1;
                                dataVm.FakturDetail.NILAI_DISC_2 = nilai_disc_2;
                                dataVm.FakturDetail.HARGA = harga;
                                //end change by calvin 31 okt 2018

                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_KIRIM)))
                                {
                                    dataVm.FakturDetail.QTY_KIRIM = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_RETUR)))
                                {
                                    dataVm.FakturDetail.QTY_RETUR = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_3)))
                                {
                                    dataVm.FakturDetail.DISCOUNT_3 = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_4)))
                                {
                                    dataVm.FakturDetail.DISCOUNT_4 = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_5)))
                                {
                                    dataVm.FakturDetail.DISCOUNT_5 = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_3)))
                                {
                                    dataVm.FakturDetail.NILAI_DISC_3 = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_4)))
                                {
                                    dataVm.FakturDetail.NILAI_DISC_4 = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_5)))
                                {
                                    dataVm.FakturDetail.NILAI_DISC_5 = 0;
                                }

                                ErasoftDbContext.SIT01B.Add(dataVm.FakturDetail);
                                ErasoftDbContext.SIT01A.Where(p => p.NO_BUKTI == noOrder && p.JENIS_FORM == "2").Update(p => new SIT01A() { BRUTO = dataVm.Faktur.BRUTO });
                                ErasoftDbContext.SaveChanges();

                                //add by calvin 8 nov 2018, update stok marketplace
                                listBrg.Add(pesananDetail.BRG);
                                //end add by calvin 8 nov 2018
                            }

                            //add by calvin 8 nov 2018, update stok marketplace
                            updateStockMarketPlace(listBrg, "[GENERATE_SI][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                            //end add by calvin 8 nov 2018

                            // End Bagian Save Faktur Generated
                        }
                    }
                }

                if (listError.Count() > 0)
                {
                    var vmError = new PesananViewModel() { };

                    for (int x = 0; x < listError.Count; x++)
                    {
                        if (!string.IsNullOrEmpty(listError[x]))
                        {
                            var Error = listError[x];
                            vmError.Errors.Add(Error);
                        }
                    }
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }

                return new EmptyResult();
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    System.Diagnostics.Debug.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        System.Diagnostics.Debug.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
        }
        //end add by nurul 2/8/2019
        [HttpGet]
        public ActionResult GenerateFaktur(int? recNumPesanan, string uname)
        {
            try
            {
                var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.RecNum == recNumPesanan);
                var listBarangPesananInDb = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                var dataVm = new FakturViewModel()
                {
                    Faktur = new SIT01A(),
                    FakturDetail = new SIT01B()
                };
                var cekNoSOExist = ErasoftDbContext.SIT01A.Where(p => p.NO_SO == pesananInDb.NO_BUKTI).FirstOrDefault();
                if (cekNoSOExist == null)
                {
                    // Bagian Save Faktur Generated

                    var digitAkhir = "";
                    var noOrder = "";

                    var listFakturInDb = ErasoftDbContext.SIT01A.Max(p => p.RecNum);

                    if (!listFakturInDb.HasValue)
                    {
                        digitAkhir = "000001";
                        noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                        ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                    }
                    else
                    {
                        //change by calvin 4 maret 2019
                        //var lastRecNum = listFakturInDb.Last().RecNum;
                        var lastRecNum = listFakturInDb.Value;
                        //end change by calvin 4 maret 2019

                        if (lastRecNum == 0)
                        {
                            lastRecNum = 1;
                        }
                        lastRecNum++;

                        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                        noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    }
                    #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                    var pesanan_bruto = 0d;
                    var pesanan_netto = 0d;
                    var pesanan_nilai_ppn = 0d;
                    foreach (var item in listBarangPesananInDb)
                    {
                        double nilai_disc_1 = 0d;
                        double nilai_disc_2 = 0d;
                        double harga = 0d;
                        if (Math.Abs(item.DISCOUNT) > 0)
                        {
                            nilai_disc_1 = (item.DISCOUNT * item.H_SATUAN * (item.QTY_N.HasValue ? item.QTY_N.Value : 0)) / 100;
                        }
                        else
                        {
                            //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                            nilai_disc_1 = (item.NILAI_DISC_1 / item.QTY) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0);
                        }

                        if (Math.Abs(item.DISCOUNT_2) > 0)
                        {
                            nilai_disc_2 = (item.DISCOUNT * (item.H_SATUAN - nilai_disc_1) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0)) / 100;
                        }
                        else
                        {
                            nilai_disc_2 = (item.NILAI_DISC_2 / item.QTY) * (item.QTY_N.HasValue ? item.QTY_N.Value : 0);
                        }

                        harga = item.H_SATUAN * (item.QTY_N.HasValue ? item.QTY_N.Value : 0) - nilai_disc_1 -
                                                  nilai_disc_2;
                        pesanan_bruto += harga;
                    }

                    //change by nurul 1/10/2019, nilai ppn = ((bruto - nilai disc)*ppn)/100
                    //pesanan_nilai_ppn = (pesananInDb.PPN * pesanan_bruto) / 100;
                    pesanan_nilai_ppn = ((pesanan_bruto - pesananInDb.NILAI_DISC) * pesananInDb.PPN) / 100;
                    //end change by nurul 1/10/2019, nilai ppn = ((bruto - nilai disc)*ppn)/100

                    pesanan_netto = pesanan_bruto - pesananInDb.NILAI_DISC + pesanan_nilai_ppn + pesananInDb.ONGKOS_KIRIM;
                    #endregion

                    dataVm.Faktur.NO_BUKTI = noOrder;
                    dataVm.Faktur.NO_F_PAJAK = "-";
                    dataVm.Faktur.NO_SO = pesananInDb.NO_BUKTI;
                    dataVm.Faktur.CUST = pesananInDb.CUST;
                    dataVm.Faktur.NAMAPEMESAN = (pesananInDb.NAMAPEMESAN.Length > 20 ? pesananInDb.NAMAPEMESAN.Substring(0, 17) + "..." : pesananInDb.NAMAPEMESAN);
                    dataVm.Faktur.PEMESAN = pesananInDb.PEMESAN;
                    dataVm.Faktur.NAMA_CUST = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).PERSO;

                    //dari pesanan
                    dataVm.Faktur.NO_REF = pesananInDb.NO_REFERENSI;

                    //dataVm.Faktur.AL = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL;
                    dataVm.Faktur.AL = pesananInDb.ALAMAT_KIRIM;
                    dataVm.Faktur.AL2 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL2;
                    dataVm.Faktur.AL3 = ErasoftDbContext.ARF01.Single(p => p.CUST == dataVm.Faktur.CUST).AL3;
                    //change by nurul 11/10/2019, req pak dani 
                    dataVm.Faktur.TGL = DateTime.Now;
                    //dataVm.Faktur.TGL = pesananInDb.TGL.Value;
                    //end change by nurul 11/10/2019, req pak dani 
                    dataVm.Faktur.PPN_Bln_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("MM"));
                    dataVm.Faktur.PPN_Thn_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("yyyy").Substring(2, 2));
                    dataVm.Faktur.USERNAME = uname;
                    dataVm.Faktur.JENIS_RETUR = "-";
                    dataVm.Faktur.JENIS_FORM = "2";
                    dataVm.Faktur.STATUS = "1";
                    dataVm.Faktur.ST_POSTING = "T";
                    dataVm.Faktur.VLT = "IDR";
                    dataVm.Faktur.NO_FA_OUTLET = "-";
                    dataVm.Faktur.NO_LPB = "-";
                    dataVm.Faktur.GROUP_LIMIT = "-";
                    dataVm.Faktur.KODE_ANGKUTAN = "-";
                    dataVm.Faktur.JENIS_MOBIL = "-";
                    dataVm.Faktur.JTRAN = "SI";
                    dataVm.Faktur.JENIS = "1";
                    dataVm.Faktur.NAMA_CUST = "-";
                    dataVm.Faktur.TUKAR = 1;
                    dataVm.Faktur.TUKAR_PPN = 1;
                    dataVm.Faktur.SOPIR = "-";
                    dataVm.Faktur.KET = "-";
                    dataVm.Faktur.PPNBM = 0;
                    dataVm.Faktur.NILAI_PPNBM = 0;
                    dataVm.Faktur.KODE_SALES = "-";
                    dataVm.Faktur.KODE_WIL = "-";
                    dataVm.Faktur.U_MUKA = 0;
                    dataVm.Faktur.U_MUKA_FA = 0;
                    dataVm.Faktur.TERM = pesananInDb.TERM;
                    dataVm.Faktur.TGL_JT_TEMPO = pesananInDb.TGL_JTH_TEMPO;

                    //change by calvin 31 okt 2018
                    //dataVm.Faktur.BRUTO = pesananInDb.BRUTO;
                    dataVm.Faktur.BRUTO = pesanan_bruto;
                    //end change by calvin 31 okt 2018

                    dataVm.Faktur.PPN = pesananInDb.PPN;

                    //change by calvin 31 okt 2018
                    //dataVm.Faktur.NILAI_PPN = pesananInDb.NILAI_PPN;
                    dataVm.Faktur.NILAI_PPN = pesanan_nilai_ppn;
                    //end change by calvin 31 okt 2018

                    dataVm.Faktur.DISCOUNT = pesananInDb.DISCOUNT;
                    dataVm.Faktur.NILAI_DISC = pesananInDb.NILAI_DISC;
                    dataVm.Faktur.MATERAI = pesananInDb.ONGKOS_KIRIM;

                    //change by calvin 31 okt 2018
                    //dataVm.Faktur.NETTO = pesananInDb.NETTO;
                    dataVm.Faktur.NETTO = pesanan_netto;
                    //end change by calvin 31 okt 2018

                    dataVm.Faktur.TGLINPUT = DateTime.Now;

                    #region add by calvin 6 juni 2018, agar sit01a field yang penting tidak null
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NILAI_DISC)))
                    {
                        dataVm.Faktur.NILAI_DISC = 0;
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_SO)))
                    {
                        dataVm.Faktur.NO_SO = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_REF)))
                    {
                        dataVm.Faktur.NO_REF = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.DISCOUNT)))
                    {
                        dataVm.Faktur.DISCOUNT = 0;
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.CUST_QQ)))
                    {
                        dataVm.Faktur.CUST_QQ = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMA_CUST_QQ)))
                    {
                        dataVm.Faktur.NAMA_CUST_QQ = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.STATUS_LOADING)))
                    {
                        dataVm.Faktur.STATUS_LOADING = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NO_PO_CUST)))
                    {
                        dataVm.Faktur.NO_PO_CUST = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PENGIRIM)))
                    {
                        dataVm.Faktur.PENGIRIM = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.NAMAPENGIRIM)))
                    {
                        dataVm.Faktur.NAMAPENGIRIM = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.ZONA)))
                    {
                        dataVm.Faktur.ZONA = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.UCAPAN)))
                    {
                        dataVm.Faktur.UCAPAN = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_UCAPAN)))
                    {
                        dataVm.Faktur.N_UCAPAN = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.PEMESAN)))
                    {
                        dataVm.Faktur.PEMESAN = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.SUPP)))
                    {
                        dataVm.Faktur.SUPP = "-";
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.KOMISI)))
                    {
                        dataVm.Faktur.KOMISI = 0;
                    }
                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.N_KOMISI)))
                    {
                        dataVm.Faktur.N_KOMISI = 0;
                    }
                    #endregion

                    if (string.IsNullOrEmpty(Convert.ToString(dataVm.Faktur.TOTAL_TITIPAN)))
                    {
                        dataVm.Faktur.TOTAL_TITIPAN = 0;
                    }
                    ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                    ErasoftDbContext.SaveChanges();

                    dataVm.FakturDetail.NO_BUKTI = noOrder;
                    dataVm.FakturDetail.USERNAME = uname;
                    dataVm.FakturDetail.CATATAN = "-";
                    dataVm.FakturDetail.JENIS_FORM = "2";
                    dataVm.FakturDetail.TGLINPUT = DateTime.Now;

                    //add by calvin 8 nov 2018, update stok marketplace
                    List<string> listBrg = new List<string>();
                    //end add by calvin 8 nov 2018

                    foreach (var pesananDetail in listBarangPesananInDb)
                    {
                        #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                        double nilai_disc_1 = 0d;
                        double nilai_disc_2 = 0d;
                        double harga = 0d;
                        if (Math.Abs(pesananDetail.DISCOUNT) > 0)
                        {
                            nilai_disc_1 = (pesananDetail.DISCOUNT * pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                        }
                        else
                        {
                            //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                            nilai_disc_1 = (pesananDetail.NILAI_DISC_1 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                        }

                        if (Math.Abs(pesananDetail.DISCOUNT_2) > 0)
                        {
                            nilai_disc_2 = (pesananDetail.DISCOUNT * (pesananDetail.H_SATUAN - nilai_disc_1) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                        }
                        else
                        {
                            nilai_disc_2 = (pesananDetail.NILAI_DISC_2 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                        }

                        harga = pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0) - nilai_disc_1 -
                                                  nilai_disc_2;
                        #endregion

                        //change by calvin 31 okt 2018
                        //dataVm.FakturDetail.NILAI_DISC = pesananDetail.NILAI_DISC_1 + pesananDetail.NILAI_DISC_2;
                        dataVm.FakturDetail.NILAI_DISC = nilai_disc_1 + nilai_disc_2;
                        //end change by calvin 31 okt 2018


                        dataVm.FakturDetail.BRG = pesananDetail.BRG;
                        dataVm.FakturDetail.SATUAN = pesananDetail.SATUAN;
                        dataVm.FakturDetail.H_SATUAN = pesananDetail.H_SATUAN;
                        dataVm.FakturDetail.GUDANG = pesananDetail.LOKASI;

                        //change by calvin 31 okt 2018
                        //dataVm.FakturDetail.QTY = pesananDetail.QTY;
                        dataVm.FakturDetail.QTY = pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0;
                        //end change by calvin 31 okt 2018

                        dataVm.FakturDetail.DISCOUNT = pesananDetail.DISCOUNT;
                        dataVm.FakturDetail.DISCOUNT_2 = pesananDetail.DISCOUNT_2;

                        //change by calvin 31 okt 2018
                        //dataVm.FakturDetail.NILAI_DISC_1 = pesananDetail.NILAI_DISC_1;
                        //dataVm.FakturDetail.NILAI_DISC_2 = pesananDetail.NILAI_DISC_2;
                        //dataVm.FakturDetail.HARGA = pesananDetail.HARGA;
                        dataVm.FakturDetail.NILAI_DISC_1 = nilai_disc_1;
                        dataVm.FakturDetail.NILAI_DISC_2 = nilai_disc_2;
                        dataVm.FakturDetail.HARGA = harga;
                        //end change by calvin 31 okt 2018

                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_KIRIM)))
                        {
                            dataVm.FakturDetail.QTY_KIRIM = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.QTY_RETUR)))
                        {
                            dataVm.FakturDetail.QTY_RETUR = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_3)))
                        {
                            dataVm.FakturDetail.DISCOUNT_3 = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_4)))
                        {
                            dataVm.FakturDetail.DISCOUNT_4 = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.DISCOUNT_5)))
                        {
                            dataVm.FakturDetail.DISCOUNT_5 = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_3)))
                        {
                            dataVm.FakturDetail.NILAI_DISC_3 = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_4)))
                        {
                            dataVm.FakturDetail.NILAI_DISC_4 = 0;
                        }
                        if (string.IsNullOrEmpty(Convert.ToString(dataVm.FakturDetail.NILAI_DISC_5)))
                        {
                            dataVm.FakturDetail.NILAI_DISC_5 = 0;
                        }

                        ErasoftDbContext.SIT01B.Add(dataVm.FakturDetail);
                        ErasoftDbContext.SIT01A.Where(p => p.NO_BUKTI == noOrder && p.JENIS_FORM == "2").Update(p => new SIT01A() { BRUTO = dataVm.Faktur.BRUTO });
                        ErasoftDbContext.SaveChanges();

                        //add by calvin 8 nov 2018, update stok marketplace
                        listBrg.Add(pesananDetail.BRG);
                        //end add by calvin 8 nov 2018
                    }

                    //add by calvin 8 nov 2018, update stok marketplace
                    updateStockMarketPlace(listBrg, "[GENERATE_SI][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                    //end add by calvin 8 nov 2018

                    // End Bagian Save Faktur Generated
                }


                return Json(pesananInDb.NO_BUKTI, JsonRequestBehavior.AllowGet);
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    System.Diagnostics.Debug.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        System.Diagnostics.Debug.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
        }

        [HttpGet]
        public ActionResult SaveGudangQty(int? recNum, string gd, int qty)
        {
            var barangPesananInDb = ErasoftDbContext.SOT01B.Single(b => b.NO_URUT == recNum);

            //add by calvin, 22 juni 2018 validasi QOH
            var qtyOnHand = GetQOHSTF08A(barangPesananInDb.BRG, gd);

            if (qtyOnHand + (barangPesananInDb.QTY_N.HasValue ? (barangPesananInDb.LOKASI == gd ? barangPesananInDb.QTY_N.Value : 0) : 0) - qty < 0)
            {
                var vmError = new StokViewModel()
                {

                };

                vmError.Errors.Add("Tidak bisa save, Qty item ( " + barangPesananInDb.BRG + " ) di gudang ( " + gd + " ) sisa ( " + Convert.ToString(qtyOnHand) + " )");

                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //}
            //end add by calvin, validasi QOH

            //change by calvin 31 okt 2018, req by pak dani, harusnya update ke qty_n, bukan qty, dan so tidak dihitung ulang
            //barangPesananInDb.QTY = qty;
            barangPesananInDb.LOKASI = gd;
            barangPesananInDb.QTY_N = qty;


            #region remark by calvin 31 okt 2018, req by pak dani, harusnya update ke qty_n, bukan qty, dan so tidak dihitung ulang
            //if (Math.Abs(barangPesananInDb.DISCOUNT) > 0)
            //{
            //    barangPesananInDb.NILAI_DISC_1 = (barangPesananInDb.DISCOUNT * barangPesananInDb.H_SATUAN * qty) / 100;
            //}

            //if (Math.Abs(barangPesananInDb.DISCOUNT_2) > 0)
            //{
            //    barangPesananInDb.NILAI_DISC_2 = (barangPesananInDb.DISCOUNT * (barangPesananInDb.H_SATUAN - barangPesananInDb.NILAI_DISC_1) * qty) / 100;
            //}

            //barangPesananInDb.HARGA = barangPesananInDb.H_SATUAN * qty - barangPesananInDb.NILAI_DISC_1 -
            //                          barangPesananInDb.NILAI_DISC_2;

            //var pesananInDb = ErasoftDbContext.SOT01A.Single(p => p.NO_BUKTI == barangPesananInDb.NO_BUKTI);
            //var listBarangPesanan = ErasoftDbContext.SOT01B.Where(b => b.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
            //var brutoPesanan = 0d;

            //foreach (var barang in listBarangPesanan)
            //{
            //    brutoPesanan += barang.HARGA;
            //}

            //pesananInDb.BRUTO = brutoPesanan;

            ////add by nurul 6/8/2018
            ////var ppnBaru = 0d;
            //pesananInDb.NILAI_PPN = (pesananInDb.PPN * pesananInDb.BRUTO) / 100;
            ////end add

            //pesananInDb.NETTO = pesananInDb.BRUTO - pesananInDb.NILAI_DISC + pesananInDb.NILAI_PPN + pesananInDb.ONGKOS_KIRIM;
            #endregion
            ErasoftDbContext.SaveChanges();

            //change by nurul 19/3/2019
            return new EmptyResult();
            //var pesananInDb = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == barangPesananInDb.NO_BUKTI).RecNum;
            //var recnum = Convert.ToString(pesananInDb);
            //var vM = new PesananViewModel()
            //{
            //    selectRec = recnum
            //};
            //return View(vM);
            //end change by nurul 19/3/2019
        }

        public ActionResult LihatFakturBarcode(string resi, string market)
        {
            var cekCust = "";
            var cekMP = "";
            if (resi != "-")
            {
                if (market == null || market == "")
                {
                    cekCust = ErasoftDbContext.SOT01A.FirstOrDefault(a => a.TRACKING_SHIPMENT == resi).CUST;
                    var no = Convert.ToInt32(ErasoftDbContext.ARF01.SingleOrDefault(a => a.CUST == cekCust).NAMA);
                    cekMP = MoDbContext.Marketplaces.Single(a => a.IdMarket == no).NamaMarket;
                }
                else if (market != null && market != "")
                {
                    cekMP = market.ToUpper();
                }
            }
            var resiBr = "";
            if (cekMP.ToUpper() == "SHOPEE")
            {
                resiBr = (resi.Split(']')[resi.Split(']').Length - 1]);
            }
            else
            {
                resiBr = resi;
            }
            return new BarcodeResult(resiBr);
        }

        //add by nurul 10/1/2020, cetak label di faktur
        public ActionResult CetakLabelMoFaktur(string[] rows_selected, string toko, string tlpToko, string kertas, string ctkFaktur, string ctkLabel, string alLink, string noLink, string mpLink, string nobukLink, string totalLink, string namaLink, string ketLink)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih faktur yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih faktur yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                //sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as si_bukti ,ISNULL(A.NO_REF,ISNULL(D.NO_REFERENSI,'-')) as so_referensi,ISNULL(D.SHIPMENT,'-') as kurir,ISNULL(D.TRACKING_SHIPMENT,'-') AS no_resi,ISNULL(D.NETTO,0) AS so_netto,ISNULL(D.KOTA,ISNULL(F.NAMA_KABKOT,ISNULL(J.NAMA_KABKOT,''))) AS so_kota,ISNULL(D.PROPINSI,ISNULL(F.NAMA_PROV,ISNULL(J.NAMA_PROV,''))) AS so_propinsi,ISNULL(D.KODE_POS,ISNULL(F.KODEPOS,ISNULL(J.KODEPOS,''))) AS so_pos,ISNULL(D.ALAMAT_KIRIM, ISNULL(F.AL,ISNULL(J.AL,''))) AS so_alamat,ISNULL(A.MATERAI,0) AS so_ongkir, ";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as si_bukti ,ISNULL(A.NO_REF,ISNULL(D.NO_REFERENSI,'-')) as so_referensi,ISNULL(D.SHIPMENT,ISNULL(A.NAMAPENGIRIM,'-')) as kurir,ISNULL(D.TRACKING_SHIPMENT,'-') AS no_resi,ISNULL(D.NETTO,0) AS so_netto,ISNULL(D.KOTA,ISNULL(F.NAMA_KABKOT,ISNULL(J.NAMA_KABKOT,''))) AS so_kota,ISNULL(D.PROPINSI,ISNULL(F.NAMA_PROV,ISNULL(J.NAMA_PROV,''))) AS so_propinsi,ISNULL(D.KODE_POS,ISNULL(F.KODEPOS,ISNULL(J.KODEPOS,''))) AS so_pos,ISNULL(D.ALAMAT_KIRIM, ISNULL(F.AL,ISNULL(J.AL,''))) AS so_alamat,ISNULL(A.MATERAI,0) AS so_ongkir, ";
                //sSQLSelect += "B.PEMBELI as nama_pemesan, 0 as jumlah_item , ";
                sSQLSelect += "ISNULL(D.NO_BUKTI,'') AS so_bukti,ISNULL(A.NETTO,0) AS si_netto, ISNULL(D.TGL,'')AS si_tgl, ";
                sSQLSelect += "ISNULL(H.PERSO,'')AS perso,ISNULL(I.NamaMarket,'')AS namamarket,ISNULL(I.LokasiLogo,'')AS logo, ";
                sSQLSelect += "ISNULL(F.NAMA,ISNULL(J.NAMA,'')) AS namapembeli, ISNULL(F.TLP,ISNULL(J.TLP,''))AS tlppembeli ";
                //add by nurul 26/3/2020
                sSQLSelect += ",ISNULL(D.NO_PO_CUST,'') AS no_job ";
                //end add by nurul 26/3/2020
                //add by nurul 15/5/2020
                sSQLSelect += ",D.KET ";
                //end add by nurul 15/5/2020
                string sSQL2 = "";
                //sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";
                sSQL2 += "FROM SIT01A A LEFT JOIN SOT01A D ON A.NO_SO = D.NO_BUKTI AND A.RECNUM IN (" + string_recnum + ") ";
                //sSQL2 += "LEFT JOIN SIT01A D ON A.NO_BUKTI=D.NO_SO ";
                //sSQL2 += "LEFT JOIN ARF01C F ON A.PEMESAN = F.BUYER_CODE ";
                sSQL2 += "LEFT JOIN (SELECT A.BUYER_CODE,A.NAMA,A.TLP,ISNULL(A.NAMA_KABKOT,ISNULL(C.NAMAKABKOT,''))NAMA_KABKOT,ISNULL(A.NAMA_PROV,ISNULL(B.NAMAPROV,'')) NAMA_PROV,ISNULL(A.KODEPOS,'')KODEPOS,ISNULL(A.AL,'')AL FROM ARF01C A LEFT JOIN MO..PROVINSI B ON A.KODEPROV=B.KODEPROV LEFT JOIN MO..KabupatenKota C ON A.KODEKABKOT=C.KODEKABKOT) F ON A.PEMESAN = F.BUYER_CODE ";
                sSQL2 += "LEFT JOIN ARF01 H ON A.CUST=H.CUST ";
                sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE I ON H.NAMA=I.IDMARKET ";
                //sSQL2 += "LEFT JOIN ARF01C J ON J.BUYER_CODE = D.PEMESAN ";
                sSQL2 += "LEFT JOIN (SELECT A.BUYER_CODE,A.NAMA,A.TLP,ISNULL(A.NAMA_KABKOT,ISNULL(C.NAMAKABKOT,''))NAMA_KABKOT,ISNULL(A.NAMA_PROV,ISNULL(B.NAMAPROV,'')) NAMA_PROV,ISNULL(A.KODEPOS,'')KODEPOS,ISNULL(A.AL,'')AL FROM ARF01C A LEFT JOIN MO..PROVINSI B ON A.KODEPROV=B.KODEPROV LEFT JOIN MO..KabupatenKota C ON A.KODEKABKOT=C.KODEKABKOT) J ON J.BUYER_CODE = D.PEMESAN ";
                string sSQLSelect2 = "";
                sSQLSelect2 += "WHERE A.RECNUM IN (" + string_recnum + ") ";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListSot01a = ErasoftDbContext.Database.SqlQuery<tempLabel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                var alamat1 = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;

                var ym = new FakturViewModel()
                {
                    urlAl = alLink,
                    urlTlp = noLink,
                    urlMp = mpLink,
                    urlNobuk = nobukLink,
                    urlTotal = totalLink,
                    urlNama = namaLink,
                    urlFaktur = ctkFaktur,
                    urlLabel = ctkLabel,
                    urlKet = ketLink,
                };

                var listSi = ListSot01a.Select(p => p.si_bukti).ToList();
                var faktur = ErasoftDbContext.SIT01A.Where(a => listSi.Contains(a.NO_BUKTI)).ToList();
                var detailFaktur = ErasoftDbContext.SIT01B.Where(a => listSi.Contains(a.NO_BUKTI)).ToList(); ;

                foreach (var so in ListSot01a)
                {
                    var detailFakturIndb = detailFaktur.Where(a => a.NO_BUKTI == so.si_bukti).ToList();
                    //var listBarangInFakturDetail = detailFakturIndb.Select(p => p.BRG).ToList();
                    var listBarangInFakturDetail = (from p in detailFakturIndb
                                                    select new { BRG_NEW = p.BRG_MULTISKU != "" && p.BRG_MULTISKU != null ? p.BRG_MULTISKU : p.BRG }).Select(a => a.BRG_NEW).ToList();
                    var al_buyer = so.so_alamat + ' ' + so.so_kota + ' ' + so.so_propinsi + ' ' + so.so_pos;
                    var resi = so.no_resi;
                    //add by nurul 26/3/2020
                    var kodeBooking = so.no_job;
                    //if (so.namamarket.ToUpper() == "SHOPEE" || so.namamarket.ToUpper() == "TOKOPEDIA")
                    //{
                    //    if (so.no_job != "")
                    //    {
                    //        resi = so.no_job;
                    //    }
                    //}
                    //add by nurul 26/3/2020
                    var netto = so.si_netto;
                    var logoKurir = so.kurir;
                    var tgl = DateTime.Now.ToString("dd/MM/yyyy");
                    var ambilRefTokped = so.so_referensi.Split(';');
                    var refNew = "";
                    if (ambilRefTokped.Count() > 0)
                    {
                        refNew = ambilRefTokped.Last();
                    }

                    //add by nurul 15/5/2020
                    var ket = "";
                    var ketTokped = new List<tempKetTokped>();
                    if (so.namamarket.ToUpper() == "SHOPEE" && so.ket != "" && so.ket != "-")
                    {
                        //ket = ErasoftDbContext.Database.SqlQuery<string>("Select ket from sot01a where no_bukti='" + so.so_bukti + "'").SingleOrDefault();
                        ket = so.ket;
                    }

                    if (so.namamarket.ToUpper() == "TOKOPEDIA")
                    {
                        ketTokped = ErasoftDbContext.Database.SqlQuery<tempKetTokped>("Select no_bukti as Nobuk, brg as Brg, Ket_Detail as ketdetail, brg_multisku from sot01b where no_bukti='" + so.so_bukti + "'").ToList();
                    }
                    //add by nurul 15/5/2020

                    var vm = new CetakLabelViewModel()
                    {
                        NamaToko = so.perso,
                        NamaPerusahaan = namaPT,
                        LogoMarket = so.logo,
                        Faktur = faktur.Where(a => a.NO_BUKTI == so.si_bukti).SingleOrDefault(),
                        namaPembeli = so.namapembeli,
                        tlpPembeli = so.tlppembeli,
                        ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && (a.TYPE == "3" || a.TYPE == "6") ).ToList(),
                        ListFakturDetail = detailFaktur.Where(a => a.NO_BUKTI == so.si_bukti).ToList(),
                        AlamatToko = alamat1,
                        TlpToko = tlp,
                        //noRef = so.so_referensi,
                        noRef = refNew,
                        Kurir = so.kurir,
                        Marketplace = so.namamarket,
                        NoResi = resi,
                        alamatPenerima = al_buyer,
                        linktotal = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", (netto))}",
                        linktoko = toko,
                        linktlptoko = tlpToko,
                        tglKirim = (tgl == null || tgl == "01-01-0001" || tgl == "01/01/0001" ? DateTime.Now.ToString("dd/MM/yyyy") : tgl),
                        KdBooking = kodeBooking,

                        //add by nurul 15/5/2020
                        Ket = ket,
                        listKetTokped = ketTokped
                        //end add by nurul 15/5/2020
                    };

                    ym.ListCetakLabel.Add(vm);
                }

                return PartialView("CetakLabelMo", ym);
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //end add by nurul 10/1/2020, cetak label di faktur

        [HttpGet]
        public ActionResult LihatFaktur(string noBukPesanan)
        {
            string nobuk = noBukPesanan.Substring(0, 2);
            //string nobuk = noBukPesanan.Substring(1,1);

            //add by nurul 16/4/2019
            var kota = "";
            var provinsi = "";
            var pos = "";
            var al_buyer = "";
            //end add by nurul 16/4/2019
            try
            {
                //change by nurul 3/12/2018
                //var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_SO == noBukPesanan);
                if (nobuk == "SO")
                {
                    var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_SO == noBukPesanan);
                    var namaToko = "";

                    var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                    if (sessionData?.Account != null)
                    {
                        namaToko = sessionData.Account.NamaTokoOnline;
                    }
                    else
                    {
                        if (sessionData?.User != null)
                        {
                            var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                            namaToko = accFromUser.NamaTokoOnline;
                        }
                    }

                    //add by nurul 16/4/2019
                    var pesanan = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan);

                    if (pesanan != null)
                    {
                        if (pesanan.KOTA != null)
                        {
                            kota = pesanan.KOTA;
                        }
                        if (pesanan.PROPINSI != null)
                        {
                            provinsi = pesanan.PROPINSI;
                        }
                        if (pesanan.KODE_POS != null)
                        {
                            pos = pesanan.KODE_POS;
                        }
                        al_buyer = pesanan.ALAMAT_KIRIM + ' ' + kota + ' ' + provinsi + ' ' + pos;
                    }
                    //end add by nurul 16/4/2019

                    var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
                    var idMarket = Convert.ToInt32(cust.NAMA);
                    var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
                    var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                    //add by nurul 29/11/2018 (modiv cetak faktur)
                    var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                    var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                    //end add
                    //add by nurul 2/1/2019 (tambah no referensi)
                    var noRef = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).NO_REFERENSI;
                    //end add 
                    //add by nurul 28/1/2019 
                    var market = MoDbContext.Marketplaces.Single(a => a.IdMarket == idMarket).NamaMarket;
                    //var kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).NAMAPENGIRIM;
                    var kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).SHIPMENT;
                    var resi = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).TRACKING_SHIPMENT;

                    //end add by nurul 28/1/2019 

                    var ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList();
                    var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();

                    var vm = new FakturViewModel()
                    {
                        NamaToko = namaToko,
                        NamaPerusahaan = namaPT,
                        LogoMarket = urlLogoMarket,
                        Faktur = fakturInDb,
                        ListFakturDetail = ListFakturDetail,
                        ListPembeli = ErasoftDbContext.ARF01C.Where(p => p.BUYER_CODE == fakturInDb.PEMESAN).ToList(),
                        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                        ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                        //add by nurul nurul 29/11/2018 (modiv cetak faktur)
                        AlamatToko = alamat,
                        TlpToko = tlp,
                        //end add
                        //add by nurul 2/1/2019 (tambah no referensi)
                        noRef = noRef,
                        //end add 
                        //add by nurul 28/1/2019 
                        Kurir = kurir,
                        Marketplace = market,
                        NoResi = resi,
                        //end add by nurul 28/1/2019 
                        //add by nurul 16/4/2019
                        alamatPenerima = al_buyer,
                        //end add by nurul 16/4/2019
                    };

                    return View(vm);
                }
                else
                {
                    var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_BUKTI == noBukPesanan);
                    var namaToko = "";

                    var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                    if (sessionData?.Account != null)
                    {
                        namaToko = sessionData.Account.NamaTokoOnline;
                    }
                    else
                    {
                        if (sessionData?.User != null)
                        {
                            var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                            namaToko = accFromUser.NamaTokoOnline;
                        }
                    }

                    //add by nurul 16/4/2019
                    var buyer = ErasoftDbContext.ARF01C.SingleOrDefault(a => a.BUYER_CODE == fakturInDb.PEMESAN);

                    if (buyer != null)
                    {
                        if (buyer.NAMA_KABKOT != null)
                        {
                            kota = buyer.NAMA_KABKOT;
                        }
                        if (buyer.NAMA_PROV != null)
                        {
                            provinsi = buyer.NAMA_PROV;
                        }
                        if (buyer.KODEPOS != null)
                        {
                            pos = buyer.KODEPOS;
                        }
                        al_buyer = buyer.AL + ' ' + kota + ' ' + provinsi + ' ' + pos;
                    }
                    //end add by nurul 16/4/2019

                    var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
                    var idMarket = Convert.ToInt32(cust.NAMA);
                    var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
                    var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                    //add by nurul 29/11/2018 (modiv cetak faktur)
                    var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                    var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                    //end add
                    //add by nurul 2/1/2019 (tambah no referensi)
                    var noRef = "";
                    var kurir = "";
                    var resi = "";
                    if (fakturInDb.NO_SO == null || fakturInDb.NO_SO == "" || fakturInDb.NO_SO == "-")
                    {
                        noRef = "-";
                        kurir = "-";
                        resi = "-";
                    }
                    else
                    {
                        noRef = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).NO_REFERENSI;
                        //kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).NAMAPENGIRIM;
                        kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).SHIPMENT;
                        resi = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).TRACKING_SHIPMENT;
                    }
                    //end add 
                    //add by nurul 28/1/2019 
                    var market = MoDbContext.Marketplaces.Single(a => a.IdMarket == idMarket).NamaMarket;
                    //var barcode = new Object();
                    //BarcodeLib.Barcode b;
                    //b = new BarcodeLib.Barcode();
                    //b.Alignment = BarcodeLib.AlignmentPositions.CENTER;
                    //BarcodeLib.TYPE type = BarcodeLib.TYPE.CODE128;
                    //try
                    //{
                    //    if (type != BarcodeLib.TYPE.UNSPECIFIED)
                    //    {
                    //        b.IncludeLabel = true;
                    //        //b.RotateFlipType = (RotateFlipType)Enum.Parse(typeof(RotateFlipType), "rotatenonflipnone", true);
                    //        if (resi != null || resi != "")
                    //        {
                    //            barcode = b.Encode(type, resi.Trim(), 300, 60);
                    //        }
                    //    }
                    //}
                    ////catch (Exception ex)
                    ////{
                    ////    Erasoft.Function.MessageBox.Show(ex.Message);
                    ////}
                    //catch (Exception e)
                    //{
                    //    return JsonErrorMessage(e.Message);
                    //}
                    //end add by nurul 28/1/2019 

                    var ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList();
                    var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();
                    var vm = new FakturViewModel()
                    {
                        NamaToko = namaToko,
                        NamaPerusahaan = namaPT,
                        LogoMarket = urlLogoMarket,
                        Faktur = fakturInDb,
                        ListPembeli = ErasoftDbContext.ARF01C.Where(p => p.BUYER_CODE == fakturInDb.PEMESAN).ToList(),
                        //ListBarang = ErasoftDbContext.STF02.ToList(), 'change by nurul 21/1/2019
                        ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                        ListFakturDetail = ListFakturDetail,
                        //add by nurul nurul 29/11/2018 (modiv cetak faktur)
                        AlamatToko = alamat,
                        TlpToko = tlp,
                        //end add
                        //add by nurul 2/1/2019 (tambah no referensi)
                        noRef = noRef,
                        //end add 
                        //add by nurul 28/1/2019 
                        Kurir = kurir,
                        Marketplace = market,
                        NoResi = resi,
                        //end add by nurul 28/1/2019 
                        //add by nurul 16/4/2019
                        alamatPenerima = al_buyer,
                        //end add by nurul 16/4/2019
                    };

                    return View(vm);
                }
                //var fakturInDb = a;
                //end change 

                //var namaToko = "";

                //var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                //if (sessionData?.Account != null)
                //{
                //    namaToko = sessionData.Account.NamaTokoOnline;
                //}
                //else
                //{
                //    if (sessionData?.User != null)
                //    {
                //        var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                //        namaToko = accFromUser.NamaTokoOnline;
                //    }
                //}


                //var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
                //var idMarket = Convert.ToInt32(cust.NAMA);
                //var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
                //var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                ////add by nurul 29/11/2018 (modiv cetak faktur)
                //var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                //var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                ////end add 

                //var vm = new FakturViewModel()
                //{
                //    NamaToko = namaToko,
                //    NamaPerusahaan = namaPT,
                //    LogoMarket = urlLogoMarket,
                //    Faktur = fakturInDb,
                //    ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                //    ListBarang = ErasoftDbContext.STF02.ToList(),
                //    ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList(),
                //    //add by nurul nurul 29/11/2018 (modiv cetak faktur)
                //    AlamatToko = alamat,
                //    TlpToko=tlp
                //    //end add 
                //};

                //return View(vm);
            }
            catch (Exception)
            {
                return View("NotFoundPage");
            }
        }

        [HttpGet]
        public ActionResult LihatFakturA5(string noBukPesanan)
        {
            string nobuk = noBukPesanan.Substring(0, 2);
            var kota = "";
            var provinsi = "";
            var pos = "";
            var al_buyer = "";
            try
            {
                if (nobuk == "SO")
                {
                    var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_SO == noBukPesanan);
                    var namaToko = "";

                    var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                    if (sessionData?.Account != null)
                    {
                        namaToko = sessionData.Account.NamaTokoOnline;
                    }
                    else
                    {
                        if (sessionData?.User != null)
                        {
                            var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                            namaToko = accFromUser.NamaTokoOnline;
                        }
                    }

                    var pesanan = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan);

                    if (pesanan != null)
                    {
                        if (pesanan.KOTA != null)
                        {
                            kota = pesanan.KOTA;
                        }
                        if (pesanan.PROPINSI != null)
                        {
                            provinsi = pesanan.PROPINSI;
                        }
                        if (pesanan.KODE_POS != null)
                        {
                            pos = pesanan.KODE_POS;
                        }
                        al_buyer = pesanan.ALAMAT_KIRIM + ' ' + kota + ' ' + provinsi + ' ' + pos;
                    }

                    var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
                    var idMarket = Convert.ToInt32(cust.NAMA);
                    var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
                    var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                    var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                    var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                    var noRef = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).NO_REFERENSI;
                    var market = MoDbContext.Marketplaces.Single(a => a.IdMarket == idMarket).NamaMarket;
                    var kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).SHIPMENT;
                    var resi = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == noBukPesanan).TRACKING_SHIPMENT;

                    var vm = new FakturViewModel()
                    {
                        NamaToko = namaToko,
                        NamaPerusahaan = namaPT,
                        LogoMarket = urlLogoMarket,
                        Faktur = fakturInDb,
                        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                        ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList(),
                        AlamatToko = alamat,
                        TlpToko = tlp,
                        noRef = noRef,
                        Kurir = kurir,
                        Marketplace = market,
                        NoResi = resi,
                        alamatPenerima = al_buyer,
                    };

                    return View(vm);
                }
                else
                {
                    var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_BUKTI == noBukPesanan);
                    var namaToko = "";

                    var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                    if (sessionData?.Account != null)
                    {
                        namaToko = sessionData.Account.NamaTokoOnline;
                    }
                    else
                    {
                        if (sessionData?.User != null)
                        {
                            var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                            namaToko = accFromUser.NamaTokoOnline;
                        }
                    }

                    var buyer = ErasoftDbContext.ARF01C.SingleOrDefault(a => a.BUYER_CODE == fakturInDb.PEMESAN);

                    if (buyer != null)
                    {
                        if (buyer.NAMA_KABKOT != null)
                        {
                            kota = buyer.NAMA_KABKOT;
                        }
                        if (buyer.NAMA_PROV != null)
                        {
                            provinsi = buyer.NAMA_PROV;
                        }
                        if (buyer.KODEPOS != null)
                        {
                            pos = buyer.KODEPOS;
                        }
                        al_buyer = buyer.AL + ' ' + kota + ' ' + provinsi + ' ' + pos;
                    }

                    var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
                    var idMarket = Convert.ToInt32(cust.NAMA);
                    var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
                    var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                    var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                    var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                    var noRef = "";
                    var kurir = "";
                    var resi = "";
                    if (fakturInDb.NO_SO == null || fakturInDb.NO_SO == "" || fakturInDb.NO_SO == "-")
                    {
                        noRef = "-";
                        kurir = "-";
                        resi = "-";
                    }
                    else
                    {
                        noRef = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).NO_REFERENSI;
                        kurir = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).SHIPMENT;
                        resi = ErasoftDbContext.SOT01A.SingleOrDefault(a => a.NO_BUKTI == fakturInDb.NO_SO).TRACKING_SHIPMENT;
                    }
                    var market = MoDbContext.Marketplaces.Single(a => a.IdMarket == idMarket).NamaMarket;

                    var vm = new FakturViewModel()
                    {
                        NamaToko = namaToko,
                        NamaPerusahaan = namaPT,
                        LogoMarket = urlLogoMarket,
                        Faktur = fakturInDb,
                        ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
                        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                        ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList(),
                        AlamatToko = alamat,
                        TlpToko = tlp,
                        noRef = noRef,
                        Kurir = kurir,
                        Marketplace = market,
                        NoResi = resi,
                        alamatPenerima = al_buyer,
                    };

                    return View(vm);
                }
            }
            catch (Exception)
            {
                return View("NotFoundPage");
            }
        }

        //add by nurul 3/12/2018
        //[HttpGet]
        //public ActionResult CetakFaktur(string noBukPesanan)
        //{
        //    string nobuk = Convert.ToString(noBukPesanan.Split(2));
        //    try
        //    {
        //        if (nobuk == "SO") {

        //        }
        //        var fakturInDb = ErasoftDbContext.SIT01A.Single(f => f.NO_BUKTI == noBukPesanan);
        //        var namaToko = "";

        //        var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
        //        if (sessionData?.Account != null)
        //        {
        //            namaToko = sessionData.Account.NamaTokoOnline;
        //        }
        //        else
        //        {
        //            if (sessionData?.User != null)
        //            {
        //                var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
        //                namaToko = accFromUser.NamaTokoOnline;
        //            }
        //        }


        //        var cust = ErasoftDbContext.ARF01.Single(c => c.CUST == fakturInDb.CUST);
        //        var idMarket = Convert.ToInt32(cust.NAMA);
        //        var urlLogoMarket = MoDbContext.Marketplaces.Single(m => m.IdMarket == idMarket).LokasiLogo;
        //        var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
        //        //add by nurul 29/11/2018 (modiv cetak faktur)
        //        var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
        //        var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
        //        //end add 

        //        var vm = new FakturViewModel()
        //        {
        //            NamaToko = namaToko,
        //            NamaPerusahaan = namaPT,
        //            LogoMarket = urlLogoMarket,
        //            Faktur = fakturInDb,
        //            ListPembeli = ErasoftDbContext.ARF01C.OrderBy(x => x.NAMA).ToList(),
        //            ListBarang = ErasoftDbContext.STF02.ToList(),
        //            ListFakturDetail = ErasoftDbContext.SIT01B.Where(fd => fd.NO_BUKTI == fakturInDb.NO_BUKTI).ToList(),
        //            //add by nurul nurul 29/11/2018 (modiv cetak faktur)
        //            AlamatToko = alamat,
        //            TlpToko = tlp
        //            //end add 
        //        };

        //        return View(vm);
        //    }
        //    catch (Exception)
        //    {
        //        return View("NotFoundPage");
        //    }
        //}
        //end add 

        // =============================================== Bagian Pesanan (END)

        // =============================================== Bagian Supplier (START)

        [Route("manage/master/supplier")]
        public ActionResult SupplierMenu()
        {
            var vm = new SupplierViewModel()
            {
                //ListSupplier = ErasoftDbContext.APF01.ToList()
            };

            return View(vm);
        }

        //add by nurul 7/5/2019
        public ActionResult RefreshTableSupplier(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLalamat = "";
            string sSQLperson = "";
            string sSQLtlp = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( NAMA like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( SUPP like '%" + getkata[i] + "%' )";
                            sSQLalamat += " ( AL like '%" + getkata[i] + "%' )";
                            sSQLperson += " ( PERSO like '%" + getkata[i] + "%' )";
                            sSQLtlp += " ( TLP like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( NAMA like '%" + getkata[i] + "%'";
                                sSQLkode += " ( SUPP like '%" + getkata[i] + "%'";
                                sSQLalamat += " ( AL like '%" + getkata[i] + "%' ";
                                sSQLperson += " ( PERSO like '%" + getkata[i] + "%'";
                                sSQLtlp += " ( TLP like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' )";
                                sSQLkode += " and SUPP like '%" + getkata[i] + "%' )";
                                sSQLalamat += " and AL like '%" + getkata[i] + "%' )";
                                sSQLperson += " and PERSO like '%" + getkata[i] + "%' )";
                                sSQLtlp += " and TLP like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and NAMA like '%" + getkata[i] + "%' ";
                                sSQLkode += " and SUPP like '%" + getkata[i] + "%' ";
                                sSQLalamat += " and AL like '%" + getkata[i] + "%' ";
                                sSQLperson += " and PERSO like '%" + getkata[i] + "%' ";
                                sSQLtlp += " and TLP like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //var apf01 = (from p in ErasoftDbContext.APF01
            //             where (p.NAMA.Contains(search) || p.SUPP.Contains(search) || p.PERSO.Contains(search))
            //             orderby p.SUPP
            //             select p);

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = apf01.Count();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //var ListApf01 = apf01.Skip(pagenumber * 10).Take(10).ToList();

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM APF01 ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLalamat + " or " + sSQLperson + " or " + sSQLtlp + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY SUPP ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListApf01 = ErasoftDbContext.Database.SqlQuery<APF01>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<APF01> pageOrders = new StaticPagedList<APF01>(ListApf01, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableSupplierPartial", pageOrders);
        }
        //end add by nurul 7/5/2019

        [HttpPost]
        public ActionResult SaveSupplier(SupplierViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                return View("SupplierMenu", dataVm);
            }

            if (dataVm.Supplier.RecNum == null)
            {
                var suppInDb = ErasoftDbContext.APF01.SingleOrDefault(s => s.SUPP == dataVm.Supplier.SUPP);

                if (suppInDb != null)
                {
                    //change by nurul 2/7/2019
                    //ModelState.AddModelError("", $@"Supplier dengan kode {dataVm.Supplier.SUPP} sudah ada! Coba kode yang lain!");

                    //var vm = new SupplierViewModel()
                    //{
                    //    Supplier = dataVm.Supplier,
                    //    ListSupplier = ErasoftDbContext.APF01.ToList()
                    //};

                    //return View("SupplierMenu", vm);
                    dataVm.Errors.Add($@"Supplier dengan kode {dataVm.Supplier.SUPP} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");
                    return Json(dataVm, JsonRequestBehavior.AllowGet);
                    //end change by nurul 2/7/2019
                }

                ErasoftDbContext.APF01.Add(dataVm.Supplier);
            }
            else
            {
                var suppInDb = ErasoftDbContext.APF01.Single(s => s.RecNum == dataVm.Supplier.RecNum);

                suppInDb.NAMA = dataVm.Supplier.NAMA;
                suppInDb.AL = dataVm.Supplier.AL;
                suppInDb.AL2 = dataVm.Supplier.AL2;
                suppInDb.AL3 = dataVm.Supplier.AL3;
                suppInDb.AL4 = dataVm.Supplier.AL4;
                suppInDb.PERSO = dataVm.Supplier.PERSO;
                suppInDb.NPWP = dataVm.Supplier.NPWP;
                suppInDb.TLP = dataVm.Supplier.TLP;
                suppInDb.TERM = dataVm.Supplier.TERM;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //var partialVm = new SupplierViewModel()
            //{
            //    ListSupplier = ErasoftDbContext.APF01.OrderBy(f => f.NAMA).ToList()
            //};

            //return PartialView("TableSupplierPartial", partialVm);
            dataVm.Errors = null;
            return Json(dataVm, JsonRequestBehavior.AllowGet);
        }

        public ActionResult EditSupplier(int? recNum)
        {
            try
            {
                var supVm = new SupplierViewModel()
                {
                    Supplier = ErasoftDbContext.APF01.Single(c => c.RecNum == recNum),
                    ListSupplier = ErasoftDbContext.APF01.ToList()
                };

                return Json(supVm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteSupplier(int? recNum)
        {
            var suppInDb = ErasoftDbContext.APF01.Single(c => c.RecNum == recNum);

            //add by nurul 30/7/2018
            var vmError = new StokViewModel() { };

            var cekFaktur = ErasoftDbContext.SIT01A.Count(k => k.SUPP == suppInDb.SUPP);
            var cekPembelian = ErasoftDbContext.PBT01A.Count(k => k.SUPP == suppInDb.SUPP);
            var cekTransaksi = ErasoftDbContext.STT01A.Count(k => k.Supp == suppInDb.SUPP);
            var cekPesanan = ErasoftDbContext.SOT01A.Count(k => k.SUPP == suppInDb.SUPP);

            if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0)
            {
                vmError.Errors.Add("Supplier sudah dipakai di transaksi !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //end add

            ErasoftDbContext.APF01.Remove(suppInDb);
            ErasoftDbContext.SaveChanges();

            var partialVm = new SupplierViewModel()
            {
                //ListSupplier = ErasoftDbContext.APF01.OrderBy(s => s.NAMA).ToList()
                Errors = null
            };

            //return PartialView("TableSupplierPartial", partialVm);
            return Json(partialVm, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Supplier (END)

        // =============================================== Bagian SA. Hutang (START)

        [Route("manage/sa/hutang")]
        public ActionResult HutangMenu()
        {
            var vm = new SaHutangViewModel()
            {
                //ListHutang = ErasoftDbContext.APT01A.Where(b => b.RANGKA == "1").ToList()
            };

            return View(vm);
        }

        [HttpGet]
        public ActionResult GetSupplier()
        {
            var supplier = ErasoftDbContext.APF01.ToList();

            return Json(supplier, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveHutang(SaHutangViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                return View("HutangMenu", dataVm);
            }

            if (dataVm.Hutang.RECNUM == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listPesananInDb = ErasoftDbContext.APT01A.OrderBy(p => p.RECNUM).ToList();
                //var listPesananInDb = ErasoftDbContext.APT01A.OrderByDescending(p => p.RECNUM).FirstOrDefault();
                //var digitAkhir = "";
                //var noHutang = "";

                //if (listPesananInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noHutang = $"AP{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (APT01A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listPesananInDb.RECNUM;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noHutang = $"AP{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "AP", "APT01A", "INV");
                var noHutang = "AP" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Hutang.INV = noHutang;
                dataVm.Hutang.NETTO = dataVm.Hutang.TOTAL;

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.APT01A.Add(dataVm.Hutang);
                try
                {
                    ErasoftDbContext.APT01A.Add(dataVm.Hutang);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.APT01A.Where(a => a.INV == dataVm.Hutang.INV).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.INV == noHutang)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noHutang = "AP" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Hutang.INV = noHutang;
                            ErasoftDbContext.APT01A.Add(dataVm.Hutang);
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti
            }
            else
            {
                var hutangInDb = ErasoftDbContext.APT01A.Single(h => h.RECNUM == dataVm.Hutang.RECNUM);

                hutangInDb.TGL = dataVm.Hutang.TGL;
                hutangInDb.SUPP = dataVm.Hutang.SUPP;
                hutangInDb.NSUPP = dataVm.Hutang.NSUPP;
                hutangInDb.TERM = dataVm.Hutang.TERM;
                hutangInDb.NETTO = dataVm.Hutang.TOTAL;
                hutangInDb.TOTAL = dataVm.Hutang.TOTAL;
                hutangInDb.JTGL = dataVm.Hutang.JTGL;
            }

            dataVm.Hutang.KET = "-";
            dataVm.Hutang.PO = "";
            dataVm.Hutang.SATUAN = "";
            dataVm.Hutang.F_PAJAK = "";
            dataVm.Hutang.INV_2 = "-";
            dataVm.Hutang.RANGKA = "1";
            dataVm.Hutang.MESIN = "";
            dataVm.Hutang.TAHUN = 0;

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //return RedirectToAction("HutangMenu");
            dataVm.Errors = null;
            return Json(dataVm, JsonRequestBehavior.AllowGet);
        }

        //public ActionResult RefreshTableHutang()
        //{
        //    var vm = new SaHutangViewModel()
        //    {
        //        ListHutang = ErasoftDbContext.APT01A.Where(b => b.RANGKA == "1").ToList()
        //    };

        //    return PartialView("TableHutangPartial", vm);
        //}
        public ActionResult RefreshTableHutang(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( (ISNULL(B.NAMA,'') + ' (' + A.SUPP + ')') like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( A.INV like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( A.TOTAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( (ISNULL(B.NAMA,'') + ' (' + A.SUPP + ')') like '%" + getkata[i] + "%'";
                                sSQLkode += " ( A.INV like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( A.TOTAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and (ISNULL(B.NAMA,'') + ' (' + A.SUPP + ')') like '%" + getkata[i] + "%' )";
                                sSQLkode += " and A.INV like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and A.TOTAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and (ISNULL(B.NAMA,'') + ' (' + A.SUPP + ')') like '%" + getkata[i] + "%' ";
                                sSQLkode += " and A.INV like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and A.TOTAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            ////var Apt01a = (from p in ErasoftDbContext.APT01A
            ////              where (p.RANGKA == "1") &&
            ////              (p.INV.Contains(search) || Convert.ToString(p.TGL).Contains(search) || Convert.ToString(p.JTGL).Contains(search) || p.NSUPP.Contains(search))
            ////              orderby p.TGL descending, p.INV descending
            ////              select p);
            ////var ListApt01a = Apt01a.Skip(pagenumber * 10).Take(10).ToList();
            ////var totalCount = Apt01a.Count();
            //string sSQLSelect = "";
            //sSQLSelect += "SELECT * ";
            //string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            //string sSQL2 = "";
            //sSQL2 += "FROM APT01A ";
            //sSQL2 += "WHERE RANGKA = '1' ";
            //if (search != "")
            //{
            //    sSQL2 += "AND (INV LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' OR JTGL LIKE '%" + search + "%' OR NSUPP LIKE '%" + search + "%' ) ";
            //}

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY TGL DESC, INV DESC ";
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            //var ListAPt01a = ErasoftDbContext.Database.SqlQuery<APT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            string sSQLSelect = "";
            //sSQLSelect += "SELECT * ";
            sSQLSelect += "SELECT A.INV AS NO_BUKTI, A.TGL, A.SUPP AS KODE, ISNULL(B.NAMA,'') AS NAMA, A.JTGL, A.RECNUM, A.TOTAL, A.POSTING ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM APT01A A ";
            sSQL2 += "LEFT JOIN APF01 B ON A.SUPP=B.SUPP ";
            sSQL2 += "WHERE RANGKA = '1' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.INV DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListAPt01a = ErasoftDbContext.Database.SqlQuery<mdlSaldoAwal>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlSaldoAwal> pageOrders = new StaticPagedList<mdlSaldoAwal>(ListAPt01a, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableHutangPartial", pageOrders);
        }

        public ActionResult RefreshHutangForm()
        {
            try
            {
                var vm = new SaHutangViewModel();

                return PartialView("FormHutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditHutang(int? recNum)
        {
            try
            {
                var hutVm = new SaHutangViewModel()
                {
                    Hutang = ErasoftDbContext.APT01A.Where(b => b.RANGKA == "1").Single(h => h.RECNUM == recNum)
                };

                return PartialView("FormHutangPartial", hutVm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteHutang(int? recNum)
        {
            var hutangInDb = ErasoftDbContext.APT01A.Where(b => b.RANGKA == "1").Single(h => h.RECNUM == recNum);

            ErasoftDbContext.APT01A.Remove(hutangInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new SaHutangViewModel()
            {
                //ListHutang = ErasoftDbContext.APT01A.Where(b => b.RANGKA == "1").ToList()
                Errors = null
            };

            //return PartialView("TableHutangPartial", vm);
            return Json(hutangInDb, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian SA. Hutang (END)

        // =============================================== Bagian SA. Piutang (START)

        [Route("manage/sa/piutang")]
        public ActionResult PiutangMenu()
        {
            var vm = new SaPiutangViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").ToList()
            };

            return View(vm);
        }

        [HttpGet]
        public ActionResult GetCustomer()
        {
            var supplier = ErasoftDbContext.ARF01.ToList();

            return Json(supplier, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SavePiutang(SaPiutangViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                return View("PiutangMenu", dataVm);
            }

            if (dataVm.Piutang.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listPiutangInDb = ErasoftDbContext.ART01A.OrderBy(p => p.RecNum).ToList();
                //var listPiutangInDb = ErasoftDbContext.ART01A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noHutang = "";

                //if (listPiutangInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noHutang = $"AR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ART01A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listPiutangInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noHutang = $"AR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "AR", "ART01A", "FAKTUR");
                var noHutang = "AR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Piutang.FAKTUR = noHutang;


                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.ART01A.Add(dataVm.Piutang);
                try
                {
                    ErasoftDbContext.ART01A.Add(dataVm.Piutang);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.ART01A.Where(a => a.FAKTUR == dataVm.Piutang.FAKTUR).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.FAKTUR == noHutang)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noHutang = "AR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Piutang.FAKTUR = noHutang;
                            ErasoftDbContext.ART01A.Add(dataVm.Piutang);
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

            }
            else
            {

                var piutangInDb = ErasoftDbContext.ART01A.Single(h => h.RecNum == dataVm.Piutang.RecNum);

                piutangInDb.TGL = dataVm.Piutang.TGL;
                piutangInDb.CUST = dataVm.Piutang.CUST;
                piutangInDb.NCUST = dataVm.Piutang.NCUST;
                piutangInDb.TERM = dataVm.Piutang.TERM;
                piutangInDb.TOTAL = dataVm.Piutang.TOTAL;
                piutangInDb.JTGL = dataVm.Piutang.JTGL;
            }

            //add by nurul 27/9/2018
            var vmError = new StokViewModel() { };
            var date1 = dataVm.Piutang.TGL.Value.Year;
            if (date1 > 2078)
            {
                vmError.Errors.Add("Maximum Year is 2078 !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            if (dataVm.Piutang.CUST == null)
            {
                vmError.Errors.Add("Customer is null !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            //end add 

            dataVm.Piutang.KET = "-";
            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //return RedirectToAction("PiutangMenu");
            dataVm.Errors = null;
            return Json(dataVm, JsonRequestBehavior.AllowGet);
        }

        //change by nurul 15/5/2019
        //public ActionResult RefreshTablePiutang()
        //{
        //    var vm = new SaPiutangViewModel()
        //    {
        //        //ListPiutang = ErasoftDbContext.ART01A.ToList()
        //        ListPiutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").ToList()
        //    };

        //    return PartialView("TablePiutangPartial", vm);
        //}
        public ActionResult RefreshTablePiutang(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( (ISNULL(C.NAMAMARKET,'') + ' (' + A.CUST + ')') like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( A.FAKTUR like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( A.TOTAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( (ISNULL(C.NAMAMARKET,'') + ' (' + A.CUST + ')') like '%" + getkata[i] + "%'";
                                sSQLkode += " ( A.FAKTUR like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( A.TOTAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and (ISNULL(C.NAMAMARKET,'') + ' (' + A.CUST + ')') like '%" + getkata[i] + "%' )";
                                sSQLkode += " and A.FAKTUR like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and A.TOTAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and (ISNULL(C.NAMAMARKET,'') + ' (' + A.CUST + ')') like '%" + getkata[i] + "%' ";
                                sSQLkode += " and A.FAKTUR like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and A.TOTAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            ////var Art01a = (from p in ErasoftDbContext.ART01A
            ////              where (p.RANGKA == "1") &&
            ////              (p.FAKTUR.Contains(search) || Convert.ToString(p.TGL).Contains(search) || Convert.ToString(p.JTGL).Contains(search) || p.NCUST.Contains(search))
            ////              orderby p.TGL descending, p.FAKTUR descending
            ////              select p);
            ////var ListArt01a = Art01a.Skip(pagenumber * 10).Take(10).ToList();
            ////var totalCount = Art01a.Count();
            //string sSQLSelect = "";
            //sSQLSelect += "SELECT * ";
            //string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            //string sSQL2 = "";
            //sSQL2 += "FROM ART01A ";
            //sSQL2 += "WHERE RANGKA = '1' ";
            //if (search != "")
            //{
            //    sSQL2 += "AND (FAKTUR LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' OR JTGL LIKE '%" + search + "%' OR NCUST LIKE '%" + search + "%' ) ";
            //}

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY TGL DESC, FAKTUR DESC ";
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            //var ListArt01a = ErasoftDbContext.Database.SqlQuery<ART01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            string sSQLSelect = "";
            //sSQLSelect += "SELECT * ";
            sSQLSelect += "SELECT A.FAKTUR AS NO_BUKTI, A.TGL, A.CUST AS KODE, (ISNULL(C.NAMAMARKET,'')) AS NAMA, A.JTGL, A.RECNUM, A.TOTAL, A.POST ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM ART01A A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            sSQL2 += "LEFT JOIN MO..MARKETPLACE C ON B.NAMA = C.IDMARKET ";
            sSQL2 += "WHERE RANGKA = '1' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.FAKTUR DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArt01a = ErasoftDbContext.Database.SqlQuery<mdlSaldoAwal>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlSaldoAwal> pageOrders = new StaticPagedList<mdlSaldoAwal>(ListArt01a, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TablePiutangPartial", pageOrders);
        }
        //end change by nurul 15/5/2019

        public ActionResult RefreshPiutangForm()
        {
            try
            {
                var vm = new SaPiutangViewModel();

                return PartialView("FormPiutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditPiutang(int? recNum)
        {
            try
            {
                var piuVm = new SaPiutangViewModel()
                {
                    Piutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").Single(h => h.RecNum == recNum)
                };

                return PartialView("FormPiutangPartial", piuVm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeletePiutang(int? recNum)
        {
            var piutangInDb = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").Single(h => h.RecNum == recNum);

            ErasoftDbContext.ART01A.Remove(piutangInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new SaPiutangViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").ToList()
                Errors = null
            };

            //return PartialView("TablePiutangPartial", vm);
            return Json(piutangInDb, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian SA. Piutang (END)

        // =============================================== Bagian Rekening (START)

        [Route("manage/master/rekening")]
        public ActionResult RekeningMenu()
        {
            var vm = new RekeningViewModel()
            {
                ListRekening = ErasoftDbContext.GLFREKs.ToList()
            };

            return View(vm);
        }

        [HttpPost]
        public ActionResult SaveRekening(RekeningViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                return View("RekeningMenu", dataVm);
            }

            if (dataVm.Rekening.RecNum == null)
            {
                var checkData = ErasoftDbContext.GLFREKs.SingleOrDefault(r => r.KODE == dataVm.Rekening.KODE);

                if (checkData == null)
                {
                    ErasoftDbContext.GLFREKs.Add(dataVm.Rekening);
                }
                else
                {
                    ModelState.AddModelError("", $@"Rekening dengan kode {dataVm.Rekening.KODE} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");

                    var rekVm = new RekeningViewModel()
                    {
                        Rekening = dataVm.Rekening,
                        ListRekening = ErasoftDbContext.GLFREKs.ToList()
                    };

                    return View("RekeningMenu", rekVm);
                }
            }
            else
            {
                var rekInDb = ErasoftDbContext.GLFREKs.Single(r => r.RecNum == dataVm.Rekening.RecNum);

                rekInDb.NAMA = dataVm.Rekening.NAMA;
                rekInDb.JR = dataVm.Rekening.JR;
                rekInDb.KATEGORY = dataVm.Rekening.KATEGORY;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var partialVm = new RekeningViewModel()
            {
                ListRekening = ErasoftDbContext.GLFREKs.ToList()
            };

            return PartialView("TableRekeningPartial", partialVm);
        }

        public ActionResult EditRekening(int? recNum)
        {
            try
            {
                var rekVm = new RekeningViewModel()
                {
                    Rekening = ErasoftDbContext.GLFREKs.Single(r => r.RecNum == recNum),
                    ListRekening = ErasoftDbContext.GLFREKs.ToList(),
                };

                return Json(rekVm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteRekening(int? recNum)
        {
            var rekInDb = ErasoftDbContext.GLFREKs.Single(r => r.RecNum == recNum);

            ErasoftDbContext.GLFREKs.Remove(rekInDb);
            ErasoftDbContext.SaveChanges();

            var partialVm = new RekeningViewModel()
            {
                ListRekening = ErasoftDbContext.GLFREKs.ToList()
            };

            return PartialView("TableRekeningPartial", partialVm);
        }

        // =============================================== Bagian Rekening (END)

        // =============================================== Bagian SA. Stock (START)

        public ActionResult GetGudang()
        {
            var listGudang = ErasoftDbContext.STF18.ToList();

            return Json(listGudang, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 7/1/2020
        [HttpGet]
        public ActionResult GetGudangBarangFaktur(string brgId)
        {

            if (brgId != "")
            {
                var cekgudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == ErasoftDbContext.SIFSYS.FirstOrDefault().GUDANG).ToList();
                var gudang = "";
                if (cekgudang.Count() > 0)
                {
                    gudang = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG;
                }
                else
                {
                    gudang = ErasoftDbContext.STF18.FirstOrDefault().Kode_Gudang;
                }

                string sSQL = "select A.BRG, A.GD, A.Nama_Gudang, A.QOH,A.QSO,A.QOO, SUM( CASE WHEN A.GD='" + gudang + "' THEN ISNULL((A.QOH - A.QSO),0) WHEN A.QSO > 0 THEN ISNULL((A.QOH - A.QOO),0) ELSE A.QOH END) AS SISA from ( ";
                sSQL += "SELECT A.BRG, A.GD, B.Nama_Gudang, QOH = ISNULL(SUM(QAWAL+(QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12)-(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12)),0) , ISNULL(C.QSO,0) AS QSO, ISNULL(D.QSO,0) AS QOO ";
                sSQL += "FROM STF08A A LEFT JOIN STF18 B ON A.GD = B.Kode_Gudang ";
                sSQL += "LEFT JOIN (SELECT BRG, QSO = ISNULL(SUM(ISNULL(QTY,0)),0) FROM SOT01A(NOLOCK) A INNER JOIN SOT01B(NOLOCK) B ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN SIT01A(NOLOCK) C ON A.NO_BUKTI = C.NO_SO WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')  AND ISNULL(C.NO_BUKTI,'') = '' AND B.BRG IN ('" + brgId + "') AND ISNULL(B.LOKASI,'') = '' GROUP BY BRG) C ON A.BRG=C.BRG ";
                sSQL += "LEFT JOIN (SELECT BRG, GD=B.LOKASI, QSO = ISNULL(SUM(ISNULL(QTY,0)),0) FROM SOT01A(NOLOCK) A INNER JOIN SOT01B(NOLOCK) B ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN SIT01A(NOLOCK) D ON A.NO_BUKTI = D.NO_SO WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04')  AND ISNULL(D.NO_BUKTI,'') = '' AND B.BRG IN ('" + brgId + "') GROUP BY BRG, B.LOKASI) D ON A.BRG=D.BRG AND D.GD=A.GD ";
                sSQL += "WHERE A.TAHUN=" + DateTime.Now.ToString("yyyy") + " AND A.BRG IN ('" + brgId + "') GROUP BY A.BRG, A.GD, B.Nama_Gudang, C.QSO, D.QSO ";
                sSQL += ")A GROUP BY BRG,A.GD, A.Nama_Gudang,A.QOH,A.QSO,A.QOO ";

                var vm = new FakturViewModel()
                {
                    ListQOHPerGD = ErasoftDbContext.Database.SqlQuery<QOH_PER_GD>(sSQL).ToList(),
                    setGd = gudang
                };
                return Json(vm, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var listGudang = ErasoftDbContext.STF18.ToList();
                return Json(listGudang, JsonRequestBehavior.AllowGet);
            }
        }
        //end add by nurul 7/1/2020

        //add by nurul 13/12/2018
        [HttpGet]
        public ActionResult GetGudangBarang(string brgId)
        {

            if (brgId != "")
            {
                string sSQL = "SELECT A.BRG, A.GD, B.Nama_Gudang, QOH = ISNULL(SUM(QAWAL+(QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12)-(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12)),0) ";
                sSQL += "FROM STF08A A LEFT JOIN STF18 B ON A.GD = B.Kode_Gudang WHERE A.TAHUN=" + DateTime.Now.ToString("yyyy") + " AND A.BRG IN ('" + brgId + "') GROUP BY A.BRG, A.GD, B.Nama_Gudang";
                //change by nurul 8/3/2019 set default gudang dr sifsys
                //var ListQOHPerGD = ErasoftDbContext.Database.SqlQuery<QOH_PER_GD>(sSQL).ToList();
                //return Json(ListQOHPerGD, JsonRequestBehavior.AllowGet);
                var cekgudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == ErasoftDbContext.SIFSYS.FirstOrDefault().GUDANG).ToList();
                var gudang = "";
                if (cekgudang.Count() > 0)
                {
                    gudang = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG;
                }
                else
                {
                    gudang = ErasoftDbContext.STF18.FirstOrDefault().Kode_Gudang;
                }
                var vm = new FakturViewModel()
                {
                    ListQOHPerGD = ErasoftDbContext.Database.SqlQuery<QOH_PER_GD>(sSQL).ToList(),
                    //setGd = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG
                    setGd = gudang
                };
                return Json(vm, JsonRequestBehavior.AllowGet);
                //end change by nurul 8/3/2019 set default gudang dr sifsys
            }
            else
            {
                var listGudang = ErasoftDbContext.STF18.ToList();
                return Json(listGudang, JsonRequestBehavior.AllowGet);
            }


            //return Json(ListQOHPerGD, JsonRequestBehavior.AllowGet);
        }
        //end add by nurul

        //add by nurul 11/3/2019 set default gudang dr sifsys
        public ActionResult GetGudangBarangStok(string brgId)
        {

            if (brgId != "")
            {
                string sSQL = "SELECT A.BRG, A.GD, B.Nama_Gudang, QOH = ISNULL(SUM(QAWAL+(QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12)-(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12)),0) ";
                sSQL += "FROM STF08A A LEFT JOIN STF18 B ON A.GD = B.Kode_Gudang WHERE A.TAHUN=" + DateTime.Now.ToString("yyyy") + " AND A.BRG IN ('" + brgId + "') GROUP BY A.BRG, A.GD, B.Nama_Gudang";
                var cekgudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == ErasoftDbContext.SIFSYS.FirstOrDefault().GUDANG).ToList();
                var gudang = "";
                if (cekgudang != null)
                {
                    gudang = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG;
                }
                else
                {
                    gudang = ErasoftDbContext.STF18.FirstOrDefault().Kode_Gudang;
                }
                var vm = new StokViewModel()
                {
                    ListQOHPerGD = ErasoftDbContext.Database.SqlQuery<QOH_PER_GD>(sSQL).ToList(),
                    //setGd = ErasoftDbContext.SIFSYS.SingleOrDefault().GUDANG
                    setGd = gudang
                };
                return Json(vm, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var listGudang = ErasoftDbContext.STF18.ToList();
                return Json(listGudang, JsonRequestBehavior.AllowGet);
            }
        }
        //end add by nurul 11/3/2019

        [Route("manage/sa/stok")]
        public ActionResult StokMenu()
        {
            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return View(vm);
        }

        public ActionResult SaveStok(StokViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Stok.ID == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listStokInDb = ErasoftDbContext.STT01A.OrderBy(p => p.ID).ToList();
                //var listStokInDb = ErasoftDbContext.STT01A.OrderByDescending(p => p.ID).FirstOrDefault();
                //var digitAkhir = "";
                //var noStok = "";

                //if (listStokInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noStok = $"ST{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (STT01A, RESEED, 0)");
                //}
                //else
                //{
                //    //var lastRecNum = listStokInDb.Last().ID;
                //    var lastRecNum = listStokInDb.ID;
                //    var lastKode = listStokInDb.Nobuk;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noStok = $"ST{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                //    if (noStok == lastKode)
                //    {
                //        lastRecNum++;
                //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //        noStok = $"ST{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    }
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "ST", "STT01A", "Nobuk");
                var noStok = "ST" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Stok.Nobuk = noStok;
                dataVm.Stok.STATUS_LOADING = "0";
                dataVm.BarangStok.Nobuk = noStok;

                #region add by calvin 14 juni 2018, agar field yg penting di stt01a tidak null
                dataVm.Stok.Satuan = "";
                dataVm.Stok.Ket = "";
                dataVm.Stok.ST_Posting = "";
                dataVm.Stok.MK = "M";
                //change by nurul 24/9/2019, permintaan pak dani
                //dataVm.Stok.JTran = "M";
                dataVm.Stok.JTran = "sa";
                //end change by nurul 24/9/2019, permintaan pak dani
                dataVm.Stok.Ref = "";
                dataVm.Stok.WORK_CENTER = "";
                dataVm.Stok.KLINE = "";
                dataVm.Stok.KODE_ANGKUTAN = "";
                dataVm.Stok.JENIS_MOBIL = "";
                dataVm.Stok.NO_POLISI = "";
                dataVm.Stok.NAMA_SOPIR = "";
                dataVm.Stok.No_PP = "";
                dataVm.Stok.CATATAN_1 = "";
                dataVm.Stok.CATATAN_2 = "";
                dataVm.Stok.CATATAN_3 = "";
                dataVm.Stok.CATATAN_4 = "";
                dataVm.Stok.CATATAN_5 = "";
                dataVm.Stok.CATATAN_6 = "";
                dataVm.Stok.CATATAN_7 = "";
                dataVm.Stok.CATATAN_8 = "";
                dataVm.Stok.CATATAN_9 = "";
                dataVm.Stok.CATATAN_10 = "";
                dataVm.Stok.NOBUK_POQC = "";
                dataVm.Stok.Supp = "";
                dataVm.Stok.NAMA_SUPP = "";
                dataVm.Stok.NO_PL = "";
                dataVm.Stok.NO_FAKTUR = "";
                #endregion

                //add by nurul 27/11/2019, add tgl last edit
                dataVm.Stok.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.STT01A.Add(dataVm.Stok);
                try
                {
                    ErasoftDbContext.STT01A.Add(dataVm.Stok);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.STT01A.Where(a => a.Nobuk == dataVm.Stok.Nobuk).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.Nobuk == noStok)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noStok = "ST" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Stok.Nobuk = noStok;
                            ErasoftDbContext.STT01A.Add(dataVm.Stok);
                            dataVm.BarangStok.Nobuk = noStok;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti


                if (dataVm.BarangStok.No == null)
                {
                    #region add by calvin 14 juni 2018, agar field yg penting di stt01b tidak null
                    dataVm.BarangStok.Dr_Gd = "";
                    dataVm.BarangStok.WO = "";
                    dataVm.BarangStok.Rak = "";
                    //change by nurul 24/9/2019, permintaan pak dani
                    //dataVm.BarangStok.JTran = "M";
                    dataVm.BarangStok.JTran = "sa";
                    //end change by nurul 24/9/2019, permintaan pak dani
                    dataVm.BarangStok.KLINK = "";
                    dataVm.BarangStok.NO_WO = "";
                    dataVm.BarangStok.KET = "";
                    dataVm.BarangStok.BRG_ORIGINAL = "";
                    dataVm.BarangStok.QTY3 = 0;
                    dataVm.BarangStok.BUKTI_DS = "";
                    dataVm.BarangStok.BUKTI_REFF = "";
                    #endregion

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                }
            }
            else
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk);

                stokInDb.Tgl = dataVm.Stok.Tgl;
                dataVm.BarangStok.Nobuk = dataVm.Stok.Nobuk;

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                if (dataVm.BarangStok.No == null)
                {
                    #region add by calvin 14 juni 2018, agar field yg penting di stt01b tidak null
                    dataVm.BarangStok.Dr_Gd = "";
                    dataVm.BarangStok.WO = "";
                    dataVm.BarangStok.Rak = "";
                    //change by nurul 24/9/2019, permintaan pak dani
                    //dataVm.BarangStok.JTran = "M";
                    dataVm.BarangStok.JTran = "sa";
                    //change by nurul 24/9/2019, permintaan pak dani
                    dataVm.BarangStok.KLINK = "";
                    dataVm.BarangStok.NO_WO = "";
                    dataVm.BarangStok.KET = "";
                    dataVm.BarangStok.BRG_ORIGINAL = "";
                    dataVm.BarangStok.QTY3 = 0;
                    dataVm.BarangStok.BUKTI_DS = "";
                    dataVm.BarangStok.BUKTI_REFF = "";
                    #endregion

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();


            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            listBrg.Add(dataVm.BarangStok.Kobar);
            updateStockMarketPlace(listBrg, "[INS_ST][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            //add by nurul 8/7/2019, tuning
            var ListStokDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == dataVm.Stok.Nobuk).ToList();
            var listBarangInStokDetail = ListStokDetail.Select(p => p.Kobar).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new StokViewModel()
            {
                Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk),
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList(),
                //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == dataVm.Stok.Nobuk).ToList(),
                ListBarangStok = ListStokDetail,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInStokDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return PartialView("BarangStokPartial", vm);
        }

        //public ActionResult RefreshTableStok()
        //{
        //    var vm = new StokViewModel()
        //    {
        //        ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList()
        //    };

        //    return PartialView("TableStokPartial", vm);
        //}
        public ActionResult RefreshTableStok(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            //string sSQLnama = "";
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            //sSQLnama += " ( NCUST like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( NOBUK like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                //sSQLnama += " ( NCUST like '%" + getkata[i] + "%'";
                                sSQLkode += " ( NOBUK like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                //sSQLnama += " and NCUST like '%" + getkata[i] + "%' )";
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                //sSQLnama += " and NCUST like '%" + getkata[i] + "%' ";
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            ////var stok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1 && a.STATUS_LOADING == "0").ToList();
            ////var Stt01a = (from p in stok
            ////              where /*(p.Nobuk.Substring(0, 2).Equals("ST") && p.JAM == 1 && p.STATUS_LOADING == "0") && */
            ////              (p.Nobuk.Contains(search) || Convert.ToString(p.Tgl).Contains(search))
            ////              ////where ((p.PART == null ? "" : p.PART) == "") &&
            ////              ////(
            ////              ////  (
            ////              ////      (p.NAMA + " " + p.NAMA2).Contains(search) || p.BRG.Contains(search)
            ////              ////  )
            ////              //remark by calvin 26 april 2019
            ////              //||
            ////              //(
            ////              //    smartSearch.Any(val => (p.NAMA + " " + p.NAMA2).Contains(val))  || smartSearch.Any(val => p.BRG.Contains(val))
            ////              //)
            ////              //end remark by calvin 26 april 2019
            ////              ////)
            ////              orderby p.Tgl descending , p.Nobuk descending
            ////              select p);
            ////var ListStt01a = Stt01a.Skip(pagenumber * 10).Take(10).ToList();
            ////var totalCount = Stt01a.Count();
            //string sSQLSelect = "";
            //sSQLSelect += "SELECT * ";
            //string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            //string sSQL2 = "";
            //sSQL2 += "FROM STT01A ";
            //sSQL2 += "WHERE NOBUK LIKE '%ST%' AND STATUS_LOADING = '0' AND JAM = '1' ";
            //if (search != "")
            //{
            //    sSQL2 += "AND (NOBUK LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
            //}

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            //var ListStt01a = ErasoftDbContext.Database.SqlQuery<STT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STT01A ";
            sSQL2 += "WHERE NOBUK LIKE '%ST%' AND STATUS_LOADING = '0' AND JAM = '1' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt01a = ErasoftDbContext.Database.SqlQuery<STT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search                     

            IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableStokPartial", pageOrders);
        }

        public ActionResult RefreshStokForm()
        {
            try
            {
                var vm = new StokViewModel()
                {
                    ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    //ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangStokPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditStok(int? stokId)
        {
            try
            {
                var stokInDb = ErasoftDbContext.STT01A.Where(a => a.JAM == 1).Single(p => p.ID == stokId);

                var ListStokDetail = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList();
                var listBarangInStokDetail = ListStokDetail.Select(p => p.Kobar).ToList();

                var vm = new StokViewModel()
                {
                    Stok = stokInDb,
                    //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList(),
                    //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == dataVm.Stok.Nobuk).ToList(),
                    ListBarangStok = ListStokDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInStokDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    //ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangStokPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteStok(int? stokId)
        {
            var stokInDb = ErasoftDbContext.STT01A.Where(a => a.JAM == 1).Single(p => p.ID == stokId);

            //add by calvin 8 nov 2018, update stok marketplace
            List<string> listBrg = new List<string>();
            //end add by calvin 8 nov 2018

            //add by calvin, 22 juni 2018 validasi QOH
            var stokDetailInDb = ErasoftDbContext.STT01B.Where(b => b.Jenis_Form == stokInDb.Jenis_Form && b.Nobuk == stokInDb.Nobuk).ToList();
            foreach (var item in stokDetailInDb)
            {
                var qtyOnHand = GetQOHSTF08A(item.Kobar, item.Ke_Gd);
                if (qtyOnHand - item.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };

                    //change by nurul 18/1/2019 -- var namaItem = ErasoftDbContext.STF02.Where(b => b.BRG == item.Kobar).FirstOrDefault();
                    var namaItem = ErasoftDbContext.STF02.Where(b => b.BRG == item.Kobar && b.TYPE == "3").FirstOrDefault();
                    vmError.Errors.Add("Tidak bisa delete, Qty Barang ( " + item.Kobar + " ) di gudang " + item.Ke_Gd + " sisa ( " + Convert.ToString(qtyOnHand) + " ) untuk item " + namaItem.NAMA + "");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //add by calvin 8 nov 2018, update stok marketplace
                listBrg.Add(item.Kobar);
                //end add by calvin 8 nov 2018
            }
            //end add by calvin, validasi QOH

            //add by nurul 18/10/2018
            ErasoftDbContext.STT01B.RemoveRange(stokDetailInDb);
            //end add 

            ErasoftDbContext.STT01A.Remove(stokInDb);
            ErasoftDbContext.SaveChanges();

            //add by calvin 8 nov 2018, update stok marketplace
            updateStockMarketPlace(listBrg, "[DEL_ST_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by calvin 8 nov 2018

            var vm = new StokViewModel()
            {
                //remark by nurul 15/5/2019
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList()
                Errors = null
            };

            //return PartialView("TableStokPartial", vm);
            return Json(stokInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangStok(int noUrut)
        {
            try
            {
                var barangStokInDb = ErasoftDbContext.STT01B.Single(b => b.No == noUrut);
                var stokInDb = ErasoftDbContext.STT01A.Where(a => a.JAM == 1).Single(p => p.Nobuk == barangStokInDb.Nobuk);

                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(barangStokInDb.Kobar, barangStokInDb.Ke_Gd);

                if (qtyOnHand - barangStokInDb.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };

                    //change by nurul 18/1/2019 -- var namaItem = ErasoftDbContext.STF02.Where(b => b.BRG == barangStokInDb.Kobar).FirstOrDefault();
                    var namaItem = ErasoftDbContext.STF02.Where(b => b.BRG == barangStokInDb.Kobar && b.TYPE == "3").FirstOrDefault();
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " ) untuk item " + namaItem.NAMA + "");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.STT01B.Remove(barangStokInDb);
                ErasoftDbContext.SaveChanges();

                //add by calvin 8 nov 2018, update stok marketplace
                List<string> listBrg = new List<string>();
                listBrg.Add(barangStokInDb.Kobar);
                updateStockMarketPlace(listBrg, "[DEL_ST_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by calvin 8 nov 2018

                var vm = new StokViewModel()
                {
                    Stok = ErasoftDbContext.STT01A.Where(a => a.JAM == 1).Single(p => p.Nobuk == stokInDb.Nobuk),
                    ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("ST") && a.JAM == 1).ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangStokPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateStok(UpdateData dataUpdate)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataUpdate.NoBuktiStok);
            //remark by nurul 25/9/2018
            //stokInDb.TglInput = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            stokInDb.Tgl = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            //add by nurul 27/11/2019, add tgl last edit
            stokInDb.TglInput = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            //add by fauzi 14 Juli 2020
            stokInDb.Ket = dataUpdate.Ket;
            //end add by fauzi 14 Juli 2020

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== Bagian SA. Stock (END)

        // =============================================== Bagian Report (START)

        [Route("manage/reports")]
        public async Task<ActionResult> Reports()
        {

#if (DEBUG || Debug_AWS)
            //BlibliController bliAPI = new BlibliController();
            //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
            //{
            //    merchant_code = "SES-60077",
            //    API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
            //    API_client_username = "mta-api-pterasoftteknologiindonesia-40eb0",
            //    API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
            //    token = "2f7f7d61-d4c9-4e2e-8dc6-07cd0bca06be",
            //    mta_username_email_merchant = "mochhazam@gmail.com",
            //    mta_password_password_merchant = "Serayu112pwt",
            //    versiToken = "2",
            //    idmarket = 12
            //};
            //await bliAPI.GetCategoryTree(iden);
            //List<string> listCategory = new List<string>();
            //listCategory.Add("SA-1000049");

            //var Updatecategory = MoDbContext.CategoryBlibli.Where(p => listCategory.Contains(p.CATEGORY_CODE)).ToList();
            //Task.Run(() => bliAPI.UpdateAttributeList(iden, Updatecategory)).Wait();

            //ingat ganti saat publish, by calvin
            //string brgtes = "01.SMKR00.00.3m";
            //List<string> listBrg = new List<string>();
            //listBrg.Add(brgtes);

            //listBrg.Add("07.SFL00.00.9m");
            //listBrg.Add("07.SFL00.00.1y");
            //listBrg.Add("07.SFL00.00.2y");

            //updateStockMarketPlace(listBrg);

            //add by calvin 1 maret 2019, tes resize image
            //string urlGambar = "https://s3-ap-southeast-1.amazonaws.com//masteronlinebucket/uploaded-image/7331b819-34d8-4056-9adb-a6ff695092b6.jpg";
            //using (var client = new System.Net.Http.HttpClient())
            //{
            //    var bytes = await client.GetByteArrayAsync(urlGambar);

            //    using (var stream = new MemoryStream(bytes, true))
            //    {
            //        var img = Image.FromStream(stream);
            //        float newResolution = img.Height;
            //        if (img.Width < newResolution)
            //        {
            //            newResolution = img.Width;
            //        }

            //        System.Drawing.Imaging.ImageCodecInfo jpgEncoder = GetEncoder(System.Drawing.Imaging.ImageFormat.Jpeg);

            //        // Create an Encoder object based on the GUID  
            //        // for the Quality parameter category.  
            //        System.Drawing.Imaging.Encoder myEncoder =
            //            System.Drawing.Imaging.Encoder.Quality;

            //        // Create an EncoderParameters object.  
            //        // An EncoderParameters object has an array of EncoderParameter  
            //        // objects. In this case, there is only one  
            //        // EncoderParameter object in the array.  
            //        System.Drawing.Imaging.EncoderParameters myEncoderParameters = new System.Drawing.Imaging.EncoderParameters(1);

            //        System.Drawing.Imaging.EncoderParameter myEncoderParameter = new System.Drawing.Imaging.EncoderParameter(myEncoder, 90L);
            //        myEncoderParameters.Param[0] = myEncoderParameter;

            //        //img.Save(@"D:\TesResize\img.jpg");
            //        var resizedImage = (Image)BlibliResizeImage(img, Convert.ToInt32(newResolution), Convert.ToInt32(newResolution));
            //        //var resizedImage = (Image)BlibliResizeImageFromStream(stream);
            //        //resizedImage.Save(@"D:\TesResize\resizedImage.jpg", jpgEncoder, myEncoderParameters);
            //        resizedImage.Save(stream, jpgEncoder, myEncoderParameters);

            //        //ImageConverter _imageConverter = new ImageConverter();
            //        //byte[] resizedByteArr = (byte[])_imageConverter.ConvertTo(resizedImage, typeof(byte[]));
            //        stream.ToArray();

            //        //using (var ms = new MemoryStream(resizedByteArr))
            //        //{
            //        //    var img2 = Image.FromStream(ms);
            //        //    img2.Save(@"D:\TesResize\resizedByte.jpg", jpgEncoder, myEncoderParameters);
            //        //}
            //        //resizedImage.Save(@"D:\TesResize\resizedImage.jpg", jpgEncoder, myEncoderParameters);

            //    }
            //}
            //end add by calvin 1 maret 2019, tes resize image
            //clientJobServer.Enqueue<StokControllerJob>(x => x.testFailedNotif("ERASOFT_80068", "Master Online", "000004","Test","Testing by calvin"));

            //new StokControllerJob().updateStockMarketPlace("MANUAL", "erasoft_100144", "Calvin");

            //Task.Run(() => new LazadaControllerJob().GetOrdersCancelled("000023", "50000800209xk7TpgeUPD1314839fwAmIv1NwB8Zj1gHyaSrcXdEt7qWzCWIIn", dbPathEra, "Calvin")).Wait();

            //ShopeeControllerJob.ShopeeAPIData iden = new ShopeeControllerJob.ShopeeAPIData();
            //iden.merchant_code = "50679377";
            //iden.DatabasePathErasoft = dbPathEra;
            //iden.username = "Calvin";
            //Task.Run(() => new ShopeeControllerJob().GetOrderByStatusCancelled(iden, ShopeeControllerJob.StatusOrder.CANCELLED, "000022", "Hazam Shop", 0, 0)).Wait();

            //TokopediaControllerJob.TokopediaAPIData data = new TokopediaControllerJob.TokopediaAPIData
            //{
            //    merchant_code = "13072", //FSID
            //    API_client_password = "8a76adc52d144a9fa1ef4f96b59b7419", //Client Secret
            //    API_client_username = "36bc3d7bcc13404c9e670a84f0c61676", //Client ID
            //    API_secret_key = "2619296", //Shop ID 
            //    idmarket = 3,
            //    DatabasePathErasoft = dbPathEra,
            //    username = "Calvintes"
            //};
            //await new TokopediaControllerJob().CheckPendings(data);

            //var kdTokped = MoDbContext.Marketplaces.Single(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
            //var lisTokpedShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdTokped.IdMarket.ToString() && m.CUST == "001028").ToList();
            //if (lisTokpedShop.Count > 0)
            //{
            //    //var tokopediaApi = new TokopediaController();
            //    foreach (var tblCustomer in lisTokpedShop)
            //    {
            //        if (tblCustomer.Sort1_Cust != "")
            //        {
            //            if (!string.IsNullOrEmpty(tblCustomer.API_CLIENT_P) && !string.IsNullOrEmpty(tblCustomer.API_CLIENT_U))
            //            {
            //                TokopediaControllerJob.TokopediaAPIData data = new TokopediaControllerJob.TokopediaAPIData
            //                {
            //                    merchant_code = tblCustomer.Sort1_Cust, //FSID
            //                    API_client_password = tblCustomer.API_CLIENT_P, //Client Secret
            //                    API_client_username = tblCustomer.API_CLIENT_U, //Client ID
            //                    API_secret_key = tblCustomer.API_KEY, //Shop ID 
            //                    idmarket = tblCustomer.RecNum.Value,
            //                    DatabasePathErasoft = dbPathEra,
            //                    username = "Support"
            //                };
            //                var tokpedController = new TokopediaControllerJob();
            //                //await tokpedController.GetSingleOrder(data, tblCustomer.CUST, tblCustomer.PERSO);
            //                await tokpedController.PostRequestPickup(dbPathEra, "SO20000388", tblCustomer.CUST, "Pesanan", "Ganti Status", data, "SO20000388", "515081892");
            //                //await tokpedController.PostAckOrder(dbPathEra, "SO20000389", tblCustomer.CUST, "Pesanan", "Accept Order", data, "SO20000389", "515083008;INV/20200604/XX/VI/556642897");
            //                await tokpedController.GetNoAWB(data, "SO20000389", "515083008;INV/20200604/XX/VI/556642897");
            //            }
            //        }
            //    }
            //}

            //var listBLIShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == "16" && m.CUST == "001030").ToList();
            //if (listBLIShop.Count > 0)
            //{
            //    //remark by calvin 1 april 2019
            //    //var BliApi = new BlibliController();
            //    foreach (ARF01 tblCustomer in listBLIShop)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.API_CLIENT_P) && !string.IsNullOrEmpty(tblCustomer.API_CLIENT_U))
            //        {
            //            BlibliControllerJob.BlibliAPIData data = new BlibliControllerJob.BlibliAPIData()
            //            {
            //                API_client_username = tblCustomer.API_CLIENT_U,
            //                API_client_password = tblCustomer.API_CLIENT_P,
            //                //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
            //                API_secret_key = tblCustomer.API_KEY,
            //                //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
            //                mta_username_email_merchant = tblCustomer.EMAIL,
            //                mta_password_password_merchant = tblCustomer.PASSWORD,
            //                merchant_code = tblCustomer.Sort1_Cust,
            //                token = tblCustomer.TOKEN,
            //                idmarket = tblCustomer.RecNum.Value,
            //                DatabasePathErasoft = dbPathEra,
            //                username = "fixblibli",
            //                versiToken = tblCustomer.KD_ANALISA
            //            };
            //            List<string> skuMerchant = new List<string>();
            //            skuMerchant.Add("INDSALTED");
            //            var orderItemIds = new List<string>();
            //            orderItemIds.Add("12072976365");
            //            //await new BlibliControllerJob().CekProductActive(dbPathEra, "INDSALTED", tblCustomer.CUST, "", "", data, "", skuMerchant, tblCustomer.CUST, "", "");
            //            //await new BlibliControllerJob().CekProductReject(dbPathEra, "INDSALTED", tblCustomer.CUST, "", "", data, "", skuMerchant, tblCustomer.CUST, "", "");
            //            BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
            //            {
            //                merchant_code = tblCustomer.Sort1_Cust,
            //                //API_client_password = tblCustomer.API_CLIENT_P,
            //                API_client_username = tblCustomer.API_CLIENT_U,
            //                //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
            //                //API_secret_key = tblCustomer.API_KEY,
            //                //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
            //                //API_secret_key = tblCustomer.API_KEY,
            //                token = tblCustomer.TOKEN,
            //                mta_username_email_merchant = tblCustomer.EMAIL,
            //                mta_password_password_merchant = tblCustomer.PASSWORD,
            //                idmarket = tblCustomer.RecNum.Value,
            //                versiToken = tblCustomer.KD_ANALISA
            //            };
            //            await new BlibliController().GetQueueFeedDetail(iden, null);
            //        }
            //    }
            //}

            //var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var listLazadaShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdLazada.IdMarket.ToString()).ToList();
            ////var lzdApi = new LazadaController();
            //if (listLazadaShop.Count > 0)
            //{
            //    foreach (ARF01 tblCustomer in listLazadaShop)
            //    {
            //        if (!string.IsNullOrEmpty(tblCustomer.TOKEN))
            //        {
            //            #region refresh token lazada
            //            //change by calvin 4 april 2019
            //            //lzdApi.GetRefToken(tblCustomer.CUST, tblCustomer.REFRESH_TOKEN);
            //            //lzdApi.GetShipment(tblCustomer.CUST, tblCustomer.TOKEN);
            //            //end change by calvin 4 april 2019
            //            #endregion

            //string sSQLSelect2 = "select A.NO_REFERENSI FROM SOT01A A LEFT JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE B.NO_BUKTI IS NULL AND MONTH(A.TGL) IN (9,10) ORDER BY A.TGL ASC ";
            //var dsSO = EDB.GetDataSet("ConnId", "SO", sSQLSelect2);
            //if (dsSO.Tables[0].Rows.Count > 0)
            //{
            //    var pageCount = Math.Abs(dsSO.Tables[0].Rows.Count / 10) + 1;
            //    for (int page = 0; page < pageCount; page++)
            //    {
            //        List<string> listorderid = new List<string>();
            //        for (int i = page * 10; i < ((page * 10) + 10); i++)
            //        {
            //            try
            //            {
            //                listorderid.Add(Convert.ToString(dsSO.Tables[0].Rows[i]["NO_REFERENSI"]));
            //            }
            //            catch (Exception ex)
            //            {

            //            }
            //        }
            //        if (listorderid.Count > 0)
            //        {
            //            new LazadaControllerJob().getMultiOrderItems2WithQueue(dbPathEra, "Support", listorderid, tblCustomer.TOKEN, "fixingOrderItem");
            //        }

            //    }
            //}
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";
#if (DEBUG || Debug_AWS)
            //new LazadaControllerJob().GetOrdersToUpdateMO(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, "Support");
            //new LazadaControllerJob().GetOrdersUnpaid(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, "Support");
            //new LazadaControllerJob().GetOrdersCancelled(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, "Support");
#else
                                                //string connId_JobId = dbPathEra + "_lazada_pesanan_" + Convert.ToString(tblCustomer.RecNum.Value);
                                                //recurJobM.AddOrUpdate(connId_JobId, Hangfire.Common.Job.FromExpression<LazadaControllerJob>(x => x.GetOrders(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, username)), Cron.MinuteInterval(5), recurJobOpt);

                                                //connId_JobId = dbPathEra + "_lazada_pesanan_unpaid_" + Convert.ToString(tblCustomer.RecNum.Value);
                                                //recurJobM.AddOrUpdate(connId_JobId, Hangfire.Common.Job.FromExpression<LazadaControllerJob>(x => x.GetOrdersUnpaid(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, username)), Cron.MinuteInterval(5), recurJobOpt);

                                                //connId_JobId = dbPathEra + "_lazada_pesanan_cancel_" + Convert.ToString(tblCustomer.RecNum.Value);
                                                //recurJobM.AddOrUpdate(connId_JobId, Hangfire.Common.Job.FromExpression<LazadaControllerJob>(x => x.GetOrdersCancelled(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, username)), Cron.MinuteInterval(5), recurJobOpt);
#endif
            //        }
            //    }
            //}

            //                                                connId_JobId = dbPathEra + "_lazada_pesanan_cancel_" + Convert.ToString(tblCustomer.RecNum.Value);
            //                                                recurJobM.AddOrUpdate(connId_JobId, Hangfire.Common.Job.FromExpression<LazadaControllerJob>(x => x.GetOrdersCancelled(tblCustomer.CUST, tblCustomer.TOKEN, dbPathEra, username)), Cron.MinuteInterval(5), recurJobOpt);
            //#endif
            //                    }
            //                }
            //            }

            #region fix pemesan null di pesanan shopee
            //var kdShopee = MoDbContext.Marketplaces.Single(m => m.NamaMarket.ToUpper() == "SHOPEE");
            //var listShopeeShop = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
            //if (listShopeeShop.Count > 0)
            //{
            //    //var shopeeApi = new ShopeeController();
            //    foreach (ARF01 tblCustomer in listShopeeShop)
            //    {
            //        ShopeeControllerJob.ShopeeAPIData iden = new ShopeeControllerJob.ShopeeAPIData();
            //        iden.merchant_code = tblCustomer.Sort1_Cust;
            //        iden.DatabasePathErasoft = dbPathEra;
            //        iden.username = "Calvin Support";

            //        //var getOrderJOB = ErasoftDbContext.SOT01A.Where(p => (p.NO_REFERENSI ?? "") == "19102215547FMSP").Select(p => p.NO_REFERENSI).ToList();
            //        List<string> getOrderJOB = new List<string>();
            //        getOrderJOB.Add("19102215547FMSP");
            //        await new ShopeeControllerJob().GetAirwayBills(iden, getOrderJOB.ToArray());
            //        //string connId_JobId = "";
            //        //var getOrderPemesanKosong = ErasoftDbContext.SOT01A.Where(p => (p.PEMESAN ?? "") == "").Select(p => p.NO_REFERENSI).ToList();

            //        //var paging = Math.Ceiling(Convert.ToDouble(getOrderPemesanKosong.Count()) / Convert.ToDouble(50));
            //        //for (int i = 0; i < paging; i++)
            //        //{
            //        //await new ShopeeControllerJob().CekBrutoOrderCompleted(iden, ShopeeControllerJob.StatusOrder.COMPLETED, tblCustomer.CUST, tblCustomer.PERSO, 0, 0, 0);
            //        //}
            //    }
            //}

            #endregion
#endif

            return View();
        }

        public Bitmap BlibliResizeImage(System.Drawing.Image image, int width, int height)
        {
            var destRect = new System.Drawing.Rectangle(0, 0, width, height);
            var destImage = new Bitmap(width, height);

            destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);

            using (var graphics = Graphics.FromImage(destImage))
            {
                graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
                graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
                graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;

                using (var wrapMode = new System.Drawing.Imaging.ImageAttributes())
                {
                    wrapMode.SetWrapMode(System.Drawing.Drawing2D.WrapMode.TileFlipXY);
                    graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }

            return destImage;
        }
        private System.Drawing.Imaging.ImageCodecInfo GetEncoder(System.Drawing.Imaging.ImageFormat format)
        {
            System.Drawing.Imaging.ImageCodecInfo[] codecs = System.Drawing.Imaging.ImageCodecInfo.GetImageDecoders();
            foreach (System.Drawing.Imaging.ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }
        public static Bitmap BlibliResizeImageFromStream(MemoryStream stream)
        {
            using (var img = System.Drawing.Image.FromStream(stream))
            {
                float newResolution = img.Height;
                if (img.Width < newResolution)
                {
                    newResolution = img.Width;
                }
                var destRect = new System.Drawing.Rectangle(0, 0, Convert.ToInt32(newResolution), Convert.ToInt32(newResolution));
                var destImage = new Bitmap(Convert.ToInt32(newResolution), Convert.ToInt32(newResolution));

                //var newWidth = (int)(srcImage.Width * scaleFactor);
                //var newHeight = (int)(srcImage.Height * scaleFactor);
                var newWidth = (int)(newResolution);
                var newHeight = (int)(newResolution);
                using (var newImage = new Bitmap(newWidth, newHeight))
                using (var graphics = Graphics.FromImage(newImage))
                {
                    graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                    graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                    graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
                    graphics.DrawImage(img, destRect);
                    //newImage.Save("","Test", System.Drawing.Imaging.ImageFormat.Jpeg);
                }
                return destImage;
            }
        }

        //[Route("manage/report/test")]
        //public ActionResult TestReport()
        //{
        //    return View();
        //}

        //public ActionResult LihatListPembeliPopup()
        //{
        //    var listPembeli = ErasoftDbContext.ARF01C.ToList();

        //    return View("TableListPembeli", listPembeli);
        //}

        // =============================================== Bagian Report (END)

        // =============================================== Bagian Jurnal (START)

        [HttpGet]
        public ActionResult GetRekening()
        {
            var listBarang = ErasoftDbContext.GLFREKs.ToList();

            return Json(listBarang, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveJurnal(JurnalViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Jurnal.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                //var listJurnalInDb = ErasoftDbContext.GLFTRAN1.OrderBy(p => p.RecNum).ToList();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listJurnalInDb.Count == 0)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"JUR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (GLFTRAN1, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listJurnalInDb.Last().RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"JUR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "JUR", "GLFTRAN1", "bukti");
                var noOrder = "JUR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Jurnal.bukti = noOrder;
                dataVm.JurnalDetail.bukti = noOrder;

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.GLFTRAN1.Add(dataVm.Jurnal);
                try
                {
                    ErasoftDbContext.GLFTRAN1.Add(dataVm.Jurnal);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.GLFTRAN1.Where(a => a.bukti == dataVm.Jurnal.bukti).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.bukti == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "JUR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Jurnal.bukti = noOrder;
                            ErasoftDbContext.GLFTRAN1.Add(dataVm.Jurnal);
                            dataVm.JurnalDetail.bukti = noOrder;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti


                if (dataVm.JurnalDetail.no == null)
                {
                    ErasoftDbContext.GLFTRAN2.Add(dataVm.JurnalDetail);
                }
            }
            else
            {
                var jurnalInDb = ErasoftDbContext.GLFTRAN1.Single(p => p.bukti == dataVm.Jurnal.bukti);

                jurnalInDb.tgl = dataVm.Jurnal.tgl;

                dataVm.JurnalDetail.bukti = dataVm.Jurnal.bukti;

                if (dataVm.JurnalDetail.no == null)
                {
                    ErasoftDbContext.GLFTRAN2.Add(dataVm.JurnalDetail);
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var vm = new JurnalViewModel()
            {
                Jurnal = ErasoftDbContext.GLFTRAN1.Single(p => p.bukti == dataVm.Jurnal.bukti),
                ListJurnalDetail = ErasoftDbContext.GLFTRAN2.Where(pd => pd.bukti == dataVm.Jurnal.bukti).ToList(),
                ListRekening = ErasoftDbContext.GLFREKs.ToList()
            };

            return PartialView("DetailJurnalPartial", vm);
        }

        [HttpPost]
        public ActionResult UpdateJurnal(UpdateData dataUpdate)
        {
            var jurnalInDb = ErasoftDbContext.GLFTRAN1.Single(p => p.bukti == dataUpdate.OrderId);
            jurnalInDb.tdebet = dataUpdate.Debet;
            jurnalInDb.tkredit = dataUpdate.Kredit;
            jurnalInDb.tgl = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        public ActionResult EditJurnal(int? orderId)
        {
            try
            {
                var jurnalInDb = ErasoftDbContext.GLFTRAN1.Single(p => p.RecNum == orderId);

                var vm = new JurnalViewModel()
                {
                    Jurnal = jurnalInDb,
                    ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
                    ListJurnalDetail = ErasoftDbContext.GLFTRAN2.Where(pd => pd.bukti == jurnalInDb.bukti).ToList(),
                    ListRekening = ErasoftDbContext.GLFREKs.ToList()
                };

                return PartialView("DetailJurnalPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteJurnal(int? orderId)
        {
            var jurnalInDb = ErasoftDbContext.GLFTRAN1.Single(p => p.RecNum == orderId);

            ErasoftDbContext.GLFTRAN1.Remove(jurnalInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new JurnalViewModel()
            {
                //ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
                //ListJurnalDetail = ErasoftDbContext.GLFTRAN2.ToList()
                Errors = null
            };

            //return PartialView("TableJurnalPartial", vm);
            return Json(jurnalInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteRekeningJurnal(int noUrut)
        {
            try
            {
                var barangJurnalInDb = ErasoftDbContext.GLFTRAN2.Single(b => b.no == noUrut);
                var jurnalInDb = ErasoftDbContext.GLFTRAN1.Single(p => p.bukti == barangJurnalInDb.bukti);

                if (barangJurnalInDb.dk == "D")
                {
                    jurnalInDb.tdebet -= barangJurnalInDb.nilai;
                }
                else
                {
                    jurnalInDb.tkredit -= barangJurnalInDb.nilai;
                }

                ErasoftDbContext.GLFTRAN2.Remove(barangJurnalInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new JurnalViewModel()
                {
                    Jurnal = ErasoftDbContext.GLFTRAN1.Single(p => p.bukti == jurnalInDb.bukti),
                    ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
                    ListJurnalDetail = ErasoftDbContext.GLFTRAN2.Where(pd => pd.bukti == jurnalInDb.bukti).ToList(),
                    ListRekening = ErasoftDbContext.GLFREKs.ToList()
                };

                return PartialView("DetailJurnalPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        //public ActionResult RefreshTableJurnal1()
        //{
        //    var vm = new JurnalViewModel()
        //    {
        //        ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
        //        ListRekening = ErasoftDbContext.GLFREKs.ToList(),
        //        ListJurnalDetail = ErasoftDbContext.GLFTRAN2.ToList()
        //    };

        //    return PartialView("TableJurnalPartial", vm);
        //}
        public ActionResult RefreshTableJurnal1(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLdebet = "";
            string sSQLkredit = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( BUKTI like '%" + getkata[i] + "%' )";
                            sSQLdebet += " ( TDEBET like '%" + getkata[i] + "%' )";
                            sSQLkredit += " ( TKREDIT like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( BUKTI like '%" + getkata[i] + "%'";
                                sSQLdebet += " ( TDEBET like '%" + getkata[i] + "%'";
                                sSQLkredit += "( TKREDIT like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' )";
                                sSQLdebet += " and TDEBET like '%" + getkata[i] + "%' )";
                                sSQLkredit += " and TKREDIT like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' ";
                                sSQLdebet += " and TDEBET like '%" + getkata[i] + "%' ";
                                sSQLkredit += " and TKREDIT like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT RECNUM AS RECNUM, BUKTI AS BUKTI, TGL AS TGL, POSTING AS POSTING, LKS AS LKS, TDEBET AS DEBET, TKREDIT AS KREDIT ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM GLFTRAN1 ";
            if (search != "")
            {
                //sSQL2 += "WHERE (BUKTI LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLdebet + " or " + sSQLkredit + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, BUKTI DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt01a = ErasoftDbContext.Database.SqlQuery<mdlJurnal>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            //var ListGlftran = Glftran.Skip(pagenumber * 10).Take(10).ToList();

            var pageContent = new List<mdlJurnal>();
            foreach (var item in ListStt01a)
            {
                var listJurnalDetail = ErasoftDbContext.GLFTRAN2.Where(a => a.bukti == item.BUKTI && a.lks == item.LKS).ToList();

                pageContent.Add(new mdlJurnal()
                {
                    RECNUM = item.RECNUM,
                    BUKTI = item.BUKTI,
                    TGL = item.TGL,
                    POSTING = item.POSTING,
                    DEBET = listJurnalDetail.Where(a => a.dk == "D").Sum(a => a.nilai),
                    KREDIT = listJurnalDetail.Where(a => a.dk == "K").Sum(a => a.nilai),
                    LKS = item.LKS
                });
            }

            //var cobaGlftran = (from a in pageContent
            //                   where (a.BUKTI.Contains(search) || Convert.ToString(a.TGL).Contains(search) || Convert.ToString(a.DEBET).Contains(search) || Convert.ToString(a.KREDIT).Contains(search))
            //                   orderby a.TGL descending, a.BUKTI descending
            //                   select a);

            //var totalCount = Glftran.Count();
            //var totalCount = cobaGlftran.Count();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlJurnal> pageOrders = new StaticPagedList<mdlJurnal>(pageContent, pagenumber + 1, 10, totalCount.JUMLAH);
            //IPagedList<mdlJurnal> pageOrders = new StaticPagedList<mdlJurnal>(ListGlftran, pagenumber + 1, 10, totalCount);
            //IPagedList<mdlJurnal> pageOrders = new StaticPagedList<mdlJurnal>(pageContent, pagenumber + 1, 10, totalCount);
            //IPagedList<mdlJurnal> pageOrders = new StaticPagedList<mdlJurnal>(cobaGlftran, pagenumber + 1, 10, totalCount);
            return PartialView("TableJurnalPartial", pageOrders);
        }

        public ActionResult RefreshJurnalForm()
        {
            try
            {
                var vm = new JurnalViewModel()
                {
                    ListJurnal = ErasoftDbContext.GLFTRAN1.ToList(),
                    ListRekening = ErasoftDbContext.GLFREKs.ToList()
                };

                return PartialView("DetailJurnalPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        // =============================================== Bagian Jurnal (END)

        // =============================================== Bagian Pembayaran Piutang (START)

        [Route("manage/penjualan/piutang")]
        public ActionResult PembayaranPiutang()
        {
            var vm = new BayarPiutangViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART03A.ToList(),
                //ListPiutangDetail = ErasoftDbContext.ART03B.ToList(),
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList()
            };

            return View(vm);
        }

        public class tempRef
        {
            public string nobukSI { get; set; }
            public DateTime? tglSI { get; set; }
            public string refSI { get; set; }
            public string nobukSO { get; set; }
            public DateTime? tglSO { get; set; }
            public string refSO { get; set; }
        }

        [HttpGet]
        public ActionResult GetRefFaktur(string noFaktur)
        {
            var vm = new refJson() { };
            var noref = "-";
            string tglref = null;
            if (noFaktur != null)
            {
                var ListRef = ErasoftDbContext.Database.SqlQuery<tempRef>("select a.no_bukti as nobukSI,a.tgl as tglSI,a.no_ref as refSI,b.no_bukti as nobukSO,b.tgl as tglSO,b.no_referensi as refSO from sit01a a(nolock) left join sot01a b(nolock) on a.no_ref = b.no_referensi or a.no_so = b.no_bukti  where a.no_bukti in ('" + noFaktur + "')").SingleOrDefault();
                if (ListRef != null)
                {
                    if (ListRef.refSI != null && ListRef.refSI != "" && ListRef.refSI != "-")
                    {
                        noref = ListRef.refSI;
                    }
                    else if (ListRef.refSO != null && ListRef.refSO != "" && ListRef.refSO != "-")
                    {
                        noref = ListRef.refSO;
                    }
                    else if (ListRef.nobukSO != null && ListRef.nobukSO != "" && ListRef.nobukSO != "-")
                    {
                        noref = ListRef.nobukSO;
                    }
                    if (ListRef.tglSO != null)
                    {
                        tglref = ListRef.tglSO?.ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        tglref = ListRef.tglSI?.ToString("dd/MM/yyyy");
                    }

                    vm.NO_BUKTI = noFaktur;
                    vm.noRef = noref;
                    vm.tglRef = tglref;
                }
            }

            return Json(vm, JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public ActionResult GetFakturBelumLunas(string noCust)
        {
            var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == noCust && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
            var listKodeFaktur = new List<FakturJson>();
            foreach (var faktur in listFakturBelumLunas)
            {

                listKodeFaktur.Add(new FakturJson()
                {
                    RecNum = faktur.RecNum,
                    NO_BUKTI = faktur.FAKTUR,
                    Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                });
            }

            return Json(listKodeFaktur, JsonRequestBehavior.AllowGet);
        }

        //add by nurul 21/4/2020
        [HttpGet]
        public ActionResult GetFakturBelumLunasBaru(string nobuk, string noCust)
        {

            var listKodeFaktur = new List<FakturJson>();
            var vm = new BayarPiutangViewModel() { };
            var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == noCust && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
            foreach (var faktur in listFakturBelumLunas)
            {

                vm.listFakturBelumLunas.Add(new FakturJson()
                {
                    RecNum = faktur.RecNum,
                    NO_BUKTI = faktur.FAKTUR,
                    Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                });
            }
            if (nobuk != null && nobuk != "undefined")
            {
                vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == nobuk);
                vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == nobuk).ToList();
            }
            return PartialView("TableDetailPembayaranPiutang", vm);
        }
        public ActionResult RefreshTableDetailBayarPiutang(string nobuk, string filter = "", string filtervalue = "")
        {
            var listKodeFaktur = new List<FakturJson>();
            var vm = new BayarPiutangViewModel() { };
            if (nobuk != null)
            {
                vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == nobuk);
                string sSQLSelect = "";
                sSQLSelect += "SELECT * from art03b where bukti ='" + nobuk + "' ";
                //add by nurul 4/12/2019
                string ssqlOrder = "";
                switch (filter)
                {
                    case "Pot":
                        {
                            ssqlOrder += "order by pot ";
                        }
                        break;
                    case "Kurang":
                        {
                            ssqlOrder += "order by (sisa - bayar - pot) ";
                        }
                        break;
                    case "Lebih":
                        {
                            ssqlOrder += "order by lebih_bayar ";
                        }
                        break;
                    case "Persen":
                        {
                            ssqlOrder += "order by case when (lebih_bayar / sisa * 100) > 0 then (lebih_bayar / sisa * 100) else ((sisa - bayar - pot) / sisa * 100 * (-1)) end ";
                        }
                        break;
                    default:
                        {
                            ssqlOrder += "order by no ";
                        }
                        break;
                }
                if (filtervalue == "asc")
                {
                    ssqlOrder += " ASC ";
                }
                else
                {
                    ssqlOrder += " DESC ";
                }
                vm.ListPiutangDetail = ErasoftDbContext.Database.SqlQuery<ART03B>(sSQLSelect + ssqlOrder).ToList();
                var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a where no_bukti in (select NFAKTUR from art03b where bukti='" + nobuk + "')").ToList();
                vm.ListOngkir = getOngkir;
                //var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == vm.Piutang.CUST && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
                //foreach (var faktur in listFakturBelumLunas)
                //{

                //    vm.listFakturBelumLunas.Add(new FakturJson()
                //    {
                //        RecNum = faktur.RecNum,
                //        NO_BUKTI = faktur.FAKTUR,
                //        Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                //    });
                //}
            }
            return PartialView("TableDetailPembayaranPiutang", vm);

        }

        public ActionResult ListFakturBelumLunasPopUp(string noCust)
        {
            var vm = new BayarPiutangViewModel()
            {
                noCust = noCust,
            };

            return View(vm);
        }

        public ActionResult RefreshFakturBelumLunasPopUp(int? page, string search = "", string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["custParam"] = cust;

            string[] getkata = search.Split(' ');
            string sSQLnofaktur = "";
            string sSQLnorefSI = "";
            //string sSQLnorefSO = "";
            string sSQLsisa = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLnofaktur += " AND ";
                            sSQLnorefSI += " AND ";
                            //sSQLnorefSO += " AND ";
                            sSQLsisa += " AND ";
                        }

                        sSQLnofaktur += " d.faktur like '%" + getkata[i] + "%' ";
                        sSQLnorefSI += "  isnull(a.no_ref,'') like '%" + getkata[i] + "%' ";
                        //sSQLnorefSO += "  isnull(b.no_referensi,'') like '%" + getkata[i] + "%' ";
                        sSQLsisa += "  isnull((d.NETTO + d.DEBET - d.KREDIT - d.BAYAR),0) like '%" + getkata[i] + "%' ";

                    }
                }
            }


            string sSQLSelect = "";
            sSQLSelect += "SELECT d.faktur as nobuk, isnull(a.no_ref,'') as norefSI, a.tgl as tglSI, isnull(b.no_referensi,'') as norefSO, b.tgl as tglSO, isnull((d.NETTO + d.DEBET - d.KREDIT - d.BAYAR),0) as sisa, isnull(a.materai, 0) as ongkir ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(d.faktur) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM art01d d(nolock) left join sit01a a(nolock) on d.faktur=a.no_bukti  ";
            sSQL2 += "left join sot01a b(nolock) on a.no_so = b.no_bukti  ";
            sSQL2 += "where (d.NETTO + d.DEBET - d.KREDIT - d.BAYAR) > 0 and d.cust = '" + cust + "' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLnofaktur + " or " + sSQLnorefSI + " or " + sSQLsisa + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY d.faktur DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<FakturBelumLunasPrompt>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<FakturBelumLunasPrompt> pageOrders = new StaticPagedList<FakturBelumLunasPrompt>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturBelumLunasPopUp", pageOrders);
        }
        //end add by nurul 21/4/2020

        public ActionResult SaveBayarPiutang(BayarPiutangViewModel dataVm)
        {

            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            //var piutangBaru = false;

            if (dataVm.Piutang.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listBayarPiutangInDb = ErasoftDbContext.ART03A.OrderBy(p => p.RecNum).ToList();
                //var listBayarPiutangInDb = ErasoftDbContext.ART03A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listBayarPiutangInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ART03A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listBayarPiutangInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Piutang.BUKTI = noOrder;
                dataVm.PiutangDetail.BUKTI = noOrder;

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.ART03A.Add(dataVm.Piutang);
                try
                {
                    ErasoftDbContext.ART03A.Add(dataVm.Piutang);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.ART03A.Where(a => a.BUKTI == dataVm.Piutang.BUKTI).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.BUKTI == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Piutang.BUKTI = noOrder;
                            ErasoftDbContext.ART03A.Add(dataVm.Piutang);
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                //if (dataVm.PiutangDetail.NO == null)
                if (!string.IsNullOrEmpty(dataVm.PiutangDetail.NFAKTUR))
                {
                    //add by nurul 25/10/2019
                    var cekStatusAPI = ErasoftDbContext.ARF01.Where(a => a.CUST == dataVm.Piutang.CUST).SingleOrDefault();
                    var status = false;
                    if (cekStatusAPI != null)
                    {
                        if (cekStatusAPI.STATUS_API == "1")
                        {
                            status = true;
                        }
                    }
                    DateTime? tglref = null;
                    //if (status)
                    //{
                    var cekfaktur = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.PiutangDetail.NFAKTUR).SingleOrDefault();
                    if (cekfaktur.NO_REF != null && cekfaktur.NO_REF != "" && cekfaktur.NO_REF != "-")
                    {
                        var cekSO = ErasoftDbContext.SOT01A.Where(a => a.NO_REFERENSI == cekfaktur.NO_REF).SingleOrDefault();
                        if (cekSO != null)
                        {
                            tglref = cekSO.TGL;
                        }
                    }
                    else if (cekfaktur.NO_SO != null && cekfaktur.NO_SO != "" && cekfaktur.NO_SO != "-")
                    {
                        var cekSO = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == cekfaktur.NO_SO).SingleOrDefault();
                        if (cekSO != null)
                        {
                            tglref = cekSO.TGL;
                        }
                    }
                    //}
                    //else
                    //{
                    //    var getTgl = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.PiutangDetail.NFAKTUR).SingleOrDefault();
                    //    if (getTgl != null)
                    //    {
                    //        tglref = getTgl.TGL;
                    //    }
                    //}
                    dataVm.PiutangDetail.TGL_REF = tglref;
                    //end add by nurul 25/10/2019
                    ErasoftDbContext.ART03B.Add(dataVm.PiutangDetail);
                }
                //else
                //{
                //    piutangBaru = true;
                //}
            }
            else
            {
                dataVm.PiutangDetail.BUKTI = dataVm.Piutang.BUKTI;

                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == dataVm.Piutang.BUKTI);

                var cekListDetailSama = ErasoftDbContext.ART03B.Where(a => a.NFAKTUR.Contains(dataVm.PiutangDetail.NFAKTUR) && a.BUKTI == dataVm.Piutang.BUKTI).ToList();
                if (cekListDetailSama.Count() > 0)
                {
                    return JsonErrorMessage("No. Faktur " + dataVm.PiutangDetail.NFAKTUR + " sudah ada dalam pembayaran ini. Silahkan pilih No. Faktur yang lain!");
                }
                //if (dataVm.PiutangDetail.NO == null)
                if (!string.IsNullOrEmpty(dataVm.PiutangDetail.NFAKTUR))
                {
                    //add by nurul 25/10/2019
                    var cekStatusAPI = ErasoftDbContext.ARF01.Where(a => a.CUST == dataVm.Piutang.CUST).SingleOrDefault();
                    var status = false;
                    if (cekStatusAPI != null)
                    {
                        if (cekStatusAPI.STATUS_API == "1")
                        {
                            status = true;
                        }
                    }
                    DateTime? tglref = null;
                    //if (status)
                    //{
                    var cekfaktur = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.PiutangDetail.NFAKTUR).SingleOrDefault();
                    if (cekfaktur.NO_REF != null && cekfaktur.NO_REF != "" && cekfaktur.NO_REF != "-")
                    {
                        var cekSO = ErasoftDbContext.SOT01A.Where(a => a.NO_REFERENSI == cekfaktur.NO_REF).SingleOrDefault();
                        if (cekSO != null)
                        {
                            tglref = cekSO.TGL;
                        }
                    }
                    else if (cekfaktur.NO_SO != null && cekfaktur.NO_SO != "" && cekfaktur.NO_SO != "-")
                    {
                        var cekSO = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == cekfaktur.NO_SO).SingleOrDefault();
                        if (cekSO != null)
                        {
                            tglref = cekSO.TGL;
                        }
                    }
                    //}
                    //else
                    //{
                    //    var getTgl = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.PiutangDetail.NFAKTUR).SingleOrDefault();
                    //    if (getTgl != null)
                    //    {
                    //        tglref = getTgl.TGL;
                    //    }
                    //}
                    dataVm.PiutangDetail.TGL_REF = tglref;
                    //end add by nurul 25/10/2019

                    ErasoftDbContext.ART03B.Add(dataVm.PiutangDetail);
                    piutangInDb.TPOT = piutangInDb.TPOT + dataVm.PiutangDetail.POT;
                    piutangInDb.TBAYAR = piutangInDb.TBAYAR + dataVm.PiutangDetail.BAYAR;
                    //add by nuurl 6/4/2020
                    piutangInDb.TLEBIH_BAYAR = piutangInDb.TLEBIH_BAYAR + dataVm.PiutangDetail.LEBIH_BAYAR;
                    //end add by nurul 6/4/2020
                }
                //else
                //{
                //    //    var detPiutang = ErasoftDbContext.ART03B.Where(p => p.BUKTI == dataVm.Piutang.BUKTI && p.NO == dataVm.PiutangDetail.NO).Single();
                //    //    var oldRecordPot = detPiutang.POT;
                //    //    var oldRecordBayar = detPiutang.BAYAR;

                //    //    detPiutang.POT = dataVm.PiutangDetail.POT;
                //    //    detPiutang.BAYAR = dataVm.PiutangDetail.BAYAR;

                //    //    piutangInDb.TPOT = piutangInDb.TPOT + dataVm.PiutangDetail.POT - oldRecordPot;
                //    //    piutangInDb.TBAYAR = piutangInDb.TBAYAR + dataVm.PiutangDetail.BAYAR - oldRecordBayar;

                //    //}

                //    //add by nurul 10/10/2018
                //    //var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == dataVm.Piutang.BUKTI);
                //    var detailPiutang = ErasoftDbContext.ART03B.Where(p => p.BUKTI == piutangInDb.BUKTI).ToList();
                //    if (detailPiutang.Count == 0)
                //    {
                //        piutangBaru = true;
                //    }
                //    //else
                //    //{
                //    //    piutangInDb.TPOT = piutangInDb.TPOT + dataVm.PiutangDetail.POT;
                //    //    piutangInDb.TBAYAR = piutangInDb.TBAYAR + dataVm.PiutangDetail.BAYAR;
                //}

                //end add
            }

            ErasoftDbContext.SaveChanges();

            if (dataVm.bayarPiutang > 0)
            {
                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == dataVm.Piutang.BUKTI);
                if (piutangInDb != null)
                {
                    //delete detail
                    var oldDetail = ErasoftDbContext.ART03B.Where(m => m.BUKTI == piutangInDb.BUKTI).ToList();
                    if (oldDetail.Count > 0)
                    {
                        ErasoftDbContext.ART03B.Where(m => m.BUKTI == piutangInDb.BUKTI).Delete();
                        piutangInDb.TBAYAR = 0;
                        ErasoftDbContext.SaveChanges();
                    }

                    var listFaktur = ErasoftDbContext.ART01D.Where(p => p.CUST == dataVm.Piutang.CUST
                                                                && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0
                                                                //&& p.TGL <= dataVm.sdTgl && p.TGL >= dataVm.drTgl
                                                                ).OrderBy(p => p.TGL).ToList();

                    if (listFaktur.Count > 0)
                    {
                        var totalSisa = ErasoftDbContext.ART01D.Where(p => p.CUST == dataVm.Piutang.CUST && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                            .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                        if (totalSisa >= dataVm.bayarPiutang)
                        {
                            foreach (var faktur in listFaktur)
                            {
                                var detailPembayaran = new ART03B();
                                //add by nurul 28/10/2019
                                var getFaktur = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == faktur.FAKTUR).SingleOrDefault();
                                if (getFaktur != null)
                                {
                                    if (getFaktur.NO_REF != null && getFaktur.NO_REF != "" && getFaktur.NO_REF != "-")
                                    {
                                        detailPembayaran.NOREF = getFaktur.NO_REF;
                                        var getso = ErasoftDbContext.SOT01A.Where(a => a.NO_REFERENSI == getFaktur.NO_REF).SingleOrDefault();
                                        if (getso != null)
                                        {
                                            detailPembayaran.TGL_REF = getso.TGL;
                                        }
                                    }
                                    else if (getFaktur.NO_SO != null && getFaktur.NO_SO != "" && getFaktur.NO_SO != "-")
                                    {
                                        detailPembayaran.NOREF = getFaktur.NO_SO;
                                        var getso = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == getFaktur.NO_SO).SingleOrDefault();
                                        if (getso != null)
                                        {
                                            detailPembayaran.TGL_REF = getso.TGL;
                                        }
                                    }
                                    else
                                    {
                                        detailPembayaran.TGL_REF = getFaktur.TGL;
                                    }
                                }
                                //end add by nurul 28/10/2019
                                detailPembayaran.BUKTI = dataVm.Piutang.BUKTI;
                                detailPembayaran.NFAKTUR = faktur.FAKTUR;
                                double sisa = faktur.NETTO.Value - faktur.BAYAR.Value - faktur.KREDIT.Value + faktur.DEBET.Value;
                                detailPembayaran.SISA = sisa;
                                detailPembayaran.BAYAR = dataVm.bayarPiutang >= sisa ? sisa : dataVm.bayarPiutang;
                                detailPembayaran.POT = 0;
                                detailPembayaran.USERNAME = "AUTOLOAD_FAKTUR";
                                try
                                {
                                    ErasoftDbContext.ART03B.Add(detailPembayaran);

                                    //piutangInDb.TPOT = piutangInDb.TPOT + dataVm.PiutangDetail.POT;
                                    piutangInDb.TBAYAR = piutangInDb.TBAYAR + detailPembayaran.BAYAR;

                                    ErasoftDbContext.SaveChanges();

                                    dataVm.bayarPiutang = dataVm.bayarPiutang - detailPembayaran.BAYAR;
                                    if (dataVm.bayarPiutang == 0)
                                        break;
                                }
                                catch (Exception ex)
                                {
                                    return JsonErrorMessage(ex.Message);
                                }
                            }
                        }
                        else
                        {
                            return JsonErrorMessage("Anda tidak dapat melakukan pembayaran dengan Nilai Rp." + String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", dataVm.bayarPiutang) + "\nNilai sisa faktur untuk customer ini adalah Rp." + String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", totalSisa));
                        }

                    }
                    else
                    {
                        return JsonErrorMessage("Tidak ditemukan Faktur yang belum lunas");
                    }
                }
                else
                {
                    return JsonErrorMessage("Pembayaran Piutan tidak ditemukan.");
                }

            }

            ModelState.Clear();

            var vm = new BayarPiutangViewModel()
            {
                //Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == dataVm.PiutangDetail.BUKTI),
                Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == dataVm.Piutang.BUKTI),
                ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == dataVm.Piutang.BUKTI).ToList(),
                //ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                //ListSisa = ErasoftDbContext.ART01D.Where(s => s.CUST == dataVm.Piutang.CUST).ToList()
            };

            //add by nurul 21/4/2020
            //var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == vm.Piutang.CUST && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
            //foreach (var faktur in listFakturBelumLunas)
            //{

            //    vm.listFakturBelumLunas.Add(new FakturJson()
            //    {
            //        RecNum = faktur.RecNum,
            //        NO_BUKTI = faktur.FAKTUR,
            //        Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
            //    });
            //}
            //add by nurul 21/4/2020
            var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + vm.Piutang.BUKTI + "')").ToList();
            vm.ListOngkir = getOngkir;
            return PartialView("DetailBayarPiutangPartial", vm);
        }

        public ActionResult SaveEditDetail(string bukti, string no, double bayar, double pot)
        {
            var piutangInDB = ErasoftDbContext.ART03A.Where(a => a.BUKTI == bukti).SingleOrDefault();
            if (piutangInDB != null)
            {
                var sNmr = no.Split('-');
                int iNmr = Convert.ToInt32(sNmr[sNmr.Length - 1]);
                var detPiutang = ErasoftDbContext.ART03B.Where(b => b.BUKTI == bukti && b.NO == iNmr).SingleOrDefault();
                if (detPiutang != null)
                {
                    var oldRecordPot = detPiutang.POT;
                    var oldRecordBayar = detPiutang.BAYAR;

                    detPiutang.POT = pot;
                    detPiutang.BAYAR = bayar;

                    piutangInDB.TPOT = piutangInDB.TPOT + pot - oldRecordPot;
                    piutangInDB.TBAYAR = piutangInDB.TBAYAR + bayar - oldRecordBayar;

                    ErasoftDbContext.SaveChanges();

                    var vm = new BayarPiutangViewModel()
                    {
                        Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti),
                        ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList(),
                        ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                        ListSisa = ErasoftDbContext.ART01D.Where(s => s.CUST == piutangInDB.CUST).ToList()
                    };

                    //add by nurul 21/4/2020
                    //var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == vm.Piutang.CUST && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
                    //foreach (var faktur in listFakturBelumLunas)
                    //{

                    //    vm.listFakturBelumLunas.Add(new FakturJson()
                    //    {
                    //        RecNum = faktur.RecNum,
                    //        NO_BUKTI = faktur.FAKTUR,
                    //        Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                    //    });
                    //}
                    //add by nurul 21/4/2020

                    return PartialView("DetailBayarPiutangPartial", vm);
                }
                else
                {
                    return JsonErrorMessage("Piutang detail not found");
                }
            }
            return JsonErrorMessage("Piutang not found");
        }

        [HttpPost]
        public ActionResult UpdateBayarPiutang(UpdateData dataUpdate)
        {
            var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == dataUpdate.OrderId);
            piutangInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        public ActionResult EditBayarPiutang(int? orderId)
        {
            try
            {
                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.RecNum == orderId);
                var cekerr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => piutangInDb.BUKTI == a.VARIABLE_1).Count();
                var adaErr = false;
                if (cekerr > 0)
                {
                    adaErr = true;
                }
                var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a where no_bukti in (select NFAKTUR from art03b where bukti='" + piutangInDb.BUKTI + "')").ToList();
                var vm = new BayarPiutangViewModel()
                {
                    Piutang = piutangInDb,
                    //ListPiutang = ErasoftDbContext.ART03A.ToList(),
                    ListPiutangDetail = ErasoftDbContext.ART03B.Where(pd => pd.BUKTI == piutangInDb.BUKTI).ToList(),
                    //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList()
                    adaError = adaErr,
                    ListOngkir = getOngkir
                };

                //add by nurul 21/4/2020
                //var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == piutangInDb.CUST && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
                //foreach (var faktur in listFakturBelumLunas)
                //{

                //    vm.listFakturBelumLunas.Add(new FakturJson()
                //    {
                //        RecNum = faktur.RecNum,
                //        NO_BUKTI = faktur.FAKTUR,
                //        Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                //    });
                //}
                //add by nurul 21/4/2020

                return PartialView("DetailBayarPiutangPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteBayarPiutang(int? orderId)
        {
            var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.RecNum == orderId);

            ErasoftDbContext.ART03A.Remove(piutangInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new BayarPiutangViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART03A.ToList(),
                //ListPiutangDetail = ErasoftDbContext.ART03B.ToList()
                Errors = null
            };

            return Json(piutangInDb, JsonRequestBehavior.AllowGet);

            //return PartialView("TableBayarPiutangPartial", vm);
        }

        [HttpGet]
        public ActionResult DeleteDetailBayarPiutang(int noUrut)
        {
            try
            {
                var detailPiutangInDb = ErasoftDbContext.ART03B.Single(b => b.NO == noUrut);
                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == detailPiutangInDb.BUKTI);

                piutangInDb.TPOT -= detailPiutangInDb.POT;
                piutangInDb.TBAYAR -= detailPiutangInDb.BAYAR;
                piutangInDb.TLEBIH_BAYAR -= detailPiutangInDb.LEBIH_BAYAR;
                ErasoftDbContext.ART03B.Remove(detailPiutangInDb);
                ErasoftDbContext.SaveChanges();

                var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a where no_bukti in (select NFAKTUR from art03b where bukti='" + piutangInDb.BUKTI + "')").ToList();

                var vm = new BayarPiutangViewModel()
                {
                    Piutang = ErasoftDbContext.ART03A.Single(p => p.BUKTI == piutangInDb.BUKTI),
                    ListPiutang = ErasoftDbContext.ART03A.ToList(),
                    ListPiutangDetail = ErasoftDbContext.ART03B.Where(pd => pd.BUKTI == piutangInDb.BUKTI).ToList(),
                    ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList(),
                    ListOngkir = getOngkir
                };

                //add by nurul 21/4/2020
                //var listFakturBelumLunas = ErasoftDbContext.ART01D.Where(f => f.CUST == piutangInDb.CUST && (f.NETTO + f.DEBET - f.KREDIT - f.BAYAR) > 0).ToList();
                //foreach (var faktur in listFakturBelumLunas)
                //{

                //    vm.listFakturBelumLunas.Add(new FakturJson()
                //    {
                //        RecNum = faktur.RecNum,
                //        NO_BUKTI = faktur.FAKTUR,
                //        Sisa = (faktur.NETTO + faktur.DEBET - faktur.KREDIT - faktur.BAYAR) ?? 0,
                //    });
                //}
                //add by nurul 21/4/2020

                return PartialView("DetailBayarPiutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        //public ActionResult RefreshTableBayarPiutang1()
        //{
        //    var vm = new BayarPiutangViewModel()
        //    {
        //        ListPiutang = ErasoftDbContext.ART03A.ToList()
        //    };

        //    return PartialView("TableBayarPiutangPartial", vm);
        //}
        public ActionResult RefreshTableBayarPiutang1(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLpot = "";
            string sSQLbayar = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( BUKTI like '%" + getkata[i] + "%' )";
                            sSQLpot += " ( TPOT like '%" + getkata[i] + "%' )";
                            sSQLbayar += " ( TBAYAR like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( (TPOT + TBAYAR) like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( BUKTI like '%" + getkata[i] + "%'";
                                sSQLpot += " ( TPOT like '%" + getkata[i] + "%'";
                                sSQLbayar += "( TBAYAR like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( (TPOT + TBAYAR) like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' )";
                                sSQLpot += " and TPOT like '%" + getkata[i] + "%' )";
                                sSQLbayar += " and TBAYAR like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and (TPOT + TBAYAR) like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' ";
                                sSQLpot += " and TPOT like '%" + getkata[i] + "%' ";
                                sSQLbayar += " and TBAYAR like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and (TPOT + TBAYAR) like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM ART03A ";
            if (search != "")
            {
                //sSQL2 += "WHERE (BUKTI LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLpot + " or " + sSQLbayar + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, BUKTI DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArt03a = ErasoftDbContext.Database.SqlQuery<ART03A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<ART03A> pageOrders = new StaticPagedList<ART03A>(ListArt03a, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableBayarPiutangPartial", pageOrders);
        }

        public ActionResult RefreshBayarPiutangForm()
        {
            try
            {
                var vm = new BayarPiutangViewModel();

                return PartialView("DetailBayarPiutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        // =============================================== Bagian Pembayaran Piutang (END)

        // =============================================== Bagian Pembayaran Hutang (START)

        [Route("manage/pembelian/hutang")]
        public ActionResult PembayaranHutang()
        {
            var vm = new BayarHutangViewModel()
            {
                //ListHutang = ErasoftDbContext.APT03A.ToList(),
                //ListHutangDetail = ErasoftDbContext.APT03B.ToList(),
                //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList()
            };

            return View(vm);
        }

        [HttpGet]
        public ActionResult GetInvoiceBelumLunas(string noSupp)
        {
            var listInvoiceBelumLunas = ErasoftDbContext.APT01D.Where(f => f.SUPP == noSupp && (f.NETTO - f.DEBET + f.KREDIT - f.BAYAR) > 0).ToList();
            var listKodeInvoice = new List<InvoiceJson>();

            foreach (var invoice in listInvoiceBelumLunas)
            {
                listKodeInvoice.Add(new InvoiceJson()
                {
                    RecNum = invoice.RECNUM,
                    INV = invoice.INV,
                    Sisa = (invoice.NETTO - invoice.DEBET + invoice.KREDIT - invoice.BAYAR)
                });
            }

            return Json(listKodeInvoice, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveBayarHutang(BayarHutangViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Hutang.RecNum == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listBayarHutangInDb = ErasoftDbContext.APT03A.OrderBy(p => p.RecNum).ToList();
                //var listBayarHutangInDb = ErasoftDbContext.APT03A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                //var digitAkhir = "";
                //var noOrder = "";

                //if (listBayarHutangInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noOrder = $"DR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (APT03A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listBayarHutangInDb.RecNum;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noOrder = $"DR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "DR", "APT03A", "BUKTI");
                var noOrder = "DR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Hutang.BUKTI = noOrder;
                dataVm.HutangDetail.BUKTI = noOrder;


                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.APT03A.Add(dataVm.Hutang);
                try
                {
                    ErasoftDbContext.APT03A.Add(dataVm.Hutang);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.APT03A.Where(a => a.BUKTI == dataVm.Hutang.BUKTI).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.BUKTI == noOrder)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noOrder = "DR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Hutang.BUKTI = noOrder;
                            ErasoftDbContext.APT03A.Add(dataVm.Hutang);
                            dataVm.HutangDetail.BUKTI = noOrder;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.HutangDetail.NO == null)
                {
                    ErasoftDbContext.APT03B.Add(dataVm.HutangDetail);
                }
            }
            else
            {
                dataVm.HutangDetail.BUKTI = dataVm.Hutang.BUKTI;

                if (dataVm.HutangDetail.NO == null)
                {
                    ErasoftDbContext.APT03B.Add(dataVm.HutangDetail);
                }

                var hutangInDb = ErasoftDbContext.APT03A.Single(p => p.BUKTI == dataVm.Hutang.BUKTI);

                hutangInDb.TPOT = hutangInDb.TPOT + dataVm.HutangDetail.POT;
                hutangInDb.TBAYAR = hutangInDb.TBAYAR + dataVm.HutangDetail.BAYAR;

            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var vm = new BayarHutangViewModel()
            {
                Hutang = ErasoftDbContext.APT03A.Single(p => p.BUKTI == dataVm.HutangDetail.BUKTI),
                ListHutangDetail = ErasoftDbContext.APT03B.Where(pd => pd.BUKTI == dataVm.Hutang.BUKTI).ToList(),
                //ListFaktur = ErasoftDbContext.SIT01A.ToList(),
                //ListSisa = ErasoftDbContext.APT01D.Where(s => s.SUPP == dataVm.Hutang.SUPP).ToList()
            };

            return PartialView("DetailBayarHutangPartial", vm);
        }

        [HttpPost]
        public ActionResult UpdateBayarHutang(UpdateData dataUpdate)
        {
            var hutangInDb = ErasoftDbContext.APT03A.Single(p => p.BUKTI == dataUpdate.OrderId);
            hutangInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        public ActionResult EditBayarHutang(int? orderId)
        {
            try
            {
                var hutangInDb = ErasoftDbContext.APT03A.Single(p => p.RecNum == orderId);

                var vm = new BayarHutangViewModel()
                {
                    Hutang = hutangInDb,
                    //ListHutang = ErasoftDbContext.APT03A.ToList(),
                    ListHutangDetail = ErasoftDbContext.APT03B.Where(pd => pd.BUKTI == hutangInDb.BUKTI).ToList(),
                    //ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList()
                };

                return PartialView("DetailBayarHutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteBayarHutang(int? orderId)
        {
            var hutangInDb = ErasoftDbContext.APT03A.Single(p => p.RecNum == orderId);

            ErasoftDbContext.APT03A.Remove(hutangInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new BayarHutangViewModel()
            {
                //ListHutang = ErasoftDbContext.APT03A.ToList(),
                //ListHutangDetail = ErasoftDbContext.APT03B.ToList()
                Errors = null
            };

            return Json(hutangInDb, JsonRequestBehavior.AllowGet);

            //return PartialView("TableBayarHutangPartial", vm);
        }

        [HttpGet]
        public ActionResult DeleteDetailBayarHutang(int noUrut)
        {
            try
            {
                var detailHutangInDb = ErasoftDbContext.APT03B.Single(b => b.NO == noUrut);
                var hutangInDb = ErasoftDbContext.APT03A.Single(p => p.BUKTI == detailHutangInDb.BUKTI);

                hutangInDb.TPOT -= detailHutangInDb.POT;
                hutangInDb.TBAYAR -= detailHutangInDb.BAYAR;

                ErasoftDbContext.APT03B.Remove(detailHutangInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new BayarHutangViewModel()
                {
                    Hutang = ErasoftDbContext.APT03A.Single(p => p.BUKTI == hutangInDb.BUKTI),
                    ListHutang = ErasoftDbContext.APT03A.ToList(),
                    ListHutangDetail = ErasoftDbContext.APT03B.Where(pd => pd.BUKTI == hutangInDb.BUKTI).ToList(),
                    ListFaktur = ErasoftDbContext.SIT01A.Where(f => f.JENIS_FORM == "2").ToList()
                };

                return PartialView("DetailBayarHutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        //public ActionResult RefreshTableBayarHutang1()
        //{
        //    var vm = new BayarHutangViewModel()
        //    {
        //        ListHutang = ErasoftDbContext.APT03A.ToList()
        //    };

        //    return PartialView("TableBayarHutangPartial", vm);
        //}
        public ActionResult RefreshTableBayarHutang1(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLpot = "";
            string sSQLbayar = "";
            string sSQLnetto = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( BUKTI like '%" + getkata[i] + "%' )";
                            sSQLpot += " ( TPOT like '%" + getkata[i] + "%' )";
                            sSQLbayar += " ( TBAYAR like '%" + getkata[i] + "%' )";
                            sSQLnetto += " ( (TPOT + TBAYAR) like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( BUKTI like '%" + getkata[i] + "%'";
                                sSQLpot += " ( TPOT like '%" + getkata[i] + "%'";
                                sSQLbayar += "( TBAYAR like '%" + getkata[i] + "%'";
                                sSQLnetto += " ( (TPOT + TBAYAR) like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' )";
                                sSQLpot += " and TPOT like '%" + getkata[i] + "%' )";
                                sSQLbayar += " and TBAYAR like '%" + getkata[i] + "%' )";
                                sSQLnetto += " and (TPOT + TBAYAR) like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and BUKTI like '%" + getkata[i] + "%' ";
                                sSQLpot += " and TPOT like '%" + getkata[i] + "%' ";
                                sSQLbayar += " and TBAYAR like '%" + getkata[i] + "%' ";
                                sSQLnetto += " and (TPOT + TBAYAR) like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM APT03A ";
            if (search != "")
            {
                //sSQL2 += "WHERE (BUKTI LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLpot + " or " + sSQLbayar + " or " + sSQLnetto + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, BUKTI DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArt01a = ErasoftDbContext.Database.SqlQuery<APT03A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<APT03A> pageOrders = new StaticPagedList<APT03A>(ListArt01a, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableBayarHutangPartial", pageOrders);
        }

        public ActionResult RefreshBayarHutangForm()
        {
            try
            {
                var vm = new BayarHutangViewModel();

                return PartialView("DetailBayarHutangPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        // =============================================== Bagian Pembayaran Hutang (END)

        // =============================================== Bagian Gudang (START)

        [Route("manage/master/gudang")]
        public ActionResult Gudang()
        {
            var vm = new GudangViewModel()
            {
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return View(vm);
        }

        //add by nurul 7/5/2019
        public ActionResult RefreshTableGudang(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLnama += " ( Nama_Gudang like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( Kode_Gudang like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( Nama_Gudang like '%" + getkata[i] + "%'";
                                sSQLkode += " ( Kode_Gudang like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and Nama_Gudang like '%" + getkata[i] + "%' )";
                                sSQLkode += " and Kode_Gudang like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and Nama_Gudang like '%" + getkata[i] + "%' ";
                                sSQLkode += " and Kode_Gudang like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //var stf18 = (from p in ErasoftDbContext.STF18
            //             where (p.Nama_Gudang.Contains(search) || p.Kode_Gudang.Contains(search))
            //             orderby p.Kode_Gudang
            //             select p);

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = stf18.Count();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //var ListStf18 = stf18.Skip(pagenumber * 10).Take(10).ToList();

            //IPagedList<STF18> pageOrders = new StaticPagedList<STF18>(ListStf18, pagenumber + 1, 10, totalCount);
            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF18 ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY Kode_Gudang ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStf18 = ErasoftDbContext.Database.SqlQuery<STF18>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 
            IPagedList<STF18> pageOrders = new StaticPagedList<STF18>(ListStf18, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableGudangPartial", pageOrders);
        }
        //public class mdlPesanan
        //{
        //    public string NOSO { get; set; }
        //    public DateTime? TGL { get; set; }
        //    public string MARKET { get; set; }
        //    public string PEMBELI { get; set; }
        //    public double TOTAL { get; set; }
        //    public string STATUS { get; set; }
        //}
        //end add by nurul 7/5/2019

        [HttpPost]
        public ActionResult SaveGudang(GudangViewModel dataGudang)
        {
            if (!ModelState.IsValid)
            {
                dataGudang.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataGudang, JsonRequestBehavior.AllowGet);
            }

            if (dataGudang.Gudang.ID == null)
            {
                var checkData = ErasoftDbContext.STF18.SingleOrDefault(k => k.Kode_Gudang == dataGudang.Gudang.Kode_Gudang);

                if (checkData == null)
                {
                    ErasoftDbContext.STF18.Add(dataGudang.Gudang);
                }
                else
                {
                    dataGudang.Errors.Add($@"Gudang dengan kode {dataGudang.Gudang.Kode_Gudang} sudah dipakai oleh Anda / orang lain! Coba kode yang lain!");
                    return Json(dataGudang, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //var katInDb = ErasoftDbContext.STF18.Single(k => k.Kode_Gudang == dataGudang.Gudang.Kode_Gudang);
                var katInDb = ErasoftDbContext.STF18.Single(k => k.ID == dataGudang.Gudang.ID);

                katInDb.Nama_Gudang = dataGudang.Gudang.Nama_Gudang;
                katInDb.KD_HARGA_JUAL = dataGudang.Gudang.KD_HARGA_JUAL;
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //var partialVm = new GudangViewModel()
            //{
            //    ListGudang = ErasoftDbContext.STF18.ToList()
            //};

            //return PartialView("TableGudangPartial", partialVm);
            dataGudang.Errors = null;
            return Json(dataGudang, JsonRequestBehavior.AllowGet);
        }

        public ActionResult EditGudang(int? gudangId)
        {
            try
            {
                var vm = new GudangViewModel()
                {
                    Gudang = ErasoftDbContext.STF18.Single(k => k.ID == gudangId),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return Json(vm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteGudang(int? gudangId)
        {
            var gudangInDb = ErasoftDbContext.STF18.Single(k => k.ID == gudangId);

            //ADD BY NURUL 27/7/2018
            var vmError = new StokViewModel() { };

            var cekFaktur = ErasoftDbContext.SIT01B.Count(k => k.GUDANG == gudangInDb.Kode_Gudang);
            var cekPembelian = ErasoftDbContext.PBT01B.Count(k => k.GD == gudangInDb.Kode_Gudang);
            var cekTransaksi = ErasoftDbContext.STT01B.Count(k => k.Dr_Gd == gudangInDb.Kode_Gudang || k.Ke_Gd == gudangInDb.Kode_Gudang);
            var cekPesanan = ErasoftDbContext.SOT01B.Count(k => k.LOKASI == gudangInDb.Kode_Gudang);

            if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0)
            {
                vmError.Errors.Add("Gudang sudah dipakai di transaksi !");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            //END ADD

            ErasoftDbContext.STF18.Remove(gudangInDb);
            ErasoftDbContext.SaveChanges();

            var partialVm = new GudangViewModel()
            {
                //ListGudang = ErasoftDbContext.STF18.ToList()
                Errors = null
            };

            //return PartialView("TableGudangPartial", partialVm);
            return Json(partialVm, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Gudang (END)

        // =============================================== Bagian Transaksi Masuk Barang (START)

        [Route("manage/persediaan/masuk")]
        public ActionResult TransaksiMasukMenu()
        {
            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return View(vm);
        }

        public ActionResult SaveTransaksiMasuk(StokViewModel dataVm, string keterangan)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Stok.ID == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listStokInDb = ErasoftDbContext.STT01A.OrderBy(p => p.ID).ToList();
                //var listStokInDb = ErasoftDbContext.STT01A.OrderByDescending(p => p.ID).FirstOrDefault();
                //var digitAkhir = "";
                //var noStok = "";

                //if (listStokInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noStok = $"IN{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (STT01A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listStokInDb.ID;
                //    var lastKode = listStokInDb.Nobuk;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noStok = $"IN{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                //    if (noStok == lastKode)
                //    {
                //        lastRecNum++;
                //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //        noStok = $"IN{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    }
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "IN", "STT01A", "Nobuk");
                var noStok = "IN" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Stok.Nobuk = noStok;
                dataVm.Stok.STATUS_LOADING = "0";
                dataVm.BarangStok.Nobuk = noStok;

                //add by nurul 27/11/2019, add tgl last edit
                dataVm.Stok.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //add by fauzi 14 Juli 2020
                dataVm.Stok.Ket = keterangan;
                //end add by fauzi 14 Juli 2020


                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.STT01A.Add(dataVm.Stok);
                try
                {
                    ErasoftDbContext.STT01A.Add(dataVm.Stok);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.STT01A.Where(a => a.Nobuk == dataVm.Stok.Nobuk).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.Nobuk == noStok)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noStok = "IN" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Stok.Nobuk = noStok;
                            ErasoftDbContext.STT01A.Add(dataVm.Stok);
                            dataVm.BarangStok.Nobuk = noStok;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0 || dataVm.BarangStok.Harga == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);

                    //end change 
                }
            }
            else
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk);

                stokInDb.Tgl = dataVm.Stok.Tgl;
                dataVm.BarangStok.Nobuk = dataVm.Stok.Nobuk;

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //add by fauzi 14 Juli 2020
                stokInDb.Ket = keterangan;
                //end add by fauzi 14 Juli 2020

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0 || dataVm.BarangStok.Harga == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);

                    //end change
                }
            }

            #region add by calvin 14 juni 2018, agar field yg penting di stt01b tidak null
            dataVm.BarangStok.Dr_Gd = "";
            dataVm.BarangStok.WO = "";
            dataVm.BarangStok.Rak = "";
            dataVm.BarangStok.JTran = "M";
            dataVm.BarangStok.KLINK = "";
            dataVm.BarangStok.NO_WO = "";
            dataVm.BarangStok.KET = "";
            dataVm.BarangStok.BRG_ORIGINAL = "";
            dataVm.BarangStok.QTY3 = 0;
            dataVm.BarangStok.BUKTI_DS = "";
            dataVm.BarangStok.BUKTI_REFF = "";
            #endregion

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by nurul 8/7/2019, tuning
            var ListMasukDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == dataVm.Stok.Nobuk).ToList();
            var listBarangInMasukDetail = ListMasukDetail.Select(p => p.Kobar).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new StokViewModel()
            {
                Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk),
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == dataVm.Stok.Nobuk).ToList(),
                ListBarangStok = ListMasukDetail,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInMasukDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            //add by Tri, panggil api marketplace to change stock
            List<string> listBrg = new List<string>();
            //foreach (var brg in vm.ListBarang)
            //{
            listBrg.Add(dataVm.BarangStok.Kobar);
            //}
            updateStockMarketPlace(listBrg, "[INS_IN][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by Tri, panggil api marketplace to change stock

            return PartialView("BarangTransaksiMasukPartial", vm);
        }

        //public ActionResult RefreshTableTransaksiMasuk()
        //{
        //    var vm = new StokViewModel()
        //    {
        //        ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList()
        //    };

        //    return PartialView("TableTransaksiMasukPartial", vm);
        //}
        public ActionResult RefreshTableTransaksiMasuk(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( NOBUK like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( NOBUK like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            //var stok = ErasoftDbContext.STT01A.Where(s => s.Nobuk.Substring(0, 2).Equals("IN") && s.STATUS_LOADING == "0" && s.MK == "M").ToList();
            //var Stt01a = (from p in ErasoftDbContext.STT01A
            //              where (p.Nobuk.Substring(0, 2).Equals("IN") && p.JAM == 1 && p.STATUS_LOADING == "0") &&
            //              (p.Nobuk.Contains(search))
            //              orderby p.Tgl descending, p.Nobuk descending
            //              select p);
            //var ListStt01a = Stt01a.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = Stt01a.Count();
            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STT01A ";
            sSQL2 += "WHERE (NOBUK LIKE '%IN%' or NOBUK like '%OM%') AND STATUS_LOADING = '0' AND MK = 'M' ";
            if (search != "")
            {
                //sSQL2 += "AND (NOBUK LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt01a = ErasoftDbContext.Database.SqlQuery<STT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount.JUMLAH);

            //IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount);
            return PartialView("TableTransaksiMasukPartial", pageOrders);
        }

        public ActionResult RefreshTransaksiMasukForm()
        {
            try
            {
                var stokInDb = new STT01A();

                var vm = new StokViewModel()
                {
                    //Stok = stokInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(pd => 0 == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(pd => 0 == 1).ToList()
                };
                //var vm = new StokViewModel()
                //{
                //    ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //    ListGudang = ErasoftDbContext.STF18.ToList()
                //};

                return PartialView("BarangTransaksiMasukPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditTransaksiMasuk(int? stokId)
        {
            try
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);

                //add by nurul 8/7/2019, tuning
                var ListStokDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == stokInDb.Nobuk).ToList();
                var listBarangInStokDetail = ListStokDetail.Select(p => p.Kobar).ToList();
                //end add by nurul 8/7/2019, tuning
                var vm = new StokViewModel()
                {
                    Stok = stokInDb,
                    //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                    //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    ListBarangStok = ListStokDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInStokDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    //ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangTransaksiMasukPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteTransaksiMasuk(int? stokId)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);
            List<string> brg = new List<string>();//add by Tri, 21 agustus 2018
            //add by calvin, 22 juni 2018 validasi QOH
            var stokDetailInDb = ErasoftDbContext.STT01B.Where(b => b.Nobuk == stokInDb.Nobuk).ToList();
            foreach (var item in stokDetailInDb)
            {
                var qtyOnHand = GetQOHSTF08A(item.Kobar, item.Ke_Gd);

                if (qtyOnHand - item.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty barang ( " + item.Kobar + " ) di gudang " + item.Ke_Gd + " sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                brg.Add(item.Kobar);//add by Tri, 21 agustus 2018
                //add by nurul 13/9/2018
                ErasoftDbContext.STT01B.Remove(item);
                ErasoftDbContext.SaveChanges();
                //end add by nurul 13/9/2018
            }
            //end add by calvin, validasi QOH

            ErasoftDbContext.STT01A.Remove(stokInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList()
                Errors = null
            };

            //add by Tri, panggil api marketplace to change stock            
            updateStockMarketPlace(brg, "[DEL_IN_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by Tri, panggil api marketplace to change stock

            //return PartialView("TableTransaksiMasukPartial", vm);
            return Json(stokInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangTransaksiMasuk(int noUrut)
        {
            try
            {
                var barangStokInDb = ErasoftDbContext.STT01B.Single(b => b.No == noUrut);
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == barangStokInDb.Nobuk);

                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(barangStokInDb.Kobar, barangStokInDb.Ke_Gd);

                if (qtyOnHand - barangStokInDb.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa delete, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                //add by Tri, panggil api marketplace to change stock
                List<string> brg = new List<string>();
                brg.Add(barangStokInDb.Kobar);
                //end add by Tri, panggil api marketplace to change stock

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.STT01B.Remove(barangStokInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new StokViewModel()
                {
                    Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == stokInDb.Nobuk),
                    ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                //add by Tri, panggil api marketplace to change stock
                updateStockMarketPlace(brg, "[DEL_IN_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by Tri, panggil api marketplace to change stock

                return PartialView("BarangTransaksiMasukPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateTransaksiMasuk(UpdateData dataUpdate)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataUpdate.NoBuktiStok);
            //remark by nurul 25/9/2018
            //stokInDb.TglInput = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            stokInDb.Tgl = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            //add by nurul 27/11/2019, add tgl last edit
            stokInDb.TglInput = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== Bagian Transaksi Masuk Barang (END)

        public void updateStockMarketPlace(List<string> listBrg, string ConnId)
        {
            // remark by fauzi 18 desember 2019
            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}

            //if (!doAPI)
            //{
            //    ConnId = "[PENDING]" + ConnId;
            //}
            // remark by fauzi 18 desember 2019

            ////add by nurul 28/8/2020, handle cek stok brg multi sku  --remark jdnya pake yg d stok controller 
            //var list_brg = "";
            //foreach (var brg in listBrg)
            //{
            //    if (list_brg != "")
            //    {
            //        list_brg += ",";
            //    }

            //    list_brg += "'" + brg + "'";
            //}
            ////var sSQL = "SELECT (CASE WHEN [TYPE]='6' THEN BRG_NON_OS ELSE BRG END) BRG_NEW  FROM STF02 WHERE BRG IN (" + list_brg + ") ";
            ////var sSQL = "SELECT BRG FROM STF02 WHERE BRG IN (" + list_brg + ") OR BRG IN (SELECT (CASE WHEN [TYPE]='6' THEN BRG_NON_OS ELSE BRG END) BRG_NEW  FROM STF02 WHERE BRG IN (" + list_brg + "))";
            //var sSQL = "SELECT BRG FROM STF02 WHERE BRG IN (" + list_brg + ") OR BRG IN (SELECT (CASE WHEN [TYPE]='6' THEN BRG_NON_OS ELSE BRG END) BRG_NEW  FROM STF02 WHERE BRG IN (" + list_brg + ")) OR BRG IN (SELECT BRG FROM STF02 WHERE BRG_NON_OS IN (SELECT (CASE WHEN [TYPE]='6' THEN BRG_NON_OS ELSE BRG END) BRG_NEW  FROM STF02 WHERE BRG IN (" + list_brg + ")))";
            //var ListBrgProcess = ErasoftDbContext.Database.SqlQuery<string>(sSQL).ToList();
            ////end add by nurul 28/8/2020, handle cek stok brg multi sku  --remark jdnya pake yg d stok controller

            string sSQLValues = "";

            foreach (var item in listBrg)
            //foreach (var item in ListBrgProcess)
            {
                sSQLValues = sSQLValues + "('" + item + "', '" + ConnId + "'),";
            }

            if (sSQLValues != "")
            {
                sSQLValues = sSQLValues.Substring(0, sSQLValues.Length - 1);
                EDB.ExecuteSQL("MOConnectionString", System.Data.CommandType.Text, "INSERT INTO TEMP_ALL_MP_ORDER_ITEM (BRG, CONN_ID) VALUES " + sSQLValues);
                AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                //change by Tri 26 Nov 2019, gunakan usernamelogin
                //string username = sessionData.Account != null ? sessionData.Account.Username : sessionData.User.Username;

                //new StokControllerJob().updateStockMarketPlace(ConnId, dbPathEra, username);
                new StokControllerJob().updateStockMarketPlace(ConnId, dbPathEra, usernameLogin);
                //end change by Tri 26 Nov 2019, gunakan usernamelogin

            }

        }

        // =============================================== Bagian Transaksi Keluar Barang (START)

        [Route("manage/persediaan/keluar")]
        public ActionResult TransaksiKeluarMenu()
        {
            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return View(vm);
        }

        public ActionResult SaveTransaksiKeluar(StokViewModel dataVm, string keterangan)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Stok.ID == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listStokInDb = ErasoftDbContext.STT01A.OrderBy(p => p.ID).ToList();
                //var listStokInDb = ErasoftDbContext.STT01A.OrderByDescending(p => p.ID).FirstOrDefault();
                //var digitAkhir = "";
                //var noStok = "";

                //if (listStokInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noStok = $"KS{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (STT01A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listStokInDb.ID;
                //    var lastKode = listStokInDb.Nobuk;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noStok = $"KS{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                //    if (noStok == lastKode)
                //    {
                //        lastRecNum++;
                //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //        noStok = $"KS{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    }
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "KS", "STT01A", "Nobuk");
                var noStok = "KS" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                var year = Convert.ToInt16(DateTime.Now.ToString("yyyy"));
                var barangForCheck = ErasoftDbContext.STF08A.SingleOrDefault(b =>
                    b.BRG == dataVm.BarangStok.Kobar && b.GD == dataVm.BarangStok.Dr_Gd && b.Tahun == year);

                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.BarangStok.Kobar, dataVm.BarangStok.Dr_Gd);

                if (qtyOnHand < dataVm.BarangStok.Qty)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dikeluarkan, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                dataVm.Stok.Nobuk = noStok;
                dataVm.Stok.STATUS_LOADING = "0";
                dataVm.BarangStok.Nobuk = noStok;

                //add by nurul 27/11/2019, add tgl last edit
                dataVm.Stok.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //add by fauzi 14 Juli 2020
                dataVm.Stok.Ket = keterangan;
                //end add by fauzi 14 Juli 2020


                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.STT01A.Add(dataVm.Stok);
                try
                {
                    ErasoftDbContext.STT01A.Add(dataVm.Stok);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.STT01A.Where(a => a.Nobuk == dataVm.Stok.Nobuk).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.Nobuk == noStok)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noStok = "KS" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Stok.Nobuk = noStok;
                            ErasoftDbContext.STT01A.Add(dataVm.Stok);
                            dataVm.BarangStok.Nobuk = noStok;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Dr_Gd == null || dataVm.BarangStok.Qty == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);

                    //end change 
                }
            }
            else
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk);

                var year = Convert.ToInt16(DateTime.Now.ToString("yyyy"));
                var barangForCheck = ErasoftDbContext.STF08A.SingleOrDefault(b =>
                    b.BRG == dataVm.BarangStok.Kobar && b.GD == dataVm.BarangStok.Dr_Gd && b.Tahun == year);

                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.BarangStok.Kobar, dataVm.BarangStok.Dr_Gd);

                if (qtyOnHand < dataVm.BarangStok.Qty)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dikeluarkan, Qty di gudang sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                stokInDb.Tgl = dataVm.Stok.Tgl;
                dataVm.BarangStok.Nobuk = dataVm.Stok.Nobuk;

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                //add by fauzi 14 Juli 2020
                stokInDb.Ket = keterangan;
                //end add by fauzi 14 Juli 2020

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Dr_Gd == null || dataVm.BarangStok.Qty == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    //end change 
                }
            }

            #region add by calvin 14 juni 2018, agar field yg penting di stt01b tidak null
            dataVm.BarangStok.Ke_Gd = "";
            dataVm.BarangStok.WO = "";
            dataVm.BarangStok.Rak = "";
            dataVm.BarangStok.JTran = "K";
            dataVm.BarangStok.KLINK = "";
            dataVm.BarangStok.NO_WO = "";
            dataVm.BarangStok.KET = "";
            dataVm.BarangStok.BRG_ORIGINAL = "";
            dataVm.BarangStok.QTY3 = 0;
            dataVm.BarangStok.BUKTI_DS = "";
            dataVm.BarangStok.BUKTI_REFF = "";
            #endregion

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by nurul 8/7/2019, tuning
            var ListKeluarDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == dataVm.Stok.Nobuk).ToList();
            var listBarangInKeluarDetail = ListKeluarDetail.Select(p => p.Kobar).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new StokViewModel()
            {
                Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk),
                //ListStok = ErasoftDbContext.STT01A.ToList(),
                //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == dataVm.Stok.Nobuk).ToList(),
                ListBarangStok = ListKeluarDetail,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInKeluarDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            //add by Tri, panggil api marketplace to change stock
            List<string> listBrg = new List<string>();
            //foreach (var brg in vm.ListBarang)
            //{
            listBrg.Add(dataVm.BarangStok.Kobar);
            //}
            updateStockMarketPlace(listBrg, "[INS_KS][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by Tri, panggil api marketplace to change stock

            return PartialView("BarangTransaksiKeluarPartial", vm);
        }

        //public ActionResult RefreshTableTransaksiKeluar()
        //{
        //    var vm = new StokViewModel()
        //    {
        //        ListStok = ErasoftDbContext.STT01A.ToList()
        //    };

        //    return PartialView("TableTransaksiKeluarPartial", vm);
        //}
        public ActionResult RefreshTableTransaksiKeluar(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 30/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( NOBUK like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( NOBUK like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 30/9/2019

            //var stok = ErasoftDbContext.STT01A.Where(s => s.STATUS_LOADING == "0" && s.MK == "K").ToList();
            //var Stt01a = (from p in ErasoftDbContext.STT01A
            //              where (p.STATUS_LOADING == "0" && p.MK == "K") &&
            //              (p.Nobuk.Contains(search) || Convert.ToString(p.Tgl).Contains(search))
            //              orderby p.Tgl descending, p.Nobuk descending
            //              select p);
            //var ListStt01a = Stt01a.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = Stt01a.Count();
            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STT01A ";
            sSQL2 += "WHERE STATUS_LOADING = '0' AND MK = 'K' ";
            if (search != "")
            {
                //sSQL2 += "AND (NOBUK LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%' ) ";
                sSQL2 += " AND ( " + sSQLkode + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt01a = ErasoftDbContext.Database.SqlQuery<STT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount.JUMLAH);

            //IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount);
            return PartialView("TableTransaksiKeluarPartial", pageOrders);
        }


        public ActionResult RefreshTransaksiKeluarForm()
        {
            try
            {
                var stokInDb = new STT01A();

                var vm = new StokViewModel()
                {
                    //Stok = stokInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(pd => 0 == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(pd => 0 == 1).ToList()
                };
                //var vm = new StokViewModel()
                //{
                //    ListStok = ErasoftDbContext.STT01A.ToList(),
                //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //    ListGudang = ErasoftDbContext.STF18.ToList()
                //};

                return PartialView("BarangTransaksiKeluarPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditTransaksiKeluar(int? stokId)
        {
            try
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);

                //add by nurul 8/7/2019, tuning
                var ListStokDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == stokInDb.Nobuk).ToList();
                var listBarangInStokDetail = ListStokDetail.Select(p => p.Kobar).ToList();
                //end add by nurul 8/7/2019, tuning
                var vm = new StokViewModel()
                {
                    Stok = stokInDb,
                    //ListStok = ErasoftDbContext.STT01A.Where(a => a.Nobuk.Substring(0, 2).Equals("IN")).ToList(),
                    //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    ListBarangStok = ListStokDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInStokDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    //ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangTransaksiKeluarPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteTransaksiKeluar(int? stokId)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);

            //add by Tri, 21 agustus 2018
            List<string> brg = new List<string>();
            var stokDetailInDb = ErasoftDbContext.STT01B.Where(b => b.Nobuk == stokInDb.Nobuk).ToList();
            foreach (var item in stokDetailInDb)
            {
                brg.Add(item.Kobar);
                //add by nurul 13/9/2018
                ErasoftDbContext.STT01B.Remove(item);
                ErasoftDbContext.SaveChanges();
                //end add by nurul 13/9/2018
            }
            //end add by Tri, 21 agustus 2018

            ErasoftDbContext.STT01A.Remove(stokInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.ToList()
                Errors = null
            };

            //add by Tri, panggil api marketplace to change stock
            updateStockMarketPlace(brg, "[DEL_KS_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //end add by Tri, panggil api marketplace to change stock

            //return PartialView("TableTransaksiKeluarPartial", vm);
            return Json(stokInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangTransaksiKeluar(int noUrut)
        {
            try
            {
                var barangStokInDb = ErasoftDbContext.STT01B.Single(b => b.No == noUrut);
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == barangStokInDb.Nobuk);

                //add by Tri, panggil api marketplace to change stock
                List<string> brg = new List<string>();
                brg.Add(barangStokInDb.Kobar);
                //end add by Tri, panggil api marketplace to change stock

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.STT01B.Remove(barangStokInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new StokViewModel()
                {
                    Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == stokInDb.Nobuk),
                    ListStok = ErasoftDbContext.STT01A.ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                //add by Tri, panggil api marketplace to change stock
                updateStockMarketPlace(brg, "[DEL_KS_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                //end add by Tri, panggil api marketplace to change stock

                return PartialView("BarangTransaksiKeluarPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateTransaksiKeluar(UpdateData dataUpdate)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataUpdate.NoBuktiStok);
            //remark by nurul 25/9/2018
            //stokInDb.TglInput = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            stokInDb.Tgl = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            //add by nurul 27/11/2019, add tgl last edit
            stokInDb.TglInput = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== Bagian Transaksi Keluar Barang (END)

        // =============================================== Bagian Transaksi Pindah Barang (START)

        [Route("manage/persediaan/pindah")]
        public ActionResult TransaksiPindahMenu()
        {
            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            return View(vm);
        }

        public ActionResult SaveTransaksiPindah(StokViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Stok.ID == null)
            {
                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.BarangStok.Kobar, dataVm.BarangStok.Dr_Gd);

                if (qtyOnHand < dataVm.BarangStok.Qty)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dikeluarkan, Qty di gudang " + Convert.ToString(dataVm.BarangStok.Dr_Gd) + " sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                //change by nurul 23/12/2019, perbaikan no bukti
                ////var listStokInDb = ErasoftDbContext.STT01A.OrderBy(p => p.ID).ToList();
                //var listStokInDb = ErasoftDbContext.STT01A.OrderByDescending(p => p.ID).FirstOrDefault();
                //var digitAkhir = "";
                //var noStok = "";

                //if (listStokInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noStok = $"PG{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (STT01A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listStokInDb.ID;
                //    var lastKode = listStokInDb.Nobuk;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noStok = $"PG{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                //    if (noStok == lastKode)
                //    {
                //        lastRecNum++;
                //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //        noStok = $"PG{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    }
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "PG", "STT01A", "Nobuk");
                var noStok = "PG" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Stok.Nobuk = noStok;
                dataVm.Stok.STATUS_LOADING = "0";
                dataVm.BarangStok.Nobuk = noStok;

                //add by nurul 27/11/2019, add tgl last edit
                dataVm.Stok.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit


                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.STT01A.Add(dataVm.Stok);
                try
                {
                    ErasoftDbContext.STT01A.Add(dataVm.Stok);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.STT01A.Where(a => a.Nobuk == dataVm.Stok.Nobuk).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.Nobuk == noStok)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noStok = "PG" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Stok.Nobuk = noStok;
                            ErasoftDbContext.STT01A.Add(dataVm.Stok);
                            dataVm.BarangStok.Nobuk = noStok;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Dr_Gd == null || dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);

                    //end change 
                }
            }
            else
            {
                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(dataVm.BarangStok.Kobar, dataVm.BarangStok.Dr_Gd);

                if (qtyOnHand < dataVm.BarangStok.Qty)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dikeluarkan, Qty di gudang " + Convert.ToString(dataVm.BarangStok.Dr_Gd) + " sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk);

                stokInDb.Tgl = dataVm.Stok.Tgl;
                dataVm.BarangStok.Nobuk = dataVm.Stok.Nobuk;

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                if (dataVm.BarangStok.No == null)
                {
                    //change by nurul 3/10/2018
                    //ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    var vmError = new StokViewModel() { };

                    if (dataVm.BarangStok.Dr_Gd == null || dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0)
                    {
                        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }

                    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);

                    //end change 
                }
            }

            #region add by calvin 14 juni 2018, agar field yg penting di stt01b tidak null
            dataVm.BarangStok.WO = "";
            dataVm.BarangStok.Rak = "";
            dataVm.BarangStok.JTran = "P";
            dataVm.BarangStok.KLINK = "";
            dataVm.BarangStok.NO_WO = "";
            dataVm.BarangStok.KET = "";
            dataVm.BarangStok.BRG_ORIGINAL = "";
            dataVm.BarangStok.QTY3 = 0;
            dataVm.BarangStok.BUKTI_DS = "";
            dataVm.BarangStok.BUKTI_REFF = "";
            #endregion
            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add by nurul 8/7/2019, tuning
            var ListPindahDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == dataVm.Stok.Nobuk).ToList();
            var listBarangInPindahDetail = ListPindahDetail.Select(p => p.Kobar).ToList();
            //end add by nurul 8/7/2019, tuning
            var vm = new StokViewModel()
            {
                Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk),
                //ListStok = ErasoftDbContext.STT01A.ToList(),
                //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == dataVm.Stok.Nobuk).ToList(),
                ListBarangStok = ListPindahDetail,
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInPindahDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                //ListGudang = ErasoftDbContext.STF18.ToList()
            };

            List<string> listBrg = new List<string>();
            //foreach (var brg in vm.ListBarang)
            //{
            listBrg.Add(dataVm.BarangStok.Kobar);
            //}
            updateStockMarketPlace(listBrg, "[MOVE_WH][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");

            return PartialView("BarangTransaksiPindahPartial", vm);
        }

        //public ActionResult RefreshTableTransaksiPindah()
        //{
        //    var vm = new StokViewModel()
        //    {
        //        ListStok = ErasoftDbContext.STT01A.ToList()
        //    };

        //    return PartialView("TableTransaksiPindahPartial", vm);
        //}
        public ActionResult RefreshTableTransaksiPindah(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 30/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( NOBUK like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( NOBUK like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLperso + " or " + sSQLpembeli + " ) ";
            //END ADD BY NURUL 30/9/2019

            //var stok = ErasoftDbContext.STT01A.Where(s => s.STATUS_LOADING == "0" && s.MK == "P").ToList();
            //var Stt01a = (from p in ErasoftDbContext.STT01A
            //              where p.STATUS_LOADING == "0" && p.MK == "P" &&
            //              (p.Nobuk.Contains(search) || Convert.ToString(p.Tgl).Contains(search))
            //              orderby p.Tgl descending, p.Nobuk descending
            //              select p);
            //var ListStt01a = Stt01a.Skip(pagenumber * 10).Take(10).ToList();
            //var totalCount = Stt01a.Count();

            //if (search != "")
            //{
            //    if (search.ToUpper() == "SUDAH")
            //    {
            //        search = "Y";
            //    }
            //    else if (search.ToUpper() == "BELUM")
            //    {
            //        search = "-";
            //    }
            //}

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STT01A ";
            sSQL2 += "WHERE STATUS_LOADING = '0' AND MK = 'P' ";
            if (search != "")
            {
                //sSQL2 += "AND (NOBUK LIKE '%" + search + "%' OR TGL LIKE '%" + search + "%') ";
                sSQL2 += " AND ( " + sSQLkode + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listStokNew = ErasoftDbContext.Database.SqlQuery<STT01A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(listStokNew, pagenumber + 1, 10, totalCount.JUMLAH);
            //IPagedList<STT01A> pageOrders = new StaticPagedList<STT01A>(ListStt01a, pagenumber + 1, 10, totalCount);
            return PartialView("TableTransaksiPindahPartial", pageOrders);
        }

        public ActionResult RefreshTransaksiPindahForm()
        {
            try
            {
                var stokInDb = new STT01A();

                var vm = new StokViewModel()
                {
                    //Stok = stokInDb,
                    //ListPesanan = ErasoftDbContext.SOT01A.ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(pd => 0 == 1).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(pd => 0 == 1).ToList()
                };
                //var vm = new StokViewModel()
                //{
                //    ListStok = ErasoftDbContext.STT01A.ToList(),
                //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //    ListGudang = ErasoftDbContext.STF18.ToList()
                //};

                return PartialView("BarangTransaksiPindahPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult EditTransaksiPindah(int? stokId)
        {
            try
            {
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);

                //add by nurul 8/7/2019, tuning
                var ListStokDetail = ErasoftDbContext.STT01B.Where(pd => pd.Nobuk == stokInDb.Nobuk).ToList();
                var listBarangInStokDetail = ListStokDetail.Select(p => p.Kobar).ToList();
                //end add by nurul 8/7/2019, tuning
                var vm = new StokViewModel()
                {
                    Stok = stokInDb,
                    //ListStok = ErasoftDbContext.STT01A.ToList(),
                    //ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    ListBarangStok = ListStokDetail,
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInStokDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    //ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangTransaksiPindahPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteTransaksiPindah(int? stokId)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.ID == stokId);

            //add by calvin, 25 juni 2018 validasi QOH
            List<string> brg = new List<string>();
            var stokDetailInDb = ErasoftDbContext.STT01B.Where(b => b.Nobuk == stokInDb.Nobuk).ToList();
            foreach (var item in stokDetailInDb)
            {
                var qtyOnHand = GetQOHSTF08A(item.Kobar, item.Ke_Gd);

                if (qtyOnHand - item.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dihapus, Qty Barang ( " + item.Kobar + " ) di gudang " + Convert.ToString(item.Ke_Gd) + " sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }

                brg.Add(item.Kobar);

                //add by nurul 13/9/2018
                ErasoftDbContext.STT01B.Remove(item);
                ErasoftDbContext.SaveChanges();
                //end add by nurul 13/9/2018
            }
            //end add by calvin, validasi QOH

            ErasoftDbContext.STT01A.Remove(stokInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new StokViewModel()
            {
                //ListStok = ErasoftDbContext.STT01A.ToList()
                Errors = null
            };

            updateStockMarketPlace(brg, "[DEL_MOVE_WH_A][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");

            //return PartialView("TableTransaksiPindahPartial", vm);

            return Json(stokInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangTransaksiPindah(int noUrut)
        {
            try
            {
                var barangStokInDb = ErasoftDbContext.STT01B.Single(b => b.No == noUrut);
                var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == barangStokInDb.Nobuk);

                List<string> brg = new List<string>();
                brg.Add(barangStokInDb.Kobar);
                //add by calvin, 22 juni 2018 validasi QOH
                var qtyOnHand = GetQOHSTF08A(barangStokInDb.Kobar, barangStokInDb.Ke_Gd);

                if (qtyOnHand - barangStokInDb.Qty < 0)
                {
                    var vmError = new StokViewModel()
                    {

                    };
                    vmError.Errors.Add("Tidak bisa dihapus, Qty di gudang " + Convert.ToString(barangStokInDb.Ke_Gd) + " sisa ( " + Convert.ToString(qtyOnHand) + " )");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
                //end add by calvin, validasi QOH

                //add by nurul 27/11/2019, add tgl last edit
                stokInDb.TglInput = DateTime.Today;
                //end add by nurul 27/11/2019, add tgl last edit

                ErasoftDbContext.STT01B.Remove(barangStokInDb);
                ErasoftDbContext.SaveChanges();

                var vm = new StokViewModel()
                {
                    Stok = ErasoftDbContext.STT01A.Single(p => p.Nobuk == stokInDb.Nobuk),
                    ListStok = ErasoftDbContext.STT01A.ToList(),
                    ListBarangStok = ErasoftDbContext.STT01B.Where(bs => bs.Nobuk == stokInDb.Nobuk).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                updateStockMarketPlace(brg, "[DEL_MOVE_WH_B][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");

                return PartialView("BarangTransaksiPindahPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateTransaksiPindah(UpdateData dataUpdate)
        {
            var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataUpdate.NoBuktiStok);
            //remark by nurul 25/9/2018
            //stokInDb.TglInput = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            stokInDb.Tgl = DateTime.ParseExact(dataUpdate.TglInput, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            //add by nurul 27/11/2019, add tgl last edit
            stokInDb.TglInput = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== Bagian Transaksi Pindah Barang (END)

        // =============================================== Bagian Transaksi Stok Opname (START)

        [Route("manage/persediaan/stokopname")]
        public ActionResult TransaksiStokOpname()
        {
            var vm = new StokOpnameViewModel()
            {
            };
            return View(vm);
        }

        public ActionResult RefreshTableStokOpname(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( NOBUK like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( NOBUK like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and NOBUK like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STT04A ";
            sSQL2 += "WHERE NOBUK LIKE '%OP%' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC, NOBUK DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt04a = ErasoftDbContext.Database.SqlQuery<STT04A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<STT04A> pageOrders = new StaticPagedList<STT04A>(ListStt04a, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableTransaksiStokOpnamePartial", pageOrders);
        }

        public ActionResult RefreshStokOpnameForm()
        {
            try
            {
                var stokInDb = new STT04A();

                var vm = new StokOpnameViewModel()
                {
                    ListBarangStokOpname = ErasoftDbContext.STT04B.Where(pd => 0 == 1).ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(pd => 0 == 1).ToList()
                };

                return PartialView("BarangStokOpnamePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult SaveStokOpname(StokOpnameViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.StokOpname.ID == null)
            {
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "OP", "STT04A", "NOBUK");
                var noStok = "OP" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                var namaGudang = ErasoftDbContext.STF18.Where(a => a.Kode_Gudang == dataVm.StokOpname.GUD).Single().Nama_Gudang;

                dataVm.StokOpname.NOBUK = noStok;
                dataVm.BarangStokOpname.NOBUK = noStok;
                dataVm.StokOpname.TGL = DateTime.Today;
                dataVm.StokOpname.NAMA_GUDANG = namaGudang;

                try
                {
                    ErasoftDbContext.STT04A.Add(dataVm.StokOpname);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSOP = ErasoftDbContext.STT04A.Where(a => a.NOBUK == dataVm.StokOpname.NOBUK).Single();
                    if (tempSOP != null)
                    {
                        if (tempSOP.NOBUK == noStok)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noStok = "OP" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.StokOpname.NOBUK = noStok;
                            ErasoftDbContext.STT04A.Add(dataVm.StokOpname);
                            dataVm.BarangStokOpname.NOBUK = noStok;
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }

                if (dataVm.BarangStokOpname.No == null)
                {
                    var vmError = new StokOpnameViewModel() { };

                    //if (dataVm.BarangStokOpname.Qty == 0)
                    //{
                    //    vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                    //    return Json(vmError, JsonRequestBehavior.AllowGet);
                    //}

                    ErasoftDbContext.STT04B.Add(dataVm.BarangStokOpname);

                }

            }
            else
            {
                var stokOpDb = ErasoftDbContext.STT04A.Single(p => p.NOBUK == dataVm.StokOpname.NOBUK);

                stokOpDb.TGL = dataVm.StokOpname.TGL;
                dataVm.BarangStokOpname.NOBUK = dataVm.StokOpname.NOBUK;

                stokOpDb.TGL = DateTime.Today;

                if (dataVm.BarangStokOpname.No == null)
                {
                    var vmError = new StokOpnameViewModel() { };

                    //if (dataVm.BarangStokOpname.Qty == 0)
                    //{
                    //    vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                    //    return Json(vmError, JsonRequestBehavior.AllowGet);
                    //}

                    ErasoftDbContext.STT04B.Add(dataVm.BarangStokOpname);
                }

            }

            //var namaBrg = ErasoftDbContext.STF02.Where(a => a.BRG == dataVm.BarangStokOpname.Brg).Select(b => b.NAMA + ' ' + b.NAMA2).Single();

            //field yg penting di stt04b tidak null
            dataVm.BarangStokOpname.Gud = dataVm.StokOpname.GUD;
            dataVm.BarangStokOpname.HPokok = 0;
            dataVm.BarangStokOpname.BK = "";
            dataVm.BarangStokOpname.Stn = "";
            dataVm.BarangStokOpname.WO = "";
            dataVm.BarangStokOpname.Nama_Barang = "";
            dataVm.BarangStokOpname.Qty_Berat = 0;
            dataVm.BarangStokOpname.QTY_KECIL = 0;
            dataVm.BarangStokOpname.QTY_BESAR = 0;
            dataVm.BarangStokOpname.QTY_3 = 0;
            dataVm.BarangStokOpname.QTY_4 = 0;
            dataVm.BarangStokOpname.LKS = "";
            //endregion

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var ListStokOpnameDetail = ErasoftDbContext.STT04B.Where(pd => pd.NOBUK == dataVm.StokOpname.NOBUK).ToList();
            var listBarangStokOpnameDetail = ListStokOpnameDetail.Select(p => p.Brg).ToList();
            var vm = new StokOpnameViewModel()
            {
                StokOpname = ErasoftDbContext.STT04A.Single(p => p.NOBUK == dataVm.StokOpname.NOBUK),
                ListBarangStokOpname = ListStokOpnameDetail,
                ListBarang = ErasoftDbContext.STF02.Where(a => listBarangStokOpnameDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
            };

            return PartialView("BarangStokOpnamePartial", vm);

        }

        public ActionResult EditStokOpname(int? stokId)
        {
            try
            {
                var stokOPDb = ErasoftDbContext.STT04A.Where(p => p.ID == stokId).Single();
                var ListStokOPDetail = ErasoftDbContext.STT04B.Where(pd => pd.NOBUK == stokOPDb.NOBUK).ToList();
                var listBarangStokOPDetail = ListStokOPDetail.Select(p => p.Brg).ToList();
                var ListBuktiAll = ErasoftDbContext.STT01A.Where(a => a.Ref == stokOPDb.NOBUK).ToList();
                var ListBuktiOM = ErasoftDbContext.STT01A.Where(a => a.Ref == stokOPDb.NOBUK && a.MK == "M").SingleOrDefault();
                var ListBuktiOK = ErasoftDbContext.STT01A.Where(a => a.Ref == stokOPDb.NOBUK && a.MK == "K").SingleOrDefault();

                var vm = new StokOpnameViewModel()
                {
                    StokOpname = stokOPDb,
                    ListBarangStokOpname = ListStokOPDetail,
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangStokOPDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    buktiOM = ListBuktiOM?.Nobuk,
                    buktiOK = ListBuktiOK?.Nobuk
                };

                return PartialView("BarangStokOpnamePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }

        }

        public ActionResult DeleteStokOpname(int? stokId)
        {

            var stokOpDb = ErasoftDbContext.STT04A.Where(p => p.ID == stokId).Single();
            var stokDetailOpDb = ErasoftDbContext.STT04B.Where(b => b.NOBUK == stokOpDb.NOBUK).ToList();

            ErasoftDbContext.STT04B.RemoveRange(stokDetailOpDb);
            ErasoftDbContext.STT04A.Remove(stokOpDb);
            ErasoftDbContext.SaveChanges();

            var vm = new StokOpnameViewModel()
            {
                Errors = null
            };

            return Json(stokOpDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteBarangStokOpname(int noUrut)
        {
            try
            {
                var barangStokOpDb = ErasoftDbContext.STT04B.Single(b => b.No == noUrut);
                var stokOpDb = ErasoftDbContext.STT04A.Single(p => p.NOBUK == barangStokOpDb.NOBUK);

                ErasoftDbContext.STT04B.Remove(barangStokOpDb);
                ErasoftDbContext.SaveChanges();

                var vm = new StokOpnameViewModel()
                {
                    StokOpname = ErasoftDbContext.STT04A.Single(p => p.NOBUK == stokOpDb.NOBUK),
                    ListStokOpname = ErasoftDbContext.STT04A.ToList(),
                    ListBarangStokOpname = ErasoftDbContext.STT04B.Where(bs => bs.NOBUK == stokOpDb.NOBUK).ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListGudang = ErasoftDbContext.STF18.ToList()
                };

                return PartialView("BarangStokOpnamePartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult ProsesStokOpname(int? stokOpId)
        {

            var ret = new StokOpnameViewModel()
            {
                Errors = new List<string>()
            };

            List<STT01A> newSTT01A = new List<STT01A>();
            List<STT01B> newSTT01B = new List<STT01B>();

            var stokOpDb = ErasoftDbContext.STT04A.Where(a => a.ID == stokOpId).Single();
            //add by nurul 11/8/2020
            var ssql1 = "";
            // remark fix for validation stock opname 01/09/2020 by nurul
            //ssql1 += "select count(bukti) from stf09a where tgl > '" + stokOpDb.TGL?.ToString("yyyy-MM-dd") + "'";
            ssql1 += "select count(bukti) from stf09a where tgl > '" + stokOpDb.TGL?.ToString("yyyy-MM-dd 23:59:59.999") + "'";
            //end by nurul
            var cekSTF09A = ErasoftDbContext.Database.SqlQuery<int>(ssql1).Single();
            if (cekSTF09A > 0)
            {
                ret.Errors.Add("Transaksi stok opname tidak dapat diproses karena sudah ada transaksi di atas tanggal " + stokOpDb.TGL?.ToString("dd/MM/yyyy") + ".");
            }
            else
            {
                //end add by nurul 11/8/2020
                var stokDetailOpDb = ErasoftDbContext.STT04B.Where(b => b.NOBUK == stokOpDb.NOBUK).ToList();

                var lastBuktiOM = GenerateAutoNumber(ErasoftDbContext, "OM", "STT01A", "Nobuk");
                var noStokOM = "OM" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiOM) + 1).PadLeft(6, '0');
                var lastBuktiOK = GenerateAutoNumber(ErasoftDbContext, "OK", "STT01A", "Nobuk");
                var noStokOK = "OK" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiOK) + 1).PadLeft(6, '0');


                int jmRowOM = 0; int jmRowOK = 0;
                foreach (var item in stokDetailOpDb)
                {
                    //Cek Stok Fisik
                    string sSQL = "SELECT ISNULL(SUM(QAwal+QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12) - SUM(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12), 0)  AS STOK_FISIK " +
                        "FROM STF08A WHERE Tahun = YEAR(GETDATE()) ";
                    sSQL += "AND BRG='" + item.Brg + "' AND GD = '" + item.Gud + "'";
                    var stok = ErasoftDbContext.Database.SqlQuery<getStokFisik>(sSQL).Single();

                    STT01A stokOpnameA = new STT01A
                    {
                        Jenis_Form = 1,
                        STATUS_LOADING = "0",
                        Tgl = stokOpDb.TGL,
                        Satuan = "",
                        Ket = "",
                        ST_Cetak = "",
                        ST_Posting = "-",
                        JRef = "6",
                        Ref = stokOpDb.NOBUK,
                        UserName = stokOpDb.USERNAME,
                        TglInput = DateTime.Now,
                        Retur_Penuh = false,
                        Terima_Penuh = false,
                        VALUTA = "IDR",
                        TUKAR = 1,
                        TERIMA_PENUH_PO_QC = false,
                        JLH_KARYAWAN = 0,
                        NILAI_ANGKUTAN = 0,
                        KOLI = 0,
                        BERAT = 0,
                        VOLUME = 0
                    };

                    STT01B stokOpnameB = new STT01B
                    {
                        Jenis_Form = 1,
                        Kobar = item.Brg,
                        Satuan = "2",
                        Harsat = 0,
                        Harga = 0,
                        UserName = stokOpDb.USERNAME,
                        TglInput = DateTime.Now,
                        Qty_Retur = 0,
                        Qty_Berat = 0,
                        TOTAL_LOT = 0,
                        TOTAL_QTY = 0,
                        QTY_TERIMA = 0,
                        QTY_CLAIM = 0,
                        NO_URUT_PO = 0,
                        NO_URUT_SJ = 0,
                        QTY_TERIMA_PO_QC = 0,
                    };

                    if (stok.STOK_FISIK < item.Qty)
                    {
                        // Stok Masuk
                        double selisihOM = item.Qty - stok.STOK_FISIK;

                        stokOpnameB.Nobuk = noStokOM;
                        stokOpnameB.Ke_Gd = item.Gud;
                        stokOpnameB.Dr_Gd = "";
                        stokOpnameB.Qty = selisihOM;

                        jmRowOM++;

                        if (jmRowOM == 1)
                        {
                            stokOpnameA.Nobuk = noStokOM;
                            stokOpnameA.JTran = "M";
                            stokOpnameA.MK = "M";
                            newSTT01A.Add(stokOpnameA);
                            ErasoftDbContext.STT01A.AddRange(newSTT01A);
                        }

                        newSTT01B.Add(stokOpnameB);
                        ErasoftDbContext.STT01B.AddRange(newSTT01B);
                    }

                    if (stok.STOK_FISIK > item.Qty)
                    {
                        //Stok Keluar
                        double selisihOK = stok.STOK_FISIK - item.Qty;

                        stokOpnameB.Nobuk = noStokOK;
                        stokOpnameB.Ke_Gd = "";
                        stokOpnameB.Dr_Gd = item.Gud;
                        stokOpnameB.Qty = selisihOK;
                        //add by nurul 14/8/2020, jenis form u/ OK d set jd 0 biar berhasil k posting 
                        stokOpnameB.Jenis_Form = 0;
                        //end add by nurul 14/8/2020, jenis form u/ OK d set jd 0 biar berhasil k posting 

                        jmRowOK++;


                        if (jmRowOK == 1)
                        {
                            stokOpnameA.Nobuk = noStokOK;
                            stokOpnameA.JTran = "K";
                            stokOpnameA.MK = "K";
                            //add by nurul 14/8/2020, jenis form u/ OK d set jd 0 biar berhasil k posting 
                            stokOpnameA.Jenis_Form = 0;
                            //end add by nurul 14/8/2020, jenis form u/ OK d set jd 0 biar berhasil k posting 
                            newSTT01A.Add(stokOpnameA);
                            ErasoftDbContext.STT01A.AddRange(newSTT01A);
                        }

                        newSTT01B.Add(stokOpnameB);
                        ErasoftDbContext.STT01B.AddRange(newSTT01B);
                    }

                }

                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                {
                    try
                    {
                        ErasoftDbContext.STT04A.Where(p => p.NOBUK == stokOpDb.NOBUK).Update(p => new STT04A() { POSTING = "1" });

                        ErasoftDbContext.SaveChanges();

                        Task.Run(() => new StokControllerJob().updateStockMarketPlace_ForItemInSTF08A("", dbPathEra, stokOpDb.USERNAME));

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        ret.Errors.Add(ex.InnerException == null ? ex.Message : "Data tidak berhasil diproses, " + ex.InnerException.Message);
                    }
                }
            }

            var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
            serializer.MaxJsonLength = Int32.MaxValue;

            var result = new ContentResult
            {
                Content = serializer.Serialize(ret),
                ContentType = "application/json"
            };

            return result;
        }

        public ActionResult GetDataBarangOP(string nobuk)
        {

            var listBrgOP = ErasoftDbContext.STF02.Where(c => c.TYPE == "3")
                .Where(c => !ErasoftDbContext.STT04B.Where(b => b.NOBUK == nobuk).Select(b => b.Brg).Contains(c.BRG))
                .Select(a => new smolSTF02
                {
                    BRG = a.BRG,
                    HJUAL = a.HJUAL,
                    NAMA = a.NAMA,
                    NAMA2 = string.IsNullOrEmpty(a.NAMA2) ? "" : a.NAMA2,
                    STN2 = a.STN2
                });
            return Json(listBrgOP, JsonRequestBehavior.AllowGet);
        }

        public class getStokFisik
        {
            public double STOK_FISIK { get; set; }
        }

        public ActionResult GetNoBuktiSOP(string nobuk)
        {
            var sBuktiOM = ErasoftDbContext.STT01A.Where(a => a.Ref == nobuk && a.MK == "M").SingleOrDefault();
            var sBuktiOK = ErasoftDbContext.STT01A.Where(a => a.Ref == nobuk && a.MK == "K").SingleOrDefault();

            var vm = new StokOpnameViewModel()
            {
                buktiOM = sBuktiOM?.Nobuk,
                buktiOK = sBuktiOK?.Nobuk
            };
            return Json(vm, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Transaksi Stok Opname (END)

        // =============================================== Bagian Ubah Password (START)

        public ActionResult UbahPassword(UpdateData dataPassBaru)
        {
            //var accInDb = MoDbContext.Account.SingleOrDefault(a => a.Username == dataPassBaru.Username); // remark by fauzi tgl 13 Juli 2020 for change password by email
            var accInDb = MoDbContext.Account.SingleOrDefault(a => a.Email == dataPassBaru.Email);

            if (accInDb == null)
            {
                //var userInDb = MoDbContext.User.Single(u => u.Username == dataPassBaru.Username); // remark by fauzi tgl 13 Juli 2020 for change password by email
                var userInDb = MoDbContext.User.Single(u => u.Email == dataPassBaru.Email);

                if (userInDb.Password == dataPassBaru.OldPass)
                {
                    userInDb.Password = dataPassBaru.NewPass;
                    userInDb.KonfirmasiPassword = dataPassBaru.NewPass;
                }
                else
                {
                    dataPassBaru.WrongOldPass = true;
                    return Json(dataPassBaru, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var pass = accInDb.Password;
                var hashCode = accInDb.VCode;
                var encodingPassString = Helper.EncodePassword(dataPassBaru.OldPass, hashCode);

                if (pass == encodingPassString)
                {
                    var encodingPassNewString = Helper.EncodePassword(dataPassBaru.NewPass, hashCode);

                    accInDb.Password = encodingPassNewString;
                    accInDb.ConfirmPassword = encodingPassNewString;
                }
                else
                {
                    dataPassBaru.WrongOldPass = true;
                    return Json(dataPassBaru, JsonRequestBehavior.AllowGet);
                }
            }

            MoDbContext.SaveChanges();
            ModelState.Clear();

            return Json(dataPassBaru, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Ubah Password (END)

        // =============================================== Bagian Cek Kode (START)

        [HttpGet]
        public ActionResult CekKodeGudang(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.STF18.FirstOrDefault(g => g.Kode_Gudang == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodeKategori(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.STF02E.FirstOrDefault(k => k.LEVEL == "1" && k.KODE == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodeMerk(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.STF02E.FirstOrDefault(k => k.LEVEL == "2" && k.KODE == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        //change by nurul 9/11/2018
        //[HttpGet]
        //public ActionResult CekKetMerk(string kode)
        //{
        //    var res = new CekKode()
        //    {
        //        Kode = kode
        //    };

        //    var gudangInDb = ErasoftDbContext.STF02E.FirstOrDefault(k => k.LEVEL == "2" && k.KET == kode);
        //    if (gudangInDb != null) res.Available = false;

        //    return Json(res, JsonRequestBehavior.AllowGet);
        //}

        //[HttpGet]
        [HttpGet]
        //public ActionResult CekKetMerk(string ket, string kodemerk)
        public ActionResult CekKetMerk(string param)
        {
            string kodemerk = (param.Split(';')[param.Split(';').Length - 1]);
            string ket = (param.Split(';')[param.Split(';').Length - 2]);

            var res = new CekMerk()
            {
                Kode = kodemerk,
                Nama = ket
            };

            //var gudangInDb = ErasoftDbContext.STF02E.FirstOrDefault(k => k.LEVEL == "2" && k.KET == kode);
            var gudangInDb = ErasoftDbContext.STF02E.FirstOrDefault(k => k.LEVEL == "2" && k.KET == ket && k.KODE != kodemerk);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        //end change by nurul

        public ActionResult CekNmGudang(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.STF18.FirstOrDefault(g => g.Nama_Gudang == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodeBarang(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.STF02.FirstOrDefault(k => k.BRG == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodeSupplier(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.APF01.FirstOrDefault(k => k.SUPP == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekNmSupplier(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.APF01.FirstOrDefault(k => k.NAMA == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodeRekening(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.GLFREKs.FirstOrDefault(k => k.KODE == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult CekKodePembeli(string kode)
        {
            var res = new CekKode()
            {
                Kode = kode
            };

            var gudangInDb = ErasoftDbContext.ARF01C.FirstOrDefault(k => k.BUYER_CODE == kode);
            if (gudangInDb != null) res.Available = false;

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Cek Kode (END)

        // =============================================== Bagian Data Perusahaan (START)

        public ActionResult DataPerusahaanMenu()
        {
            var dataPerusahaanVm = new DataPerusahaanViewModel()
            {
                DataUsaha = ErasoftDbContext.SIFSYS.SingleOrDefault(p => p.BLN == 1),
                DataUsahaTambahan = ErasoftDbContext.SIFSYS_TAMBAHAN.First()
            };

            return View(dataPerusahaanVm);
        }

        [HttpGet]
        public ActionResult GetDataPengusaha(string userId)
        {
            var accInDb = MoDbContext.Account.SingleOrDefault(a => a.UserId == userId);

            if (accInDb == null)
                return Json("No Data Found!", JsonRequestBehavior.AllowGet);

            var res = new DataPengusaha()
            {
                NamaLengkap = accInDb.Username,
                Email = accInDb.Email,
                Telepon = accInDb.NoHp
            };

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteLogoPerusahaan(string namaPT, string uname)
        {
            try
            {
                namaPT = namaPT.Trim();
                uname = uname.Trim();
                var namaFile = $"LogoUsaha-{uname}-{namaPT}.jpg";
                var path = Path.Combine(Server.MapPath("~/Content/Logo_Perusahaan/"), namaFile);
                if (System.IO.File.Exists(path))
                {
                    System.IO.File.Delete(path);
                }

                return new EmptyResult();
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult SaveDataUsaha(DataPerusahaanViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (Request.Files.Count > 0)
            {
                var file = Request.Files[0];

                if (file != null && file.ContentLength > 0)
                {
                    var fileExtension = Path.GetExtension(file.FileName);
                    string namaPT = dataVm.DataUsaha.USERNAME.Trim();
                    string uname = dataVm.DataUsaha.NAMA_PT.Trim();
                    var namaFile = $"LogoUsaha-{namaPT}-{uname}{fileExtension}";
                    var path = Path.Combine(Server.MapPath("~/Content/Logo_Perusahaan/"), namaFile);
                    file.SaveAs(path);
                }
            }

            var dataPerusahaanInDb = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1);
            dataPerusahaanInDb.NAMA_PT = dataVm.DataUsaha.NAMA_PT;
            dataPerusahaanInDb.ALAMAT_PT = dataVm.DataUsaha.ALAMAT_PT;
            dataPerusahaanInDb.NPWP = dataVm.DataUsaha.NPWP;
            dataPerusahaanInDb.METODA_NO = dataVm.DataUsaha.METODA_NO;
            dataPerusahaanInDb.KODE_BRG_STYLE = dataVm.DataUsaha.KODE_BRG_STYLE;

            //remark by nurul 10/4/2019
            //bool ubahSettingSync = false;
            //if (dataPerusahaanInDb.JTRAN_RETUR != dataVm.DataUsaha.JTRAN_RETUR)
            //{
            //    ubahSettingSync = true;
            //}
            //dataPerusahaanInDb.JTRAN_RETUR = dataVm.DataUsaha.JTRAN_RETUR;
            //end remark by nurul 10/4/2019

            //add by nurul 11/3/2019
            dataPerusahaanInDb.GUDANG = dataVm.DataUsaha.GUDANG;
            //end add by nurul 11/3/2019
            //dataPerusahaanInDb.BCA_API_KEY = dataVm.DataUsaha.BCA_API_KEY;
            //dataPerusahaanInDb.BCA_API_SECRET = dataVm.DataUsaha.BCA_API_SECRET;
            //dataPerusahaanInDb.BCA_CLIENT_ID = dataVm.DataUsaha.BCA_CLIENT_ID;
            //dataPerusahaanInDb.BCA_CLIENT_SECRET = dataVm.DataUsaha.BCA_CLIENT_SECRET;

            var dataPerusahaanTambahanInDb = ErasoftDbContext.SIFSYS_TAMBAHAN.SingleOrDefault();
            var accInDb = MoDbContext.Account.SingleOrDefault(ac => ac.Email == dataPerusahaanTambahanInDb.EMAIL);

            //change by nurul 11/4/2019
            //if (accInDb != null) accInDb.Email = dataVm.DataUsahaTambahan.EMAIL;
            if (accInDb != null)
            {
                accInDb.Email = dataVm.DataUsahaTambahan.EMAIL;
                accInDb.NoHp = dataVm.DataUsahaTambahan.TELEPON;
            }

            MoDbContext.SaveChanges();

            dataPerusahaanTambahanInDb.KODEPOS = dataVm.DataUsahaTambahan.KODEPOS;
            dataPerusahaanTambahanInDb.KODEPROV = dataVm.DataUsahaTambahan.KODEPROV;
            dataPerusahaanTambahanInDb.KODEKABKOT = dataVm.DataUsahaTambahan.KODEKABKOT;
            dataPerusahaanTambahanInDb.PERSON = dataVm.DataUsahaTambahan.PERSON;
            dataPerusahaanTambahanInDb.EMAIL = dataVm.DataUsahaTambahan.EMAIL;
            dataPerusahaanTambahanInDb.TELEPON = dataVm.DataUsahaTambahan.TELEPON;

            ErasoftDbContext.SaveChanges();

            //remark by nurul 10/4/2019
            //if (ubahSettingSync)
            //{
            //    AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            //    string username = sessionData.Account != null ? sessionData.Account.Username : sessionData.User.Username;

            //    var accControl = new AccountController();
            //    Task.Run(() => accControl.SyncMarketplace(dbPathEra, EDB.GetConnectionString("ConnID"), dataPerusahaanInDb.JTRAN_RETUR, username).Wait());
            //}
            //end remark by nurul 10/4/2019

            return new EmptyResult();
        }

        // =============================================== Bagian Data Perusahaan (END)

        // =============================================== ADD BY NURUL 24/8/2018 -- Bagian Data APIBCA (START)

        public ActionResult APIBCA()
        {
            var APIBCAVm = new DataPerusahaanViewModel()
            {
                DataUsaha = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1)
            };

            return View(APIBCAVm);
        }


        [HttpPost]
        public ActionResult SaveAPIBCA(DataPerusahaanViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (Request.Files.Count > 0)
            {
                var file = Request.Files[0];

                if (file != null && file.ContentLength > 0)
                {
                    var fileExtension = Path.GetExtension(file.FileName);
                    string namaPT = dataVm.DataUsaha.USERNAME.Trim();
                }
            }

            var dataPerusahaanInDb = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1);
            dataPerusahaanInDb.BCA_API_KEY = dataVm.DataUsaha.BCA_API_KEY;
            dataPerusahaanInDb.BCA_API_SECRET = dataVm.DataUsaha.BCA_API_SECRET;
            dataPerusahaanInDb.BCA_CLIENT_ID = dataVm.DataUsaha.BCA_CLIENT_ID;
            dataPerusahaanInDb.BCA_CLIENT_SECRET = dataVm.DataUsaha.BCA_CLIENT_SECRET;

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== END ADD BY NURUL -- Bagian Data API BCA (END)
        // =============================================== ADD BY CALVIN -- Bagian Import Data Faktur
        public class UploadFakturResult
        {
            public string success { get; set; }
            public string resultMessage { get; set; }

        }
        [HttpGet]
        public FileResult DownloadLogUploadFaktur(string filename)
        {
            //AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            //var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), filename);
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + dbPathEra + "/"), filename);

            byte[] data = System.IO.File.ReadAllBytes(path);
            string contentType = MimeMapping.GetMimeMapping(path);
            var cd = new System.Net.Mime.ContentDisposition
            {
                FileName = filename,
                Inline = true,
            };
            //Response.AppendHeader("Content-Disposition", cd.ToString());

            return File(data, contentType, filename);
        }

        [HttpGet]
        public FileResult DownloadLogErrorUploadExcelPesanan(string filename)
        {
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), filename);

            byte[] data = System.IO.File.ReadAllBytes(path);
            string contentType = MimeMapping.GetMimeMapping(path);
            var cd = new System.Net.Mime.ContentDisposition
            {
                FileName = filename,
                Inline = true,
            };
            //Response.AppendHeader("Content-Disposition", cd.ToString());

            return File(data, contentType, filename);
        }

        [HttpGet]
        public FileResult JD_Download_PrintLabel(string path)
        {
            byte[] fileBytes = System.IO.File.ReadAllBytes(path);
            return File(fileBytes, "application/pdf");
        }

        [HttpGet]
        public ActionResult ListImportFaktur(string cust)
        {
            //var partialVm = new FakturViewModel()
            //{
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == cust).OrderByDescending(a => a.UPLOAD_DATETIME).ToList()
            //};
            ActionResult ret = RefreshTableUploadFaktur(1, cust);
            return ret;
        }

        [HttpGet]
        public ActionResult ListLogErrorUploadPesanan(string cust)
        {
            //var partialVm = new FakturViewModel()
            //{
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == cust).OrderByDescending(a => a.UPLOAD_DATETIME).ToList()
            //};
            ActionResult ret = RefreshTableLogErrorUploadPesanan(1, cust);
            return ret;
        }

        [HttpGet]
        public ActionResult ListLogSinkronisasi(string cust)
        {
            var a = cust.Split(',');
            ActionResult ret = RefreshTableLogSinkronisasi(1, a);
            return ret;
        }

        public ActionResult RefreshTableLogSinkronisasi(int? page, string[] cust)
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = cust;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.UPLOADER AS UPLOADER , A.LAST_FAKTUR_UPLOADED AS LAST_FAKTUR_UPLOADED, A.UPLOAD_DATETIME AS UPLOAD_DATETIME, A.LAST_FAKTUR_UPLOADED_DATETIME AS LAST_FAKTUR_UPLOADED_DATETIME, ISNULL(B.PERSO,'') AS CUST, A.LOG_FILE AS LOG_FILE ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM LOG_IMPORT_FAKTUR A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            if (cust.Length > 0)
            {
                sSQL2 += "WHERE A.CUST in (";
                for (int i = 0; i < cust.Length; i++)
                {
                    //sSQL2 += " (A.CUST LIKE '%" + cust[i] + "%' ) OR";
                    sSQL2 += "'" + cust[i] + "' , ";

                }
                sSQL2 = sSQL2.Substring(0, sSQL2.Length - 3) + ") AND A.LOG_FILE LIKE '%Log_SyncBrg_%' ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 5) - 4;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                //if (pagenumber == 0)
                //{
                //    pagenumber = 1;
                //}
                if (pagenumber < 0)
                {
                    pagenumber = 0;
                }
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.UPLOAD_DATETIME DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 5) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<ListImportBrg>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<ListImportBrg> pageOrders = new StaticPagedList<ListImportBrg>(listPromosi, pagenumber + 1, 5, totalCount.JUMLAH);
            return PartialView("SyncBarangLog", pageOrders);
        }

        [HttpPost]
        //public ActionResult UploadFakturTokped(UploadFakturTokpedDataDetail[] data, string cust, string nama_cust, string perso)
        public ActionResult UploadFakturTokped()
        {
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            UploadFakturResult result = new UploadFakturResult
            {
                success = "0",
                resultMessage = ""
            };
            var data = new List<UploadFakturTokpedDataDetail>();
            string cust = Request["cust"];
            string nama_cust = Request["nama_cust"];
            string perso = Request["perso"];
            for (int file_index = 0; file_index < Request.Files.Count; file_index++)
            {
                var file = Request.Files[file_index];
                if (file != null && file.ContentLength > 0)
                {
                    byte[] dataByte;
                    using (Stream inputStream = file.InputStream)
                    {
                        MemoryStream memoryStream = inputStream as MemoryStream;
                        if (memoryStream == null)
                        {
                            memoryStream = new MemoryStream();
                            inputStream.CopyTo(memoryStream);
                        }
                        dataByte = memoryStream.ToArray();
                    }
                    using (MemoryStream stream = new MemoryStream(dataByte))
                    {
                        using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                        {
                            //loop all worksheets
                            var worksheet = excelPackage.Workbook.Worksheets[1];
                            string[] mapColumn = { "Count", "Invoice", "PaymentDate", "OrderStatus", "ProductID", "ProductName", "Quantity", "StockKeepingUnitSKU", "Notes", "PriceRp", "CustomerName", "CustomerPhone", "Recipient", "RecipientNumber", "RecipientAddress", "Courier", "ShippingPricefeeRp", "InsuranceRp", "TotalShippingFeeRp", "TotalAmountRp", "AWB", "JenisLayanan" };
                            for (int i = 5; i <= worksheet.Dimension.End.Row; i++)
                            {
                                //Columns start from A5, start mapping column
                                //Count, Invoice, Payment Date, Order Status, Product ID, Product Name, Quantity, Stock Keeping Unit (SKU), Notes, Price (Rp.), Customer Name, Customer Phone, Recipient, Recipient Number, Recipient Address, Courier, Shipping Price + fee (Rp.), Insurance (Rp.), Total Shipping Fee (Rp.), Total Amount (Rp.), AWB, Jenis Layanan
                                var newData = new UploadFakturTokpedDataDetail();
                                for (int c = 0; c < mapColumn.Count(); c++)
                                {
                                    var ColumnName = mapColumn[c];
                                    newData[ColumnName] = worksheet.Cells[i, c + 1].Value == null ? "" : Convert.ToString(worksheet.Cells[i, c + 1].Value);
                                }
                                data.Add(newData);
                            }
                        }
                    }
                }
            }

            #region Logging
            string message = "";
            string filename = "Log_Upload_Inv_Tokopedia_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), filename);

            LOG_IMPORT_FAKTUR newLogImportFaktur = new LOG_IMPORT_FAKTUR
            {
                CUST = cust,
                UPLOADER = uname,
                //change by nurul 28/11/2019
                //UPLOAD_DATETIME = DateTime.Now,
                UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                //end change by nurul 28/11/2019
                LOG_FILE = filename,
            };
            string lastFakturInUpload = "";
            DateTime lastFakturDateInUpload = DateTime.Now;
            #endregion

            if (data == null)
            {
                return JsonErrorMessage("Format data tidak sesuai");
            }
            else
            {
                if (!System.IO.File.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), ""));
                    var asd = System.IO.File.Create(path);
                    asd.Close();
                }
                StreamWriter tw = new StreamWriter(path);

                #region Proses Upload
                var lastRecnumARF01C = ErasoftDbContext.ARF01C.Max(p => p.RecNum);
                var listFakturInDb = ErasoftDbContext.SIT01A.OrderBy(p => p.RecNum).ToList();
                var listPesananInDb = ErasoftDbContext.SOT01A.Where(p => p.CUST == cust).Select(p => new { noref = p.NO_REFERENSI, nobuk = p.NO_BUKTI }).ToList();
                var market = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).FirstOrDefault();
                //add by Tri, 20/9/19
                if (lastRecnumARF01C == null)
                    lastRecnumARF01C = 0;
                //end add by Tri, 20/9/19
                //var listItem = ErasoftDbContext.STF02.ToList(); 'change by nurul 21/1/2019
                //change 18/10/2019, tuning
                //var listItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
                var listBRGItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Select(p => p.BRG).ToList();
                //end change 18/10/2019, tuning
                var listSTF02H = ErasoftDbContext.STF02H.Where(p => listBRGItem.Contains(p.BRG) && p.IDMARKET == market.RecNum).ToList();


                string tahun = DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2);
                var digitAkhir = "";
                var noOrder = "";
                var lastRecNum = 0;
                if (listFakturInDb.Count == 0)
                {
                    digitAkhir = "000001";
                    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                }
                else
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    var lastBukti = ErasoftDbContext.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(NO_BUKTI), 5, 6), '0') FROM SIT01A WHERE NO_BUKTI LIKE '%SI" + tahun + "%'").First();
                    //lastRecNum = listFakturInDb.Last().RecNum.HasValue ? Convert.ToInt32(listFakturInDb.Last().RecNum) : 0;
                    lastRecNum = Convert.ToInt32(lastBukti);
                    //end change by nurul 23/12/2019, perbaikan no bukti
                    if (lastRecNum == 0)
                    {
                        lastRecNum = 1;
                    }
                }


                string buyercode = "";
                string al2 = "";
                string al3 = "";

                bool adaWarning = false;
                bool masihFakturYangSama = true;
                bool fakturLolosValidasi = true;
                bool barangFakturLolosValidasi = true;
                string messageWarning = "";
                string faktur_invoice = "";

                List<ARF01C> newARF01Cs = new List<ARF01C>();
                List<SIT01A> newFakturs = new List<SIT01A>();
                List<SIT01B> newFaktursDetails = new List<SIT01B>();
                bool status_allow_insert = false;
                for (int i = 0; i < data.Count(); i++)
                {
                    UploadFakturTokpedDataDetail faktur = data[i];
                    #region  validasi
                    //cek faktur sudah pernah di upload
                    if (!string.IsNullOrWhiteSpace(faktur.Invoice))
                    {
                        if (i > 0)
                        {
                            masihFakturYangSama = false;
                        }
                        faktur_invoice = faktur.Invoice;
                        message = "";
                        messageWarning = "";
                        adaWarning = false;
                        fakturLolosValidasi = true;
                        //var cekFakturExists = listFakturInDb.Where(p => p.JENIS_FORM == "2" && p.NO_REF == faktur_invoice).FirstOrDefault();
                        var cekFakturExists = listFakturInDb.Where(p => p.JENIS_FORM == "2" && (p.NO_REF ?? "").Contains(faktur_invoice) && p.CUST == cust).FirstOrDefault();

                        if (cekFakturExists != null)
                        {
                            fakturLolosValidasi = false;
                            //log faktur sudah pernah di upload
                            message = "Faktur [" + faktur_invoice + "] sudah pernah diupload, dengan nomor faktur : [" + cekFakturExists.NO_BUKTI + "]." + System.Environment.NewLine;
                            tw.WriteLine(message);
                        }
                        else
                        {
                            var cekPesananExists = listPesananInDb.Where(p => (p.noref ?? "").Contains(faktur_invoice)).FirstOrDefault();
                            if (cekPesananExists != null)
                            {
                                fakturLolosValidasi = false;
                                message = "Faktur [" + faktur_invoice + "] sudah ada di pesanan : [" + cekPesananExists.nobuk + "]." + System.Environment.NewLine;
                                tw.WriteLine(message);
                            }
                        }

                        status_allow_insert = false;
                        if (fakturLolosValidasi)
                        {
                            status_allow_insert = true;
                            if (faktur.OrderStatus.Contains("Transaksi ditolak")
                                || faktur.OrderStatus.Contains("Verifikasi Konfirmasi Pembayaran")
                                || faktur.OrderStatus.Contains("Transaksi dibatalkan")
                                || faktur.OrderStatus.Contains("Pesanan dikomplain"))
                            {
                                status_allow_insert = false;
                                message = "Faktur [" + faktur_invoice + "] berstatus " + faktur.OrderStatus + ", tidak diupload ke MasterOnline." + System.Environment.NewLine;
                                tw.WriteLine(message);
                            }
                        }
                    }
                    else
                    {
                        masihFakturYangSama = true;
                        messageWarning = "";
                    }
                    if (fakturLolosValidasi && status_allow_insert)
                    {
                        barangFakturLolosValidasi = true;
                        //cek barang sudah ada di master
                        var cekItem = listSTF02H.Where(p => (p.BRG_MP ?? "").Contains(faktur.ProductID)).FirstOrDefault();
                        if (cekItem == null)
                        {
                            barangFakturLolosValidasi = false;
                            //add by calvin 18 juni 2019
                            if (!string.IsNullOrWhiteSpace(faktur.StockKeepingUnitSKU))
                            {
                                var cekItemBySKU = listSTF02H.Where(p => (p.BRG) == (faktur.StockKeepingUnitSKU)).FirstOrDefault();
                                if (cekItemBySKU != null)
                                {
                                    barangFakturLolosValidasi = true;
                                }
                                else
                                {
                                    //change 18/10/2019, tuning
                                    //if (listItem.Where(p => p.BRG == faktur.StockKeepingUnitSKU).Count() > 0)
                                    if (listBRGItem.Contains(faktur.StockKeepingUnitSKU))
                                    //end change 18/10/2019, tuning
                                    {
                                        string sSQL = "insert into stf02h(brg, idmarket, akunmarket, username, hjual, display) ";
                                        sSQL += "select a.brg, '" + market.RecNum + "', '" + market.PERSO + "', 'auto_create_pelanggan', 0, 0 ";
                                        sSQL += "from stf02 a left join stf02h b on a.brg = b.brg and b.idmarket = '" + market.RecNum + "' ";
                                        sSQL += "where a.brg = '" + faktur.StockKeepingUnitSKU + "' and isnull(b.brg, '') = ''";

                                        int berhasilinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                        if (berhasilinsert > 0)
                                        {
                                            barangFakturLolosValidasi = true;
                                            //change 18/10/2019, tuning
                                            //listItem = ErasoftDbContext.STF02.AsNoTracking().Where(a => a.TYPE == "3").ToList();
                                            //listBRGItem = listItem.Select(p => p.BRG).ToList();
                                            listBRGItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Select(p => p.BRG).ToList();
                                            //end change 18/10/2019, tuning
                                            listSTF02H = ErasoftDbContext.STF02H.AsNoTracking().Where(p => listBRGItem.Contains(p.BRG) && p.IDMARKET == market.RecNum).ToList();
                                        }
                                    }
                                }
                            }
                            //end add by calvin 18 juni 2019
                            if (!barangFakturLolosValidasi)
                            {
                                adaWarning = true;
                                if (message == "")
                                {
                                    message = "Faktur Tokopedia [" + faktur_invoice + "] berhasil diupload dengan warning." + System.Environment.NewLine;
                                    message += "Mohon perbaiki data pada nomor faktur [" + faktur_invoice + "] :" + System.Environment.NewLine;
                                    tw.WriteLine(message);
                                }
                                messageWarning = "- Item [" + faktur.ProductID + "] belum ada di Master Barang MasterOnline." + System.Environment.NewLine;
                                tw.WriteLine(messageWarning);
                            }
                        }
                    }
                    #endregion

                    if (fakturLolosValidasi & status_allow_insert)
                    {
                        buyercode = "";
                        if (!string.IsNullOrWhiteSpace(faktur.Invoice))
                        {
                            lastRecNum++;
                            digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                            //noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                            noOrder = $"SI{tahun}{digitAkhir}";
                        }

                        #region insert pembeli
                        if (!string.IsNullOrWhiteSpace(faktur.Invoice))
                        {
                            string kabupaten = (faktur.RecipientAddress.Split(',')[faktur.RecipientAddress.Split(',').Length - 3]);
                            string provinsi = ((faktur.RecipientAddress.Split(',')[faktur.RecipientAddress.Split(',').Length - 1]).Substring(6, (faktur.RecipientAddress.Split(',')[faktur.RecipientAddress.Split(',').Length - 1]).Length - 6));
                            var cekPembeli = (from p in ErasoftDbContext.ARF01C
                                              where p.EMAIL == (faktur.CustomerName.Replace(" ", "").Length > 36 ? faktur.CustomerName.Replace(" ", "").Substring(0, 36) + "@tokopedia.com" : faktur.CustomerName.Replace(" ", "") + "@tokopedia.com")
                                              select new { p.BUYER_CODE, p.AL2, p.AL3 }).FirstOrDefault();
                            if (cekPembeli == null)
                            {
                                lastRecnumARF01C++;
                                var UniqueCode = false;
                                while (!UniqueCode)
                                {
                                    var currentBuyerCode = lastRecnumARF01C.ToString().PadLeft(10, '0');
                                    var cekDuplikatArf01c = (from p in ErasoftDbContext.ARF01C where p.BUYER_CODE == currentBuyerCode select p.BUYER_CODE).FirstOrDefault();
                                    if (cekDuplikatArf01c == null)
                                    {
                                        UniqueCode = true;
                                    }
                                    else
                                    {
                                        lastRecnumARF01C++;
                                    }
                                }

                                string noTelp = "-";
                                if (!string.IsNullOrWhiteSpace(faktur.CustomerPhone.Trim()))
                                {
                                    noTelp = faktur.CustomerPhone;
                                }

                                //bagi alamat ke 3 field
                                var temp_AL_KIRIM = faktur.RecipientAddress;
                                string AL_KIRIM1 = temp_AL_KIRIM;
                                string AL_KIRIM2 = "";
                                string AL_KIRIM3 = "";
                                if (temp_AL_KIRIM.Length > 30)
                                {
                                    AL_KIRIM1 = temp_AL_KIRIM.Substring(0, 30);
                                    temp_AL_KIRIM = temp_AL_KIRIM.Substring(30, temp_AL_KIRIM.Length - 30);

                                    AL_KIRIM2 = temp_AL_KIRIM;
                                    if (temp_AL_KIRIM.Length > 30)
                                    {
                                        AL_KIRIM2 = temp_AL_KIRIM.Substring(0, 30);
                                        temp_AL_KIRIM = temp_AL_KIRIM.Substring(30, temp_AL_KIRIM.Length - 30);

                                        AL_KIRIM3 = temp_AL_KIRIM;
                                        if (temp_AL_KIRIM.Length > 30)
                                        {
                                            AL_KIRIM3 = temp_AL_KIRIM.Substring(0, 27) + "...";
                                        }
                                    }
                                }
                                //end bagi alamat ke 3 field

                                ARF01C newPembeli = new ARF01C
                                {
                                    BUYER_CODE = lastRecnumARF01C.ToString().PadLeft(10, '0'),
                                    NAMA = faktur.CustomerName.Length > 30 ? faktur.CustomerName.Substring(0, 27) + "..." : faktur.CustomerName,
                                    AL = faktur.RecipientAddress,
                                    TLP = noTelp,
                                    PERSO = perso,
                                    TERM = 0,
                                    LIMIT = 0,
                                    PKP = "0",
                                    KLINK = "01",
                                    KODE_CABANG = 1,
                                    VLT = "IDR",
                                    KDHARGA = "01",
                                    AL_KIRIM1 = AL_KIRIM1,
                                    AL_KIRIM2 = AL_KIRIM2,
                                    AL_KIRIM3 = AL_KIRIM3,
                                    DISC_NOTA = 0,
                                    NDISC_NOTA = 0,
                                    DISC_ITEM = 0,
                                    NDISC_ITEM = 0,
                                    STATUS = "1",
                                    LABA = 0,
                                    TIDAK_HIT_UANG_R = false,
                                    No_Seri_Pajak = "FP",
                                    TGL_INPUT = DateTime.Now,
                                    USERNAME = faktur.CustomerName.Replace(" ", "").Length > 30 ? faktur.CustomerName.Replace(" ", "").Substring(0, 27) + "..." : faktur.CustomerName.Replace(" ", ""),
                                    KODEPOS = faktur.RecipientAddress.Split(',')[faktur.RecipientAddress.Split(',').Length - 1].Substring(1, 5),
                                    EMAIL = faktur.CustomerName.Replace(" ", "").Length > 36 ? faktur.CustomerName.Replace(" ", "").Substring(0, 36) + "@tokopedia.com" : faktur.CustomerName.Replace(" ", "") + "@tokopedia.com",
                                    KODEKABKOT = "3174",
                                    KODEPROV = "31",
                                    NAMA_KABKOT = kabupaten.Length > 50 ? kabupaten.Substring(0, 47) + "..." : kabupaten,
                                    NAMA_PROV = provinsi.Length > 50 ? provinsi.Substring(0, 47) + "..." : provinsi,
                                };

                                if (newARF01Cs.Where(p => p.EMAIL == newPembeli.EMAIL).Count() == 0)
                                {
                                    newARF01Cs.Add(newPembeli);
                                }
                                //ErasoftDbContext.ARF01C.Add(newPembeli);

                                buyercode = newPembeli.BUYER_CODE;
                                al2 = newPembeli.AL2;
                                al3 = newPembeli.AL3;
                            }
                            else
                            {
                                buyercode = cekPembeli.BUYER_CODE;
                                al2 = cekPembeli.AL2;
                                al3 = cekPembeli.AL3;
                            }
                        }
                        #endregion
                        #region insert sit01a
                        if (!string.IsNullOrWhiteSpace(faktur.Invoice))
                        {
                            //jika blank berarti masih faktur yang sama, item ke dua
                            SIT01A newfaktur = new SIT01A
                            {
                                JENIS_FORM = "2",
                                NO_BUKTI = noOrder,
                                NO_F_PAJAK = "-",
                                NO_SO = "-",
                                CUST = cust,
                                NAMAPEMESAN = faktur.Recipient.Length > 30 ? faktur.Recipient.Substring(0, 27) + "..." : faktur.Recipient,
                                PEMESAN = buyercode,
                                NAMA_CUST = nama_cust,
                                AL = faktur.RecipientAddress,
                                TGL = Convert.ToDateTime(faktur.PaymentDate),
                                PPN_Bln_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.PaymentDate).ToString("MM")),
                                PPN_Thn_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.PaymentDate).ToString("yyyy").Substring(2, 2)),
                                USERNAME = uname,
                                JENIS_RETUR = "-",
                                STATUS = "1",
                                ST_POSTING = "T",
                                VLT = "IDR",
                                NO_FA_OUTLET = "-",
                                NO_LPB = "-",
                                GROUP_LIMIT = "-",
                                KODE_ANGKUTAN = "-",
                                JENIS_MOBIL = "-",
                                JTRAN = "SI",
                                JENIS = "1",
                                TUKAR = 1,
                                TUKAR_PPN = 1,
                                SOPIR = "-",
                                KET = "Catatan Dari Pembeli : " + faktur.Notes,
                                PPNBM = 0,
                                NILAI_PPNBM = 0,
                                KODE_SALES = "-",
                                KODE_WIL = "-",
                                U_MUKA = 0,
                                U_MUKA_FA = 0,
                                TERM = 0,
                                TGL_JT_TEMPO = Convert.ToDateTime(faktur.PaymentDate),
                                BRUTO = Convert.ToDouble(faktur.TotalAmountRp.Replace("Rp ", "").Replace(".", "")) - Convert.ToDouble(faktur.TotalShippingFeeRp.Replace("Rp ", "").Replace(".", "")),
                                PPN = 0,
                                NILAI_PPN = 0,
                                DISCOUNT = 0,
                                NILAI_DISC = 0,
                                MATERAI = Convert.ToDouble(faktur.TotalShippingFeeRp.Replace("Rp ", "").Replace(".", "")),
                                NETTO = Convert.ToDouble(faktur.TotalAmountRp.Replace("Rp ", "").Replace(".", "")),
                                TGLINPUT = DateTime.Now,
                                NO_REF = faktur_invoice,
                                NAMA_CUST_QQ = "-",
                                STATUS_LOADING = "-",
                                NO_PO_CUST = "-",
                                PENGIRIM = "-",
                                NAMAPENGIRIM = "-",
                                ZONA = "-",
                                UCAPAN = "-",
                                N_UCAPAN = "-",
                                SUPP = "-",
                                KOMISI = 0,
                                N_KOMISI = 0,
                                TOTAL_TITIPAN = 0
                            };
                            newFakturs.Add(newfaktur);
                            //ErasoftDbContext.SIT01A.Add(newfaktur);
                            lastFakturInUpload = faktur_invoice;
                            lastFakturDateInUpload = Convert.ToDateTime(faktur.PaymentDate);
                        }
                        #endregion
                        #region insert sit01b
                        SIT01B newfakturdetail = new SIT01B
                        {
                            JENIS_FORM = "2",
                            NO_BUKTI = noOrder,
                            USERNAME = uname,
                            CATATAN = "-",
                            TGLINPUT = DateTime.Now,
                            //NILAI_DISC = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            NILAI_DISC = 0,
                            DISCOUNT = 0,
                            //NILAI_DISC_1 = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            NILAI_DISC_1 = 0,
                            DISCOUNT_2 = 0,
                            NILAI_DISC_2 = 0,
                            DISCOUNT_3 = 0,
                            NILAI_DISC_3 = 0,
                            DISCOUNT_4 = 0,
                            NILAI_DISC_4 = 0,
                            DISCOUNT_5 = 0,
                            NILAI_DISC_5 = 0,
                            DISC_TITIPAN = 0,
                            BRG = string.IsNullOrWhiteSpace(faktur.StockKeepingUnitSKU) ? faktur.ProductID : faktur.StockKeepingUnitSKU,
                            SATUAN = "2",
                            H_SATUAN = Convert.ToDouble(faktur.PriceRp.Replace("Rp ", "").Replace(".", "")),
                            QTY = Convert.ToDouble(faktur.Quantity),
                            HARGA = Convert.ToDouble(faktur.Quantity) * Convert.ToDouble(faktur.PriceRp.Replace("Rp ", "").Replace(".", "")),
                            QTY_KIRIM = 0,
                            QTY_RETUR = 0,
                            GUDANG = "001" //buat default gudang 001, untuk semua akun baru
                        };
                        //add by nurul 21/9/2020, brg multi sku 
                        var tempBrgDetail = newfakturdetail.BRG;
                        //end add by nurul 21/9/2020, brg multi sku 
                        //ErasoftDbContext.SIT01B.Add(newfakturdetail);
                        if (!barangFakturLolosValidasi)
                        {
                            newfakturdetail.BRG = "NOT_FOUND";
                        }
                        //add by nurul 21/9/2020, brg multi sku 
                        else
                        {                                  
                            if (!string.IsNullOrEmpty(newfakturdetail.BRG))
                            {
                                var cekTypeBrg = ErasoftDbContext.STF02.Where(a => a.BRG == newfakturdetail.BRG).SingleOrDefault();
                                if(cekTypeBrg.BRG != null)
                                {
                                    if(cekTypeBrg.TYPE == "6" && cekTypeBrg.KUBILASI == 1 && !string.IsNullOrEmpty(cekTypeBrg.BRG_NON_OS))
                                    {
                                        newfakturdetail.BRG = cekTypeBrg.BRG_NON_OS;
                                        newfakturdetail.BRG_MULTISKU = cekTypeBrg.BRG;
                                    }
                                }
                            }
                        }
                        //end add by nurul 21/9/2020, brg multi sku 
                        newfakturdetail.CATATAN = "INVOICE NO : " + faktur_invoice + "_;_" + faktur.ProductName + "_;_" + faktur.ProductID + "_;_" + (string.IsNullOrWhiteSpace(faktur.StockKeepingUnitSKU) ? "" : faktur.StockKeepingUnitSKU);

                        newFaktursDetails.Add(newfakturdetail);
                        #endregion
                    }
                    else
                    {
                        var fakturPerluDiRemove = (from p in newFakturs where p.NO_REF == faktur_invoice select p).FirstOrDefault();
                        if (fakturPerluDiRemove != null)
                        {
                            newFakturs.RemoveAll(a => a.NO_REF == faktur_invoice);
                            var detailFakturPerluDiRemove = (from p in newFaktursDetails where p.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI select p).FirstOrDefault();
                            if (detailFakturPerluDiRemove != null)
                            {
                                newFaktursDetails.RemoveAll(a => a.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI);
                            }
                        }
                    }
                }
                #endregion

                #region commit insert

                //record terakhir
                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                {
                    try
                    {
                        //add by Tri 26 Nov 2019, update stok ke mp 
                        var listBarangUpdateStock = newFaktursDetails.Select(p => p.BRG).Where(p => p != "NOT_FOUND").Distinct().ToList();
                        //end add by Tri 26 Nov 2019, update stok ke mp 

                        ErasoftDbContext.ARF01C.AddRange(newARF01Cs);
                        ErasoftDbContext.SaveChanges();
                        if (newFakturs.Count == 0)
                        {
                            lastFakturInUpload = "";
                            lastFakturDateInUpload = DateTime.Now;
                        }
                        ErasoftDbContext.SIT01A.AddRange(newFakturs);
                        ErasoftDbContext.SaveChanges();
                        ErasoftDbContext.SIT01B.AddRange(newFaktursDetails);
                        ErasoftDbContext.SaveChanges();

                        newLogImportFaktur.LAST_FAKTUR_UPLOADED = lastFakturInUpload;
                        newLogImportFaktur.LAST_FAKTUR_UPLOADED_DATETIME = lastFakturDateInUpload;
                        ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
                        ErasoftDbContext.SaveChanges();

                        transaction.Commit();

                        //add 18/10/2019, hitung ulang bruto,netto
                        string sSQL = "UPDATE C SET BRUTO = QRY.NILAI, NETTO = (QRY.NILAI + C.MATERAI - C.DISCOUNT) FROM SIT01A C INNER JOIN ( ";
                        sSQL += "SELECT A.NO_BUKTI, SUM(B.HARGA) NILAI ";
                        sSQL += "FROM SIT01A A INNER JOIN SIT01B B ON A.NO_BUKTI = B.NO_BUKTI ";
                        sSQL += "GROUP BY A.NO_BUKTI ";
                        sSQL += ") QRY ON C.NO_BUKTI = QRY.NO_BUKTI ";
                        sSQL += "WHERE C.NO_REF IN (";
                        foreach (var faktur in newFakturs)
                        {
                            sSQL += "'" + faktur.NO_REF + "' , ";
                        }
                        sSQL = sSQL.Substring(0, sSQL.Length - 2) + ")";

                        var resultUpdate = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                        //end add 18/10/2019, hitung ulang bruto,netto

                        //add by Tri 26 Nov 2019, update stok ke mp 
                        updateStockMarketPlace(listBarangUpdateStock, "[UPL_FA][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                        //end add by Tri 26 Nov 2019, update stok ke mp 

                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            ErasoftDbContext.ARF01C.RemoveRange(newARF01Cs);
                        }
                        catch (Exception)
                        { }
                        try
                        {
                            ErasoftDbContext.SIT01A.RemoveRange(newFakturs);
                        }
                        catch (Exception)
                        { }
                        try
                        {
                            ErasoftDbContext.SIT01B.RemoveRange(newFaktursDetails);
                        }
                        catch (Exception)
                        { }

                        try
                        {
                            message = "Faktur Tokopedia gagal diupload, terjadi error." + System.Environment.NewLine;
                            message += "Error : " + (ex.InnerException == null ? ex.Message : (ex.InnerException.InnerException == null ? ex.InnerException.Message : ex.InnerException.InnerException.Message));
                            tw.WriteLine(message);

                            newLogImportFaktur.LAST_FAKTUR_UPLOADED = "Error. Gagal Upload.";
                            newLogImportFaktur.LAST_FAKTUR_UPLOADED_DATETIME = DateTime.Now;
                            ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
                            ErasoftDbContext.SaveChanges();

                            transaction.Commit();
                        }
                        catch (Exception ex2)
                        {
                            transaction.Rollback();
                        }
                    }
                }
                #endregion

                tw.Close();
            }


            //var partialVm = new FakturViewModel()
            //{
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //    ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == cust).OrderByDescending(a => a.UPLOAD_DATETIME).ToList()
            //};

            ActionResult ret = RefreshTableUploadFaktur(1, cust);
            return ret;
            //return new EmptyResult();
            //return File(path, System.Net.Mime.MediaTypeNames.Application.Octet, Path.GetFileName(path));
        }
        public ActionResult UploadFakturBukaLapak()
        {
            //AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = usernameLogin;
            UploadFakturResult result = new UploadFakturResult
            {
                success = "0",
                resultMessage = ""
            };
            //var data = new List<UploadFakturTokpedDataDetail>();
            List<BukaLapakExcelFaktur> records = new List<BukaLapakExcelFaktur>();
            string cust = Request["cust"];
            string nama_cust = Request["nama_cust"];
            string perso = Request["perso"];
            for (int file_index = 0; file_index < Request.Files.Count; file_index++)
            {
                var file = Request.Files[file_index];
                TextReader tr;
                string fileName = file.FileName;
                var fExt = fileName.Split('.');
                if (file != null && file.ContentLength > 0)
                {
                    byte[] dataByte;
                    using (Stream inputStream = file.InputStream)
                    {
                        MemoryStream memoryStream = inputStream as MemoryStream;
                        if (memoryStream == null)
                        {
                            memoryStream = new MemoryStream();
                            inputStream.CopyTo(memoryStream);
                        }
                        dataByte = memoryStream.ToArray();
                        tr = new StreamReader(inputStream);
                    }
                    if (fExt[fExt.Length - 1] == "csv")
                    {
                        string namaFile = dbPathEra + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmssffff") + ".csv";
                        System.IO.File.WriteAllBytes(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile), dataByte);
                        using (var sr = new StreamReader(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile)))
                        {
                            var reader = new CsvReader(sr);
                            reader.Configuration.Delimiter = ";";
                            //reader.Configuration.BadDataFound = null;
                            //reader.Configuration.HeaderValidated = null;
                            //reader.Configuration.MissingFieldFound = null;
                            reader.Configuration.PrepareHeaderForMatch = (header, index) => Regex.Replace(header, @"\s", string.Empty);
                            var records_excell = reader.GetRecords<BukaLapakExcelFaktur>();
                            //var recCount = records_excell.Count();
                            //if (recCount > 0)
                            try
                            {
                                foreach (var dataFaktur in records_excell)
                                {
                                    var a = new BukaLapakExcelFaktur
                                    {
                                        Tanggal = dataFaktur.Tanggal,
                                        IDTransaksi = dataFaktur.IDTransaksi,
                                        AlamatPembeli = dataFaktur.AlamatPembeli,
                                        BiayaAsuransi = dataFaktur.BiayaAsuransi,
                                        BiayaPengiriman = dataFaktur.BiayaPengiriman,
                                        DetailDropshipper = dataFaktur.DetailDropshipper,
                                        HargaProduk = dataFaktur.HargaProduk,
                                        HPPembeli = dataFaktur.HPPembeli,
                                        JumlahProduk = dataFaktur.JumlahProduk,
                                        KecamatanPembeli = dataFaktur.KecamatanPembeli,
                                        KodePosPembeli = dataFaktur.KodePosPembeli,
                                        KodeTracking = dataFaktur.KodeTracking,
                                        KotaPembeli = dataFaktur.KotaPembeli,
                                        Kurir = dataFaktur.Kurir,
                                        NamaDropshipper = dataFaktur.NamaDropshipper,
                                        NamaProduk = dataFaktur.NamaProduk,
                                        Pembeli = dataFaktur.Pembeli,
                                        Penjual = dataFaktur.Penjual,
                                        PropinsiPembeli = dataFaktur.PropinsiPembeli,
                                        SKU = dataFaktur.SKU,
                                        Status = dataFaktur.Status,
                                        TotalTerbayar = dataFaktur.TotalTerbayar,
                                        TransaksiDropshipper = dataFaktur.TransaksiDropshipper,
                                        UsernamePembeli = dataFaktur.UsernamePembeli,
                                        Varian = dataFaktur.Varian,
                                        BeratPerSKU = dataFaktur.BeratPerSKU
                                    };
                                    if (!string.IsNullOrEmpty(a.Status))
                                    {
                                        //if (a.Status == "Diterima & Selesai" || a.Status == "Diproses Pelapak")
                                        if (a.Status == "Diterima & Selesai" || a.Status == "Diproses Pelapak" || a.Status == "Driver menuju lokasi Pelapak")
                                        {
                                            records.Add(a);
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                //return JsonErrorMessage(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                                return JsonErrorMessage("Format file yang anda upload salah.");
                            }

                        }
                        System.IO.File.Delete(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile));

                    }
                    else if (fExt[fExt.Length - 1] == "xlsx")
                    {
                        using (MemoryStream stream = new MemoryStream(dataByte))
                        {
                            using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                            {
                                //loop all worksheets
                                var worksheet = excelPackage.Workbook.Worksheets[1];
                                //string[] mapColumn = { "Count", "Invoice", "PaymentDate", "OrderStatus", "ProductID", "ProductName", "Quantity", "StockKeepingUnitSKU", "Notes", "PriceRp", "CustomerName", "CustomerPhone", "Recipient", "RecipientNumber", "RecipientAddress", "Courier", "ShippingPricefeeRp", "InsuranceRp", "TotalShippingFeeRp", "TotalAmountRp", "AWB", "JenisLayanan" };
                                for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                {
                                    //Columns start from A5, start mapping column
                                    //Count, Invoice, Payment Date, Order Status, Product ID, Product Name, Quantity, Stock Keeping Unit (SKU), Notes, Price (Rp.), Customer Name, Customer Phone, Recipient, Recipient Number, Recipient Address, Courier, Shipping Price + fee (Rp.), Insurance (Rp.), Total Shipping Fee (Rp.), Total Amount (Rp.), AWB, Jenis Layanan
                                    //var newData = new UploadFakturTokpedDataDetail();
                                    //for (int c = 0; c < mapColumn.Count(); c++)
                                    //{
                                    //    var ColumnName = mapColumn[c];
                                    //    newData[ColumnName] = worksheet.Cells[i, c + 1].Value == null ? "" : Convert.ToString(worksheet.Cells[i, c + 1].Value);
                                    //}
                                    //data.Add(newData);
                                    var a = new BukaLapakExcelFaktur
                                    {
                                        Tanggal = worksheet.Cells[i, 1].Value == null ? DateTime.Now : Convert.ToDateTime(worksheet.Cells[i, 1].Value),
                                        IDTransaksi = worksheet.Cells[i, 2].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 2].Value),
                                        TransaksiDropshipper = worksheet.Cells[i, 3].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 3].Value),
                                        NamaDropshipper = worksheet.Cells[i, 4].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 4].Value),
                                        DetailDropshipper = worksheet.Cells[i, 5].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 5].Value),
                                        Penjual = worksheet.Cells[i, 6].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 6].Value),
                                        Pembeli = worksheet.Cells[i, 7].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 7].Value),
                                        UsernamePembeli = worksheet.Cells[i, 8].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 8].Value),
                                        HPPembeli = worksheet.Cells[i, 9].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 9].Value),
                                        AlamatPembeli = worksheet.Cells[i, 10].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 10].Value),
                                        KecamatanPembeli = worksheet.Cells[i, 11].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 11].Value),
                                        KotaPembeli = worksheet.Cells[i, 12].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 12].Value),
                                        PropinsiPembeli = worksheet.Cells[i, 13].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 13].Value),
                                        KodePosPembeli = worksheet.Cells[i, 14].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 14].Value),
                                        NamaProduk = worksheet.Cells[i, 15].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 15].Value),
                                        HargaProduk = worksheet.Cells[i, 16].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 16].Value),
                                        BiayaPengiriman = worksheet.Cells[i, 17].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 17].Value),
                                        BiayaAsuransi = worksheet.Cells[i, 18].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 18].Value),
                                        TotalTerbayar = worksheet.Cells[i, 19].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 19].Value),
                                        JumlahProduk = worksheet.Cells[i, 20].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 20].Value),
                                        SKU = worksheet.Cells[i, 21].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 21].Value),
                                        //Varian = worksheet.Cells[i, 22].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 22].Value),
                                        //Kurir = worksheet.Cells[i, 23].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 23].Value),
                                        //KodeTracking = worksheet.Cells[i, 24].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 24].Value),
                                        //Status = worksheet.Cells[i, 25].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 25].Value),
                                        BeratPerSKU = worksheet.Cells[i, 22].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 22].Value),
                                        Varian = worksheet.Cells[i, 23].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 23].Value),
                                        Kurir = worksheet.Cells[i, 24].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 24].Value),
                                        KodeTracking = worksheet.Cells[i, 25].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 25].Value),
                                        Status = worksheet.Cells[i, 26].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 26].Value),
                                    };
                                    if (records.Where(m => m.IDTransaksi == a.IDTransaksi).ToList().Count() > 0)
                                    {
                                        a.IDTransaksi = "";
                                    }
                                    if (!string.IsNullOrEmpty(a.Status))
                                    {
                                        if (a.Status == "Diterima & Selesai" || a.Status == "Diproses Pelapak" || a.Status == "Driver menuju lokasi Pelapak")
                                        {
                                            records.Add(a);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    //using (MemoryStream stream = new MemoryStream(dataByte))
                    //{
                    //    using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                    //    {
                    //        //loop all worksheets
                    //        var worksheet = excelPackage.Workbook.Worksheets[1];
                    //        string[] mapColumn = { "Count", "Invoice", "PaymentDate", "OrderStatus", "ProductID", "ProductName", "Quantity", "StockKeepingUnitSKU", "Notes", "PriceRp", "CustomerName", "CustomerPhone", "Recipient", "RecipientNumber", "RecipientAddress", "Courier", "ShippingPricefeeRp", "InsuranceRp", "TotalShippingFeeRp", "TotalAmountRp", "AWB", "JenisLayanan" };
                    //        for (int i = 5; i <= worksheet.Dimension.End.Row; i++)
                    //        {
                    //            //Columns start from A5, start mapping column
                    //            //Count, Invoice, Payment Date, Order Status, Product ID, Product Name, Quantity, Stock Keeping Unit (SKU), Notes, Price (Rp.), Customer Name, Customer Phone, Recipient, Recipient Number, Recipient Address, Courier, Shipping Price + fee (Rp.), Insurance (Rp.), Total Shipping Fee (Rp.), Total Amount (Rp.), AWB, Jenis Layanan
                    //            var newData = new UploadFakturTokpedDataDetail();
                    //            for (int c = 0; c < mapColumn.Count(); c++)
                    //            {
                    //                var ColumnName = mapColumn[c];
                    //                newData[ColumnName] = worksheet.Cells[i, c + 1].Value == null ? "" : Convert.ToString(worksheet.Cells[i, c + 1].Value);
                    //            }
                    //            data.Add(newData);
                    //        }
                    //    }
                    //}
                }
            }

            #region Logging
            string message = "";
            string filename = "Log_Upload_Inv_Bukalapak_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + dbPathEra + "/"), filename);

            LOG_IMPORT_FAKTUR newLogImportFaktur = new LOG_IMPORT_FAKTUR
            {
                CUST = cust,
                UPLOADER = uname,
                //UPLOAD_DATETIME = DateTime.Now,
                UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                //end change by nurul 28/11/2019
                LOG_FILE = filename,
            };
            string lastFakturInUpload = "";
            DateTime lastFakturDateInUpload = DateTime.Now;
            #endregion

            if (records.Count() == 0)
            {
                return JsonErrorMessage("Tidak ada data faktur yang dapat diupload.");
            }
            else
            {
                if (!System.IO.File.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/" + dbPathEra + "/"), ""));
                    var asd = System.IO.File.Create(path);
                    asd.Close();
                }
                StreamWriter tw = new StreamWriter(path);

                #region Proses Upload
                var lastRecnumARF01C = ErasoftDbContext.ARF01C.Max(p => p.RecNum);
                var listFakturInDb = ErasoftDbContext.SIT01A.OrderBy(p => p.RecNum).ToList();
                var listPesananInDb = ErasoftDbContext.SOT01A.Where(p => p.CUST == cust).Select(p => new { noref = p.NO_REFERENSI, nobuk = p.NO_BUKTI }).ToList();
                var market = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).FirstOrDefault();
                //add by Tri, 20/9/19
                if (lastRecnumARF01C == null)
                    lastRecnumARF01C = 0;
                //end add by Tri, 20/9/19
                //var listItem = ErasoftDbContext.STF02.ToList(); 'change by nurul 21/1/2019
                //change 18/10/2019, tuning
                //var listItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
                var listBRGItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Select(p => p.BRG).ToList();
                //end change 18/10/2019, tuning
                var listSTF02H = ErasoftDbContext.STF02H.Where(p => listBRGItem.Contains(p.BRG) && p.IDMARKET == market.RecNum).ToList();


                string tahun = DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2);
                var digitAkhir = "";
                var noOrder = "";
                var lastRecNum = 0;
                if (listFakturInDb.Count == 0)
                {
                    digitAkhir = "000001";
                    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                }
                else
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    var lastBukti = ErasoftDbContext.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(NO_BUKTI), 5, 6), '0') FROM SIT01A WHERE NO_BUKTI LIKE '%SI" + tahun + "%'").First();
                    //lastRecNum = listFakturInDb.Last().RecNum.HasValue ? Convert.ToInt32(listFakturInDb.Last().RecNum) : 0;
                    lastRecNum = Convert.ToInt32(lastBukti);
                    //end change by nurul 23/12/2019, perbaikan no bukti
                    if (lastRecNum == 0)
                    {
                        lastRecNum = 1;
                    }
                }

                string buyercode = "";
                string al2 = "";
                string al3 = "";

                bool adaWarning = false;
                bool masihFakturYangSama = true;
                bool fakturLolosValidasi = true;
                bool barangFakturLolosValidasi = true;
                string messageWarning = "";
                string faktur_invoice = "";

                List<ARF01C> newARF01Cs = new List<ARF01C>();
                List<SIT01A> newFakturs = new List<SIT01A>();
                List<SIT01B> newFaktursDetails = new List<SIT01B>();
                //for (int i = 0; i < records.Count(); i++)
                foreach (var faktur in records)
                {
                    //UploadFakturTokpedDataDetail faktur = data[i];

                    #region  validasi
                    //cek faktur sudah pernah di upload
                    if (!string.IsNullOrWhiteSpace(faktur.IDTransaksi))
                    {
                        //if (i > 0)
                        //{
                        //    masihFakturYangSama = false;
                        //}
                        faktur_invoice = faktur.IDTransaksi;
                        message = "";
                        messageWarning = "";
                        adaWarning = false;
                        fakturLolosValidasi = true;
                        //var cekFakturExists = listFakturInDb.Where(p => p.JENIS_FORM == "2" && p.NO_REF == faktur_invoice).FirstOrDefault();
                        var cekFakturExists = listFakturInDb.Where(p => p.JENIS_FORM == "2" && (p.NO_REF ?? "").Contains(faktur_invoice) && p.CUST == cust).FirstOrDefault();
                        if (cekFakturExists != null)
                        {
                            fakturLolosValidasi = false;
                            //log faktur sudah pernah di upload
                            message = "Faktur [" + faktur_invoice + "] sudah pernah diupload, dengan nomor faktur : [" + cekFakturExists.NO_BUKTI + "]." + System.Environment.NewLine;
                            tw.WriteLine(message);
                        }
                        else
                        {
                            var cekPesananExists = listPesananInDb.Where(p => (p.noref ?? "").Contains(faktur_invoice)).FirstOrDefault();
                            if (cekPesananExists != null)
                            {
                                fakturLolosValidasi = false;
                                message = "Faktur [" + faktur_invoice + "] sudah ada di pesanan : [" + cekPesananExists.nobuk + "]." + System.Environment.NewLine;
                                tw.WriteLine(message);
                            }
                        }
                    }
                    //else
                    //{
                    //    masihFakturYangSama = true;
                    //    messageWarning = "";
                    //}
                    if (fakturLolosValidasi)
                    {
                        barangFakturLolosValidasi = true;
                        //cek barang sudah ada di master
                        var cekItem = listSTF02H.Where(p => (p.BRG_MP ?? "").Contains((string.IsNullOrEmpty(faktur.SKU) ? "empty_sku_excel" : faktur.SKU))).FirstOrDefault();
                        if (cekItem == null)
                        {
                            barangFakturLolosValidasi = false;
                            //add by calvin 18 juni 2019
                            //if (!string.IsNullOrWhiteSpace(faktur.SKU))
                            //{
                            //    var cekItemBySKU = listSTF02H.Where(p => (p.BRG) == (faktur.SKU)).FirstOrDefault();
                            //    if (cekItemBySKU != null)
                            //    {
                            //        barangFakturLolosValidasi = true;
                            //    }
                            //}
                            if (!string.IsNullOrWhiteSpace(faktur.SKU))
                            {
                                var cekItemBySKU = listSTF02H.Where(p => (p.BRG) == (faktur.SKU)).FirstOrDefault();
                                if (cekItemBySKU != null)
                                {
                                    barangFakturLolosValidasi = true;
                                }
                                else
                                {
                                    //change 18/10/2019, tuning
                                    //if (listItem.Where(p => p.BRG == faktur.SKU).Count() > 0)
                                    if (listBRGItem.Contains(faktur.SKU))
                                    //end change 18/10/2019, tuning
                                    {
                                        string sSQL = "insert into stf02h(brg, idmarket, akunmarket, username, hjual, display) ";
                                        sSQL += "select a.brg, '" + market.RecNum + "', '" + market.PERSO + "', 'auto_create_pelanggan', 0, 0 ";
                                        sSQL += "from stf02 a left join stf02h b on a.brg = b.brg and b.idmarket = '" + market.RecNum + "' ";
                                        sSQL += "where a.brg = '" + faktur.SKU + "' and isnull(b.brg, '') = ''";

                                        int berhasilinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                        if (berhasilinsert > 0)
                                        {
                                            barangFakturLolosValidasi = true;
                                            //change 18/10/2019, tuning
                                            //listItem = ErasoftDbContext.STF02.AsNoTracking().Where(a => a.TYPE == "3").ToList();
                                            //listBRGItem = listItem.Select(p => p.BRG).ToList();
                                            listBRGItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Select(p => p.BRG).ToList();
                                            //end change 18/10/2019, tuning
                                            listSTF02H = ErasoftDbContext.STF02H.AsNoTracking().Where(p => listBRGItem.Contains(p.BRG) && p.IDMARKET == market.RecNum).ToList();
                                        }
                                    }
                                }
                            }
                            //end add by calvin 18 juni 2019
                            if (!barangFakturLolosValidasi)
                            {
                                adaWarning = true;
                                if (message == "")
                                {
                                    message = "Faktur Bukalapak [" + faktur_invoice + "] berhasil diupload dengan warning." + System.Environment.NewLine;
                                    message += "Mohon perbaiki data pada nomor faktur [" + faktur_invoice + "] :" + System.Environment.NewLine;
                                    tw.WriteLine(message);
                                }
                                messageWarning = "- Item [" + (string.IsNullOrEmpty(faktur.SKU) ? faktur.NamaProduk : faktur.SKU) + "] belum ada di Master Barang MasterOnline." + System.Environment.NewLine;
                                tw.WriteLine(messageWarning);
                            }
                        }
                    }
                    #endregion

                    if (fakturLolosValidasi)
                    {
                        buyercode = "";
                        if (!string.IsNullOrWhiteSpace(faktur.IDTransaksi))
                        {
                            lastRecNum++;
                            digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                            //noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                            noOrder = $"SI{tahun}{digitAkhir}";
                        }

                        #region insert pembeli
                        if (!string.IsNullOrWhiteSpace(faktur.IDTransaksi))
                        {
                            string kabupaten = faktur.KotaPembeli;
                            string provinsi = faktur.PropinsiPembeli;
                            var cekPembeli = (from p in ErasoftDbContext.ARF01C
                                              where p.EMAIL == (faktur.Pembeli.Replace(" ", "").Length > 36 ? faktur.Pembeli.Replace(" ", "").Substring(0, 36) + "@bukalapak.com" : faktur.Pembeli.Replace(" ", "") + "@bukalapak.com")
                                              select new { p.BUYER_CODE, p.AL2, p.AL3 }).FirstOrDefault();
                            if (cekPembeli == null)
                            {
                                lastRecnumARF01C++;
                                var UniqueCode = false;
                                while (!UniqueCode)
                                {
                                    var currentBuyerCode = lastRecnumARF01C.ToString().PadLeft(10, '0');
                                    var cekDuplikatArf01c = (from p in ErasoftDbContext.ARF01C where p.BUYER_CODE == currentBuyerCode select p.BUYER_CODE).FirstOrDefault();
                                    if (cekDuplikatArf01c == null)
                                    {
                                        UniqueCode = true;
                                    }
                                    else
                                    {
                                        lastRecnumARF01C++;
                                    }
                                }
                                string noTelp = "-";
                                if (!string.IsNullOrWhiteSpace(faktur.HPPembeli.Trim()))
                                {
                                    noTelp = faktur.HPPembeli;
                                }

                                var temp_AL_KIRIM = faktur.AlamatPembeli;
                                string AL_KIRIM1 = temp_AL_KIRIM;
                                string AL_KIRIM2 = "";
                                string AL_KIRIM3 = "";
                                if (temp_AL_KIRIM.Length > 30)
                                {
                                    AL_KIRIM1 = temp_AL_KIRIM.Substring(0, 30);
                                    temp_AL_KIRIM = temp_AL_KIRIM.Substring(30, temp_AL_KIRIM.Length - 30);

                                    AL_KIRIM2 = temp_AL_KIRIM;
                                    if (temp_AL_KIRIM.Length > 30)
                                    {
                                        AL_KIRIM2 = temp_AL_KIRIM.Substring(0, 30);
                                        temp_AL_KIRIM = temp_AL_KIRIM.Substring(30, temp_AL_KIRIM.Length - 30);

                                        AL_KIRIM3 = temp_AL_KIRIM;
                                        if (temp_AL_KIRIM.Length > 30)
                                        {
                                            AL_KIRIM3 = temp_AL_KIRIM.Substring(0, 27) + "...";
                                        }
                                    }
                                }

                                ARF01C newPembeli = new ARF01C
                                {
                                    BUYER_CODE = lastRecnumARF01C.ToString().PadLeft(10, '0'),
                                    NAMA = faktur.Pembeli.Length > 30 ? faktur.Pembeli.Substring(0, 27) + "..." : faktur.Pembeli,
                                    AL = faktur.AlamatPembeli,
                                    TLP = noTelp,
                                    PERSO = perso,
                                    TERM = 0,
                                    LIMIT = 0,
                                    PKP = "0",
                                    KLINK = "01",
                                    KODE_CABANG = 1,
                                    VLT = "IDR",
                                    KDHARGA = "01",
                                    AL_KIRIM1 = AL_KIRIM1,
                                    AL_KIRIM2 = AL_KIRIM2,
                                    AL_KIRIM3 = AL_KIRIM3,
                                    DISC_NOTA = 0,
                                    NDISC_NOTA = 0,
                                    DISC_ITEM = 0,
                                    NDISC_ITEM = 0,
                                    STATUS = "1",
                                    LABA = 0,
                                    TIDAK_HIT_UANG_R = false,
                                    No_Seri_Pajak = "FP",
                                    TGL_INPUT = DateTime.Now,
                                    USERNAME = "UPLOAD_FAKTUR_BL",
                                    KODEPOS = faktur.KodePosPembeli,
                                    EMAIL = faktur.Pembeli.Replace(" ", "").Length > 36 ? faktur.Pembeli.Replace(" ", "").Substring(0, 36) + "@bukalapak.com" : faktur.Pembeli.Replace(" ", "") + "@bukalapak.com",
                                    KODEKABKOT = "3174",
                                    KODEPROV = "31",
                                    NAMA_KABKOT = kabupaten.Length > 50 ? kabupaten.Substring(0, 47) + "..." : kabupaten,
                                    NAMA_PROV = provinsi.Length > 50 ? provinsi.Substring(0, 47) + "..." : provinsi,
                                };
                                if (newARF01Cs.Where(m => m.EMAIL == newPembeli.EMAIL).ToList().Count() == 0)
                                    newARF01Cs.Add(newPembeli);
                                //ErasoftDbContext.ARF01C.Add(newPembeli);

                                buyercode = newPembeli.BUYER_CODE;
                                al2 = newPembeli.AL2;
                                al3 = newPembeli.AL3;
                            }
                            else
                            {
                                buyercode = cekPembeli.BUYER_CODE;
                                al2 = cekPembeli.AL2;
                                al3 = cekPembeli.AL3;
                            }
                        }
                        #endregion
                        #region insert sit01a
                        if (!string.IsNullOrWhiteSpace(faktur.IDTransaksi))
                        {
                            //jika blank berarti masih faktur yang sama, item ke dua
                            SIT01A newfaktur = new SIT01A
                            {
                                JENIS_FORM = "2",
                                NO_BUKTI = noOrder,
                                NO_F_PAJAK = "-",
                                NO_SO = "-",
                                CUST = cust,
                                NAMAPEMESAN = faktur.Pembeli.Length > 30 ? faktur.Pembeli.Substring(0, 27) + "..." : faktur.Pembeli,
                                PEMESAN = buyercode,
                                NAMA_CUST = nama_cust,
                                AL = faktur.AlamatPembeli,
                                TGL = Convert.ToDateTime(faktur.Tanggal),
                                PPN_Bln_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.Tanggal).ToString("MM")),
                                PPN_Thn_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.Tanggal).ToString("yyyy").Substring(2, 2)),
                                USERNAME = "UPLOAD_FAKTUR_BL",
                                JENIS_RETUR = "-",
                                STATUS = "1",
                                ST_POSTING = "T",
                                VLT = "IDR",
                                NO_FA_OUTLET = "-",
                                NO_LPB = "-",
                                GROUP_LIMIT = "-",
                                KODE_ANGKUTAN = "-",
                                JENIS_MOBIL = "-",
                                JTRAN = "SI",
                                JENIS = "1",
                                TUKAR = 1,
                                TUKAR_PPN = 1,
                                SOPIR = "-",
                                //KET = "Catatan Dari Pembeli : " + faktur.Notes,
                                //add by nurul 31/1/2020, ket dibuat blank biar ga error saat posting
                                KET = "",
                                //end add by nurul 31/1/2020, ket dibuat blank biar ga error saat posting
                                PPNBM = 0,
                                NILAI_PPNBM = 0,
                                KODE_SALES = "-",
                                KODE_WIL = "-",
                                U_MUKA = 0,
                                U_MUKA_FA = 0,
                                TERM = 0,
                                TGL_JT_TEMPO = Convert.ToDateTime(faktur.Tanggal),
                                BRUTO = Convert.ToDouble(faktur.TotalTerbayar.Replace("Rp ", "").Replace(".", "")) - Convert.ToDouble(faktur.BiayaPengiriman.Replace("Rp ", "").Replace(".", "")),
                                PPN = 0,
                                NILAI_PPN = 0,
                                DISCOUNT = 0,
                                NILAI_DISC = 0,
                                MATERAI = Convert.ToDouble(faktur.BiayaPengiriman.Replace("Rp ", "").Replace(".", "")),
                                NETTO = Convert.ToDouble(faktur.TotalTerbayar.Replace("Rp ", "").Replace(".", "")),
                                TGLINPUT = DateTime.Now,
                                NO_REF = faktur_invoice,
                                NAMA_CUST_QQ = "-",
                                STATUS_LOADING = "-",
                                NO_PO_CUST = "-",
                                PENGIRIM = "-",
                                NAMAPENGIRIM = "-",
                                ZONA = "-",
                                UCAPAN = "-",
                                N_UCAPAN = "-",
                                SUPP = "-",
                                KOMISI = 0,
                                N_KOMISI = 0,
                                TOTAL_TITIPAN = 0
                            };
                            //if (newFakturs.Where(m => m.NO_REF == faktur_invoice).ToList().Count() == 0)
                            //{
                            newFakturs.Add(newfaktur);

                            //ErasoftDbContext.SIT01A.Add(newfaktur);
                            lastFakturInUpload = faktur_invoice;
                            lastFakturDateInUpload = Convert.ToDateTime(faktur.Tanggal);
                            //}
                        }
                        #endregion
                        #region insert sit01b
                        SIT01B newfakturdetail = new SIT01B
                        {
                            JENIS_FORM = "2",
                            NO_BUKTI = noOrder,
                            USERNAME = "UPLOAD_FAKTUR_BL",
                            CATATAN = "-",
                            TGLINPUT = DateTime.Now,
                            //NILAI_DISC = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            NILAI_DISC = 0,
                            DISCOUNT = 0,
                            //NILAI_DISC_1 = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            NILAI_DISC_1 = 0,
                            DISCOUNT_2 = 0,
                            NILAI_DISC_2 = 0,
                            DISCOUNT_3 = 0,
                            NILAI_DISC_3 = 0,
                            DISCOUNT_4 = 0,
                            NILAI_DISC_4 = 0,
                            DISCOUNT_5 = 0,
                            NILAI_DISC_5 = 0,
                            DISC_TITIPAN = 0,
                            BRG = string.IsNullOrWhiteSpace(faktur.SKU) ? "no_sku_bl_" + DateTime.Now.ToString("yyyyMMddHHmmss") : faktur.SKU,
                            SATUAN = "2",
                            //change 15/10/2019, harga produk sudah dikalikan dengan qty
                            //H_SATUAN = Convert.ToDouble(faktur.HargaProduk.Replace("Rp ", "").Replace(".", "")),
                            H_SATUAN = Convert.ToDouble(faktur.HargaProduk.Replace("Rp ", "").Replace(".", "")) / Convert.ToDouble(faktur.JumlahProduk),
                            //end change 15/10/2019, harga produk sudah dikalikan dengan qty
                            QTY = Convert.ToDouble(faktur.JumlahProduk),
                            //change 15/10/2019, harga produk sudah dikalikan dengan qty
                            //HARGA = Convert.ToDouble(faktur.JumlahProduk) * Convert.ToDouble(faktur.HargaProduk.Replace("Rp ", "").Replace(".", "")),
                            HARGA = Convert.ToDouble(faktur.HargaProduk.Replace("Rp ", "").Replace(".", "")),
                            //end change 15/10/2019, harga produk sudah dikalikan dengan qty
                            QTY_KIRIM = 0,
                            QTY_RETUR = 0,
                            GUDANG = "001" //buat default gudang 001, untuk semua akun baru
                        };

                        //add by nurul 21/9/2020, brg multi sku 
                        var tempBrgDetail = newfakturdetail.BRG;
                        //end add by nurul 21/9/2020, brg multi sku 
                        //ErasoftDbContext.SIT01B.Add(newfakturdetail);
                        if (!barangFakturLolosValidasi)
                        {
                            newfakturdetail.BRG = "NOT_FOUND";
                        }
                        //add by nurul 21/9/2020, brg multi sku 
                        else
                        {
                            if (!string.IsNullOrEmpty(newfakturdetail.BRG))
                            {
                                var cekTypeBrg = ErasoftDbContext.STF02.Where(a => a.BRG == newfakturdetail.BRG).SingleOrDefault();
                                if (cekTypeBrg.BRG != null)
                                {
                                    if (cekTypeBrg.TYPE == "6" && cekTypeBrg.KUBILASI == 1 && !string.IsNullOrEmpty(cekTypeBrg.BRG_NON_OS))
                                    {
                                        newfakturdetail.BRG = cekTypeBrg.BRG_NON_OS;
                                        newfakturdetail.BRG_MULTISKU = cekTypeBrg.BRG;
                                    }
                                }
                            }
                        }
                        //end add by nurul 21/9/2020, brg multi sku 
                        newfakturdetail.CATATAN = "INVOICE NO : " + faktur_invoice + "_;_" + faktur.NamaProduk.Replace('\'', '`') + " " + faktur.Varian.Replace('\'', '`') + "_;_" + (faktur.SKU ?? "SKU_IS_EMPTY");

                        newFaktursDetails.Add(newfakturdetail);
                        #endregion
                    }
                    else
                    {
                        var fakturPerluDiRemove = (from p in newFakturs where p.NO_REF == faktur_invoice select p).FirstOrDefault();
                        if (fakturPerluDiRemove != null)
                        {
                            newFakturs.RemoveAll(a => a.NO_REF == faktur_invoice);
                            var detailFakturPerluDiRemove = (from p in newFaktursDetails where p.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI select p).FirstOrDefault();
                            if (detailFakturPerluDiRemove != null)
                            {
                                newFaktursDetails.RemoveAll(a => a.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI);
                            }
                        }
                    }
                }
                #endregion

                #region commit insert

                //record terakhir
                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                {
                    try
                    {
                        //add by Tri 26 Nov 2019, update stok ke mp 
                        var listBarangUpdateStock = newFaktursDetails.Select(p => p.BRG).Where(p => p != "NOT_FOUND").Distinct().ToList();
                        //end add by Tri 26 Nov 2019, update stok ke mp 

                        ErasoftDbContext.ARF01C.AddRange(newARF01Cs);
                        ErasoftDbContext.SaveChanges();
                        if (newFakturs.Count == 0)
                        {
                            lastFakturInUpload = "";
                            lastFakturDateInUpload = DateTime.Now;
                        }
                        ErasoftDbContext.SIT01A.AddRange(newFakturs);
                        ErasoftDbContext.SaveChanges();
                        ErasoftDbContext.SIT01B.AddRange(newFaktursDetails);
                        ErasoftDbContext.SaveChanges();

                        newLogImportFaktur.LAST_FAKTUR_UPLOADED = lastFakturInUpload;
                        newLogImportFaktur.LAST_FAKTUR_UPLOADED_DATETIME = lastFakturDateInUpload;
                        ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
                        ErasoftDbContext.SaveChanges();

                        transaction.Commit();

                        //add 18/10/2019, hitung ulang bruto,netto
                        string sSQL = "UPDATE C SET BRUTO = QRY.NILAI, NETTO = (QRY.NILAI + C.MATERAI - C.DISCOUNT) FROM SIT01A C INNER JOIN ( ";
                        sSQL += "SELECT A.NO_BUKTI, SUM(B.HARGA) NILAI ";
                        sSQL += "FROM SIT01A A INNER JOIN SIT01B B ON A.NO_BUKTI = B.NO_BUKTI ";
                        sSQL += "GROUP BY A.NO_BUKTI ";
                        sSQL += ") QRY ON C.NO_BUKTI = QRY.NO_BUKTI ";
                        sSQL += "WHERE C.NO_REF IN (";
                        foreach (var faktur in newFakturs)
                        {
                            sSQL += "'" + faktur.NO_REF + "' , ";
                        }
                        sSQL = sSQL.Substring(0, sSQL.Length - 2) + ")";

                        var resultUpdate = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                        //end add 18/10/2019, hitung ulang bruto,netto

                        //add by Tri 26 Nov 2019, update stok ke mp 
                        updateStockMarketPlace(listBarangUpdateStock, "[UPL_FA][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                        //end add by Tri 26 Nov 2019, update stok ke mp 

                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            ErasoftDbContext.ARF01C.RemoveRange(newARF01Cs);
                        }
                        catch (Exception)
                        { }
                        try
                        {
                            ErasoftDbContext.SIT01A.RemoveRange(newFakturs);
                        }
                        catch (Exception)
                        { }
                        try
                        {
                            ErasoftDbContext.SIT01B.RemoveRange(newFaktursDetails);
                        }
                        catch (Exception)
                        { }

                        try
                        {
                            message = "Faktur Bukalapak gagal diupload, terjadi error." + System.Environment.NewLine;
                            message += "Error : " + (ex.InnerException == null ? ex.Message : (ex.InnerException.InnerException == null ? ex.InnerException.Message : ex.InnerException.InnerException.Message));
                            tw.WriteLine(message);

                            newLogImportFaktur.LAST_FAKTUR_UPLOADED = "Error. Gagal Upload.";
                            newLogImportFaktur.LAST_FAKTUR_UPLOADED_DATETIME = DateTime.Now;
                            ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
                            ErasoftDbContext.SaveChanges();

                            transaction.Commit();
                        }
                        catch (Exception ex2)
                        {
                            transaction.Rollback();
                        }
                    }
                }
                #endregion

                tw.Close();
            }


            var partialVm = new FakturViewModel()
            {
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == cust).OrderByDescending(a => a.UPLOAD_DATETIME).ToList()
            };

            ActionResult ret = RefreshTableUploadFaktur(1, cust);
            return ret;
            //return new EmptyResult();
            //return File(path, System.Net.Mime.MediaTypeNames.Application.Octet, Path.GetFileName(path));
        }
        //add by Tri 3 Juli 2019, upload faktur bl

        public ActionResult RefreshTableLogErrorUploadPesanan(int? page, string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = cust;
            ViewData["LastPage"] = page;
            string sSQLSelect = "SELECT A.REQUEST_ID," +
                "(SELECT TOP 1 ISNULL(B.CUST_ATTRIBUTE_1, 'Anonim') FROM API_LOG_MARKETPLACE B WHERE A.REQUEST_ID = B.REQUEST_ID) AS CUST_ATTRIBUTE_1, " +
                "(SELECT TOP 1 B.REQUEST_DATETIME FROM API_LOG_MARKETPLACE B WHERE A.REQUEST_ID = B.REQUEST_ID ORDER BY B.REQUEST_DATETIME DESC) AS REQUEST_DATETIME, " +
                "(SELECT TOP 1 ISNULL(B.REQUEST_RESULT, 'Kosong') FROM API_LOG_MARKETPLACE B WHERE A.REQUEST_ID = B.REQUEST_ID ORDER BY B.REQUEST_DATETIME DESC) AS REQUEST_RESULT, " +
                "(SELECT TOP 1 ISNULL(B.REQUEST_EXCEPTION, 'Kosong') FROM API_LOG_MARKETPLACE B WHERE A.REQUEST_ID = B.REQUEST_ID ORDER BY B.REQUEST_DATETIME DESC) AS REQUEST_EXCEPTION " +
                "FROM API_LOG_MARKETPLACE A WHERE A.REQUEST_ACTION like '%Upload Excel Pesanan%' " +
                "GROUP BY A.REQUEST_ID ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(DISTINCT(REQUEST_ID)) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM API_LOG_MARKETPLACE ";
            //sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            //if (cust != "")
            //{
            //sSQL2 += "WHERE (A.CUST LIKE '%" + cust + "%' ) ";
            sSQL2 += "WHERE (REQUEST_ACTION LIKE '%Upload Excel Pesanan%' ) ";
            //}

            var minimal_harus_ada_item_untuk_current_page = (page * 5) - 4;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                if (pagenumber <= 0)
                {
                    pagenumber = 0;
                }
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY REQUEST_DATETIME DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 5) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 5 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<API_LOG_MARKETPLACE_HANGFIRE>(sSQLSelect + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<API_LOG_MARKETPLACE_HANGFIRE> pageOrders = new StaticPagedList<API_LOG_MARKETPLACE_HANGFIRE>(listPromosi, pagenumber + 1, 5, totalCount.JUMLAH);
            return PartialView("LogErrorUploadPesanan", pageOrders);
        }

        public ActionResult RefreshTableUploadFaktur(int? page, string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = cust;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.UPLOADER AS UPLOADER , A.LAST_FAKTUR_UPLOADED AS LAST_FAKTUR_UPLOADED, A.UPLOAD_DATETIME AS UPLOAD_DATETIME, A.LAST_FAKTUR_UPLOADED_DATETIME AS LAST_FAKTUR_UPLOADED_DATETIME, ISNULL(B.PERSO,'') AS CUST, A.LOG_FILE AS LOG_FILE ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM LOG_IMPORT_FAKTUR A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            if (cust != "")
            {
                sSQL2 += "WHERE (A.CUST LIKE '%" + cust + "%' ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 5) - 4;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                //if (pagenumber == 0)
                //{
                //    pagenumber = 1;
                //}
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.UPLOAD_DATETIME DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 5) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<ListImportFaktur>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<ListImportFaktur> pageOrders = new StaticPagedList<ListImportFaktur>(listPromosi, pagenumber + 1, 5, totalCount.JUMLAH);
            return PartialView("UploadFakturView", pageOrders);
        }

        [HttpPost]
        public ActionResult UploadFakturShopee(UploadFakturShopeeDataDetail[] data, string cust, string nama_cust, string perso)
        {
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            UploadFakturResult result = new UploadFakturResult
            {
                success = "0",
                resultMessage = ""
            };

            #region Logging
            string message = "";
            string filename = "Log_Upload_Inv_Shopee_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), filename);

            LOG_IMPORT_FAKTUR newLogImportFaktur = new LOG_IMPORT_FAKTUR
            {
                CUST = cust,
                UPLOADER = uname,
                //UPLOAD_DATETIME = DateTime.Now,
                UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                //end change by nurul 28/11/2019
                LOG_FILE = filename,
            };
            string lastFakturInUpload = "";
            DateTime lastFakturDateInUpload = DateTime.Now;
            #endregion

            if (data == null)
            {
                return JsonErrorMessage("Format data tidak sesuai");
            }
            else
            {
                if (!System.IO.File.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), ""));
                    var asd = System.IO.File.Create(path);
                    asd.Close();
                }
                StreamWriter tw = new StreamWriter(path);

                #region Proses Upload
                var lastRecnumARF01C = ErasoftDbContext.ARF01C.Max(p => p.RecNum);
                var listFakturInDb = ErasoftDbContext.SIT01A.OrderBy(p => p.RecNum).ToList();
                var market = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).FirstOrDefault();

                //var listItem = ErasoftDbContext.STF02.ToList();
                //change 18/10/2019, tuning
                //var listItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList();
                //var listBRGItem = listItem.Select(p => p.BRG).ToList();
                var listBRGItem = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").Select(p => p.BRG).ToList();
                //end change 18/10/2019, tuning
                var listSTF02H = ErasoftDbContext.STF02H.Where(p => listBRGItem.Contains(p.BRG) && p.IDMARKET == market.RecNum).ToList();

                //change by nurul 23/12/2019, perbaikan no bukti
                string tahun = DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2);
                var digitAkhir = "";
                var noOrder = "";
                var lastRecNum = 0;
                if (listFakturInDb.Count == 0)
                {
                    digitAkhir = "000001";
                    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                }
                else
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    var lastBukti = ErasoftDbContext.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(NO_BUKTI), 5, 6), '0') FROM SIT01A WHERE NO_BUKTI LIKE '%SI" + tahun + "%'").First();
                    //lastRecNum = listFakturInDb.Last().RecNum.HasValue ? Convert.ToInt32(listFakturInDb.Last().RecNum) : 0;
                    lastRecNum = Convert.ToInt32(lastBukti);
                    //end change by nurul 23/12/2019, perbaikan no bukti
                    if (lastRecNum == 0)
                    {
                        lastRecNum = 1;
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

                string buyercode = "";
                string al2 = "";
                string al3 = "";

                bool adaWarning = false;
                bool masihFakturYangSama = true;
                bool fakturLolosValidasi = true;
                bool barangFakturLolosValidasi = true;
                string messageWarning = "";
                string faktur_invoice = "";

                List<ARF01C> newARF01Cs = new List<ARF01C>();
                List<SIT01A> newFakturs = new List<SIT01A>();
                List<SIT01B> newFaktursDetails = new List<SIT01B>();
                for (int i = 0; i < data.Count(); i++)
                {
                    UploadFakturShopeeDataDetail faktur = data[i];

                    #region  validasi
                    //cek faktur sudah pernah di upload
                    if (!string.IsNullOrWhiteSpace(faktur.NoPesanan))
                    {
                        if (i > 0)
                        {
                            masihFakturYangSama = false;
                        }
                        faktur_invoice = faktur.NoPesanan;
                        message = "";
                        messageWarning = "";
                        adaWarning = false;
                        fakturLolosValidasi = true;
                        var cekFakturExists = listFakturInDb.Where(p => p.JENIS_FORM == "2" && p.NO_REF == faktur_invoice).FirstOrDefault();
                        if (cekFakturExists != null)
                        {
                            fakturLolosValidasi = false;
                            //log faktur sudah pernah di upload
                            message = "Faktur [" + faktur_invoice + "] sudah pernah diupload, dengan nomor faktur : [" + cekFakturExists.NO_BUKTI + "]." + System.Environment.NewLine;
                            tw.WriteLine(message);
                        }
                    }
                    else
                    {
                        masihFakturYangSama = true;
                        messageWarning = "";
                    }
                    if (fakturLolosValidasi)
                    {
                        barangFakturLolosValidasi = true;
                        //cek barang sudah ada di master
                        var cekItem = listSTF02H.Where(p => (p.BRG_MP ?? "").Contains(string.IsNullOrWhiteSpace(faktur.NomorReferensiSKU) ? faktur.SKUInduk : faktur.NomorReferensiSKU)).FirstOrDefault();
                        if (cekItem == null)
                        {
                            //log item belum ada di master
                            barangFakturLolosValidasi = false;
                            adaWarning = true;
                            if (message == "")
                            {
                                message = "Faktur Shopee [" + faktur_invoice + "] berhasil diupload dengan warning." + System.Environment.NewLine;
                                message += "Mohon perbaiki data pada nomor faktur [" + faktur_invoice + "] :" + System.Environment.NewLine;
                                tw.WriteLine(message);
                            }
                            messageWarning = "- Item [" + (string.IsNullOrWhiteSpace(faktur.NomorReferensiSKU) ? faktur.SKUInduk : faktur.NomorReferensiSKU) + "] belum ada di Master Barang MasterOnline." + System.Environment.NewLine;
                            tw.WriteLine(messageWarning);
                        }
                    }
                    #endregion

                    if (fakturLolosValidasi)
                    {
                        buyercode = "";
                        if (!string.IsNullOrWhiteSpace(faktur.NoPesanan))
                        {
                            lastRecNum++;
                            digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                            //noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                            noOrder = $"SI{tahun}{digitAkhir}";
                        }


                        #region insert pembeli
                        if (!string.IsNullOrWhiteSpace(faktur.NoPesanan))
                        {
                            var cekPembeli = (from p in ErasoftDbContext.ARF01C
                                              where p.EMAIL == (faktur.UsernamePembeli.Length > 39 ? faktur.UsernamePembeli.Substring(0, 39) + "@shopee.com" : faktur.UsernamePembeli + "@shopee.com")
                                              select new { p.BUYER_CODE, p.AL2, p.AL3 }).SingleOrDefault();
                            if (cekPembeli == null)
                            {
                                lastRecnumARF01C++;

                                ARF01C newPembeli = new ARF01C
                                {
                                    BUYER_CODE = lastRecnumARF01C.ToString().PadLeft(10, '0'),
                                    NAMA = faktur.NamaPenerima.Length > 30 ? faktur.NamaPenerima.Substring(0, 27) + "..." : faktur.NamaPenerima,
                                    AL = faktur.AlamatPengiriman,
                                    TLP = faktur.NoTelepon,
                                    PERSO = perso,
                                    TERM = 0,
                                    LIMIT = 0,
                                    PKP = "0",
                                    KLINK = "01",
                                    KODE_CABANG = 1,
                                    VLT = "IDR",
                                    KDHARGA = "01",
                                    AL_KIRIM1 = faktur.AlamatPengiriman.Length > 30 ? faktur.AlamatPengiriman.Substring(0, 30) : faktur.AlamatPengiriman,
                                    AL_KIRIM2 = faktur.AlamatPengiriman.Length > 60 ? faktur.AlamatPengiriman.Substring(30, 30) : faktur.AlamatPengiriman.Substring(30, faktur.AlamatPengiriman.Length - 30),
                                    AL_KIRIM3 = faktur.AlamatPengiriman.Length > 90 ? faktur.AlamatPengiriman.Substring(60, 27) + "..." : faktur.AlamatPengiriman.Substring(60, faktur.AlamatPengiriman.Length - 60),
                                    DISC_NOTA = 0,
                                    NDISC_NOTA = 0,
                                    DISC_ITEM = 0,
                                    NDISC_ITEM = 0,
                                    STATUS = "1",
                                    LABA = 0,
                                    TIDAK_HIT_UANG_R = false,
                                    No_Seri_Pajak = "FP",
                                    TGL_INPUT = DateTime.Now,
                                    USERNAME = faktur.UsernamePembeli.Length > 30 ? faktur.UsernamePembeli.Substring(0, 27) + "..." : faktur.UsernamePembeli,
                                    KODEPOS = faktur.AlamatPengiriman.Substring(faktur.AlamatPengiriman.Length - 5, 5),
                                    EMAIL = faktur.UsernamePembeli.Length > 39 ? faktur.UsernamePembeli.Substring(0, 39) + "@shopee.com" : faktur.UsernamePembeli + "@shopee.com",
                                    KODEKABKOT = "3174",
                                    KODEPROV = "31",
                                    NAMA_KABKOT = faktur.KotaKabupaten.Length > 50 ? faktur.KotaKabupaten.Substring(0, 47) + "..." : faktur.KotaKabupaten,
                                    NAMA_PROV = faktur.Provinsi.Length > 50 ? faktur.Provinsi.Substring(0, 47) + "..." : faktur.Provinsi,
                                };
                                newARF01Cs.Add(newPembeli);

                                buyercode = newPembeli.BUYER_CODE;
                                al2 = newPembeli.AL2;
                                al3 = newPembeli.AL3;
                            }
                            else
                            {
                                buyercode = cekPembeli.BUYER_CODE;
                                al2 = cekPembeli.AL2;
                                al3 = cekPembeli.AL3;
                            }
                        }
                        #endregion
                        #region insert sit01a
                        if (!string.IsNullOrWhiteSpace(faktur.NoPesanan))
                        {
                            SIT01A newfaktur = new SIT01A
                            {
                                JENIS_FORM = "2",
                                NO_BUKTI = noOrder,
                                NO_F_PAJAK = "-",
                                NO_SO = "-",
                                CUST = cust,
                                NAMAPEMESAN = faktur.NamaPenerima.Length > 30 ? faktur.NamaPenerima.Substring(0, 27) + "..." : faktur.NamaPenerima,
                                PEMESAN = buyercode,
                                NAMA_CUST = nama_cust,
                                AL = faktur.AlamatPengiriman,
                                TGL = Convert.ToDateTime(faktur.WaktuPembayaranDilakukan),
                                PPN_Bln_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.WaktuPembayaranDilakukan).ToString("MM")),
                                PPN_Thn_Lapor = Convert.ToByte(Convert.ToDateTime(faktur.WaktuPembayaranDilakukan).ToString("yyyy").Substring(2, 2)),
                                USERNAME = uname,
                                JENIS_RETUR = "-",
                                STATUS = "1",
                                ST_POSTING = "T",
                                VLT = "IDR",
                                NO_FA_OUTLET = "-",
                                NO_LPB = "-",
                                GROUP_LIMIT = "-",
                                KODE_ANGKUTAN = "-",
                                JENIS_MOBIL = "-",
                                JTRAN = "SI",
                                JENIS = "1",
                                TUKAR = 1,
                                TUKAR_PPN = 1,
                                SOPIR = "-",
                                KET = "Catatan Dari Pembeli : " + faktur.CatatandariPembeli + ". Catatan : " + faktur.Catatan,
                                PPNBM = 0,
                                NILAI_PPNBM = 0,
                                KODE_SALES = "-",
                                KODE_WIL = "-",
                                U_MUKA = 0,
                                U_MUKA_FA = 0,
                                TERM = 0,
                                TGL_JT_TEMPO = Convert.ToDateTime(faktur.PesananHarusDikirimkanSebelumMenghindariketerlambatan),
                                BRUTO = Convert.ToDouble(faktur.TotalHargaProduk.Replace("Rp ", "").Replace(".", "")),
                                PPN = 0,
                                NILAI_PPN = 0,
                                DISCOUNT = 0,
                                NILAI_DISC = 0,
                                MATERAI = Convert.ToDouble(faktur.PerkiraanOngkosKirim.Replace("Rp ", "").Replace(".", "")),
                                NETTO = Convert.ToDouble(faktur.TotalHargaProduk.Replace("Rp ", "").Replace(".", "")) + Convert.ToDouble(faktur.PerkiraanOngkosKirim.Replace("Rp ", "").Replace(".", "")),
                                TGLINPUT = DateTime.Now,
                                NO_REF = faktur.NoPesanan,
                                NAMA_CUST_QQ = "-",
                                STATUS_LOADING = "-",
                                NO_PO_CUST = "-",
                                PENGIRIM = "-",
                                NAMAPENGIRIM = "-",
                                ZONA = "-",
                                UCAPAN = "-",
                                N_UCAPAN = "-",
                                SUPP = "-",
                                KOMISI = 0,
                                N_KOMISI = 0,
                                TOTAL_TITIPAN = 0
                            };
                            newFakturs.Add(newfaktur);
                        }
                        #endregion
                        #region insert sit01b
                        SIT01B newfakturdetail = new SIT01B
                        {
                            JENIS_FORM = "2",
                            NO_BUKTI = noOrder,
                            USERNAME = uname,
                            CATATAN = "-",
                            TGLINPUT = DateTime.Now,
                            NILAI_DISC = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            DISCOUNT = 0,
                            NILAI_DISC_1 = Convert.ToDouble(faktur.DiskonDariPenjual.Replace("Rp ", "").Replace(".", "")),
                            DISCOUNT_2 = 0,
                            NILAI_DISC_2 = 0,
                            DISCOUNT_3 = 0,
                            NILAI_DISC_3 = 0,
                            DISCOUNT_4 = 0,
                            NILAI_DISC_4 = 0,
                            DISCOUNT_5 = 0,
                            NILAI_DISC_5 = 0,
                            DISC_TITIPAN = 0,
                            BRG = string.IsNullOrWhiteSpace(faktur.NomorReferensiSKU) ? faktur.SKUInduk : faktur.NomorReferensiSKU,
                            SATUAN = "2",
                            H_SATUAN = Convert.ToDouble(faktur.HargaSebelumDiskon.Replace("Rp ", "").Replace(".", "")),
                            QTY = faktur.Jumlah,
                            HARGA = Convert.ToDouble(faktur.TotalHargaProduk.Replace("Rp ", "").Replace(".", "")),
                            QTY_KIRIM = 0,
                            QTY_RETUR = 0,
                            GUDANG = "001" //buat default gudang 001, untuk semua akun baru
                        };
                        //add by nurul 21/9/2020, brg multi sku 
                        var tempBrgDetail = newfakturdetail.BRG;
                        //end add by nurul 21/9/2020, brg multi sku 
                        if (!barangFakturLolosValidasi)
                        {
                            newfakturdetail.BRG = "NOT_FOUND";
                            newfakturdetail.CATATAN = "INVOICE NO : " + faktur_invoice + "_;_" + faktur.NamaProduk + " " + faktur.NamaVariasi + "_;_" + (string.IsNullOrWhiteSpace(faktur.NomorReferensiSKU) ? faktur.SKUInduk : faktur.NomorReferensiSKU);
                        }
                        //add by nurul 21/9/2020, brg multi sku 
                        else
                        {
                            if (!string.IsNullOrEmpty(newfakturdetail.BRG))
                            {
                                var cekTypeBrg = ErasoftDbContext.STF02.Where(a => a.BRG == newfakturdetail.BRG).SingleOrDefault();
                                if (cekTypeBrg.BRG != null)
                                {
                                    if (cekTypeBrg.TYPE == "6" && cekTypeBrg.KUBILASI == 1 && !string.IsNullOrEmpty(cekTypeBrg.BRG_NON_OS))
                                    {
                                        newfakturdetail.BRG = cekTypeBrg.BRG_NON_OS;
                                        newfakturdetail.BRG_MULTISKU = cekTypeBrg.BRG;
                                    }
                                }
                            }
                        }
                        //end add by nurul 21/9/2020, brg multi sku 

                        newFaktursDetails.Add(newfakturdetail);

                        #endregion
                    }
                    else
                    {
                        var fakturPerluDiRemove = (from p in newFakturs where p.NO_REF == faktur_invoice select p).FirstOrDefault();
                        if (fakturPerluDiRemove != null)
                        {
                            newFakturs.RemoveAll(a => a.NO_REF == faktur_invoice);
                            var detailFakturPerluDiRemove = (from p in newFaktursDetails where p.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI select p).FirstOrDefault();
                            if (detailFakturPerluDiRemove != null)
                            {
                                newFaktursDetails.RemoveAll(a => a.NO_BUKTI == fakturPerluDiRemove.NO_BUKTI);
                            }
                        }
                    }
                }
                #endregion

                #region commit insert

                //record terakhir
                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                {
                    try
                    {
                        ErasoftDbContext.ARF01C.AddRange(newARF01Cs);
                        ErasoftDbContext.SaveChanges();
                        if (newFakturs.Count == 0)
                        {
                            lastFakturInUpload = "";
                            lastFakturDateInUpload = DateTime.Now;
                        }
                        ErasoftDbContext.SIT01A.AddRange(newFakturs);
                        ErasoftDbContext.SaveChanges();
                        ErasoftDbContext.SIT01B.AddRange(newFaktursDetails);
                        ErasoftDbContext.SaveChanges();

                        transaction.Commit();

                        //add 18/10/2019, hitung ulang bruto,netto
                        string sSQL = "UPDATE C SET BRUTO = QRY.NILAI, NETTO = (QRY.NILAI + C.MATERAI - C.DISCOUNT) FROM SIT01A C INNER JOIN ( ";
                        sSQL += "SELECT A.NO_BUKTI, SUM(B.HARGA) NILAI ";
                        sSQL += "FROM SIT01A A INNER JOIN SIT01B B ON A.NO_BUKTI = B.NO_BUKTI ";
                        sSQL += "GROUP BY A.NO_BUKTI ";
                        sSQL += ") QRY ON C.NO_BUKTI = QRY.NO_BUKTI ";
                        sSQL += "WHERE C.NO_REF IN (";
                        foreach (var faktur in newFakturs)
                        {
                            sSQL += "'" + faktur.NO_REF + "' , ";
                        }
                        sSQL = sSQL.Substring(0, sSQL.Length - 2) + ")";

                        var resultUpdate = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                        //end add 18/10/2019, hitung ulang bruto,netto

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        message = "Faktur Shopee gagal diupload, terjadi error." + System.Environment.NewLine;
                        message += "Error : " + (ex.InnerException.Message == null ? ex.Message : ex.InnerException.Message);
                        tw.WriteLine(message);
                    }
                }
                #endregion

                tw.Close();
            }

            newLogImportFaktur.LAST_FAKTUR_UPLOADED = lastFakturInUpload;
            newLogImportFaktur.LAST_FAKTUR_UPLOADED_DATETIME = lastFakturDateInUpload;
            ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
            ErasoftDbContext.SaveChanges();

            var partialVm = new FakturViewModel()
            {
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListImportFaktur = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == cust).OrderByDescending(a => a.UPLOAD_DATETIME).ToList()
            };

            return PartialView("UploadFakturView", partialVm);
        }

        // =============================================== END ADD BY CALVIN -- Bagian Import Data Faktur
        // =============================================== Bagian Promosi (START)

        [Route("manage/master/promosi-barang")]
        public ActionResult Promosi()
        {
            var vm = new PromosiViewModel()
            {
                //ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                ////ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return View("PromosiMenu", vm);
        }

        public ActionResult RefreshPromosiForm()
        {
            try
            {
                var vm = new PromosiViewModel()
                {
                    ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                    ListMarketplace = MoDbContext.Marketplaces.ToList()
                };

                return PartialView("BarangPromosiPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        //public ActionResult RefreshTablePromosi()
        //{
        //    var vm = new PromosiViewModel()
        //    {
        //        ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
        //        //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
        //        ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
        //        ListPelanggan = ErasoftDbContext.ARF01.ToList(),
        //        ListMarketplace = MoDbContext.Marketplaces.ToList(),
        //    };

        //    return PartialView("TablePromosiPartial", vm);
        //}

        public ActionResult RefreshTablePromosi(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 3/10/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.NAMA_PROMOSI like '%" + getkata[i] + "%' )";
                            sSQLmarket += " ( C.NamaMarket like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.NAMA_PROMOSI like '%" + getkata[i] + "%'";
                                sSQLmarket += " ( C.NamaMarket like '%" + getkata[i] + "%'";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.NAMA_PROMOSI like '%" + getkata[i] + "%' )";
                                sSQLmarket += " and C.NamaMarket like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.NAMA_PROMOSI like '%" + getkata[i] + "%' ";
                                sSQLmarket += " and C.NamaMarket like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 3/10/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NAMA_PROMOSI AS NAMA, ISNULL(C.NamaMarket,'') AS NAMAMARKET, A.TGL_MULAI AS TGL_MULAI, A.TGL_AKHIR AS TGL_AKHIR ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PROMOSIS A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.NAMA_MARKET = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            if (search != "")
            {
                //sSQL2 += "WHERE (A.NAMA_PROMOSI LIKE '%" + search + "%' OR C.NAMAMARKET LIKE '%" + search + "%' ) ";
                sSQL2 += " where ( " + sSQLkode + " or " + sSQLmarket + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL_AKHIR DESC, A.NAMA_PROMOSI DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<mdlPromosi>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPromosi> pageOrders = new StaticPagedList<mdlPromosi>(listPromosi, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePromosiPartial", pageOrders);
        }

        //add by Tri, 24/9/19
        public ActionResult RefreshTableBarangPromosi(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //ADD BY NURUL 27/9/2019
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLbrg = "";
            string sSQLnama = "";
            string sSQLnormal = "";
            string sSQLpromo = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLkode += "( A.NAMA_PROMOSI like '%" + getkata[i] + "%' )";
                            sSQLmarket += " ( C.NamaMarket like '%" + getkata[i] + "%' )";
                            sSQLbrg += " ( D.KODE_BRG like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) like '%" + getkata[i] + "%' )";
                            sSQLnormal += " ( D.HARGA_NORMAL like '%" + getkata[i] + "%' )";
                            sSQLpromo += " ( D.HARGA_PROMOSI like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLkode += " ( A.NAMA_PROMOSI like '%" + getkata[i] + "%'";
                                sSQLmarket += " ( C.NamaMarket like '%" + getkata[i] + "%'";
                                sSQLbrg += " ( D.KODE_BRG like '%" + getkata[i] + "%'";
                                sSQLnama += "( (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) like '%" + getkata[i] + "%'";
                                sSQLnormal += " ( D.HARGA_NORMAL like '%" + getkata[i] + "%' ";
                                sSQLpromo += " ( D.HARGA_PROMOSI like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLkode += " and A.NAMA_PROMOSI like '%" + getkata[i] + "%' )";
                                sSQLmarket += " and C.NamaMarket like '%" + getkata[i] + "%' )";
                                sSQLbrg += " and D.KODE_BRG like '%" + getkata[i] + "%' )";
                                sSQLnama += " and (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) like '%" + getkata[i] + "%' )";
                                sSQLnormal += " and D.HARGA_NORMAL like '%" + getkata[i] + "%' )";
                                sSQLpromo += " and D.HARGA_PROMOSI like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLkode += " and A.NAMA_PROMOSI like '%" + getkata[i] + "%' ";
                                sSQLmarket += " and C.NamaMarket like '%" + getkata[i] + "%' ";
                                sSQLbrg += " and D.KODE_BRG like '%" + getkata[i] + "%' ";
                                sSQLnama += " and (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) like '%" + getkata[i] + "%' ";
                                sSQLnormal += " and D.HARGA_NORMAL like '%" + getkata[i] + "%' ";
                                sSQLpromo += " and D.HARGA_PROMOSI like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }
            //END ADD BY NURUL 27/9/2019

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.NAMA_PROMOSI AS NAMA_PROMO, ISNULL(C.NamaMarket,'') AS NAMAMARKET, A.TGL_MULAI AS TGL_MULAI, A.TGL_AKHIR AS TGL_AKHIR, ";
            sSQLSelect += "D.HARGA_NORMAL, D.HARGA_PROMOSI AS HARGA_PROMO, D.PERSEN_PROMOSI AS PERSEN_PROMO, D.KODE_BRG AS BRG, (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) NAMA_BARANG ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PROMOSIS A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.NAMA_MARKET = B.CUST ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "INNER JOIN DETAILPROMOSIS D ON A.RECNUM = D.RECNUMPROMOSI ";
            sSQL2 += "INNER JOIN STF02 E ON D.KODE_BRG = E.BRG ";
            if (search != "")
            {
                //var listSearchWord = search.Split(' ');
                //if(listSearchWord.Count() == 1)
                //{
                //    sSQL2 += "WHERE ((E.NAMA + ' ' + ISNULL(E.NAMA2, '')) LIKE '%" + search + "%') ";
                //}
                //else
                //{
                //    sSQL2 += "WHERE (";
                //    foreach(var w in listSearchWord)
                //    {
                //        sSQL2 += " (E.NAMA + ' ' + ISNULL(E.NAMA2, '')) LIKE '%" + w + "%' AND";
                //    }
                //    sSQL2 = sSQL2.Substring(0, sSQL2.Length - 4) + ") ";
                //}
                sSQL2 += " where ( " + sSQLkode + " or " + sSQLmarket + " or " + sSQLnama + " or " + sSQLpromo + " or " + sSQLnormal + " or " + sSQLbrg + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                //if (pagenumber == 0)
                //{
                //    pagenumber = 1;
                //}
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL_AKHIR DESC, NAMA_BARANG ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<mdlPromosiBarng>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPromosiBarng> pageOrders = new StaticPagedList<mdlPromosiBarng>(listPromosi, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TabelPromosiPerBarang", pageOrders);
        }
        //end add by Tri, 24/9/19

        public ActionResult EditPromosi(int? orderId)
        {
            var promosiInDb = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == orderId);

            var vm = new PromosiViewModel()
            {
                Promosi = promosiInDb,
                ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
                ListPromosiDetail = ErasoftDbContext.DETAILPROMOSI.Where(pd => pd.RecNumPromosi == promosiInDb.RecNum).ToList(),
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList()
                ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
            };

            return PartialView("BarangPromosiPartial", vm);
        }

        public ActionResult DeletePromosi(int? orderId)
        {
            var promosiInDb = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == orderId);
            var detailPromosiInDb = ErasoftDbContext.DETAILPROMOSI.Where(dp => dp.RecNumPromosi == promosiInDb.RecNum).ToList();

            foreach (var barang in detailPromosiInDb)
            {
                ErasoftDbContext.DETAILPROMOSI.Remove(barang);
            }

            ErasoftDbContext.PROMOSI.Remove(promosiInDb);
            ErasoftDbContext.SaveChanges();

            //remark 25 juli 2019, create promo tidak termasuk flag
            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //end remark 25 juli 2019, create promo tidak termasuk flag
            {
                //add by calvin 26 desember 2018
                //var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.Kode == promosiInDb.NAMA_MARKET);
                var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.CUST == promosiInDb.NAMA_MARKET);
                var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE").IdMarket.ToString();
                var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString();
                if (customer != null)//handle customer sudah dihapus
                {
                    if (customer.NAMA.Equals(kdShopee))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                        {
                            if (!string.IsNullOrWhiteSpace(promosiInDb.MP_PROMO_ID))
                            {
                                var ShopeeApi = new ShopeeController();

                                ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                {
                                    merchant_code = customer.Sort1_Cust,
                                };
                                Task.Run(() => ShopeeApi.DeleteDiscount(data, Convert.ToInt64(promosiInDb.MP_PROMO_ID))).Wait();
                            }
                        }
                    }
                    else if (customer.NAMA.Equals(kdLazada))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                        {
                            var lazadaApi = new LazadaController();
                            foreach (var promo in detailPromosiInDb)
                            {
                                var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == promo.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                                if (brgInDB != null)
                                {
                                    if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                                    {
                                        //var promoPrice = brgInDB.HJUAL;
                                        //change 19/08/2019, ubah harga promo karena lzd tetap cek harga promo walau promo sudah tidak aktif
                                        //var promoPrice = promo.HARGA_PROMOSI;
                                        var promoPrice = 0;
                                        //end change 19/08/2019, ubah harga promo karena lzd tetap cek harga promo walau promo sudah tidak aktif
                                        //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, promoPrice, DateTime.Today, DateTime.Today, customer.TOKEN);
                                        PromoLazadaObj data = new PromoLazadaObj
                                        {
                                            fromDt = DateTime.Today.AddDays(-2).ToString("yyyy-MM-dd"),
                                            toDt = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd"),
                                            kdBrg = brgInDB.BRG_MP,
                                            promoPrice = promoPrice,
                                            token = customer.TOKEN
                                        };
                                        lazadaApi.setPromo(data);
                                    }
                                }
                            }
                        }
                    }
                }
                //end add by calvin 26 desember 2018
            }

            var vm = new PromosiViewModel()
            {
                //ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                //ListMarketplace = MoDbContext.Marketplaces.ToList(),
                Errors = null
            };


            return Json(promosiInDb, JsonRequestBehavior.AllowGet);
            //return PartialView("TablePromosiPartial", vm);
        }

        [HttpGet]
        public ActionResult DeleteBarangPromosi(int noUrut)
        {
            try
            {
                var barangPromosiInDb = ErasoftDbContext.DETAILPROMOSI.Single(b => b.RecNum == noUrut);
                var promosiInDb = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == barangPromosiInDb.RecNumPromosi);

                ErasoftDbContext.DETAILPROMOSI.Remove(barangPromosiInDb);
                ErasoftDbContext.SaveChanges();

                //remark 25 juli 2019, create promo tidak termasuk flag
                //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
                //bool doAPI = false;
                //if (DataUsaha != null)
                //{
                //    if (DataUsaha.JTRAN_RETUR == "1")
                //    {
                //        doAPI = true;
                //    }
                //}
                //if (doAPI)
                //end remark 25 juli 2019, create promo tidak termasuk flag
                {
                    //add by calvin 26 desember 2018
                    //var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.Kode == promosiInDb.NAMA_MARKET);
                    var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.CUST == promosiInDb.NAMA_MARKET);
                    var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE").IdMarket.ToString();
                    var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString();

                    if (customer.NAMA.Equals(kdShopee))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                        {
                            if (!string.IsNullOrWhiteSpace(promosiInDb.MP_PROMO_ID))
                            {
                                var ShopeeApi = new ShopeeController();

                                ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                {
                                    merchant_code = customer.Sort1_Cust,
                                };
                                Task.Run(() => ShopeeApi.DeleteDiscountItem(data, Convert.ToInt64(promosiInDb.MP_PROMO_ID), barangPromosiInDb)).Wait();

                                var brgInDB = ErasoftDbContext.STF02.Where(m => m.BRG == barangPromosiInDb.KODE_BRG).FirstOrDefault();
                                if (brgInDB != null)
                                {
                                    if (!string.IsNullOrEmpty(brgInDB.PART))
                                    {
                                        var listBrgPromo = ErasoftDbContext.DETAILPROMOSI.Where(m => m.RecNumPromosi == promosiInDb.RecNum).ToList();
                                        if (listBrgPromo.Count > 0)
                                        {
                                            var tblSTF02 = ErasoftDbContext.STF02.Where(m => m.PART == brgInDB.PART).ToList();
                                            foreach (var brg in listBrgPromo)
                                            {
                                                var otherItemPromo = tblSTF02.Where(m => m.BRG == brg.KODE_BRG).FirstOrDefault();
                                                if (otherItemPromo != null)
                                                {
                                                    Task.Run(() => ShopeeApi.AddDiscountItem(data, Convert.ToInt64(promosiInDb.MP_PROMO_ID), brg)).Wait();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (customer.NAMA.Equals(kdLazada))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                        {
                            var lazadaApi = new LazadaController();
                            var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == barangPromosiInDb.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                            if (brgInDB != null)
                            {
                                if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                                {
                                    //var promoPrice = brgInDB.HJUAL;
                                    //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, barangPromosiInDb.HARGA_PROMOSI, DateTime.Today.AddDays(-2), DateTime.Today.AddDays(-1), customer.TOKEN);
                                    PromoLazadaObj data = new PromoLazadaObj
                                    {
                                        fromDt = DateTime.Today.AddDays(-2).ToString("yyyy-MM-dd"),
                                        toDt = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd"),
                                        kdBrg = brgInDB.BRG_MP,
                                        //change 19/08/2019, ubah harga promo karena lzd tetap cek harga promo walau promo sudah tidak aktif
                                        //promoPrice = barangPromosiInDb.HARGA_PROMOSI,
                                        promoPrice = 0,
                                        //end change 19/08/2019, ubah harga promo karena lzd tetap cek harga promo walau promo sudah tidak aktif
                                        token = customer.TOKEN
                                    };
                                    lazadaApi.setPromo(data);
                                }
                            }

                        }
                    }
                    //end add by calvin 26 desember 2018
                }

                var vm = new PromosiViewModel()
                {
                    Promosi = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == promosiInDb.RecNum),
                    ListPromosi = ErasoftDbContext.PROMOSI.ToList(),
                    ListPromosiDetail = ErasoftDbContext.DETAILPROMOSI.Where(pd => pd.RecNumPromosi == promosiInDb.RecNum).ToList(),
                    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList()
                    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList()
                };

                return PartialView("BarangPromosiPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult SavePromosi(PromosiViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.Promosi.RecNum == null)
            {
                var listFakturInDb = ErasoftDbContext.PROMOSI.OrderBy(p => p.RecNum).ToList();
                int? lastRecNum = 0;

                if (listFakturInDb.Count == 0)
                {
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (Promosis, RESEED, 0)");
                    lastRecNum++;
                }
                else
                {
                    lastRecNum = listFakturInDb.Last().RecNum;
                    lastRecNum++;
                }

                ErasoftDbContext.PROMOSI.Add(dataVm.Promosi);
                ErasoftDbContext.SaveChanges();

                if (dataVm.PromosiDetail.RecNum == null)
                {
                    //change by nurul 3/1/2019 -- dataVm.PromosiDetail.RecNumPromosi = lastRecNum;
                    dataVm.PromosiDetail.RecNumPromosi = dataVm.Promosi.RecNum;
                    ErasoftDbContext.DETAILPROMOSI.Add(dataVm.PromosiDetail);
                    ErasoftDbContext.SaveChanges();
                }

                //remark 25 juli 2019, create promo tidak termasuk flag
                //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
                //bool doAPI = false;
                //if (DataUsaha != null)
                //{
                //    if (DataUsaha.JTRAN_RETUR == "1")
                //    {
                //        doAPI = true;
                //    }
                //}
                //if (doAPI)
                //end remark 25 juli 2019, create promo tidak termasuk flag
                {
                    //add by calvin 26 desember 2018
                    //change by nurul 3/1/2019 -- var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.Kode == dataVm.Promosi.NAMA_MARKET);
                    var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.CUST == dataVm.Promosi.NAMA_MARKET);
                    var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE").IdMarket.ToString();
                    var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString();
                    //var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI").IdMarket.ToString();

                    if (customer.NAMA.Equals(kdShopee))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                        {
                            var ShopeeApi = new ShopeeController();

                            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                            {
                                merchant_code = customer.Sort1_Cust,
                            };
                            //Task.Run(() => ShopeeApi.AddDiscount(data, lastRecNum.HasValue ? lastRecNum.Value : 0)).Wait();
                            Task.Run(() => ShopeeApi.AddDiscount(data, dataVm.Promosi.RecNum.HasValue ? dataVm.Promosi.RecNum.Value : 0)).Wait();

                        }
                    }
                    else if (customer.NAMA.Equals(kdLazada))
                    {
                        if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                        {
                            var lazadaApi = new LazadaController();
                            var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataVm.PromosiDetail.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                            if (brgInDB != null)
                            {
                                if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                                {
                                    var promoPrice = dataVm.PromosiDetail.HARGA_PROMOSI;
                                    if (promoPrice == 0)
                                    {
                                        promoPrice = brgInDB.HJUAL - (brgInDB.HJUAL * dataVm.PromosiDetail.PERSEN_PROMOSI / 100);
                                    }
                                    //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, promoPrice, dataVm.Promosi.TGL_MULAI ?? DateTime.Today, dataVm.Promosi.TGL_AKHIR ?? DateTime.Today, customer.TOKEN);
                                    PromoLazadaObj data = new PromoLazadaObj
                                    {
                                        fromDt = (dataVm.Promosi.TGL_MULAI ?? DateTime.Today).ToString("yyyy-MM-dd"),
                                        toDt = (dataVm.Promosi.TGL_AKHIR ?? DateTime.Today).ToString("yyyy-MM-dd"),
                                        kdBrg = brgInDB.BRG_MP,
                                        promoPrice = promoPrice,
                                        token = customer.TOKEN
                                    };
                                    lazadaApi.setPromo(data);
                                }
                            }

                        }
                    }
                    //end add by calvin 26 desember 2018
                    //else if (customer.NAMA.Equals(kdBlibli))
                    //{
                    //    if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                    //    {
                    //        var blibliApi = new BlibliController();
                    //        var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataVm.PromosiDetail.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                    //        if (brgInDB != null)
                    //        {
                    //            if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                    //            {
                    //                var promoPrice = dataVm.PromosiDetail.HARGA_PROMOSI;
                    //                if (promoPrice == 0)
                    //                {
                    //                    promoPrice = brgInDB.HJUAL - (brgInDB.HJUAL * dataVm.PromosiDetail.PERSEN_PROMOSI / 100);
                    //                }
                    //                //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, promoPrice, dataVm.Promosi.TGL_MULAI ?? DateTime.Today, dataVm.Promosi.TGL_AKHIR ?? DateTime.Today, customer.TOKEN);
                    //               BlibliController.BlibliProductData dataBrg = new BlibliController.BlibliProductData
                    //                {
                    //                    promoStart = (dataVm.Promosi.TGL_MULAI ?? DateTime.Today).ToString("yyyy-MM-dd"),
                    //                    promoEnd = (dataVm.Promosi.TGL_AKHIR ?? DateTime.Today).ToString("yyyy-MM-dd"),
                    //                    kode_mp = brgInDB.BRG_MP,
                    //                    promoPrice = promoPrice
                    //                };

                    //                BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData
                    //                {
                    //                    API_client_password = customer.API_CLIENT_P,
                    //                    API_client_username = customer.API_CLIENT_U,
                    //                    API_secret_key = customer.API_KEY,
                    //                    mta_username_email_merchant = customer.EMAIL,
                    //                    mta_password_password_merchant = customer.PASSWORD,
                    //                    merchant_code = customer.Sort1_Cust,
                    //                    token = customer.TOKEN,
                    //                };
                    //                Task.Run(() => blibliApi.setPromoBlibli(data, dataBrg).Wait());
                    //            }
                    //        }

                    //    }
                    //}
                }
            }
            else
            {
                var promosiInDb = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == dataVm.Promosi.RecNum);

                promosiInDb.NAMA_PROMOSI = dataVm.Promosi.NAMA_PROMOSI;
                promosiInDb.NAMA_MARKET = dataVm.Promosi.NAMA_MARKET;
                promosiInDb.TGL_MULAI = dataVm.Promosi.TGL_MULAI;
                promosiInDb.TGL_AKHIR = dataVm.Promosi.TGL_AKHIR;

                if (dataVm.PromosiDetail.RecNum == null)
                {
                    dataVm.PromosiDetail.RecNumPromosi = promosiInDb.RecNum;
                    ErasoftDbContext.DETAILPROMOSI.Add(dataVm.PromosiDetail);
                    ErasoftDbContext.SaveChanges();

                    //remark 25 juli 2019, create promo tidak termasuk flag
                    //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
                    //bool doAPI = false;
                    //if (DataUsaha != null)
                    //{
                    //    if (DataUsaha.JTRAN_RETUR == "1")
                    //    {
                    //        doAPI = true;
                    //    }
                    //}
                    //if (doAPI)
                    //end remark 25 juli 2019, create promo tidak termasuk flag
                    {
                        //add by calvin 26 desember 2018
                        //change by nurul 3/1/2019 -- var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.Kode == dataVm.Promosi.NAMA_MARKET);
                        var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.CUST == dataVm.Promosi.NAMA_MARKET);
                        var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE").IdMarket.ToString();
                        var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA").IdMarket.ToString();
                        //var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI").IdMarket.ToString();

                        if (customer.NAMA.Equals(kdShopee))
                        {
                            if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                            {
                                if (!string.IsNullOrWhiteSpace(promosiInDb.MP_PROMO_ID))
                                {
                                    var ShopeeApi = new ShopeeController();

                                    ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                    {
                                        merchant_code = customer.Sort1_Cust,
                                    };
                                    Task.Run(() => ShopeeApi.AddDiscountItem(data, Convert.ToInt64(promosiInDb.MP_PROMO_ID), dataVm.PromosiDetail)).Wait();
                                }
                            }
                        }
                        else if (customer.NAMA.Equals(kdLazada))
                        {
                            if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                            {
                                var lazadaApi = new LazadaController();
                                var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataVm.PromosiDetail.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                                if (brgInDB != null)
                                {
                                    if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                                    {
                                        var promoPrice = dataVm.PromosiDetail.HARGA_PROMOSI;
                                        if (promoPrice == 0)
                                        {
                                            promoPrice = brgInDB.HJUAL - (brgInDB.HJUAL * dataVm.PromosiDetail.PERSEN_PROMOSI / 100);
                                        }
                                        //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, promoPrice, dataVm.Promosi.TGL_MULAI ?? DateTime.Today, dataVm.Promosi.TGL_AKHIR ?? DateTime.Today, customer.TOKEN);
                                        PromoLazadaObj data = new PromoLazadaObj
                                        {
                                            fromDt = (dataVm.Promosi.TGL_MULAI ?? DateTime.Today).ToString("yyyy-MM-dd"),
                                            toDt = (dataVm.Promosi.TGL_AKHIR ?? DateTime.Today).ToString("yyyy-MM-dd"),
                                            kdBrg = brgInDB.BRG_MP,
                                            promoPrice = promoPrice,
                                            token = customer.TOKEN
                                        };
                                        lazadaApi.setPromo(data);
                                    }
                                }

                            }
                        }
                        //end add by calvin 26 desember 2018
                        //else if (customer.NAMA.Equals(kdBlibli))
                        //{
                        //    if (!string.IsNullOrWhiteSpace(customer.TOKEN))
                        //    {
                        //        var blibliApi = new BlibliController();
                        //        var brgInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == dataVm.PromosiDetail.KODE_BRG && m.IDMARKET == customer.RecNum).FirstOrDefault();
                        //        if (brgInDB != null)
                        //        {
                        //            if (!string.IsNullOrEmpty(brgInDB.BRG_MP))
                        //            {
                        //                var promoPrice = dataVm.PromosiDetail.HARGA_PROMOSI;
                        //                if (promoPrice == 0)
                        //                {
                        //                    promoPrice = brgInDB.HJUAL - (brgInDB.HJUAL * dataVm.PromosiDetail.PERSEN_PROMOSI / 100);
                        //                }
                        //                //lazadaApi.UpdatePromoPrice(brgInDB.BRG_MP, promoPrice, dataVm.Promosi.TGL_MULAI ?? DateTime.Today, dataVm.Promosi.TGL_AKHIR ?? DateTime.Today, customer.TOKEN);
                        //                BlibliController.BlibliProductData dataBrg = new BlibliController.BlibliProductData
                        //                {
                        //                    promoStart = (dataVm.Promosi.TGL_MULAI ?? DateTime.Today).ToString("yyyy-MM-dd"),
                        //                    promoEnd = (dataVm.Promosi.TGL_AKHIR ?? DateTime.Today).ToString("yyyy-MM-dd"),
                        //                    kode_mp = brgInDB.BRG_MP,
                        //                    promoPrice = promoPrice
                        //                };

                        //                BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData
                        //                {
                        //                    API_client_password = customer.API_CLIENT_P,
                        //                    API_client_username = customer.API_CLIENT_U,
                        //                    API_secret_key = customer.API_KEY,
                        //                    mta_username_email_merchant = customer.EMAIL,
                        //                    mta_password_password_merchant = customer.PASSWORD,
                        //                    merchant_code = customer.Sort1_Cust,
                        //                    token = customer.TOKEN,
                        //                };
                        //                Task.Run(() => blibliApi.setPromoBlibli(data, dataBrg).Wait());
                        //            }
                        //        }

                        //    }
                        //}
                    }
                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var vm = new PromosiViewModel()
            {
                Promosi = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == dataVm.Promosi.RecNum),
                ListPromosiDetail = ErasoftDbContext.DETAILPROMOSI.Where(pd => pd.RecNumPromosi == dataVm.Promosi.RecNum).ToList(),
                //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                ListPelanggan = ErasoftDbContext.ARF01.ToList(),
                ListMarketplace = MoDbContext.Marketplaces.ToList()
            };

            return PartialView("BarangPromosiPartial", vm);
        }

        [HttpPost]
        public ActionResult UpdatePromosi(UpdateData dataUpdate)
        {
            var promosiInDb = ErasoftDbContext.PROMOSI.Single(p => p.RecNum == dataUpdate.RecNumPromosi);
            promosiInDb.NAMA_MARKET = dataUpdate.NamaMarket;
            promosiInDb.TGL_MULAI = DateTime.ParseExact(dataUpdate.TglMulai, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            promosiInDb.TGL_AKHIR = DateTime.ParseExact(dataUpdate.TglAkhir, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        // =============================================== Bagian Promosi (END)

        // =============================================== Bagian Harga Jual Barang (START)

        [Route("manage/master/harga-jual-barang")]
        public ActionResult HargaJual()
        //public ActionResult HargaJualMenu()
        {
            var vm = new HargaJualViewModel()
            {
                ////change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
                ////change by nurul 16/9/2020, brg multi sku 
                ////ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
                //ListBarang = ErasoftDbContext.STF02.Where(a => (a.TYPE == "3" || a.TYPE == "6")).ToList(),
                ////END change by nurul 16/9/2020, brg multi sku 
                //ListHargaJualPerMarket = ErasoftDbContext.STF02H.ToList(),
                //ListHargaTerakhir = ErasoftDbContext.STF10.ToList(),
                //ListPelanggan = ErasoftDbContext.ARF01.ToList(),

            };

            return View("HargaJualMenu", vm);
            //return View(vm);
        }

        //add by nurul 13/6/2019
        public ActionResult RefreshTableHargaJual(int? page, string search = "", string filter = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["filterParam"] = filter;
            ViewData["LastPage"] = page;

            //add by nurul 2/10/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLharga = "";
            string sSQLhpokok = "";
            //if (getkata.Length > 0)
            //{
            //    if (search != "")
            //    {
            //        for (int i = 0; i < getkata.Length; i++)
            //        {
            //            if (getkata.Length == 1)
            //            {
            //                sSQLnama += " ( (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%' )";
            //                sSQLkode += " ( A.BRG like '%" + getkata[i] + "%' )";
            //                sSQLmarket += " ( (isnull(C.NamaMarket,'') + ' (' + isnull(A.AKUNMARKET,'') + ')') like '%" + getkata[i] + "%' )";
            //                sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' )";
            //                //sSQLhpokok += " ( ISNULL(E.HPOKOK,'') like '%" + getkata[i] + "%' )";
            //            }
            //            else
            //            {
            //                if (getkata[i] == getkata.First())
            //                {
            //                    sSQLnama += " ( (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%'";
            //                    sSQLkode += " ( A.BRG like '%" + getkata[i] + "%'";
            //                    sSQLmarket += " ( (isnull(C.NamaMarket,'') + ' (' + isnull(A.AKUNMARKET,'') + ')') like '%" + getkata[i] + "%' ";
            //                    sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' ";
            //                    //sSQLhpokok += " ( ISNULL(E.HPOKOK,'') like '%" + getkata[i] + "%' ";
            //                }
            //                else if (getkata[i] == getkata.Last())
            //                {
            //                    sSQLnama += " and (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%' )";
            //                    sSQLkode += " and A.BRG like '%" + getkata[i] + "%' )";
            //                    sSQLmarket += " and (isnull(C.NamaMarket,'') + ' (' + isnull(A.AKUNMARKET,'') + ')') like '%" + getkata[i] + "%' )";
            //                    sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' )";
            //                    //sSQLhpokok += " and ISNULL(E.HPOKOK,'') like '%" + getkata[i] + "%' )";
            //                }
            //                else
            //                {
            //                    sSQLnama += " and (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%' ";
            //                    sSQLkode += " and A.BRG like '%" + getkata[i] + "%' ";
            //                    sSQLmarket += " and (isnull(C.NamaMarket,'') + ' (' + isnull(A.AKUNMARKET,'') + ')') like '%" + getkata[i] + "%' ";
            //                    sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' ";
            //                    //sSQLhpokok += " and ISNULL(E.HPOKOK,'') like '%" + getkata[i] + "%' ";
            //                }
            //            }
            //        }
            //    }
            //}
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLnama += " AND ";
                            sSQLkode += " AND ";
                            //sSQLmarket += " AND ";
                            //sSQLharga += " AND ";
                        }

                        if (filter == "kodebarang")
                        {
                            sSQLkode += "  A.BRG like '%" + getkata[i] + "%' ";
                        }
                        else if (filter == "namabarang")
                        {
                            sSQLnama += " (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%' ";
                        }
                        //sSQLnama += " (ISNULL(D.NAMA,'') + ' ' + ISNULL(D.NAMA2,'')) like '%" + getkata[i] + "%' ";
                        //sSQLkode += "  A.BRG like '%" + getkata[i] + "%' ";
                        //sSQLmarket += "  (isnull(C.NamaMarket,'') + ' (' + isnull(A.AKUNMARKET,'') + ')') like '%" + getkata[i] + "%' ";
                        //sSQLharga += "  A.HJUAL like '%" + getkata[i] + "%' ";
                    }
                }
            }
            //end add by nurul 2/10/2019


            string sSQLSelect = "";
            //sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.BRG AS BRG, ISNULL(C.NamaMarket,'') AS NAMAMARKET, ISNULL(B.NAMA,'') AS IDMARKET, D.NAMA AS NAMA, D.NAMA2 AS NAMA2, A.AKUNMARKET AS AKUNMARKET, A.HJUAL AS HJUAL, ISNULL(E.HPOKOK,'') AS HPOKOK, D.HJUAL AS STF02_HJUAL ";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.BRG AS BRG, ISNULL(C.NamaMarket,'') AS NAMAMARKET, ISNULL(B.NAMA,'') AS IDMARKET, D.NAMA AS NAMA, D.NAMA2 AS NAMA2, A.AKUNMARKET AS AKUNMARKET, A.HJUAL AS HJUAL, D.HJUAL AS STF02_HJUAL ";
            //add tuning by fauzi 21 April 2020
            sSQLSelect += ", ISNULL((SELECT TOP 1 ISNULL(E.HBELI,0) AS HBELI FROM PBT01A F LEFT JOIN PBT01B E ON F.INV = E.INV WHERE E.BRG = A.BRG ORDER BY F.TGL DESC, E.NO DESC), 0) AS HPOKOK ";
            //end add tuning by fauzi
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02H A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.IDMARKET = B.RecNum ";
            sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            sSQL2 += "LEFT JOIN STF02 D ON A.BRG = D.BRG ";
            //remark by nurul 10/2/2020, ambil harga beli terakhir dr pbt01b 
            //sSQL2 += "LEFT JOIN STF10 E ON A.BRG = E.BRG ";
            //end remark by nurul 10/2/2020, ambil harga beli terakhir dr pbt01b 
            //change by nurul 16/9/2020, brg multi sku 
            //sSQL2 += "WHERE D.TYPE = '3' ";
            sSQL2 += "WHERE (D.TYPE = '3' OR D.TYPE='6') ";
            //end change by nurul 16/9/2020, brg multi sku 
            if (search != "")
            {
                //sSQL2 += "AND (A.BRG LIKE '%" + search + "%' OR D.NAMA LIKE '%" + search + "%' OR D.NAMA2 LIKE '%" + search + "%' OR A.AKUNMARKET LIKE '%" + search + "%' OR C.NAMAMARKET LIKE '%" + search + "%' ) ";
                //sSQL2 += "AND (A.BRG LIKE '%" + search + "%' OR (D.NAMA + D.NAMA2) LIKE '%" + search + "%' OR A.AKUNMARKET LIKE '%" + search + "%' OR C.NAMAMARKET LIKE '%" + search + "%' ) ";
                //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLmarket + " or " + sSQLharga + " or " + sSQLhpokok + " ) ";
                //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLmarket + " or " + sSQLharga + " ) ";
                if (filter == "kodebarang")
                {
                    sSQL2 += " AND ( " + sSQLkode + " ) ";
                }
                else if (filter == "namabarang")
                {
                    sSQL2 += " AND ( " + sSQLnama + " ) ";
                }
            }
            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.BRG ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlHargaJual>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            ///remark by fauzi for tuning search barang
            ////add by nurul 10/2/2020, ambil harga beli terakhir dr pbt01b 
            //foreach (var item in listFakturNew)
            //{
            //    var sql3 = "select top 1 isnull(b.hbeli,0) as hbeli from pbt01a a inner join pbt01b b on a.inv=b.inv where b.brg='" + item.BRG + "' order by a.tgl desc, b.no desc";
            //    double getHbeli = ErasoftDbContext.Database.SqlQuery<double>(sql3).FirstOrDefault();
            //    item.HPOKOK = getHbeli;
            //}
            ////end add by nurul 10/2/2020, ambil harga beli terakhir dr pbt01b 
            ///end remark by fauzi for tuning search barang

            IPagedList<mdlHargaJual> pageOrders = new StaticPagedList<mdlHargaJual>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableHargaJualPartial", pageOrders);
        }
        //end add by nurul 13/6/2019

        //add by Tri, update harga jual massal
        [Route("manage/master/harga-jual-massal")]
        public ActionResult HargaJualMassal()
        {
            var vm = new HargaJualViewModel()
            {
            };

            return View("HargaJualMassal", vm);
            //return View(vm);
        }
        public ActionResult RefreshFormHargaMassal()
        {
            var vm = new HargaJualMassalViewModel();

            var lastData = ErasoftDbContext.LOG_HARGAJUAL_A.Where(m => m.STATUS <= 1).FirstOrDefault();
            if(lastData == null)
            {
                lastData = createNewLogHargaMassal();
            }
            else if(lastData.STATUS == 1)//user sudah klik proses, cek hangfire
            {
                var logHF = EDB.GetDataSet("CString", "LOG_HF", "SELECT COUNT(*) JML FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + lastData.NO_BUKTI + "%' AND ARGUMENTS LIKE '%Update%Massal%' AND STATENAME IN ('Enqueued', 'Scheduled', 'Processing')");
                if(logHF.Tables[0].Rows[0]["JML"].ToString() == "0")//sudah tidak ada hangfire dengan status Enqueued,Scheduled,Processing
                {
                    lastData.STATUS = 2;
                    ErasoftDbContext.SaveChanges();
                    lastData = createNewLogHargaMassal();
                }
            }
            //else
            //{
                vm.NO_BUKTI = lastData.NO_BUKTI;
                vm.FILE_1 = lastData.FILE_1;
                vm.FILE_2 = lastData.FILE_2;
                vm.FILE_3 = lastData.FILE_3;
                vm.FILE_4 = lastData.FILE_4;
                vm.JML_BRG_1 = lastData.JML_BRG_1;
                vm.JML_BRG_2 = lastData.JML_BRG_2;
                vm.JML_BRG_3 = lastData.JML_BRG_3;
                vm.JML_BRG_4 = lastData.JML_BRG_4;
                vm.STATUS = lastData.STATUS;
                vm.TGL_PROSES = lastData.TGL_PROSES;
                vm.JAM_PROSES = lastData.JAM_PROSES;
                //vm.JML_BRG_NH_1 = lastData.JML_BRG_NH_1;
                //vm.JML_BRG_NH_2 = lastData.JML_BRG_NH_2;
                //vm.JML_BRG_NH_3 = lastData.JML_BRG_NH_3;
                //vm.JML_BRG_NH_4 = lastData.JML_BRG_NH_4;
                vm.JML_BRG_NL_1 = lastData.JML_BRG_NL_1;
                vm.JML_BRG_NL_2 = lastData.JML_BRG_NL_2;
                vm.JML_BRG_NL_3 = lastData.JML_BRG_NL_3;
                vm.JML_BRG_NL_4 = lastData.JML_BRG_NL_4;
            //}

            return PartialView("FormUpdateHargaMassal", vm);
        }

        protected LOG_HARGAJUAL_A createNewLogHargaMassal()
        {
            var lastData = new LOG_HARGAJUAL_A();
            var lastBukti = GenerateAutoNumber(ErasoftDbContext, "HM", "LOG_HARGAJUAL_A", "NO_BUKTI");
            lastData.NO_BUKTI = "HM" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

            lastData.STATUS = 0;
            lastData.JML_BRG_1 = "0/0";
            lastData.JML_BRG_2 = "0/0";
            lastData.JML_BRG_3 = "0/0";
            lastData.JML_BRG_4 = "0/0";
            lastData.JML_BRG_NL_1 = 0;
            lastData.JML_BRG_NL_2 = 0;
            lastData.JML_BRG_NL_3 = 0;
            lastData.JML_BRG_NL_4 = 0;
            lastData.TGL_PROSES = DateTime.UtcNow.AddHours(7).Hour < 18 ? DateTime.UtcNow.AddHours(7) : DateTime.UtcNow.AddHours(7).AddDays(1);
            lastData.USERNAME = usernameLogin;
            lastData.TGL_INPUT = DateTime.UtcNow.AddHours(7);

            ErasoftDbContext.LOG_HARGAJUAL_A.Add(lastData);
            ErasoftDbContext.SaveChanges();

            return lastData;
        }
        public ActionResult DeleteTempHargaMassal( string nobuk, int index)
        {
            var sSQL = "DELETE FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = " + index;
            EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

            sSQL = "UPDATE LOG_HARGAJUAL_A SET FILE_" + index + " = '', JML_BRG_" + index + " = '0/0', ";
            sSQL += "JML_BRG_NH_" + index + " = 0, JML_BRG_NL_" + index + " = 0 WHERE NO_BUKTI = '"+nobuk+"'";
            EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

            return JsonErrorMessage("");
        }
        public async Task<ActionResult> ChangeStatusUpdateHargaMassal(HargaJualMassalViewModel data)
        {
            var currentData = ErasoftDbContext.LOG_HARGAJUAL_A.Where(m => m.NO_BUKTI == data.NO_BUKTI).FirstOrDefault();
            if(currentData != null)
            {
                if(data.STATUS == 0)//change to proses
                {
                    var dtNow = DateTime.UtcNow.AddHours(7);
                    if (data.TGL_PROSES.Date < dtNow.Date)
                    {
                        return JsonErrorMessage("Tanggal Proses yang anda pilih sudah lewat dari saat ini");
                    }
                    else if(data.TGL_PROSES.Date == dtNow.Date)
                    {
                        var cekProses = ErasoftDbContext.LOG_HARGAJUAL_B.Where(m => m.TGL_INPUT.Month == data.TGL_PROSES.Month && m.TGL_INPUT.Year == data.TGL_PROSES.Year && m.TGL_INPUT.Day == data.TGL_PROSES.Day && (m.STATUS ?? "") != "dibatalkan").ToList();
                        if(cekProses.Count > 0)//sudah ada data yg proses hari ini dan tidak cancel
                        {
                            return JsonErrorMessage("Anda sudah melakukan proses update harga massal hari ini.\nSilahkan pilih hari lain untuk proses update harga massal berikutnya.");
                        }

                        if(data.JAM_PROSES <= dtNow.Hour)
                        {
                            return JsonErrorMessage("Jam Proses yang anda pilih sudah lewat dari saat ini");
                        }
                    }
                    currentData.TGL_PROSES = data.TGL_PROSES;
                    currentData.JAM_PROSES = data.JAM_PROSES;
                    currentData.USERNAME = usernameLogin;
                    currentData.STATUS = 1;
                    currentData.TGL_INPUT = dtNow;

                    string EDBConnID = EDB.GetConnectionString("ConnId");
                    var sqlStorage = new SqlServerStorage(EDBConnID);

                    var Jobclient = new BackgroundJobClient(sqlStorage);
                    string logCust = "";
                    var dtProses = new DateTime(currentData.TGL_PROSES.Year, currentData.TGL_PROSES.Month, currentData.TGL_PROSES.Day, currentData.JAM_PROSES, 0, 0).AddHours(-7);
                    if (!string.IsNullOrEmpty(currentData.FILE_1))
                    {
                        logCust = "";
                        var newData1 = new LOG_HARGAJUAL_B
                        {
                            NO_BUKTI = currentData.NO_BUKTI,
                            NO_FILE = 1,
                            TGL_INPUT = dtNow,
                            USERNAME = usernameLogin,
                            KET = ""
                        };
                        var cekCust = EDB.GetDataSet("CString", "ARF01", "SELECT CUST, NAMA FROM ARF01 WHERE RECNUM IN (SELECT DISTINCT IDMARKET FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = 1)");
                        if (cekCust.Tables[0].Rows.Count > 0)
                        {
                            //if(cekCust.Tables[0].Rows[0]["NAMA"].ToString() == "8" || cekCust.Tables[0].Rows[0]["NAMA"].ToString() == "18")//buka lapak dan offline
                            //{

                            //}
                            //else
                            {
                                logCust = cekCust.Tables[0].Rows[0]["CUST"].ToString();
                                newData1.CUST = logCust;
                                Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, logCust, "Price", "Update Harga Massal", currentData.NO_BUKTI + "_1", 1, usernameLogin), dtProses);

                                var cekJob = EDB.GetDataSet("CString", "hangfire", "SELECT [ID] FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + currentData.NO_BUKTI + "_1%' AND ARGUMENTS LIKE '%Update Harga Massal%'");
                                if (cekJob.Tables[0].Rows.Count > 0)
                                {
                                    newData1.HANGFIRE_JOBID = Convert.ToInt64(cekJob.Tables[0].Rows[0]["ID"].ToString());
                                }

                                //await new MasterOnlineController().UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, logCust, "Price", "Update Harga Massal", currentData.NO_BUKTI + "_1", 1, usernameLogin);
                            }
                        }

                        ErasoftDbContext.LOG_HARGAJUAL_B.Add(newData1);
                    }
                    if (!string.IsNullOrEmpty(currentData.FILE_2))
                    {
                        //Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, "", "Price", "Update Harga Massal", currentData.NO_BUKTI +"_2", 2, usernameLogin), dtProses);
                        var newData2 = new LOG_HARGAJUAL_B
                        {
                            NO_BUKTI = currentData.NO_BUKTI,
                            NO_FILE = 2,
                            TGL_INPUT = dtNow,
                            USERNAME = usernameLogin,
                            KET = ""
                        };
                        var cekCust = EDB.GetDataSet("CString", "ARF01", "SELECT CUST, NAMA FROM ARF01 WHERE RECNUM IN (SELECT DISTINCT IDMARKET FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = 2)");
                        if (cekCust.Tables[0].Rows.Count > 0)
                        {
                            logCust = cekCust.Tables[0].Rows[0]["CUST"].ToString();
                            newData2.CUST = logCust;
                            Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, logCust, "Price", "Update Harga Massal", currentData.NO_BUKTI + "_2", 2, usernameLogin), dtProses);

                            var cekJob = EDB.GetDataSet("CString", "hangfire", "SELECT [ID] FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + currentData.NO_BUKTI + "_2%' AND ARGUMENTS LIKE '%Update Harga Massal%'");
                            if (cekJob.Tables[0].Rows.Count > 0)
                            {
                                newData2.HANGFIRE_JOBID = Convert.ToInt64(cekJob.Tables[0].Rows[0]["ID"].ToString());
                            }
                        }
                        ErasoftDbContext.LOG_HARGAJUAL_B.Add(newData2);
                    }
                    if (!string.IsNullOrEmpty(currentData.FILE_3))
                    {
                        //Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, "", "Price", "Update Harga Massal", currentData.NO_BUKTI +"_3", 3, usernameLogin), dtProses);
                        var newData3 = new LOG_HARGAJUAL_B
                        {
                            NO_BUKTI = currentData.NO_BUKTI,
                            NO_FILE = 3,
                            TGL_INPUT = dtNow,
                            USERNAME = usernameLogin,
                            KET = ""
                        };
                        var cekCust = EDB.GetDataSet("CString", "ARF01", "SELECT CUST, NAMA FROM ARF01 WHERE RECNUM IN (SELECT DISTINCT IDMARKET FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = 3)");
                        if (cekCust.Tables[0].Rows.Count > 0)
                        {
                            logCust = cekCust.Tables[0].Rows[0]["CUST"].ToString();
                            newData3.CUST = logCust;
                            Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, logCust, "Price", "Update Harga Massal", currentData.NO_BUKTI + "_3", 3, usernameLogin), dtProses);

                            var cekJob = EDB.GetDataSet("CString", "hangfire", "SELECT [ID] FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + currentData.NO_BUKTI + "_3%' AND ARGUMENTS LIKE '%Update Harga Massal%'");
                            if (cekJob.Tables[0].Rows.Count > 0)
                            {
                                newData3.HANGFIRE_JOBID = Convert.ToInt64(cekJob.Tables[0].Rows[0]["ID"].ToString());
                            }
                        }
                        ErasoftDbContext.LOG_HARGAJUAL_B.Add(newData3);
                    }
                    if (!string.IsNullOrEmpty(currentData.FILE_4))
                    {
                        //Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, "", "Price", "Update Harga Massal", currentData.NO_BUKTI +"_4", 4, usernameLogin), dtProses);
                        var newData4 = new LOG_HARGAJUAL_B
                        {
                            NO_BUKTI = currentData.NO_BUKTI,
                            NO_FILE = 4,
                            TGL_INPUT = dtNow,
                            USERNAME = usernameLogin,
                            KET = ""
                        };
                        var cekCust = EDB.GetDataSet("CString", "ARF01", "SELECT CUST, NAMA FROM ARF01 WHERE RECNUM IN (SELECT DISTINCT IDMARKET FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = 4)");
                        if (cekCust.Tables[0].Rows.Count > 0)
                        {
                            logCust = cekCust.Tables[0].Rows[0]["CUST"].ToString();
                            newData4.CUST = logCust;
                            Jobclient.Schedule<MasterOnlineController>(x => x.UpdateHJulaMassal(dbPathEra, currentData.NO_BUKTI, logCust, "Price", "Update Harga Massal", currentData.NO_BUKTI + "_4", 4, usernameLogin), dtProses);

                            var cekJob = EDB.GetDataSet("CString", "hangfire", "SELECT [ID] FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + currentData.NO_BUKTI + "_4%' AND ARGUMENTS LIKE '%Update Harga Massal%'");
                            if (cekJob.Tables[0].Rows.Count > 0)
                            {
                                newData4.HANGFIRE_JOBID = Convert.ToInt64(cekJob.Tables[0].Rows[0]["ID"].ToString());
                            }
                        }
                        ErasoftDbContext.LOG_HARGAJUAL_B.Add(newData4);
                    }
                    ErasoftDbContext.SaveChanges();
                }
                else if (data.STATUS == 1)//change to cancel
                {
                    var sSQL = "UPDATE LOG_HARGAJUAL_A SET STATUS = 9 WHERE NO_BUKTI = '"+ currentData.NO_BUKTI + "'";
                    EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                    for (int i = 1; i <= 4; i++)
                    {
                        var sSQL_delete = "DELETE FROM HANGFIRE.JOB WHERE ARGUMENTS LIKE '%" + currentData.NO_BUKTI + "_" + i + "%' AND ARGUMENTS LIKE '%Update Harga Massal%' AND STATENAME IN ('Enqueued', 'Scheduled')";
                        var resultDelete = EDB.ExecuteSQL("CString", CommandType.Text, sSQL_delete);
                        if(resultDelete > 0)
                        {
                            var historyB = ErasoftDbContext.LOG_HARGAJUAL_B.Where(m => m.NO_BUKTI == currentData.NO_BUKTI && m.NO_FILE == i).FirstOrDefault();
                            if(historyB != null)
                            {
                                historyB.STATUS = "dibatalkan";
                                ErasoftDbContext.SaveChanges();
                            }
                            sSQL_delete = "DELETE FROM TEMP_UPDATE_HJUAL WHERE INDEX_FILE = " + i;
                            EDB.ExecuteSQL("CString", CommandType.Text, sSQL_delete);

                        }
                    }
                    
                }
            }
            else
            {
                return JsonErrorMessage("Data Not Found");
            }
            return JsonErrorMessage("");
        }

        public ActionResult RefreshTableHargaJualMassal(int? page)
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["LastPage"] = page;

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.NO_BUKTI, HANGFIRE_JOBID, KET, b.USERNAME, dateadd(HOUR, jam_proses, tgl_proses) tgl, C.PERSO AKUNMARKET, M.NAMAMARKET, ";
            sSQLSelect += "CASE WHEN NO_FILE = '1' THEN FILE_1 WHEN NO_FILE = '2' THEN FILE_2 WHEN NO_FILE = '3' THEN FILE_3 WHEN NO_FILE = '4' THEN FILE_4 ELSE '' END 'FILE', ";
            sSQLSelect += "CASE WHEN (SELECT COUNT(*) FROM HANGFIRE.Job WHERE ARGUMENTS LIKE '%UPDATE_MASSAL_' + B.NO_BUKTI + '_' + CONVERT(NVARCHAR,NO_FILE) + '%' AND STATENAME LIKE '%proces%') > 0 THEN 'processing' ";
            sSQLSelect += "WHEN (SELECT COUNT(*) FROM HANGFIRE.Job WHERE ARGUMENTS LIKE '%UPDATE_MASSAL_' + B.NO_BUKTI + '_' + CONVERT(NVARCHAR,NO_FILE) + '%' AND STATENAME LIKE '%enque%') > 0 THEN 'enqueued' ";
            sSQLSelect += "WHEN (SELECT COUNT(*) FROM HANGFIRE.Job WHERE ARGUMENTS LIKE '%UPDATE_MASSAL_' + B.NO_BUKTI + '_' + CONVERT(NVARCHAR,NO_FILE) + '%' AND STATENAME LIKE '%schedul%') > 0 THEN 'scheduled' "; 
            sSQLSelect += "WHEN B.STATUS = 'dibatalkan' THEN (CASE WHEN ISNULL(CONVERT(NVARCHAR(50),KET), '') = '' THEN B.STATUS ELSE 'dibatalkan, sukses update : ' + CONVERT(NVARCHAR(50),KET) END) ";
            sSQLSelect += "WHEN B.STATUS = 'COMPLETE' THEN 'sukses update : ' + CONVERT(NVARCHAR(50),KET) ELSE '' END AS STATUS ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(B.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM LOG_HARGAJUAL_A A INNER JOIN LOG_HARGAJUAL_B B ON A.NO_BUKTI = B.NO_BUKTI ";
            sSQL2 += "INNER JOIN ARF01 C ON B.CUST = C.CUST INNER JOIN MO..MARKETPLACE M ON C.NAMA = M.IDMARKET ";
           
            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY B.TGL_INPUT desc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlHargaJualMassal>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();


            IPagedList<mdlHargaJualMassal> pageOrders = new StaticPagedList<mdlHargaJualMassal>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableHistoryHargaMassal", pageOrders);
        }
        //end add by Tri, update harga jual massal
        [HttpGet]
        public ActionResult UbahHargaJual(int? recNum, double hargaJualBaru)
        {
            var ret = new ReturnJson();
            var hJualInDb = ErasoftDbContext.STF02H.SingleOrDefault(h => h.RecNum == recNum);
            //change by nurul 18/1/2019 -- var brg = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            //change by nurul 16/9/2020, brg multi sku 
            //var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3" || a.TYPE == "6").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            //end change by nurul 16/9/2020, brg multi sku 
            if (hJualInDb == null)
            {
                ret.message = "No Data Found!";
                return Json(ret, JsonRequestBehavior.AllowGet);
            }

            //add by Tri, validasi harga per marketplace            
            var kdBL = "8";
            var kdLazada = "7";
            var kdBlibli = "16";
            var kdElevenia = "9";
            var kdShopee = "17";
            var kdShopify = "21";
            var kd82Cart = "20";
            var kdJD = "19";

            var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.RecNum == hJualInDb.IDMARKET);
            if (customer != null)
            {
                //add 31 juli 2019, cek barang sedang dalam promo
                var dsPromo = EDB.GetDataSet("CString", "PROMOSIS", "select * from promosis a inner join detailpromosis b on a.recnum = b.RecNumPromosi where tgl_mulai < dateadd(hour,7,getutcdate()) and tgl_akhir > dateadd(hour,7,getutcdate()) and kode_brg = '" + hJualInDb.BRG + "' and nama_market = '" + customer.CUST + "'");
                if (dsPromo.Tables[0].Rows.Count > 0)
                {
                    //var stf02hInDB = ErasoftDbContext.STF02H.Where(m => m.BRG == barangInDb.BRG && m.IDMARKET == dataBaru.IDMARKET).FirstOrDefault();
                    //if (stf02hInDB != null)
                    //{
                    if (hJualInDb.HJUAL != hargaJualBaru)
                    {
                        ret.message = "Harga barang tidak dapat di update, karena sedang dalam masa promosi";
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }
                    //}
                }
                //end add 31 juli 2019, cek barang sedang dalam promo
                //change by Tri 22 agustus 2019, validasi harga 1 function
                //if (customer.NAMA.Equals(kdLazada))
                //{
                //    if (hargaJualBaru < 3000)
                //    {
                //        ret.message = "Harga Jual harus lebih dari 3000.";
                //        return Json(ret, JsonRequestBehavior.AllowGet);
                //    }
                //    //else if (hargaJualBaru % 100 != 0)
                //    //{
                //    //    ret.message = "Harga Jual harus kelipatan 100.";
                //    //    return Json(ret, JsonRequestBehavior.AllowGet);

                //    //}
                //}
                //else if (customer.NAMA.Equals(kdBlibli))
                //{
                //    if (hargaJualBaru < 1100)
                //    {
                //        ret.message = "Harga Jual minimal 1100.";
                //        return Json(ret, JsonRequestBehavior.AllowGet);
                //    }
                //}
                //else if (customer.NAMA.Equals(kdBL) || customer.NAMA.Equals(kdElevenia))
                //{
                //    if (hargaJualBaru < 100)
                //    {
                //        ret.message = "Harga Jual harus lebih dari 100.";
                //        return Json(ret, JsonRequestBehavior.AllowGet);
                //    }
                //    else if (hargaJualBaru % 100 != 0)
                //    {
                //        ret.message = "Harga Jual harus kelipatan 100.";
                //        return Json(ret, JsonRequestBehavior.AllowGet);
                //    }
                //}
                if (hJualInDb.DISPLAY)
                {
                    var retVal = ValidasiHarga(customer.NAMA, hargaJualBaru);
                    if (retVal.status == 0)
                    {
                        ret.message = retVal.message;
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by Tri 22 agustus 2019, validasi harga 1 function

            }
            //end add by Tri, validasi harga per marketplace

            hJualInDb.HJUAL = hargaJualBaru;
            //add by nurul 27/11/2019, add tgl last edit
            brg.Tgl_Input = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit
            ErasoftDbContext.SaveChanges();

            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //{
            if (!string.IsNullOrEmpty(hJualInDb.BRG_MP))//add by Tri, 24-06-2019
            {
                var qtyOnHand = GetQOHSTF08A(hJualInDb.BRG, "ALL");

                //add by Tri, update harga ke marketplace
                if (customer.NAMA.Equals(kdLazada))
                {
                    if (!string.IsNullOrEmpty(customer.TOKEN))//add by Tri, 24-06-2019
                    {
#if Debug_AWS || DEBUG
                        //var lzdApi = new LazadaController();
                        //lzdApi.UpdatePriceQuantity(hJualInDb.BRG_MP, hargaJualBaru.ToString(), "", customer.TOKEN);
                        var lzdApiJob = new LazadaControllerJob();
                        lzdApiJob.UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, hargaJualBaru.ToString(), customer.TOKEN, customer.PERSO);
#else
                        var sqlStorage = new SqlServerStorage(EDBConnID);
                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                        clientJobServer.Enqueue<LazadaControllerJob>(x => x.UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, hargaJualBaru.ToString(), customer.TOKEN, customer.PERSO));
#endif
                    }
                }
                else if (customer.NAMA.Equals(kdBL))
                {
                    var blApi = new BukaLapakController();
                    if (!string.IsNullOrEmpty(customer.TOKEN))//add by Tri, 24-06-2019
                        blApi.updateProduk(hJualInDb.BRG, hJualInDb.BRG_MP, hargaJualBaru.ToString(), "", customer.API_KEY, customer.TOKEN);
                }
                else if (customer.NAMA.Equals(kdBlibli))
                {
#if Debug_AWS || DEBUG
                    //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                    //{
                    //    merchant_code = customer.Sort1_Cust,
                    //    API_client_password = customer.API_CLIENT_P,
                    //    API_client_username = customer.API_CLIENT_U,
                    //    API_secret_key = customer.API_KEY,
                    //    token = customer.TOKEN,
                    //    mta_username_email_merchant = customer.EMAIL,
                    //    mta_password_password_merchant = customer.PASSWORD,
                    //    idmarket = customer.RecNum.Value
                    //};
                    //BlibliController.BlibliProductData data = new BlibliController.BlibliProductData
                    //{
                    //    kode = brg.BRG,
                    //    kode_mp = hJualInDb.BRG_MP,
                    //    Qty = Convert.ToString(qtyOnHand),
                    //    MinQty = "0",
                    //    nama = brg.NAMA
                    //};
                    //data.Price = brg.HJUAL.ToString();
                    //data.MarketPrice = hJualInDb.HJUAL.ToString();
                    //var display = Convert.ToBoolean(hJualInDb.DISPLAY);
                    //data.display = display ? "true" : "false";
                    //var BliApi = new BlibliController();
                    //Task.Run(() => BliApi.UpdateProdukQOH_Display(iden, data).Wait());

                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                    {
                        merchant_code = customer.Sort1_Cust,
                        API_client_password = customer.API_CLIENT_P,
                        API_client_username = customer.API_CLIENT_U,
                        API_secret_key = customer.API_KEY,
                        //API_client_password = "mta-api-r1O1hntBZOQsQuNpCN5lfTKPIOJbHJk9NWRfvOEEUc3H2yVCKk",
                        //API_secret_key = "2232587F9E9C2A58E8C75BBF8DF302D43B209E0E9F66C60756FFB0E7F16DFD8F",
                        token = customer.TOKEN,
                        mta_username_email_merchant = customer.EMAIL,
                        mta_password_password_merchant = customer.PASSWORD,
                        idmarket = customer.RecNum.Value,
                        DatabasePathErasoft = dbPathEra,
                        versiToken = customer.KD_ANALISA
                    };
                    BlibliControllerJob.BlibliProductData dataJob = new BlibliControllerJob.BlibliProductData
                    {
                        kode = brg.BRG,
                        kode_mp = hJualInDb.BRG_MP,
                        Qty = Convert.ToString(qtyOnHand),
                        MinQty = "0",
                        nama = brg.NAMA
                    };
                    dataJob.Price = brg.HJUAL.ToString();
                    dataJob.MarketPrice = hJualInDb.HJUAL.ToString();
                    var displayJob = Convert.ToBoolean(hJualInDb.DISPLAY);
                    dataJob.display = displayJob ? "true" : "false";

                    var BliApiJob = new BlibliControllerJob();
                    BliApiJob.UpdateProdukQOH_Display_Job(dbPathEra, dataJob.kode, customer.CUST, "Price", "Update Price", dataJob.kode_mp, idenJob, dataJob);

#else
                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                    {
                        merchant_code = customer.Sort1_Cust,
                        API_client_password = customer.API_CLIENT_P,
                        API_client_username = customer.API_CLIENT_U,
                        API_secret_key = customer.API_KEY,
                        token = customer.TOKEN,
                        mta_username_email_merchant = customer.EMAIL,
                        mta_password_password_merchant = customer.PASSWORD,
                        idmarket = customer.RecNum.Value,
                        DatabasePathErasoft = dbPathEra,
                        versiToken = customer.KD_ANALISA
                    };
                    BlibliControllerJob.BlibliProductData dataJob = new BlibliControllerJob.BlibliProductData
                    {
                        kode = brg.BRG,
                        kode_mp = hJualInDb.BRG_MP,
                        Qty = Convert.ToString(qtyOnHand),
                        MinQty = "0",
                        nama = brg.NAMA
                    };
                    dataJob.Price = brg.HJUAL.ToString();
                    dataJob.MarketPrice = hJualInDb.HJUAL.ToString();
                    var displayJob = Convert.ToBoolean(hJualInDb.DISPLAY);
                    dataJob.display = displayJob ? "true" : "false";

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    clientJobServer.Enqueue<BlibliControllerJob>(x => x.UpdateProdukQOH_Display_Job(dbPathEra, dataJob.kode, customer.CUST, "Price", "Update Price", dataJob.kode_mp, idenJob, dataJob));
#endif
                }
                else if (customer.NAMA.Equals(kdElevenia))
                {
                    string[] imgID = new string[3];
                    //change by calvin 4 desember 2018
                    //                for (int i = 0; i < 3; i++)
                    //                {
                    //#if AWS
                    //                    imgID[i] = "https://masteronline.co.id/ele/image/" + $"FotoProduk-{brg.USERNAME}-{brg.BRG}-foto-{i + 1}";
                    //#else
                    //                    imgID[i] = "https://dev.masteronline.co.id/ele/image/" + $"FotoProduk-{brg.USERNAME}-{brg.BRG}-foto-{i + 1}";
                    //#endif
                    //                }
                    for (int i = 0; i < 3; i++)
                    {
                        switch (i)
                        {
                            case 0:
                                imgID[0] = brg.LINK_GAMBAR_1;
                                break;
                            case 1:
                                imgID[1] = brg.LINK_GAMBAR_2;
                                break;
                            case 2:
                                imgID[2] = brg.LINK_GAMBAR_3;
                                break;
                        }
                    }
                    //end change by calvin 4 desember 2018
                    EleveniaController.EleveniaProductData data = new EleveniaController.EleveniaProductData
                    {
                        api_key = customer.API_KEY,
                        kode = hJualInDb.BRG,
                        nama = brg.NAMA + ' ' + brg.NAMA2 + ' ' + brg.NAMA3,
                        berat = (brg.BERAT / 1000).ToString(),//MO save dalam Gram, Elevenia dalam Kilogram
                        imgUrl = imgID,
                        Keterangan = brg.Deskripsi,
                        Qty = Convert.ToString(qtyOnHand),
                        DeliveryTempNo = hJualInDb.DeliveryTempElevenia.ToString(),
                        IDMarket = customer.RecNum.ToString(),
                    };
                    data.Brand = ErasoftDbContext.STF02E.SingleOrDefault(m => m.KODE == brg.Sort2 && m.LEVEL == "2").KET;
                    data.Price = hargaJualBaru.ToString();
                    data.kode_mp = hJualInDb.BRG_MP;

                    var display = Convert.ToBoolean(hJualInDb.DISPLAY);
                    if (!string.IsNullOrEmpty(data.kode_mp))
                    {
                        var result = new EleveniaController().UpdateProduct(data);
                    }
                }
                //end add by Tri, update harga ke marketplace
                //add by calvin 18 desember 2018
                else if (customer.NAMA.Equals(kdShopee))
                {
                    if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                    {
                        if (hJualInDb.BRG_MP != "")
                        {
                            string[] brg_mp = hJualInDb.BRG_MP.Split(';');
                            if (brg_mp.Count() == 2)
                            {
#if Debug_AWS || DEBUG
                                var ShopeeApi = new ShopeeController();
                                ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                {
                                    merchant_code = customer.Sort1_Cust,
                                };
                                var ShopeeApiJob = new ShopeeControllerJob();
                                ShopeeControllerJob.ShopeeAPIData dataJob = new ShopeeControllerJob.ShopeeAPIData()
                                {
                                    merchant_code = customer.Sort1_Cust,
                                    DatabasePathErasoft = dbPathEra,
                                    username = usernameLogin
                                };
#else
                                var ShopeeApiJob = new ShopeeControllerJob();
                                ShopeeControllerJob.ShopeeAPIData dataJob = new ShopeeControllerJob.ShopeeAPIData()
                                {
                                        merchant_code = customer.Sort1_Cust,
                                        DatabasePathErasoft = dbPathEra,
                                        username = usernameLogin
                                };
#endif


                                if (brg_mp[1] == "0")
                                {
#if Debug_AWS || DEBUG
                                    //Task.Run(() => ShopeeApi.UpdatePrice(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, dataJob, (float)hargaJualBaru)).Wait();
                                    ShopeeApiJob.UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, dataJob, (float)hargaJualBaru);
#else
                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, dataJob, (float)hargaJualBaru));
#endif
                                }
                                else if (brg_mp[1] != "")
                                {
#if Debug_AWS || DEBUG
                                    //Task.Run(() => ShopeeApi.UpdateVariationPrice(data, hJualInDb.BRG_MP, (float)hargaJualBaru)).Wait();
                                    ShopeeApiJob.UpdateVariationPrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, dataJob, (float)hargaJualBaru);
#else
                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                    clientJobServer.Enqueue<ShopeeControllerJob>(x => x.UpdateVariationPrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, dataJob, (float)hargaJualBaru));
                                    
#endif
                                }
                            }
                        }
                    }
                }
                else if (customer.NAMA.Equals(kdShopify))
                {
                    if (!string.IsNullOrWhiteSpace(customer.Sort1_Cust))
                    {
                        var ShopifyApi = new ShopifyControllerJob();

                        ShopifyControllerJob.ShopifyAPIData data = new ShopifyControllerJob.ShopifyAPIData()
                        {
                            no_cust = customer.Sort1_Cust,
                            account_store = customer.PERSO,
                            API_key = customer.API_KEY,
                            API_password = customer.API_CLIENT_P,
                            DatabasePathErasoft = dbPathEra,
                        };
                        if (hJualInDb.BRG_MP != "")
                        {
                            string[] brg_mp = hJualInDb.BRG_MP.Split(';');
                            if (brg_mp.Count() == 2)
                            {

#if Debug_AWS || DEBUG
                                Task.Run(() => ShopifyApi.Shopify_UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (double)hargaJualBaru)).Wait();
#else
                                    var sqlStorage = new SqlServerStorage(EDBConnID);
                                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                                    clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (float)hargaJualBaru));
                                    
#endif
                            }
                        }
                    }
                }
                else if (customer.NAMA.Equals("15"))//tokopedia
                {
                    if (hJualInDb.BRG_MP.Contains("PENDING") || hJualInDb.BRG_MP.Contains("PEDITENDING"))
                    {
                        return Json(new { success = false, message = "Harga barang tidak berhasil disimpan. Mohon lakukan edit barang dan simpan barang di menu master barang kemudian lakukan ubah harga lagi!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
#if Debug_AWS || DEBUG
                        TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                        {
                            merchant_code = customer.Sort1_Cust, //FSID
                            API_client_password = customer.API_CLIENT_P, //Client ID
                            API_client_username = customer.API_CLIENT_U, //Client Secret
                            API_secret_key = customer.API_KEY, //Shop ID 
                            token = customer.TOKEN,
                            idmarket = customer.RecNum.Value,
                            DatabasePathErasoft = dbPathEra,
                            username = usernameLogin
                        };
                        //change by nurul 12/2/2020
                        //Task.Run(() => new TokopediaControllerJob().UpdatePrice(iden, Convert.ToInt32(hJualInDb.BRG_MP), (float)hargaJualBaru)).Wait();
                        //Task.Run(() => new TokopediaControllerJob().UpdatePrice(iden, Convert.ToInt32(hJualInDb.BRG_MP), (int)hargaJualBaru)).Wait();
                        new TokopediaControllerJob().UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", Convert.ToInt32(hJualInDb.BRG_MP), iden, (int)hargaJualBaru);
                        //end change by nurul 12/2/2020
                        //dbPathEra, hJualInDb.BRG_MP, customer.CUST, "Price", "Update Price", hargaJualBaru.ToString(), customer.TOKEN, customer.PERSO);
#else
                        TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                    {
                        merchant_code = customer.Sort1_Cust, //FSID
                        API_client_password = customer.API_CLIENT_P, //Client ID
                        API_client_username = customer.API_CLIENT_U, //Client Secret
                        API_secret_key = customer.API_KEY, //Shop ID 
                        token = customer.TOKEN,
                        idmarket = customer.RecNum.Value,
                        DatabasePathErasoft = dbPathEra,
                        username = usernameLogin
                    };

                var sqlStorage = new SqlServerStorage(EDBConnID);
                var clientJobServer = new BackgroundJobClient(sqlStorage);
                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.UpdatePrice_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", Convert.ToInt32(hJualInDb.BRG_MP), iden, (int)hargaJualBaru));
                                    
#endif
                    }
                }
                else if (customer.NAMA.Equals(kdJD))
                {
                    if (!string.IsNullOrWhiteSpace(customer.API_KEY))
                    {
                        var JDIDApi = new JDIDControllerJob();

                        JDIDControllerJob.JDIDAPIDataJob data = new JDIDControllerJob.JDIDAPIDataJob()
                        {
                            no_cust = customer.CUST,
                            accessToken = customer.TOKEN,
                            appKey = customer.API_KEY,
                            appSecret = customer.API_CLIENT_U,
                            username = customer.USERNAME,
                            email = customer.EMAIL,
                            DatabasePathErasoft = dbPathEra
                        };
                        if (hJualInDb.BRG_MP != "")
                        {

#if Debug_AWS || DEBUG
                            Task.Run(() => JDIDApi.JD_updatePrice(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (int)hargaJualBaru, customer.USERNAME)).Wait();
#else
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                            clientJobServer.Enqueue<JDIDControllerJob>(x => x.JD_updatePrice(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (int)hargaJualBaru, customer.USERNAME));
                                    
#endif
                        }
                    }
                }
                //end add by calvin 18 desember 2018
                //}
            }

            //change by nurul 13/6/2019
            //var vm = new HargaJualViewModel()
            //{
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListHargaJualPerMarket = ErasoftDbContext.STF02H.ToList(),
            //    ListHargaTerakhir = ErasoftDbContext.STF10.ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //};

            //return PartialView("TableHargaJualPartial", vm);
            return new EmptyResult();
            //hJualInDb.Errors = null;
            //return Json(hJualInDb, JsonRequestBehavior.AllowGet);
            //end change by nurul 13/6/2019
        }

        [HttpGet]
        public ActionResult UbahHargaJualBlibli(int? recNum, double hargaJualPromosiBaru, double hargaJualIndukBaru)
        {
            var ret = new ReturnJson();
            var hJualInDb = ErasoftDbContext.STF02H.SingleOrDefault(h => h.RecNum == recNum);
            //change by nurul 18/1/2019 -- var brg = ErasoftDbContext.STF02.SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            //change by nurul 16/9/2020
            //var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3" || a.TYPE == "6").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            //end change by nurul 16/9/2020
            if (hJualInDb == null)
            {
                ret.message = "No Data Found!";
                return Json(ret, JsonRequestBehavior.AllowGet);
            }

            var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI").IdMarket.ToString();
            var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.RecNum == hJualInDb.IDMARKET);
            if (customer.NAMA.Equals(kdBlibli))
            {
                //change 24 jan 2020, change min price to 1000
                //if (hargaJualIndukBaru < 1100)
                //{
                //    ret.message = "Harga Jual minimal 1100.";
                //    return Json(ret, JsonRequestBehavior.AllowGet);
                //}
                //if (hargaJualPromosiBaru < 1100)
                //{
                //    ret.message = "Harga Jual minimal 1100.";
                //    return Json(ret, JsonRequestBehavior.AllowGet);
                //}
                if (hargaJualIndukBaru < 1000)
                {
                    ret.message = "Harga Jual minimal 1000.";
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }
                if (hargaJualPromosiBaru < 1000)
                {
                    ret.message = "Harga Jual minimal 1000.";
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }
                //end change 24 jan 2020, change min price to 1000
            }
            brg.HJUAL = hargaJualIndukBaru;
            //add by nurul 27/11/2019, add tgl last edit
            brg.Tgl_Input = DateTime.Today;
            //end add by nurul 27/11/2019, add tgl last edit
            hJualInDb.HJUAL = hargaJualPromosiBaru;
            ErasoftDbContext.SaveChanges();

            //var DataUsaha = ErasoftDbContext.SIFSYS.FirstOrDefault();
            //bool doAPI = false;
            //if (DataUsaha != null)
            //{
            //    if (DataUsaha.JTRAN_RETUR == "1")
            //    {
            //        doAPI = true;
            //    }
            //}
            //if (doAPI)
            //{
            if (!string.IsNullOrEmpty(hJualInDb.BRG_MP))//add by Tri, 24-06-2019
            {
                var qtyOnHand = GetQOHSTF08A(hJualInDb.BRG, "ALL");

                if (customer.NAMA.Equals(kdBlibli))
                {
#if Debug_AWS || DEBUG
                    //BlibliController.BlibliAPIData iden = new BlibliController.BlibliAPIData
                    //{
                    //    merchant_code = customer.Sort1_Cust,
                    //    API_client_password = customer.API_CLIENT_P,
                    //    API_client_username = customer.API_CLIENT_U,
                    //    API_secret_key = customer.API_KEY,
                    //    token = customer.TOKEN,
                    //    mta_username_email_merchant = customer.EMAIL,
                    //    mta_password_password_merchant = customer.PASSWORD,
                    //    idmarket = customer.RecNum.Value
                    //};
                    //BlibliController.BlibliProductData data = new BlibliController.BlibliProductData
                    //{
                    //    kode = brg.BRG,
                    //    kode_mp = hJualInDb.BRG_MP,
                    //    Qty = Convert.ToString(qtyOnHand),
                    //    MinQty = "0",
                    //    nama = brg.NAMA
                    //};
                    //data.Price = brg.HJUAL.ToString();
                    //data.MarketPrice = hJualInDb.HJUAL.ToString();
                    //var display = Convert.ToBoolean(hJualInDb.DISPLAY);
                    //data.display = display ? "true" : "false";
                    //var BliApi = new BlibliController();
                    //Task.Run(() => BliApi.UpdateProdukQOH_Display(iden, data).Wait());

                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                    {
                        merchant_code = customer.Sort1_Cust,
                        API_client_password = customer.API_CLIENT_P,
                        API_client_username = customer.API_CLIENT_U,
                        API_secret_key = customer.API_KEY,
                        token = customer.TOKEN,
                        mta_username_email_merchant = customer.EMAIL,
                        mta_password_password_merchant = customer.PASSWORD,
                        idmarket = customer.RecNum.Value,
                        DatabasePathErasoft = dbPathEra,
                        versiToken = customer.KD_ANALISA
                    };
                    BlibliControllerJob.BlibliProductData dataJob = new BlibliControllerJob.BlibliProductData
                    {
                        kode = brg.BRG,
                        kode_mp = hJualInDb.BRG_MP,
                        Qty = Convert.ToString(qtyOnHand),
                        MinQty = "0",
                        nama = brg.NAMA
                    };
                    dataJob.Price = brg.HJUAL.ToString();
                    dataJob.MarketPrice = hJualInDb.HJUAL.ToString();
                    var displayJob = Convert.ToBoolean(hJualInDb.DISPLAY);
                    dataJob.display = displayJob ? "true" : "false";

                    var BliApiJob = new BlibliControllerJob();
                    Task.Run(() => BliApiJob.UpdateProdukQOH_Display_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, idenJob, dataJob)).Wait();
#else
                    BlibliControllerJob.BlibliAPIData idenJob = new BlibliControllerJob.BlibliAPIData
                    {
                        merchant_code = customer.Sort1_Cust,
                        API_client_password = customer.API_CLIENT_P,
                        API_client_username = customer.API_CLIENT_U,
                        API_secret_key = customer.API_KEY,
                        token = customer.TOKEN,
                        mta_username_email_merchant = customer.EMAIL,
                        mta_password_password_merchant = customer.PASSWORD,
                        idmarket = customer.RecNum.Value,
                        DatabasePathErasoft = dbPathEra,
                        versiToken = customer.KD_ANALISA
                    };
                    BlibliControllerJob.BlibliProductData dataJob = new BlibliControllerJob.BlibliProductData
                    {
                        kode = brg.BRG,
                        kode_mp = hJualInDb.BRG_MP,
                        Qty = Convert.ToString(qtyOnHand),
                        MinQty = "0",
                        nama = brg.NAMA
                    };
                    dataJob.Price = brg.HJUAL.ToString();
                    dataJob.MarketPrice = hJualInDb.HJUAL.ToString();
                    var displayJob = Convert.ToBoolean(hJualInDb.DISPLAY);
                    dataJob.display = displayJob ? "true" : "false";

                    var sqlStorage = new SqlServerStorage(EDBConnID);
                    var clientJobServer = new BackgroundJobClient(sqlStorage);
                    clientJobServer.Enqueue<BlibliControllerJob>(x => x.UpdateProdukQOH_Display_Job(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", hJualInDb.BRG_MP, idenJob, dataJob));
#endif
                }
            }
            //}

            //change by nurul 13/6/2019
            //var vm = new HargaJualViewModel()
            //{
            //    //change by nurul 18/1/2019 -- ListBarang = ErasoftDbContext.STF02.ToList(),
            //    ListBarang = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").ToList(),
            //    ListHargaJualPerMarket = ErasoftDbContext.STF02H.ToList(),
            //    ListHargaTerakhir = ErasoftDbContext.STF10.ToList(),
            //    ListPelanggan = ErasoftDbContext.ARF01.ToList(),
            //};

            //return PartialView("TableHargaJualPartial", vm);
            return new EmptyResult();
            //hJualInDb.Errors = null;
            //return Json(hJualInDb, JsonRequestBehavior.AllowGet);
            //end change by nurul 13/6/2019
        }

        [HttpGet]
        public ActionResult UbahHargaJual82Cart(int? recNum, string hargaJualDampakBaru, double hargaJualIndukBaru)
        {
            var ret = new ReturnJson();
            var hJualInDb = ErasoftDbContext.STF02H.SingleOrDefault(h => h.RecNum == recNum);
            //change by nurul 16/9/2020
            //var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            var brg = ErasoftDbContext.STF02.Where(a => a.TYPE == "3" || a.TYPE == "6").SingleOrDefault(b => b.BRG == hJualInDb.BRG);
            //end change by nurul 16/9/2020
            if (hJualInDb == null)
            {
                ret.message = "No Data Found!";
                return Json(ret, JsonRequestBehavior.AllowGet);
            }

            var kd82Cart = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "82CART").IdMarket.ToString();
            var customer = ErasoftDbContext.ARF01.SingleOrDefault(c => c.RecNum == hJualInDb.IDMARKET);
            if (customer.NAMA.Equals(kd82Cart))
            {
                //if (hargaJualIndukBaru < 0)
                //{
                //    ret.message = "Harga Jual minimal 0.";
                //    return Json(ret, JsonRequestBehavior.AllowGet);
                //}
                //if (hargaJualGrosirBaru < 0)
                //{
                //    ret.message = "Harga Jual Grosir minimal 0.";
                //    return Json(ret, JsonRequestBehavior.AllowGet);
                //}
            }
            brg.HJUAL = hargaJualIndukBaru;
            brg.Tgl_Input = DateTime.Today;
            hJualInDb.HJUAL = hargaJualIndukBaru;
            ErasoftDbContext.SaveChanges();

            if (!string.IsNullOrEmpty(hJualInDb.BRG_MP))//add by Tri, 24-06-2019
            {
                var qtyOnHand = GetQOHSTF08A(hJualInDb.BRG, "ALL");

                if (customer.NAMA.Equals(kd82Cart))//82Cart
                {
                    if (!string.IsNullOrEmpty(hJualInDb.BRG_MP))
                    {
                        var v82CartAPI = new EightTwoCartControllerJob();
                        EightTwoCartControllerJob.E2CartAPIData data = new EightTwoCartControllerJob.E2CartAPIData()
                        {
                            no_cust = customer.CUST,
                            account_store = customer.PERSO,
                            API_key = customer.API_KEY,
                            API_credential = customer.Sort1_Cust,
                            API_url = customer.PERSO,
                            DatabasePathErasoft = dbPathEra
                        };
                        if (hJualInDb.BRG_MP.Contains("PENDING") || hJualInDb.BRG_MP.Contains("PEDITENDING"))
                        {

                        }
                        else
                        {
#if (DEBUG || Debug_AWS)
                            Task.Run(() => v82CartAPI.E2Cart_UpdatePrice_82Cart(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (int)hargaJualIndukBaru, hargaJualDampakBaru)).Wait();
#else
                            var sqlStorage = new SqlServerStorage(EDBConnID);
                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                        clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_UpdatePrice_82Cart(dbPathEra, hJualInDb.BRG, customer.CUST, "Price", "Update Price", data, hJualInDb.BRG_MP, (int)hargaJualIndukBaru, hargaJualDampakBaru));
#endif
                        }
                    }

                }
            }
            return new EmptyResult();
        }

        [HttpGet]
        public ActionResult GetHargaInduk82Cart(string kodebrg)
        {
            var brgSTF02Check = ErasoftDbContext.STF02.SingleOrDefault(h => h.BRG == kodebrg);
            var brgSTF02 = ErasoftDbContext.STF02.Where(a => a.TYPE == "4").SingleOrDefault(b => b.BRG == brgSTF02Check.PART);

            if (brgSTF02 == null)
            {
                return new JsonResult { Data = new { success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            else
            {
                var hargaInduk = brgSTF02.HJUAL;
                return new JsonResult { Data = new { success = true, hargaInduk = hargaInduk }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }

        }

        public class ReturnJson
        {
            public string message { get; set; }
            public bool error { get; set; }
        }
        // =============================================== Bagian Harga Jual Barang (END)

        // =============================================== Bagian Subscription (START)

        [Route("manage/Subscription")]
        public ActionResult Subscription()
        {
            var vm = new SubsViewModel()
            {
                ListSubs = MoDbContext.Subscription.ToList(),
                loggedin = true
            };

            return View(vm);
        }

        // =============================================== Bagian Subscription (END)

        // =============================================== Bagian Support (START)

        [Route("manage/SupportOnline")]
        public ActionResult SupportOnline()
        {

            return View();
        }

        [Route("manage/SupportOffline")]
        public ActionResult SupportOffline()
        {

            return View();
        }
        // =============================================== Bagian Support (END)

        // =============================================== Bagian Upload Barang (START)

        [Route("manage/master/uploadbarang")]
        public ActionResult UploadBarang()
        {
            var barangVm = new UploadBarangViewModel()
            {
                ListTempBrg = new List<TEMP_BRG_MP>(),
                //ListMarket = ErasoftDbContext.ARF01.ToList(),
                Stf02 = new STF02(),
                TempBrg = new TEMP_BRG_MP(),
            };
            barangVm.ListMarket = ErasoftDbContext.ARF01.ToList();
            ////add and remark by calvin, untuk excel
            //ProsesTempExcelAutoCompleteBrg("000005");
            ////end add and remark by calvin, untuk excel

            //List<string> listBrg = new List<string>();
            //var stt01b = ErasoftDbContext.STT01B.Select(p => p.Kobar).FirstOrDefault();
            //listBrg.Add(stt01b);
            //updateStockMarketPlace(listBrg);

            //var shoAPI = new ShopeeController();
            //ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            //{
            //    merchant_code = "6297330",
            //};
            //ShopeeController.ShopeeGetParameterForInitLogisticResult InitParam;
            //InitParam = shoAPI.GetParameterForInitLogistic(data, "");
            //var InitParam = shoAPI.GetParameterForInitLogistic(data, "19012314340WD5C");

            return View(barangVm);
        }

        //change by nurul 17/6/2019, paging
        //public ActionResult RefreshTableUploadBarang(string cust)
        //{
        //    var barangVm = new UploadBarangViewModel()
        //    {
        //        ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.CUST.Equals(cust)).ToList(),
        //        ListMarket = ErasoftDbContext.ARF01.ToList(),
        //        Stf02 = new STF02(),
        //        TempBrg = new TEMP_BRG_MP(),
        //    };

        //    return PartialView("TableUploadBarangPartial", barangVm);
        //}

        public ActionResult RefreshTableUploadBarang(string cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLsellersku = "";
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLmerk = "";
            string sSQLkategori = "";
            string sSQLharga = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQLsellersku += "( SELLER_SKU like '%" + getkata[i] + "%' )";
                            sSQLnama += " ( (ISNULL(NAMA, '') + ' ' + ISNULL(NAMA2, '')) like '%" + getkata[i] + "%' )";
                            sSQLkode += " ( BRG_MP like '%" + getkata[i] + "%' )";
                            sSQLmerk += "( MEREK like '%" + getkata[i] + "%' )";
                            sSQLkategori += "( CATEGORY_NAME like '%" + getkata[i] + "%' )";
                            sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQLnama += " ( (ISNULL(NAMA, '') + ' ' + ISNULL(NAMA2, '')) like '%" + getkata[i] + "%'";
                                sSQLkode += " ( BRG_MP like '%" + getkata[i] + "%'";
                                sSQLsellersku += "( SELLER_SKU like '%" + getkata[i] + "%'";
                                sSQLmerk += "( MEREK like '%" + getkata[i] + "%'";
                                sSQLkategori += "( CATEGORY_NAME like '%" + getkata[i] + "%'";
                                sSQLharga += " ( HJUAL like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQLnama += " and (ISNULL(NAMA, '') + ' ' + ISNULL(NAMA2, '')) like '%" + getkata[i] + "%' )";
                                sSQLkode += " and BRG_MP like '%" + getkata[i] + "%' )";
                                sSQLsellersku += " and SELLER_SKU like '%" + getkata[i] + "%' )";
                                sSQLmerk += " and MEREK like '%" + getkata[i] + "%' )";
                                sSQLkategori += " and CATEGORY_NAME like '%" + getkata[i] + "%' )";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQLnama += " and (ISNULL(NAMA, '') + ' ' + ISNULL(NAMA2, '')) like '%" + getkata[i] + "%' ";
                                sSQLkode += " and BRG_MP like '%" + getkata[i] + "%' ";
                                sSQLsellersku += " and SELLER_SKU like '%" + getkata[i] + "%' ";
                                sSQLmerk += " and MEREK like '%" + getkata[i] + "%' ";
                                sSQLkategori += " and CATEGORY_NAME like '%" + getkata[i] + "%' ";
                                sSQLharga += " and HJUAL like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            //string sSQLSelect = "";
            //sSQLSelect += "SELECT RECNUM AS RECNUM, BRG_MP AS BRG_MP, SELLER_SKU AS SELLER_SKU, MEREK AS MEREK, NAMA AS NAMA, NAMA2 AS NAMA2, CATEGORY_NAME AS CATEGORY_NAME, HJUAL AS HJUAL ";
            //string sSQLCount = "";
            //sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            //string sSQL2 = "";
            //sSQL2 += "FROM TEMP_BRG_MP ";
            ////sSQL2 += "LEFT JOIN ARF01 B ON A.IDMARKET = B.RecNum ";
            ////sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            ////sSQL2 += "LEFT JOIN STF02 D ON A.BRG = D.BRG ";
            ////sSQL2 += "LEFT JOIN STF10 E ON A.BRG = E.BRG ";
            //sSQL2 += "WHERE CUST = '" + cust + "' ";
            //if (search != "")
            //{
            //    //sSQL2 += "AND (BRG_MP LIKE '%" + search + "%' OR NAMA LIKE '%" + search + "%' OR NAMA2 LIKE '%" + search + "%' OR SELLER_SKU LIKE '%" + search + "%' OR MEREK LIKE '%" + search + "%' OR CATEGORY_NAME LIKE '%" + search + "%' ) ";
            //    sSQL2 += "AND (BRG_MP LIKE '%" + search + "%' OR (ISNULL(NAMA, '') + ISNULL(NAMA2, '')) LIKE '%" + search + "%' OR SELLER_SKU LIKE '%" + search + "%' OR MEREK LIKE '%" + search + "%' OR CATEGORY_NAME LIKE '%" + search + "%' ) ";

            //}

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            //string sSQLSelect2 = "";
            //sSQLSelect2 += "ORDER BY SELLER_SKU ASC ";
            //sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            //var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlUploadBarang>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            string sSQLSelect = "";
            sSQLSelect += "SELECT RECNUM AS RECNUM, BRG_MP AS BRG_MP, SELLER_SKU AS SELLER_SKU, MEREK AS MEREK, NAMA AS NAMA, NAMA2 AS NAMA2, CATEGORY_NAME AS CATEGORY_NAME, HJUAL AS HJUAL ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM TEMP_BRG_MP ";
            sSQL2 += "WHERE CUST = '" + cust + "' ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLsellersku + " or " + sSQLmerk + " or " + sSQLkategori + " or " + sSQLharga + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY NAMA + ' ' + ISNULL(NAMA2,'') ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listFakturNew = ErasoftDbContext.Database.SqlQuery<mdlUploadBarang>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //end change by nurul 26/9/2019, contain search 

            IPagedList<mdlUploadBarang> pageOrders = new StaticPagedList<mdlUploadBarang>(listFakturNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableUploadBarangPartial", pageOrders);
        }
        //end change by nurul 17/6/2019, paging 

        public ActionResult RefreshFormUploadBarang()
        {
            var barangVm = new UploadBarangViewModel()
            {
                ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.ToList(),
                ListMarket = ErasoftDbContext.ARF01.ToList(),
                Stf02 = new STF02(),
                TempBrg = new TEMP_BRG_MP(),
            };

            return PartialView("TableUploadBarangPartial", barangVm);
        }

        private void CreateSTF02HOffline(string brg, double hjual, int idOffline)
        {
            string sSQL = "insert into stf02h (brg, idmarket, akunmarket, username, hjual, display) ";
            sSQL += "select '" + brg + "' , a.recnum, a.perso , 'auto_create', " + hjual + ", 1 ";
            sSQL += "from arf01 a left join ";
            sSQL += "(select * from stf02h where brg = '" + brg + "') As qry on a.recnum = qry.idmarket ";
            sSQL += "where isnull(qry.brg, '') = '' and nama = '" + idOffline + "' ";

            EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
        }

        public ActionResult UploadSatuBarang(UploadBarangViewModel data)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                string listError = "Invalid data :";
                foreach (var e in errors)
                {
                    listError += "\n" + e.Replace("Sort1", "Kategori Barang").Replace("Sort2", "Merek Barang");
                }
                return JsonErrorMessage(listError);
            }
            #region validasi harga
            //change 23 agustus 2019, validasi harga 1 function
            //var kdBL = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BUKALAPAK");
            //var kdLazada = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "LAZADA");
            //var kdBlibli = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "BLIBLI");
            //var kdElevenia = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "ELEVENIA");
            //var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");

            var kdMarket = ErasoftDbContext.ARF01.Where(m => m.RecNum == data.TempBrg.IDMARKET).FirstOrDefault().NAMA;
            //if (kdMarket == kdLazada.IdMarket.ToString())
            //{
            //    if (data.Stf02.HJUAL < 3000)
            //    {
            //        return JsonErrorMessage("Harga Jual harus lebih dari 3000.");
            //    }
            //    else if (data.Stf02.HJUAL % 100 != 0)
            //    {
            //        return JsonErrorMessage("Harga Jual harus kelipatan 100.");
            //    }
            //}
            //else if (kdMarket == kdBlibli.IdMarket.ToString())
            //{
            //    if (data.Stf02.HJUAL < 1100)
            //    {
            //        return JsonErrorMessage("Harga Jual minimal 1100.");
            //    }
            //}
            //else if (kdMarket == kdBL.IdMarket.ToString() || kdMarket == kdElevenia.IdMarket.ToString())
            //{
            //    if (data.Stf02.HJUAL < 100)
            //    {
            //        return JsonErrorMessage("Harga Jual harus lebih dari 100.");
            //    }
            //    else if (data.Stf02.HJUAL % 100 != 0)
            //    {
            //        return JsonErrorMessage("Harga Jual harus kelipatan 100.");
            //    }
            //}
            //else if (kdMarket == kdShopee.IdMarket.ToString())
            //{
            //    if (data.Stf02.HJUAL < 100)
            //    {
            //        return JsonErrorMessage("Harga Jual harus lebih dari 100.");
            //    }
            //    //else if (data.Stf02.HJUAL > 9999999999999)
            //    //{
            //    //    return JsonErrorMessage("Harga Jual tidak boleh lebih dari 9,999,999,999,999.");
            //    //}
            //}
            if (data.TempBrg.DISPLAY)
            {
                var retVal = ValidasiHarga(kdMarket, data.Stf02.HJUAL);
                if (retVal.status == 0)
                {
                    return JsonErrorMessage(retVal.message);
                }
            }
            //end change 23 agustus 2019, validasi harga 1 function
            #endregion
            if (data != null)
            {
                string username = "";
                AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                if (sessionData?.Account != null)
                {
                    username = sessionData.Account.Username;

                }
                else
                {
                    if (sessionData?.User != null)
                    {
                        username = sessionData.User.Username;
                    }
                }

                //var tempBrginDB = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP == data.TempBrg.BRG_MP).FirstOrDefault();
                var tempBrginDB = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP == data.TempBrg.BRG_MP && t.CUST == data.TempBrg.CUST).FirstOrDefault();
                var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                if (tempBrginDB != null)
                {
                    if (data.Stf02 != null)
                    {
                        //add by nurul 27/11/2019, add tgl last edit
                        data.Stf02.Tgl_Input = DateTime.Today;
                        //add by nurul 27/11/2019, add tgl last edit
                        var offlineId = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToLower().Contains("offline")).FirstOrDefault();
                        data.Stf02.Deskripsi = HttpUtility.HtmlDecode(data.Stf02.Deskripsi);
                        //remark 21 jan 2020, tokped sudah bisa dapat tipe barang
                        //var tokped = 15;
                        //if (customer.NAMA != Convert.ToString(tokped))
                        //{
                        //end remark 21 jan 2020, tokped sudah bisa dapat tipe barang
                        if (!string.IsNullOrEmpty(data.TempBrg.KODE_BRG_INDUK))//handle induk dari barang varian
                        {
                            bool createSTF02Induk = true;
                            var brgInduk = ErasoftDbContext.STF02.Where(b => b.BRG == data.TempBrg.KODE_BRG_INDUK).FirstOrDefault();
                            var tempBrgInduk = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.BRG_MP == tempBrginDB.KODE_BRG_INDUK && b.CUST == data.TempBrg.CUST).FirstOrDefault();
                            if (brgInduk != null)
                            {
                                var stf02h_induk = ErasoftDbContext.STF02H.Where(b => b.BRG == brgInduk.BRG && b.IDMARKET == customer.RecNum).FirstOrDefault();
                                if (stf02h_induk == null)
                                {
                                    createSTF02Induk = false;
                                    if (tempBrgInduk != null)
                                    {
                                        var ret1 = AutoSyncBrgInduk(data.Stf02, tempBrgInduk, data.TempBrg.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                        if (ret1.status == 0)
                                            return JsonErrorMessage(ret1.message);
                                    }
                                    else
                                    {
                                        //change 25 Feb 2019
                                        //return JsonErrorMessage("Kode Barang Induk tidak ditemukan.");
                                        stf02h_induk = ErasoftDbContext.STF02H.Where(b => b.BRG == tempBrginDB.KODE_BRG_INDUK && b.IDMARKET == customer.RecNum).FirstOrDefault();
                                        if (stf02h_induk != null)
                                        {
                                            //stf02h_induk.BRG = data.TempBrg.KODE_BRG_INDUK;
                                            //stf02h_induk.RecNum = 0;
                                            var dupeStf02h = new STF02H
                                            {
                                                BRG = data.TempBrg.KODE_BRG_INDUK,
                                                BRG_MP = stf02h_induk.BRG_MP,
                                                CATEGORY_CODE = stf02h_induk.CATEGORY_CODE,
                                                CATEGORY_NAME = stf02h_induk.CATEGORY_NAME,
                                                //HJUAL = data.TempBrg.HJUAL_MP,
                                                HJUAL = data.Stf02.HJUAL,
                                                IDMARKET = stf02h_induk.IDMARKET,
                                                AKUNMARKET = stf02h_induk.AKUNMARKET,
                                                USERNAME = stf02h_induk.USERNAME,
                                                DISPLAY = stf02h_induk.DISPLAY,
                                                DeliveryTempElevenia = stf02h_induk.DeliveryTempElevenia,
                                                PICKUP_POINT = stf02h_induk.PICKUP_POINT
                                            };
                                            #region attribute mp
                                            dupeStf02h.ACODE_1 = stf02h_induk.ACODE_1;
                                            dupeStf02h.ANAME_1 = stf02h_induk.ANAME_1;
                                            if (dupeStf02h.ACODE_1 == "short_description" && dupeStf02h.ANAME_1 == "Short Description")
                                            {
                                                dupeStf02h.AVALUE_1 = HttpUtility.HtmlDecode(stf02h_induk.AVALUE_1);
                                            }
                                            else
                                            {
                                                dupeStf02h.AVALUE_1 = stf02h_induk.AVALUE_1;
                                            }
                                            dupeStf02h.ACODE_2 = stf02h_induk.ACODE_2;
                                            dupeStf02h.ANAME_2 = stf02h_induk.ANAME_2;
                                            dupeStf02h.AVALUE_2 = stf02h_induk.AVALUE_2;
                                            dupeStf02h.ACODE_3 = stf02h_induk.ACODE_3;
                                            dupeStf02h.ANAME_3 = stf02h_induk.ANAME_3;
                                            dupeStf02h.AVALUE_3 = stf02h_induk.AVALUE_3;
                                            dupeStf02h.ACODE_4 = stf02h_induk.ACODE_4;
                                            dupeStf02h.ANAME_4 = stf02h_induk.ANAME_4;
                                            dupeStf02h.AVALUE_4 = stf02h_induk.AVALUE_4;
                                            dupeStf02h.ACODE_5 = stf02h_induk.ACODE_5;
                                            dupeStf02h.ANAME_5 = stf02h_induk.ANAME_5;
                                            dupeStf02h.AVALUE_5 = stf02h_induk.AVALUE_5;
                                            dupeStf02h.ACODE_6 = stf02h_induk.ACODE_6;
                                            dupeStf02h.ANAME_6 = stf02h_induk.ANAME_6;
                                            dupeStf02h.AVALUE_6 = stf02h_induk.AVALUE_6;
                                            dupeStf02h.ACODE_7 = stf02h_induk.ACODE_7;
                                            dupeStf02h.ANAME_7 = stf02h_induk.ANAME_7;
                                            dupeStf02h.AVALUE_7 = stf02h_induk.AVALUE_7;
                                            dupeStf02h.ACODE_8 = stf02h_induk.ACODE_8;
                                            dupeStf02h.ANAME_8 = stf02h_induk.ANAME_8;
                                            dupeStf02h.AVALUE_8 = stf02h_induk.AVALUE_8;
                                            dupeStf02h.ACODE_9 = stf02h_induk.ACODE_9;
                                            dupeStf02h.ANAME_9 = stf02h_induk.ANAME_9;
                                            dupeStf02h.AVALUE_9 = stf02h_induk.AVALUE_9;
                                            dupeStf02h.ACODE_10 = stf02h_induk.ACODE_10;
                                            dupeStf02h.ANAME_10 = stf02h_induk.ANAME_10;
                                            dupeStf02h.AVALUE_10 = stf02h_induk.AVALUE_10;
                                            dupeStf02h.ACODE_11 = stf02h_induk.ACODE_11;
                                            dupeStf02h.ANAME_11 = stf02h_induk.ANAME_11;
                                            dupeStf02h.AVALUE_11 = stf02h_induk.AVALUE_11;
                                            dupeStf02h.ACODE_12 = stf02h_induk.ACODE_12;
                                            dupeStf02h.ANAME_12 = stf02h_induk.ANAME_12;
                                            dupeStf02h.AVALUE_12 = stf02h_induk.AVALUE_12;
                                            dupeStf02h.ACODE_13 = stf02h_induk.ACODE_13;
                                            dupeStf02h.ANAME_13 = stf02h_induk.ANAME_13;
                                            dupeStf02h.AVALUE_13 = stf02h_induk.AVALUE_13;
                                            dupeStf02h.ACODE_14 = stf02h_induk.ACODE_14;
                                            dupeStf02h.ANAME_14 = stf02h_induk.ANAME_14;
                                            dupeStf02h.AVALUE_14 = stf02h_induk.AVALUE_14;
                                            dupeStf02h.ACODE_15 = stf02h_induk.ACODE_15;
                                            dupeStf02h.ANAME_15 = stf02h_induk.ANAME_15;
                                            dupeStf02h.AVALUE_15 = stf02h_induk.AVALUE_15;
                                            dupeStf02h.ACODE_16 = stf02h_induk.ACODE_16;
                                            dupeStf02h.ANAME_16 = stf02h_induk.ANAME_16;
                                            dupeStf02h.AVALUE_16 = stf02h_induk.AVALUE_16;
                                            dupeStf02h.ACODE_17 = stf02h_induk.ACODE_17;
                                            dupeStf02h.ANAME_17 = stf02h_induk.ANAME_17;
                                            dupeStf02h.AVALUE_17 = stf02h_induk.AVALUE_17;
                                            dupeStf02h.ACODE_18 = stf02h_induk.ACODE_18;
                                            dupeStf02h.ANAME_18 = stf02h_induk.ANAME_18;
                                            dupeStf02h.AVALUE_18 = stf02h_induk.AVALUE_18;
                                            dupeStf02h.ACODE_19 = stf02h_induk.ACODE_19;
                                            dupeStf02h.ANAME_19 = stf02h_induk.ANAME_19;
                                            dupeStf02h.AVALUE_19 = stf02h_induk.AVALUE_19;
                                            dupeStf02h.ACODE_20 = stf02h_induk.ACODE_20;
                                            dupeStf02h.ANAME_20 = stf02h_induk.ANAME_20;
                                            dupeStf02h.AVALUE_20 = stf02h_induk.AVALUE_20;
                                            dupeStf02h.ACODE_21 = stf02h_induk.ACODE_21;
                                            dupeStf02h.ANAME_21 = stf02h_induk.ANAME_21;
                                            dupeStf02h.AVALUE_21 = stf02h_induk.AVALUE_21;
                                            dupeStf02h.ACODE_22 = stf02h_induk.ACODE_22;
                                            dupeStf02h.ANAME_22 = stf02h_induk.ANAME_22;
                                            dupeStf02h.AVALUE_22 = stf02h_induk.AVALUE_22;
                                            dupeStf02h.ACODE_23 = stf02h_induk.ACODE_23;
                                            dupeStf02h.ANAME_23 = stf02h_induk.ANAME_23;
                                            dupeStf02h.AVALUE_23 = stf02h_induk.AVALUE_23;
                                            dupeStf02h.ACODE_24 = stf02h_induk.ACODE_24;
                                            dupeStf02h.ANAME_24 = stf02h_induk.ANAME_24;
                                            dupeStf02h.AVALUE_24 = stf02h_induk.AVALUE_24;
                                            dupeStf02h.ACODE_25 = stf02h_induk.ACODE_25;
                                            dupeStf02h.ANAME_25 = stf02h_induk.ANAME_25;
                                            dupeStf02h.AVALUE_25 = stf02h_induk.AVALUE_25;
                                            dupeStf02h.ACODE_26 = stf02h_induk.ACODE_26;
                                            dupeStf02h.ANAME_26 = stf02h_induk.ANAME_26;
                                            dupeStf02h.AVALUE_26 = stf02h_induk.AVALUE_26;
                                            dupeStf02h.ACODE_27 = stf02h_induk.ACODE_27;
                                            dupeStf02h.ANAME_27 = stf02h_induk.ANAME_27;
                                            dupeStf02h.AVALUE_27 = stf02h_induk.AVALUE_27;
                                            dupeStf02h.ACODE_28 = stf02h_induk.ACODE_28;
                                            dupeStf02h.ANAME_28 = stf02h_induk.ANAME_28;
                                            dupeStf02h.AVALUE_28 = stf02h_induk.AVALUE_28;
                                            dupeStf02h.ACODE_29 = stf02h_induk.ACODE_29;
                                            dupeStf02h.ANAME_29 = stf02h_induk.ANAME_29;
                                            dupeStf02h.AVALUE_29 = stf02h_induk.AVALUE_29;
                                            dupeStf02h.ACODE_30 = stf02h_induk.ACODE_30;
                                            dupeStf02h.ANAME_30 = stf02h_induk.ANAME_30;
                                            dupeStf02h.AVALUE_30 = stf02h_induk.AVALUE_30;
                                            dupeStf02h.ACODE_31 = stf02h_induk.ACODE_31;
                                            dupeStf02h.ANAME_31 = stf02h_induk.ANAME_31;
                                            dupeStf02h.AVALUE_31 = stf02h_induk.AVALUE_31;
                                            dupeStf02h.ACODE_32 = stf02h_induk.ACODE_32;
                                            dupeStf02h.ANAME_32 = stf02h_induk.ANAME_32;
                                            dupeStf02h.AVALUE_32 = stf02h_induk.AVALUE_32;
                                            dupeStf02h.ACODE_33 = stf02h_induk.ACODE_33;
                                            dupeStf02h.ANAME_33 = stf02h_induk.ANAME_33;
                                            dupeStf02h.AVALUE_33 = stf02h_induk.AVALUE_33;
                                            dupeStf02h.ACODE_34 = stf02h_induk.ACODE_34;
                                            dupeStf02h.ANAME_34 = stf02h_induk.ANAME_34;
                                            dupeStf02h.AVALUE_34 = stf02h_induk.AVALUE_34;
                                            dupeStf02h.ACODE_35 = stf02h_induk.ACODE_35;
                                            dupeStf02h.ANAME_35 = stf02h_induk.ANAME_35;
                                            dupeStf02h.AVALUE_35 = stf02h_induk.AVALUE_35;
                                            dupeStf02h.ACODE_36 = stf02h_induk.ACODE_36;
                                            dupeStf02h.ANAME_36 = stf02h_induk.ANAME_36;
                                            dupeStf02h.AVALUE_36 = stf02h_induk.AVALUE_36;
                                            dupeStf02h.ACODE_37 = stf02h_induk.ACODE_37;
                                            dupeStf02h.ANAME_37 = stf02h_induk.ANAME_37;
                                            dupeStf02h.AVALUE_37 = stf02h_induk.AVALUE_37;
                                            dupeStf02h.ACODE_38 = stf02h_induk.ACODE_38;
                                            dupeStf02h.ANAME_38 = stf02h_induk.ANAME_38;
                                            dupeStf02h.AVALUE_38 = stf02h_induk.AVALUE_38;
                                            dupeStf02h.ACODE_39 = stf02h_induk.ACODE_39;
                                            dupeStf02h.ANAME_39 = stf02h_induk.ANAME_39;
                                            dupeStf02h.AVALUE_39 = stf02h_induk.AVALUE_39;
                                            dupeStf02h.ACODE_40 = stf02h_induk.ACODE_40;
                                            dupeStf02h.ANAME_40 = stf02h_induk.ANAME_40;
                                            dupeStf02h.AVALUE_40 = stf02h_induk.AVALUE_40;
                                            dupeStf02h.ACODE_41 = stf02h_induk.ACODE_41;
                                            dupeStf02h.ANAME_41 = stf02h_induk.ANAME_41;
                                            dupeStf02h.AVALUE_41 = stf02h_induk.AVALUE_41;
                                            dupeStf02h.ACODE_42 = stf02h_induk.ACODE_42;
                                            dupeStf02h.ANAME_42 = stf02h_induk.ANAME_42;
                                            dupeStf02h.AVALUE_42 = stf02h_induk.AVALUE_42;
                                            dupeStf02h.ACODE_43 = stf02h_induk.ACODE_43;
                                            dupeStf02h.ANAME_43 = stf02h_induk.ANAME_43;
                                            dupeStf02h.AVALUE_43 = stf02h_induk.AVALUE_43;
                                            dupeStf02h.ACODE_44 = stf02h_induk.ACODE_44;
                                            dupeStf02h.ANAME_44 = stf02h_induk.ANAME_44;
                                            dupeStf02h.AVALUE_44 = stf02h_induk.AVALUE_44;
                                            dupeStf02h.ACODE_45 = stf02h_induk.ACODE_45;
                                            dupeStf02h.ANAME_45 = stf02h_induk.ANAME_45;
                                            dupeStf02h.AVALUE_45 = stf02h_induk.AVALUE_45;
                                            dupeStf02h.ACODE_46 = stf02h_induk.ACODE_46;
                                            dupeStf02h.ANAME_46 = stf02h_induk.ANAME_46;
                                            dupeStf02h.AVALUE_46 = stf02h_induk.AVALUE_46;
                                            dupeStf02h.ACODE_47 = stf02h_induk.ACODE_47;
                                            dupeStf02h.ANAME_47 = stf02h_induk.ANAME_47;
                                            dupeStf02h.AVALUE_47 = stf02h_induk.AVALUE_47;
                                            dupeStf02h.ACODE_48 = stf02h_induk.ACODE_48;
                                            dupeStf02h.ANAME_48 = stf02h_induk.ANAME_48;
                                            dupeStf02h.AVALUE_48 = stf02h_induk.AVALUE_48;
                                            dupeStf02h.ACODE_49 = stf02h_induk.ACODE_49;
                                            dupeStf02h.ANAME_49 = stf02h_induk.ANAME_49;
                                            dupeStf02h.AVALUE_49 = stf02h_induk.AVALUE_49;
                                            dupeStf02h.ACODE_50 = stf02h_induk.ACODE_50;
                                            dupeStf02h.ANAME_50 = stf02h_induk.ANAME_50;
                                            dupeStf02h.AVALUE_50 = stf02h_induk.AVALUE_50;
                                            #endregion
                                            //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                            dupeStf02h.AVALUE_39 = HttpUtility.HtmlEncode(stf02h_induk.AVALUE_39);
                                            dupeStf02h.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                            dupeStf02h.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                            dupeStf02h.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                            if (customer.NAMA == "7")
                                            {
                                                //merek
                                                //var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == data.TempBrg.MEREK).FirstOrDefault();
                                                var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == tempBrginDB.MEREK).FirstOrDefault();
                                                if (getKodeMerk != null)
                                                {
                                                    dupeStf02h.ANAME_38 = tempBrginDB.MEREK;
                                                    dupeStf02h.AVALUE_38 = getKodeMerk.brand_id;
                                                }
                                            }
                                            ErasoftDbContext.STF02H.Add(dupeStf02h);
                                            //remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                            //if (tempBrginDB.KODE_BRG_INDUK != data.TempBrg.KODE_BRG_INDUK)//user input baru kode brg MO -> update kode brg induk pada brg varian
                                            //end remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                            //EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.TempBrg.KODE_BRG_INDUK + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.KODE_BRG_INDUK + "' AND CUST = '" + data.TempBrg.CUST + "'");
                                            EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.TempBrg.KODE_BRG_INDUK + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.BRG_MP + "' AND CUST = '" + data.TempBrg.CUST + "'");
                                            ErasoftDbContext.SaveChanges();

                                            //add 25 April 2019, create stf02h untuk mp offline
                                            if (offlineId != null)
                                            {
                                                CreateSTF02HOffline(data.TempBrg.KODE_BRG_INDUK, data.TempBrg.HJUAL, offlineId.IdMarket.Value);
                                            }
                                            //end add 25 April 2019, create stf02h untuk mp offline
                                        }
                                        else
                                        {
                                            return JsonErrorMessage("Kode Barang Induk tidak ditemukan.");
                                        }
                                        //end change 25 Feb 2019

                                    }

                                }
                                //add 15 april 2019
                                else //if (string.IsNullOrEmpty(stf02h_induk.BRG_MP))
                                {
                                    if (tempBrgInduk != null)
                                    {
                                        stf02h_induk.HJUAL = tempBrgInduk.HJUAL;
                                        stf02h_induk.BRG_MP = tempBrgInduk.BRG_MP;
                                        stf02h_induk.DISPLAY = tempBrgInduk.DISPLAY;
                                        //ErasoftDbContext.STF02H.Where(m => m.BRG_MP == tempBrgInduk.BRG_MP).Delete();
                                        ErasoftDbContext.TEMP_BRG_MP.Where(m => m.BRG_MP == tempBrgInduk.BRG_MP && m.IDMARKET == customer.RecNum).Delete();
                                        //remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                        //if (tempBrgInduk.BRG_MP != data.TempBrg.KODE_BRG_INDUK)//user input baru kode brg MO -> update kode brg induk pada brg varian
                                        //end remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                        EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.TempBrg.KODE_BRG_INDUK + "' WHERE KODE_BRG_INDUK = '" + tempBrgInduk.BRG_MP + "' AND CUST = '" + customer.CUST + "'");
                                        ErasoftDbContext.SaveChanges();
                                    }
                                }
                                //end add 15 april 2019
                            }
                            else
                            {
                                if (tempBrginDB != null)
                                {
                                    if (tempBrgInduk != null)
                                    {
                                        //sinkron brg induk terlebih dahulu
                                        var ret2 = AutoSyncBrgInduk(data.Stf02, tempBrgInduk, data.TempBrg.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                        if (ret2.status == 0)
                                            return JsonErrorMessage(ret2.message);
                                    }
                                    else
                                    {
                                        return JsonErrorMessage("Kode Barang Induk tidak ditemukan.");
                                    }

                                }
                                else
                                {
                                    return JsonErrorMessage("Barang ini sudah diproses.");
                                }
                            }
                            //if (brgInduk == null)
                            //{
                            //    //user input kode brg induk baru, cari brg induk di temp

                            //}
                            //else 
                            //if(stf02h_induk == null)
                            //{
                            //    // brg induk sudah ada di stf02 tp blm ada di stf02h -> create stf02h saja

                            //}


                        }
                        //remark 21 jan 2020, tokped sudah bisa dapat tipe barang
                        //}
                        //end remark 21 jan 2020, tokped sudah bisa dapat tipe barang
                        var barangInDB = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(data.Stf02.BRG.ToUpper())).FirstOrDefault();
                        if (barangInDB != null)
                        {
                            var brgMp = ErasoftDbContext.STF02H.Where(b => b.BRG.ToUpper().Equals(data.Stf02.BRG.ToUpper()) && b.IDMARKET == data.TempBrg.IDMARKET).FirstOrDefault();
                            if (brgMp != null)
                            {
                                if (!string.IsNullOrEmpty(brgMp.BRG_MP))
                                {
                                    return JsonErrorMessage("Barang ini sudah link dengan barang lain di marketplace ini.");
                                }
                                else
                                {
                                    //add by nurul 27/11/2019, add tgl last edit
                                    barangInDB.Tgl_Input = DateTime.Today;
                                    //end add by nurul 27/11/2019, add tgl last edit
                                    //add 10 Juni 2019, update panjang/lebar/tinggi
                                    if (barangInDB.PANJANG == 0 && data.Stf02.PANJANG > 0)
                                    {
                                        barangInDB.PANJANG = data.Stf02.PANJANG;
                                    }
                                    if (barangInDB.LEBAR == 0 && data.Stf02.LEBAR > 0)
                                    {
                                        barangInDB.LEBAR = data.Stf02.LEBAR;
                                    }
                                    if (barangInDB.TINGGI == 0 && data.Stf02.TINGGI > 0)
                                    {
                                        barangInDB.TINGGI = data.Stf02.TINGGI;
                                    }
                                    //end add 10 Juni 2019, update panjang/lebar/tinggi

                                    //brgMp.HJUAL = data.TempBrg.HJUAL_MP;
                                    brgMp.HJUAL = data.Stf02.HJUAL;
                                    brgMp.DISPLAY = data.TempBrg.DISPLAY;
                                    brgMp.BRG_MP = data.TempBrg.BRG_MP;
                                    brgMp.CATEGORY_CODE = data.TempBrg.CATEGORY_CODE;
                                    brgMp.CATEGORY_NAME = data.TempBrg.CATEGORY_NAME;
                                    brgMp.DeliveryTempElevenia = data.TempBrg.DeliveryTempElevenia;
                                    brgMp.PICKUP_POINT = data.TempBrg.PICKUP_POINT;
                                    #region attribute mp
                                    brgMp.ACODE_1 = tempBrginDB.ACODE_1;
                                    brgMp.ANAME_1 = tempBrginDB.ANAME_1;
                                    if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                    {
                                        brgMp.AVALUE_1 = HttpUtility.HtmlDecode(tempBrginDB.AVALUE_1);
                                    }
                                    else
                                    {
                                        brgMp.AVALUE_1 = tempBrginDB.AVALUE_1;
                                    }
                                    brgMp.ACODE_2 = tempBrginDB.ACODE_2;
                                    brgMp.ANAME_2 = tempBrginDB.ANAME_2;
                                    brgMp.AVALUE_2 = tempBrginDB.AVALUE_2;
                                    brgMp.ACODE_3 = tempBrginDB.ACODE_3;
                                    brgMp.ANAME_3 = tempBrginDB.ANAME_3;
                                    brgMp.AVALUE_3 = tempBrginDB.AVALUE_3;
                                    brgMp.ACODE_4 = tempBrginDB.ACODE_4;
                                    brgMp.ANAME_4 = tempBrginDB.ANAME_4;
                                    brgMp.AVALUE_4 = tempBrginDB.AVALUE_4;
                                    brgMp.ACODE_5 = tempBrginDB.ACODE_5;
                                    brgMp.ANAME_5 = tempBrginDB.ANAME_5;
                                    brgMp.AVALUE_5 = tempBrginDB.AVALUE_5;
                                    brgMp.ACODE_6 = tempBrginDB.ACODE_6;
                                    brgMp.ANAME_6 = tempBrginDB.ANAME_6;
                                    brgMp.AVALUE_6 = tempBrginDB.AVALUE_6;
                                    brgMp.ACODE_7 = tempBrginDB.ACODE_7;
                                    brgMp.ANAME_7 = tempBrginDB.ANAME_7;
                                    brgMp.AVALUE_7 = tempBrginDB.AVALUE_7;
                                    brgMp.ACODE_8 = tempBrginDB.ACODE_8;
                                    brgMp.ANAME_8 = tempBrginDB.ANAME_8;
                                    brgMp.AVALUE_8 = tempBrginDB.AVALUE_8;
                                    brgMp.ACODE_9 = tempBrginDB.ACODE_9;
                                    brgMp.ANAME_9 = tempBrginDB.ANAME_9;
                                    brgMp.AVALUE_9 = tempBrginDB.AVALUE_9;
                                    brgMp.ACODE_10 = tempBrginDB.ACODE_10;
                                    brgMp.ANAME_10 = tempBrginDB.ANAME_10;
                                    brgMp.AVALUE_10 = tempBrginDB.AVALUE_10;
                                    brgMp.ACODE_11 = tempBrginDB.ACODE_11;
                                    brgMp.ANAME_11 = tempBrginDB.ANAME_11;
                                    brgMp.AVALUE_11 = tempBrginDB.AVALUE_11;
                                    brgMp.ACODE_12 = tempBrginDB.ACODE_12;
                                    brgMp.ANAME_12 = tempBrginDB.ANAME_12;
                                    brgMp.AVALUE_12 = tempBrginDB.AVALUE_12;
                                    brgMp.ACODE_13 = tempBrginDB.ACODE_13;
                                    brgMp.ANAME_13 = tempBrginDB.ANAME_13;
                                    brgMp.AVALUE_13 = tempBrginDB.AVALUE_13;
                                    brgMp.ACODE_14 = tempBrginDB.ACODE_14;
                                    brgMp.ANAME_14 = tempBrginDB.ANAME_14;
                                    brgMp.AVALUE_14 = tempBrginDB.AVALUE_14;
                                    brgMp.ACODE_15 = tempBrginDB.ACODE_15;
                                    brgMp.ANAME_15 = tempBrginDB.ANAME_15;
                                    brgMp.AVALUE_15 = tempBrginDB.AVALUE_15;
                                    brgMp.ACODE_16 = tempBrginDB.ACODE_16;
                                    brgMp.ANAME_16 = tempBrginDB.ANAME_16;
                                    brgMp.AVALUE_16 = tempBrginDB.AVALUE_16;
                                    brgMp.ACODE_17 = tempBrginDB.ACODE_17;
                                    brgMp.ANAME_17 = tempBrginDB.ANAME_17;
                                    brgMp.AVALUE_17 = tempBrginDB.AVALUE_17;
                                    brgMp.ACODE_18 = tempBrginDB.ACODE_18;
                                    brgMp.ANAME_18 = tempBrginDB.ANAME_18;
                                    brgMp.AVALUE_18 = tempBrginDB.AVALUE_18;
                                    brgMp.ACODE_19 = tempBrginDB.ACODE_19;
                                    brgMp.ANAME_19 = tempBrginDB.ANAME_19;
                                    brgMp.AVALUE_19 = tempBrginDB.AVALUE_19;
                                    brgMp.ACODE_20 = tempBrginDB.ACODE_20;
                                    brgMp.ANAME_20 = tempBrginDB.ANAME_20;
                                    brgMp.AVALUE_20 = tempBrginDB.AVALUE_20;
                                    brgMp.ACODE_21 = tempBrginDB.ACODE_21;
                                    brgMp.ANAME_21 = tempBrginDB.ANAME_21;
                                    brgMp.AVALUE_21 = tempBrginDB.AVALUE_21;
                                    brgMp.ACODE_22 = tempBrginDB.ACODE_22;
                                    brgMp.ANAME_22 = tempBrginDB.ANAME_22;
                                    brgMp.AVALUE_22 = tempBrginDB.AVALUE_22;
                                    brgMp.ACODE_23 = tempBrginDB.ACODE_23;
                                    brgMp.ANAME_23 = tempBrginDB.ANAME_23;
                                    brgMp.AVALUE_23 = tempBrginDB.AVALUE_23;
                                    brgMp.ACODE_24 = tempBrginDB.ACODE_24;
                                    brgMp.ANAME_24 = tempBrginDB.ANAME_24;
                                    brgMp.AVALUE_24 = tempBrginDB.AVALUE_24;
                                    brgMp.ACODE_25 = tempBrginDB.ACODE_25;
                                    brgMp.ANAME_25 = tempBrginDB.ANAME_25;
                                    brgMp.AVALUE_25 = tempBrginDB.AVALUE_25;
                                    brgMp.ACODE_26 = tempBrginDB.ACODE_26;
                                    brgMp.ANAME_26 = tempBrginDB.ANAME_26;
                                    brgMp.AVALUE_26 = tempBrginDB.AVALUE_26;
                                    brgMp.ACODE_27 = tempBrginDB.ACODE_27;
                                    brgMp.ANAME_27 = tempBrginDB.ANAME_27;
                                    brgMp.AVALUE_27 = tempBrginDB.AVALUE_27;
                                    brgMp.ACODE_28 = tempBrginDB.ACODE_28;
                                    brgMp.ANAME_28 = tempBrginDB.ANAME_28;
                                    brgMp.AVALUE_28 = tempBrginDB.AVALUE_28;
                                    brgMp.ACODE_29 = tempBrginDB.ACODE_29;
                                    brgMp.ANAME_29 = tempBrginDB.ANAME_29;
                                    brgMp.AVALUE_29 = tempBrginDB.AVALUE_29;
                                    brgMp.ACODE_30 = tempBrginDB.ACODE_30;
                                    brgMp.ANAME_30 = tempBrginDB.ANAME_30;
                                    brgMp.AVALUE_30 = tempBrginDB.AVALUE_30;
                                    brgMp.ACODE_31 = tempBrginDB.ACODE_31;
                                    brgMp.ANAME_31 = tempBrginDB.ANAME_31;
                                    brgMp.AVALUE_31 = tempBrginDB.AVALUE_31;
                                    brgMp.ACODE_32 = tempBrginDB.ACODE_32;
                                    brgMp.ANAME_32 = tempBrginDB.ANAME_32;
                                    brgMp.AVALUE_32 = tempBrginDB.AVALUE_32;
                                    brgMp.ACODE_33 = tempBrginDB.ACODE_33;
                                    brgMp.ANAME_33 = tempBrginDB.ANAME_33;
                                    brgMp.AVALUE_33 = tempBrginDB.AVALUE_33;
                                    brgMp.ACODE_34 = tempBrginDB.ACODE_34;
                                    brgMp.ANAME_34 = tempBrginDB.ANAME_34;
                                    brgMp.AVALUE_34 = tempBrginDB.AVALUE_34;
                                    brgMp.ACODE_35 = tempBrginDB.ACODE_35;
                                    brgMp.ANAME_35 = tempBrginDB.ANAME_35;
                                    brgMp.AVALUE_35 = tempBrginDB.AVALUE_35;
                                    brgMp.ACODE_36 = tempBrginDB.ACODE_36;
                                    brgMp.ANAME_36 = tempBrginDB.ANAME_36;
                                    brgMp.AVALUE_36 = tempBrginDB.AVALUE_36;
                                    brgMp.ACODE_37 = tempBrginDB.ACODE_37;
                                    brgMp.ANAME_37 = tempBrginDB.ANAME_37;
                                    brgMp.AVALUE_37 = tempBrginDB.AVALUE_37;
                                    brgMp.ACODE_38 = tempBrginDB.ACODE_38;
                                    brgMp.ANAME_38 = tempBrginDB.ANAME_38;
                                    brgMp.AVALUE_38 = tempBrginDB.AVALUE_38;
                                    brgMp.ACODE_39 = tempBrginDB.ACODE_39;
                                    brgMp.ANAME_39 = tempBrginDB.ANAME_39;
                                    brgMp.AVALUE_39 = tempBrginDB.AVALUE_39;
                                    brgMp.ACODE_40 = tempBrginDB.ACODE_40;
                                    brgMp.ANAME_40 = tempBrginDB.ANAME_40;
                                    brgMp.AVALUE_40 = tempBrginDB.AVALUE_40;
                                    brgMp.ACODE_41 = tempBrginDB.ACODE_41;
                                    brgMp.ANAME_41 = tempBrginDB.ANAME_41;
                                    brgMp.AVALUE_41 = tempBrginDB.AVALUE_41;
                                    brgMp.ACODE_42 = tempBrginDB.ACODE_42;
                                    brgMp.ANAME_42 = tempBrginDB.ANAME_42;
                                    brgMp.AVALUE_42 = tempBrginDB.AVALUE_42;
                                    brgMp.ACODE_43 = tempBrginDB.ACODE_43;
                                    brgMp.ANAME_43 = tempBrginDB.ANAME_43;
                                    brgMp.AVALUE_43 = tempBrginDB.AVALUE_43;
                                    brgMp.ACODE_44 = tempBrginDB.ACODE_44;
                                    brgMp.ANAME_44 = tempBrginDB.ANAME_44;
                                    brgMp.AVALUE_44 = tempBrginDB.AVALUE_44;
                                    brgMp.ACODE_45 = tempBrginDB.ACODE_45;
                                    brgMp.ANAME_45 = tempBrginDB.ANAME_45;
                                    brgMp.AVALUE_45 = tempBrginDB.AVALUE_45;
                                    brgMp.ACODE_46 = tempBrginDB.ACODE_46;
                                    brgMp.ANAME_46 = tempBrginDB.ANAME_46;
                                    brgMp.AVALUE_46 = tempBrginDB.AVALUE_46;
                                    brgMp.ACODE_47 = tempBrginDB.ACODE_47;
                                    brgMp.ANAME_47 = tempBrginDB.ANAME_47;
                                    brgMp.AVALUE_47 = tempBrginDB.AVALUE_47;
                                    brgMp.ACODE_48 = tempBrginDB.ACODE_48;
                                    brgMp.ANAME_48 = tempBrginDB.ANAME_48;
                                    brgMp.AVALUE_48 = tempBrginDB.AVALUE_48;
                                    brgMp.ACODE_49 = tempBrginDB.ACODE_49;
                                    brgMp.ANAME_49 = tempBrginDB.ANAME_49;
                                    brgMp.AVALUE_49 = tempBrginDB.AVALUE_49;
                                    brgMp.ACODE_50 = tempBrginDB.ACODE_50;
                                    brgMp.ANAME_50 = tempBrginDB.ANAME_50;
                                    brgMp.AVALUE_50 = tempBrginDB.AVALUE_50;
                                    #endregion
                                    //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                    brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                                    brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                    brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                    brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                    if (customer.NAMA == "7")
                                    {
                                        //merek
                                        //var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == data.TempBrg.MEREK).FirstOrDefault();
                                        var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == tempBrginDB.MEREK).FirstOrDefault();
                                        if (getKodeMerk != null)
                                        {
                                            brgMp.ANAME_38 = data.TempBrg.MEREK;
                                            brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                        }
                                    }
                                    ErasoftDbContext.SaveChanges();
                                }
                            }
                            else
                            {
                                brgMp = new STF02H();
                                brgMp.BRG = data.Stf02.BRG;
                                brgMp.BRG_MP = data.TempBrg.BRG_MP;
                                //brgMp.HJUAL = data.TempBrg.HJUAL_MP;
                                brgMp.HJUAL = data.Stf02.HJUAL;
                                brgMp.DISPLAY = data.TempBrg.DISPLAY;
                                brgMp.CATEGORY_CODE = data.TempBrg.CATEGORY_CODE;
                                brgMp.CATEGORY_NAME = data.TempBrg.CATEGORY_NAME;
                                brgMp.IDMARKET = data.TempBrg.IDMARKET;
                                brgMp.DeliveryTempElevenia = data.TempBrg.DeliveryTempElevenia;
                                brgMp.PICKUP_POINT = data.TempBrg.PICKUP_POINT;
                                //var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                                if (customer != null)
                                    brgMp.AKUNMARKET = customer.PERSO;
                                //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                                brgMp.USERNAME = data.Stf02.USERNAME;
                                #region attribute mp
                                brgMp.ACODE_1 = data.TempBrg.ACODE_1;
                                brgMp.ANAME_1 = data.TempBrg.ANAME_1;
                                if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                {
                                    brgMp.AVALUE_1 = HttpUtility.HtmlDecode(tempBrginDB.AVALUE_1);
                                }
                                else
                                {
                                    brgMp.AVALUE_1 = tempBrginDB.AVALUE_1;
                                }
                                brgMp.ACODE_2 = tempBrginDB.ACODE_2;
                                brgMp.ANAME_2 = tempBrginDB.ANAME_2;
                                brgMp.AVALUE_2 = tempBrginDB.AVALUE_2;
                                brgMp.ACODE_3 = tempBrginDB.ACODE_3;
                                brgMp.ANAME_3 = tempBrginDB.ANAME_3;
                                brgMp.AVALUE_3 = tempBrginDB.AVALUE_3;
                                brgMp.ACODE_4 = tempBrginDB.ACODE_4;
                                brgMp.ANAME_4 = tempBrginDB.ANAME_4;
                                brgMp.AVALUE_4 = tempBrginDB.AVALUE_4;
                                brgMp.ACODE_5 = tempBrginDB.ACODE_5;
                                brgMp.ANAME_5 = tempBrginDB.ANAME_5;
                                brgMp.AVALUE_5 = tempBrginDB.AVALUE_5;
                                brgMp.ACODE_6 = tempBrginDB.ACODE_6;
                                brgMp.ANAME_6 = tempBrginDB.ANAME_6;
                                brgMp.AVALUE_6 = tempBrginDB.AVALUE_6;
                                brgMp.ACODE_7 = tempBrginDB.ACODE_7;
                                brgMp.ANAME_7 = tempBrginDB.ANAME_7;
                                brgMp.AVALUE_7 = tempBrginDB.AVALUE_7;
                                brgMp.ACODE_8 = tempBrginDB.ACODE_8;
                                brgMp.ANAME_8 = tempBrginDB.ANAME_8;
                                brgMp.AVALUE_8 = tempBrginDB.AVALUE_8;
                                brgMp.ACODE_9 = tempBrginDB.ACODE_9;
                                brgMp.ANAME_9 = tempBrginDB.ANAME_9;
                                brgMp.AVALUE_9 = tempBrginDB.AVALUE_9;
                                brgMp.ACODE_10 = tempBrginDB.ACODE_10;
                                brgMp.ANAME_10 = tempBrginDB.ANAME_10;
                                brgMp.AVALUE_10 = tempBrginDB.AVALUE_10;
                                brgMp.ACODE_11 = tempBrginDB.ACODE_11;
                                brgMp.ANAME_11 = tempBrginDB.ANAME_11;
                                brgMp.AVALUE_11 = tempBrginDB.AVALUE_11;
                                brgMp.ACODE_12 = tempBrginDB.ACODE_12;
                                brgMp.ANAME_12 = tempBrginDB.ANAME_12;
                                brgMp.AVALUE_12 = tempBrginDB.AVALUE_12;
                                brgMp.ACODE_13 = tempBrginDB.ACODE_13;
                                brgMp.ANAME_13 = tempBrginDB.ANAME_13;
                                brgMp.AVALUE_13 = tempBrginDB.AVALUE_13;
                                brgMp.ACODE_14 = tempBrginDB.ACODE_14;
                                brgMp.ANAME_14 = tempBrginDB.ANAME_14;
                                brgMp.AVALUE_14 = tempBrginDB.AVALUE_14;
                                brgMp.ACODE_15 = tempBrginDB.ACODE_15;
                                brgMp.ANAME_15 = tempBrginDB.ANAME_15;
                                brgMp.AVALUE_15 = tempBrginDB.AVALUE_15;
                                brgMp.ACODE_16 = tempBrginDB.ACODE_16;
                                brgMp.ANAME_16 = tempBrginDB.ANAME_16;
                                brgMp.AVALUE_16 = tempBrginDB.AVALUE_16;
                                brgMp.ACODE_17 = tempBrginDB.ACODE_17;
                                brgMp.ANAME_17 = tempBrginDB.ANAME_17;
                                brgMp.AVALUE_17 = tempBrginDB.AVALUE_17;
                                brgMp.ACODE_18 = tempBrginDB.ACODE_18;
                                brgMp.ANAME_18 = tempBrginDB.ANAME_18;
                                brgMp.AVALUE_18 = tempBrginDB.AVALUE_18;
                                brgMp.ACODE_19 = tempBrginDB.ACODE_19;
                                brgMp.ANAME_19 = tempBrginDB.ANAME_19;
                                brgMp.AVALUE_19 = tempBrginDB.AVALUE_19;
                                brgMp.ACODE_20 = tempBrginDB.ACODE_20;
                                brgMp.ANAME_20 = tempBrginDB.ANAME_20;
                                brgMp.AVALUE_20 = tempBrginDB.AVALUE_20;
                                brgMp.ACODE_21 = tempBrginDB.ACODE_21;
                                brgMp.ANAME_21 = tempBrginDB.ANAME_21;
                                brgMp.AVALUE_21 = tempBrginDB.AVALUE_21;
                                brgMp.ACODE_22 = tempBrginDB.ACODE_22;
                                brgMp.ANAME_22 = tempBrginDB.ANAME_22;
                                brgMp.AVALUE_22 = tempBrginDB.AVALUE_22;
                                brgMp.ACODE_23 = tempBrginDB.ACODE_23;
                                brgMp.ANAME_23 = tempBrginDB.ANAME_23;
                                brgMp.AVALUE_23 = tempBrginDB.AVALUE_23;
                                brgMp.ACODE_24 = tempBrginDB.ACODE_24;
                                brgMp.ANAME_24 = tempBrginDB.ANAME_24;
                                brgMp.AVALUE_24 = tempBrginDB.AVALUE_24;
                                brgMp.ACODE_25 = tempBrginDB.ACODE_25;
                                brgMp.ANAME_25 = tempBrginDB.ANAME_25;
                                brgMp.AVALUE_25 = tempBrginDB.AVALUE_25;
                                brgMp.ACODE_26 = tempBrginDB.ACODE_26;
                                brgMp.ANAME_26 = tempBrginDB.ANAME_26;
                                brgMp.AVALUE_26 = tempBrginDB.AVALUE_26;
                                brgMp.ACODE_27 = tempBrginDB.ACODE_27;
                                brgMp.ANAME_27 = tempBrginDB.ANAME_27;
                                brgMp.AVALUE_27 = tempBrginDB.AVALUE_27;
                                brgMp.ACODE_28 = tempBrginDB.ACODE_28;
                                brgMp.ANAME_28 = tempBrginDB.ANAME_28;
                                brgMp.AVALUE_28 = tempBrginDB.AVALUE_28;
                                brgMp.ACODE_29 = tempBrginDB.ACODE_29;
                                brgMp.ANAME_29 = tempBrginDB.ANAME_29;
                                brgMp.AVALUE_29 = tempBrginDB.AVALUE_29;
                                brgMp.ACODE_30 = tempBrginDB.ACODE_30;
                                brgMp.ANAME_30 = tempBrginDB.ANAME_30;
                                brgMp.AVALUE_30 = tempBrginDB.AVALUE_30;
                                brgMp.ACODE_31 = tempBrginDB.ACODE_31;
                                brgMp.ANAME_31 = tempBrginDB.ANAME_31;
                                brgMp.AVALUE_31 = tempBrginDB.AVALUE_31;
                                brgMp.ACODE_32 = tempBrginDB.ACODE_32;
                                brgMp.ANAME_32 = tempBrginDB.ANAME_32;
                                brgMp.AVALUE_32 = tempBrginDB.AVALUE_32;
                                brgMp.ACODE_33 = tempBrginDB.ACODE_33;
                                brgMp.ANAME_33 = tempBrginDB.ANAME_33;
                                brgMp.AVALUE_33 = tempBrginDB.AVALUE_33;
                                brgMp.ACODE_34 = tempBrginDB.ACODE_34;
                                brgMp.ANAME_34 = tempBrginDB.ANAME_34;
                                brgMp.AVALUE_34 = tempBrginDB.AVALUE_34;
                                brgMp.ACODE_35 = tempBrginDB.ACODE_35;
                                brgMp.ANAME_35 = tempBrginDB.ANAME_35;
                                brgMp.AVALUE_35 = tempBrginDB.AVALUE_35;
                                brgMp.ACODE_36 = tempBrginDB.ACODE_36;
                                brgMp.ANAME_36 = tempBrginDB.ANAME_36;
                                brgMp.AVALUE_36 = tempBrginDB.AVALUE_36;
                                brgMp.ACODE_37 = tempBrginDB.ACODE_37;
                                brgMp.ANAME_37 = tempBrginDB.ANAME_37;
                                brgMp.AVALUE_37 = tempBrginDB.AVALUE_37;
                                brgMp.ACODE_38 = tempBrginDB.ACODE_38;
                                brgMp.ANAME_38 = tempBrginDB.ANAME_38;
                                brgMp.AVALUE_38 = tempBrginDB.AVALUE_38;
                                brgMp.ACODE_39 = tempBrginDB.ACODE_39;
                                brgMp.ANAME_39 = tempBrginDB.ANAME_39;
                                brgMp.AVALUE_39 = tempBrginDB.AVALUE_39;
                                brgMp.ACODE_40 = tempBrginDB.ACODE_40;
                                brgMp.ANAME_40 = tempBrginDB.ANAME_40;
                                brgMp.AVALUE_40 = tempBrginDB.AVALUE_40;
                                brgMp.ACODE_41 = tempBrginDB.ACODE_41;
                                brgMp.ANAME_41 = tempBrginDB.ANAME_41;
                                brgMp.AVALUE_41 = tempBrginDB.AVALUE_41;
                                brgMp.ACODE_42 = tempBrginDB.ACODE_42;
                                brgMp.ANAME_42 = tempBrginDB.ANAME_42;
                                brgMp.AVALUE_42 = tempBrginDB.AVALUE_42;
                                brgMp.ACODE_43 = tempBrginDB.ACODE_43;
                                brgMp.ANAME_43 = tempBrginDB.ANAME_43;
                                brgMp.AVALUE_43 = tempBrginDB.AVALUE_43;
                                brgMp.ACODE_44 = tempBrginDB.ACODE_44;
                                brgMp.ANAME_44 = tempBrginDB.ANAME_44;
                                brgMp.AVALUE_44 = tempBrginDB.AVALUE_44;
                                brgMp.ACODE_45 = tempBrginDB.ACODE_45;
                                brgMp.ANAME_45 = tempBrginDB.ANAME_45;
                                brgMp.AVALUE_45 = tempBrginDB.AVALUE_45;
                                brgMp.ACODE_46 = tempBrginDB.ACODE_46;
                                brgMp.ANAME_46 = tempBrginDB.ANAME_46;
                                brgMp.AVALUE_46 = tempBrginDB.AVALUE_46;
                                brgMp.ACODE_47 = tempBrginDB.ACODE_47;
                                brgMp.ANAME_47 = tempBrginDB.ANAME_47;
                                brgMp.AVALUE_47 = tempBrginDB.AVALUE_47;
                                brgMp.ACODE_48 = tempBrginDB.ACODE_48;
                                brgMp.ANAME_48 = tempBrginDB.ANAME_48;
                                brgMp.AVALUE_48 = tempBrginDB.AVALUE_48;
                                brgMp.ACODE_49 = tempBrginDB.ACODE_49;
                                brgMp.ANAME_49 = tempBrginDB.ANAME_49;
                                brgMp.AVALUE_49 = tempBrginDB.AVALUE_49;
                                brgMp.ACODE_50 = tempBrginDB.ACODE_50;
                                brgMp.ANAME_50 = tempBrginDB.ANAME_50;
                                brgMp.AVALUE_50 = tempBrginDB.AVALUE_50;
                                #endregion
                                //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                                brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                if (customer.NAMA == "7")
                                {
                                    //merek
                                    //var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == data.TempBrg.MEREK).FirstOrDefault();
                                    var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == tempBrginDB.MEREK).FirstOrDefault();
                                    if (getKodeMerk != null)
                                    {
                                        brgMp.ANAME_38 = tempBrginDB.MEREK;
                                        brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                    }
                                }
                                ErasoftDbContext.STF02H.Add(brgMp);
                                ErasoftDbContext.SaveChanges();

                            }
                            if (barangInDB.TYPE == "4")
                            {
                                //remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                //if (tempBrginDB.SELLER_SKU != data.Stf02.BRG)//user input baru kode brg MO -> update kode brg induk pada brg varian
                                //end remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                //EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.Stf02.BRG + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.SELLER_SKU + "' AND CUST = '" + data.TempBrg.CUST + "'");
                                EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.Stf02.BRG + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.BRG_MP + "' AND CUST = '" + data.TempBrg.CUST + "'");
                            }


                            //add by calvin 11 juli 2019 jika lazada, cek attribute value 44, jika terisi dengan tgl promo dan harga promo, isi ke master promo
                            if (customer.NAMA == "7")
                            {
                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(brgMp.AVALUE_44))
                                    {
                                        if (brgMp.AVALUE_44.Contains(";"))
                                        {
                                            var splitAvalue_44 = brgMp.AVALUE_44.Split(';');
                                            if (splitAvalue_44.Count() == 3) // 0 - tgl from, 1 - tgl to, 2 - promo price
                                            {
                                                string dateFrom = Convert.ToDateTime(splitAvalue_44[0]).ToString("yyyy-MM-dd");
                                                string dateTo = Convert.ToDateTime(splitAvalue_44[1]).ToString("yyyy-MM-dd");
                                                string sSQL = "INSERT INTO PROMOSIS (NAMA_PROMOSI,NAMA_MARKET,TGL_MULAI,TGL_AKHIR,TGL_INPUT) " + Environment.NewLine;
                                                sSQL += "SELECT A.NAMA_PROMOSI,A.NAMA_MARKET,A.TGL_MULAI,A.TGL_AKHIR,GETDATE() FROM ( " + Environment.NewLine;
                                                sSQL += "SELECT 'LAZADA_FROM_SYNC' NAMA_PROMOSI, '" + customer.CUST + "' NAMA_MARKET, " + Environment.NewLine;
                                                sSQL += "'" + dateFrom + "' TGL_MULAI, " + Environment.NewLine;
                                                sSQL += "'" + dateTo + "' TGL_AKHIR " + Environment.NewLine;
                                                sSQL += ") A LEFT JOIN PROMOSIS B ON A.NAMA_PROMOSI = B.NAMA_PROMOSI AND A.NAMA_MARKET = B.NAMA_MARKET AND A.TGL_MULAI = B.TGL_MULAI AND A.TGL_AKHIR = B.TGL_AKHIR WHERE ISNULL(B.RECNUM,0) = 0" + Environment.NewLine;
                                                EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                var promosis = ErasoftDbContext.Database.SqlQuery<Promosi>("SELECT TOP 1 * FROM PROMOSIS WHERE NAMA_PROMOSI='LAZADA_FROM_SYNC' AND NAMA_MARKET = '" + customer.CUST + "' AND TGL_MULAI = '" + dateFrom + "' AND TGL_AKHIR = '" + dateTo + "'").FirstOrDefault();
                                                if (promosis != null)
                                                {
                                                    sSQL = "INSERT INTO DETAILPROMOSIS (KODE_BRG,HARGA_NORMAL,HARGA_PROMOSI,TGL_INPUT,RecNumPromosi,MAX_QTY,PERSEN_PROMOSI) " + Environment.NewLine;
                                                    sSQL += "SELECT A.KODE_BRG, A.HARGA_NORMAL, A.HARGA_PROMOSI, GETDATE(), '" + promosis.RecNum + "' RecNumPromosi, 1 AS MAX_QTY, 0 AS PERSEN_PROMOSI FROM " + Environment.NewLine;
                                                    sSQL += "(SELECT '" + brgMp.BRG + "' KODE_BRG, " + Convert.ToString(data.TempBrg.HJUAL_MP).Replace(",", ".") + " HARGA_NORMAL, " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " HARGA_PROMOSI " + Environment.NewLine;
                                                    sSQL += ") A LEFT JOIN DETAILPROMOSIS B ON B.RECNUMPROMOSI = '" + promosis.RecNum + "' AND A.KODE_BRG = B.KODE_BRG WHERE ISNULL(B.RECNUMPROMOSI,0) = 0" + Environment.NewLine;
                                                    int recordTerinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                    if (recordTerinsert == 0)
                                                    {
                                                        sSQL = "UPDATE DETAILPROMOSIS SET HARGA_NORMAL = " + Convert.ToString(data.TempBrg.HJUAL_MP).Replace(",", ".") + ", HARGA_PROMOSI = " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " " + Environment.NewLine;
                                                        sSQL += "WHERE RECNUMPROMOSI = '" + promosis.RecNum + "' AND KODE_BRG = '" + brgMp.BRG + "'" + Environment.NewLine;
                                                        EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                            //end add by calvin 11 juli 2019
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(data.TempBrg.IMAGE))
                            {
                                data.Stf02.LINK_GAMBAR_1 = UploadImageService.UploadSingleImageToImgurFromUrl(data.TempBrg.IMAGE, "uploaded-image").data.link_l;
                            }
                            if (!string.IsNullOrEmpty(data.TempBrg.IMAGE2))
                            {
                                data.Stf02.LINK_GAMBAR_2 = UploadImageService.UploadSingleImageToImgurFromUrl(data.TempBrg.IMAGE2, "uploaded-image").data.link_l;
                            }
                            if (!string.IsNullOrEmpty(data.TempBrg.IMAGE3))
                            {
                                data.Stf02.LINK_GAMBAR_3 = UploadImageService.UploadSingleImageToImgurFromUrl(data.TempBrg.IMAGE3, "uploaded-image").data.link_l;
                            }
                            //add 19/9/19, 5 gambar
                            if (!string.IsNullOrEmpty(data.TempBrg.IMAGE4))
                            {
                                data.Stf02.LINK_GAMBAR_4 = UploadImageService.UploadSingleImageToImgurFromUrl(data.TempBrg.IMAGE4, "uploaded-image").data.link_l;
                            }
                            if (!string.IsNullOrEmpty(data.TempBrg.IMAGE5))
                            {
                                data.Stf02.LINK_GAMBAR_5 = UploadImageService.UploadSingleImageToImgurFromUrl(data.TempBrg.IMAGE5, "uploaded-image").data.link_l;
                            }
                            //end add 19/9/19, 5 gambar

                            if (!string.IsNullOrEmpty(data.TempBrg.KODE_BRG_INDUK))
                                data.Stf02.PART = data.TempBrg.KODE_BRG_INDUK;
                            //change by Tri 11 Feb 2019, handle brg tokped
                            //data.Stf02.TYPE = data.TempBrg.TYPE;
                            if (data.tipeBarang == 0)// barang tanpa varian
                            {
                                data.Stf02.TYPE = "3";
                            }
                            //else if (!string.IsNullOrEmpty(data.TempBrg.KODE_BRG_INDUK))// barang varian
                            else if (data.tipeBarang == 1)// barang varian
                            {
                                data.Stf02.TYPE = "3";
                            }
                            else if (data.tipeBarang == 2)//barang induk
                            {
                                data.Stf02.TYPE = "4";
                                //remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                //if (tempBrginDB.SELLER_SKU != data.Stf02.BRG)//user input baru kode brg MO -> update kode brg induk pada brg varian
                                //end remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                                //EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.Stf02.BRG + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.SELLER_SKU + "' AND CUST = '" + data.TempBrg.CUST + "'");
                                EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + data.Stf02.BRG + "' WHERE KODE_BRG_INDUK = '" + tempBrginDB.BRG_MP + "' AND CUST = '" + data.TempBrg.CUST + "'");

                            }
                            //end change by Tri 11 Feb 2019, handle brg tokped

                            //add by nurul 27/11/2019, add tgl last edit
                            data.Stf02.Tgl_Input = DateTime.Today;
                            //end add by nurul 27/11/2019, add tgl last edit

                            ErasoftDbContext.STF02.Add(data.Stf02);

                            var brgMp = new STF02H();
                            brgMp.BRG = data.Stf02.BRG;
                            brgMp.BRG_MP = data.TempBrg.BRG_MP;
                            //brgMp.HJUAL = data.TempBrg.HJUAL_MP;
                            brgMp.HJUAL = data.Stf02.HJUAL;
                            brgMp.DISPLAY = data.TempBrg.DISPLAY;
                            brgMp.CATEGORY_CODE = data.TempBrg.CATEGORY_CODE;
                            brgMp.CATEGORY_NAME = data.TempBrg.CATEGORY_NAME;
                            brgMp.IDMARKET = data.TempBrg.IDMARKET;
                            brgMp.DeliveryTempElevenia = data.TempBrg.DeliveryTempElevenia;
                            brgMp.PICKUP_POINT = data.TempBrg.PICKUP_POINT;
                            //var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                            if (customer != null)
                                brgMp.AKUNMARKET = customer.PERSO;
                            //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                            brgMp.USERNAME = data.Stf02.USERNAME;
                            #region attribute mp
                            brgMp.ACODE_1 = tempBrginDB.ACODE_1;
                            brgMp.ANAME_1 = tempBrginDB.ANAME_1;
                            if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                            {
                                brgMp.AVALUE_1 = HttpUtility.HtmlDecode(tempBrginDB.AVALUE_1);
                            }
                            else
                            {
                                brgMp.AVALUE_1 = tempBrginDB.AVALUE_1;
                            }
                            brgMp.ACODE_2 = tempBrginDB.ACODE_2;
                            brgMp.ANAME_2 = tempBrginDB.ANAME_2;
                            brgMp.AVALUE_2 = tempBrginDB.AVALUE_2;
                            brgMp.ACODE_3 = tempBrginDB.ACODE_3;
                            brgMp.ANAME_3 = tempBrginDB.ANAME_3;
                            brgMp.AVALUE_3 = tempBrginDB.AVALUE_3;
                            brgMp.ACODE_4 = tempBrginDB.ACODE_4;
                            brgMp.ANAME_4 = tempBrginDB.ANAME_4;
                            brgMp.AVALUE_4 = tempBrginDB.AVALUE_4;
                            brgMp.ACODE_5 = tempBrginDB.ACODE_5;
                            brgMp.ANAME_5 = tempBrginDB.ANAME_5;
                            brgMp.AVALUE_5 = tempBrginDB.AVALUE_5;
                            brgMp.ACODE_6 = tempBrginDB.ACODE_6;
                            brgMp.ANAME_6 = tempBrginDB.ANAME_6;
                            brgMp.AVALUE_6 = tempBrginDB.AVALUE_6;
                            brgMp.ACODE_7 = tempBrginDB.ACODE_7;
                            brgMp.ANAME_7 = tempBrginDB.ANAME_7;
                            brgMp.AVALUE_7 = tempBrginDB.AVALUE_7;
                            brgMp.ACODE_8 = tempBrginDB.ACODE_8;
                            brgMp.ANAME_8 = tempBrginDB.ANAME_8;
                            brgMp.AVALUE_8 = tempBrginDB.AVALUE_8;
                            brgMp.ACODE_9 = tempBrginDB.ACODE_9;
                            brgMp.ANAME_9 = tempBrginDB.ANAME_9;
                            brgMp.AVALUE_9 = tempBrginDB.AVALUE_9;
                            brgMp.ACODE_10 = tempBrginDB.ACODE_10;
                            brgMp.ANAME_10 = tempBrginDB.ANAME_10;
                            brgMp.AVALUE_10 = tempBrginDB.AVALUE_10;
                            brgMp.ACODE_11 = tempBrginDB.ACODE_11;
                            brgMp.ANAME_11 = tempBrginDB.ANAME_11;
                            brgMp.AVALUE_11 = tempBrginDB.AVALUE_11;
                            brgMp.ACODE_12 = tempBrginDB.ACODE_12;
                            brgMp.ANAME_12 = tempBrginDB.ANAME_12;
                            brgMp.AVALUE_12 = tempBrginDB.AVALUE_12;
                            brgMp.ACODE_13 = tempBrginDB.ACODE_13;
                            brgMp.ANAME_13 = tempBrginDB.ANAME_13;
                            brgMp.AVALUE_13 = tempBrginDB.AVALUE_13;
                            brgMp.ACODE_14 = tempBrginDB.ACODE_14;
                            brgMp.ANAME_14 = tempBrginDB.ANAME_14;
                            brgMp.AVALUE_14 = tempBrginDB.AVALUE_14;
                            brgMp.ACODE_15 = tempBrginDB.ACODE_15;
                            brgMp.ANAME_15 = tempBrginDB.ANAME_15;
                            brgMp.AVALUE_15 = tempBrginDB.AVALUE_15;
                            brgMp.ACODE_16 = tempBrginDB.ACODE_16;
                            brgMp.ANAME_16 = tempBrginDB.ANAME_16;
                            brgMp.AVALUE_16 = tempBrginDB.AVALUE_16;
                            brgMp.ACODE_17 = tempBrginDB.ACODE_17;
                            brgMp.ANAME_17 = tempBrginDB.ANAME_17;
                            brgMp.AVALUE_17 = tempBrginDB.AVALUE_17;
                            brgMp.ACODE_18 = tempBrginDB.ACODE_18;
                            brgMp.ANAME_18 = tempBrginDB.ANAME_18;
                            brgMp.AVALUE_18 = tempBrginDB.AVALUE_18;
                            brgMp.ACODE_19 = tempBrginDB.ACODE_19;
                            brgMp.ANAME_19 = tempBrginDB.ANAME_19;
                            brgMp.AVALUE_19 = tempBrginDB.AVALUE_19;
                            brgMp.ACODE_20 = tempBrginDB.ACODE_20;
                            brgMp.ANAME_20 = tempBrginDB.ANAME_20;
                            brgMp.AVALUE_20 = tempBrginDB.AVALUE_20;
                            brgMp.ACODE_21 = tempBrginDB.ACODE_21;
                            brgMp.ANAME_21 = tempBrginDB.ANAME_21;
                            brgMp.AVALUE_21 = tempBrginDB.AVALUE_21;
                            brgMp.ACODE_22 = tempBrginDB.ACODE_22;
                            brgMp.ANAME_22 = tempBrginDB.ANAME_22;
                            brgMp.AVALUE_22 = tempBrginDB.AVALUE_22;
                            brgMp.ACODE_23 = tempBrginDB.ACODE_23;
                            brgMp.ANAME_23 = tempBrginDB.ANAME_23;
                            brgMp.AVALUE_23 = tempBrginDB.AVALUE_23;
                            brgMp.ACODE_24 = tempBrginDB.ACODE_24;
                            brgMp.ANAME_24 = tempBrginDB.ANAME_24;
                            brgMp.AVALUE_24 = tempBrginDB.AVALUE_24;
                            brgMp.ACODE_25 = tempBrginDB.ACODE_25;
                            brgMp.ANAME_25 = tempBrginDB.ANAME_25;
                            brgMp.AVALUE_25 = tempBrginDB.AVALUE_25;
                            brgMp.ACODE_26 = tempBrginDB.ACODE_26;
                            brgMp.ANAME_26 = tempBrginDB.ANAME_26;
                            brgMp.AVALUE_26 = tempBrginDB.AVALUE_26;
                            brgMp.ACODE_27 = tempBrginDB.ACODE_27;
                            brgMp.ANAME_27 = tempBrginDB.ANAME_27;
                            brgMp.AVALUE_27 = tempBrginDB.AVALUE_27;
                            brgMp.ACODE_28 = tempBrginDB.ACODE_28;
                            brgMp.ANAME_28 = tempBrginDB.ANAME_28;
                            brgMp.AVALUE_28 = tempBrginDB.AVALUE_28;
                            brgMp.ACODE_29 = tempBrginDB.ACODE_29;
                            brgMp.ANAME_29 = tempBrginDB.ANAME_29;
                            brgMp.AVALUE_29 = tempBrginDB.AVALUE_29;
                            brgMp.ACODE_30 = tempBrginDB.ACODE_30;
                            brgMp.ANAME_30 = tempBrginDB.ANAME_30;
                            brgMp.AVALUE_30 = tempBrginDB.AVALUE_30;
                            brgMp.ACODE_31 = tempBrginDB.ACODE_31;
                            brgMp.ANAME_31 = tempBrginDB.ANAME_31;
                            brgMp.AVALUE_31 = tempBrginDB.AVALUE_31;
                            brgMp.ACODE_32 = tempBrginDB.ACODE_32;
                            brgMp.ANAME_32 = tempBrginDB.ANAME_32;
                            brgMp.AVALUE_32 = tempBrginDB.AVALUE_32;
                            brgMp.ACODE_33 = tempBrginDB.ACODE_33;
                            brgMp.ANAME_33 = tempBrginDB.ANAME_33;
                            brgMp.AVALUE_33 = tempBrginDB.AVALUE_33;
                            brgMp.ACODE_34 = tempBrginDB.ACODE_34;
                            brgMp.ANAME_34 = tempBrginDB.ANAME_34;
                            brgMp.AVALUE_34 = tempBrginDB.AVALUE_34;
                            brgMp.ACODE_35 = tempBrginDB.ACODE_35;
                            brgMp.ANAME_35 = tempBrginDB.ANAME_35;
                            brgMp.AVALUE_35 = tempBrginDB.AVALUE_35;
                            brgMp.ACODE_36 = tempBrginDB.ACODE_36;
                            brgMp.ANAME_36 = tempBrginDB.ANAME_36;
                            brgMp.AVALUE_36 = tempBrginDB.AVALUE_36;
                            brgMp.ACODE_37 = tempBrginDB.ACODE_37;
                            brgMp.ANAME_37 = tempBrginDB.ANAME_37;
                            brgMp.AVALUE_37 = tempBrginDB.AVALUE_37;
                            brgMp.ACODE_38 = tempBrginDB.ACODE_38;
                            brgMp.ANAME_38 = tempBrginDB.ANAME_38;
                            brgMp.AVALUE_38 = tempBrginDB.AVALUE_38;
                            brgMp.ACODE_39 = tempBrginDB.ACODE_39;
                            brgMp.ANAME_39 = tempBrginDB.ANAME_39;
                            brgMp.AVALUE_39 = tempBrginDB.AVALUE_39;
                            brgMp.ACODE_40 = tempBrginDB.ACODE_40;
                            brgMp.ANAME_40 = tempBrginDB.ANAME_40;
                            brgMp.AVALUE_40 = tempBrginDB.AVALUE_40;
                            brgMp.ACODE_41 = tempBrginDB.ACODE_41;
                            brgMp.ANAME_41 = tempBrginDB.ANAME_41;
                            brgMp.AVALUE_41 = tempBrginDB.AVALUE_41;
                            brgMp.ACODE_42 = tempBrginDB.ACODE_42;
                            brgMp.ANAME_42 = tempBrginDB.ANAME_42;
                            brgMp.AVALUE_42 = tempBrginDB.AVALUE_42;
                            brgMp.ACODE_43 = tempBrginDB.ACODE_43;
                            brgMp.ANAME_43 = tempBrginDB.ANAME_43;
                            brgMp.AVALUE_43 = tempBrginDB.AVALUE_43;
                            brgMp.ACODE_44 = tempBrginDB.ACODE_44;
                            brgMp.ANAME_44 = tempBrginDB.ANAME_44;
                            brgMp.AVALUE_44 = tempBrginDB.AVALUE_44;
                            brgMp.ACODE_45 = tempBrginDB.ACODE_45;
                            brgMp.ANAME_45 = tempBrginDB.ANAME_45;
                            brgMp.AVALUE_45 = tempBrginDB.AVALUE_45;
                            brgMp.ACODE_46 = tempBrginDB.ACODE_46;
                            brgMp.ANAME_46 = tempBrginDB.ANAME_46;
                            brgMp.AVALUE_46 = tempBrginDB.AVALUE_46;
                            brgMp.ACODE_47 = tempBrginDB.ACODE_47;
                            brgMp.ANAME_47 = tempBrginDB.ANAME_47;
                            brgMp.AVALUE_47 = tempBrginDB.AVALUE_47;
                            brgMp.ACODE_48 = tempBrginDB.ACODE_48;
                            brgMp.ANAME_48 = tempBrginDB.ANAME_48;
                            brgMp.AVALUE_48 = tempBrginDB.AVALUE_48;
                            brgMp.ACODE_49 = tempBrginDB.ACODE_49;
                            brgMp.ANAME_49 = tempBrginDB.ANAME_49;
                            brgMp.AVALUE_49 = tempBrginDB.AVALUE_49;
                            brgMp.ACODE_50 = tempBrginDB.ACODE_50;
                            brgMp.ANAME_50 = tempBrginDB.ANAME_50;
                            brgMp.AVALUE_50 = tempBrginDB.AVALUE_50;
                            #endregion
                            //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                            brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                            brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                            brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                            brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                            if (customer.NAMA == "7")
                            {
                                //merek
                                //var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == data.TempBrg.MEREK).FirstOrDefault();
                                var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == tempBrginDB.MEREK).FirstOrDefault();
                                if (getKodeMerk != null)
                                {
                                    brgMp.ANAME_38 = data.TempBrg.MEREK;
                                    brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                }
                            }
                            ErasoftDbContext.STF02H.Add(brgMp);
                            ErasoftDbContext.SaveChanges();


                            //add by calvin 11 juli 2019 jika lazada, cek attribute value 44, jika terisi dengan tgl promo dan harga promo, isi ke master promo
                            if (customer.NAMA == "7")
                            {
                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(brgMp.AVALUE_44))
                                    {
                                        if (brgMp.AVALUE_44.Contains(";"))
                                        {
                                            var splitAvalue_44 = brgMp.AVALUE_44.Split(';');
                                            if (splitAvalue_44.Count() == 3) // 0 - tgl from, 1 - tgl to, 2 - promo price
                                            {
                                                string dateFrom = Convert.ToDateTime(splitAvalue_44[0]).ToString("yyyy-MM-dd");
                                                string dateTo = Convert.ToDateTime(splitAvalue_44[1]).ToString("yyyy-MM-dd");
                                                string sSQL = "INSERT INTO PROMOSIS (NAMA_PROMOSI,NAMA_MARKET,TGL_MULAI,TGL_AKHIR,TGL_INPUT) " + Environment.NewLine;
                                                sSQL += "SELECT A.NAMA_PROMOSI,A.NAMA_MARKET,A.TGL_MULAI,A.TGL_AKHIR,GETDATE() FROM ( " + Environment.NewLine;
                                                sSQL += "SELECT 'LAZADA_FROM_SYNC' NAMA_PROMOSI, '" + customer.CUST + "' NAMA_MARKET, " + Environment.NewLine;
                                                sSQL += "'" + dateFrom + "' TGL_MULAI, " + Environment.NewLine;
                                                sSQL += "'" + dateTo + "' TGL_AKHIR " + Environment.NewLine;
                                                sSQL += ") A LEFT JOIN PROMOSIS B ON A.NAMA_PROMOSI = B.NAMA_PROMOSI AND A.NAMA_MARKET = B.NAMA_MARKET AND A.TGL_MULAI = B.TGL_MULAI AND A.TGL_AKHIR = B.TGL_AKHIR WHERE ISNULL(B.RECNUM,0) = 0" + Environment.NewLine;
                                                EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                var promosis = ErasoftDbContext.Database.SqlQuery<Promosi>("SELECT TOP 1 * FROM PROMOSIS WHERE NAMA_PROMOSI='LAZADA_FROM_SYNC' AND NAMA_MARKET = '" + customer.CUST + "' AND TGL_MULAI = '" + dateFrom + "' AND TGL_AKHIR = '" + dateTo + "'").FirstOrDefault();
                                                if (promosis != null)
                                                {
                                                    sSQL = "INSERT INTO DETAILPROMOSIS (KODE_BRG,HARGA_NORMAL,HARGA_PROMOSI,TGL_INPUT,RecNumPromosi,MAX_QTY,PERSEN_PROMOSI) " + Environment.NewLine;
                                                    sSQL += "SELECT A.KODE_BRG, A.HARGA_NORMAL, A.HARGA_PROMOSI, GETDATE(), '" + promosis.RecNum + "' RecNumPromosi, 1 AS MAX_QTY, 0 AS PERSEN_PROMOSI FROM " + Environment.NewLine;
                                                    sSQL += "(SELECT '" + brgMp.BRG + "' KODE_BRG, " + Convert.ToString(data.TempBrg.HJUAL_MP).Replace(",", ".") + " HARGA_NORMAL, " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " HARGA_PROMOSI " + Environment.NewLine;
                                                    sSQL += ") A LEFT JOIN DETAILPROMOSIS B ON B.RECNUMPROMOSI = '" + promosis.RecNum + "' AND A.KODE_BRG = B.KODE_BRG WHERE ISNULL(B.RECNUMPROMOSI,0) = 0" + Environment.NewLine;
                                                    int recordTerinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                    if (recordTerinsert == 0)
                                                    {
                                                        sSQL = "UPDATE DETAILPROMOSIS SET HARGA_NORMAL = " + Convert.ToString(data.TempBrg.HJUAL_MP).Replace(",", ".") + ", HARGA_PROMOSI = " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " " + Environment.NewLine;
                                                        sSQL += "WHERE RECNUMPROMOSI = '" + promosis.RecNum + "' AND KODE_BRG = '" + brgMp.BRG + "'" + Environment.NewLine;
                                                        EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                            //end add by calvin 11 juli 2019
                        }

                        //add 25 April 2019, create stf02h untuk mp offline
                        if (offlineId != null)
                        {
                            CreateSTF02HOffline(data.Stf02.BRG, data.Stf02.HJUAL, offlineId.IdMarket.Value);
                        }
                        //end add 25 April 2019, create stf02h untuk mp offline
                    }
                    else
                    {
                        return JsonErrorMessage("Barang tidak ditemukan");
                    }
                }
                else
                {
                    return JsonErrorMessage("Barang tidak ditemukan");
                }

            }
            else
            {
                return JsonErrorMessage("Barang tidak ditemukan");
            }

            //change by Tri 6 Des 2019, hapus sesuai cust
            //ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(data.TempBrg.BRG_MP)).Delete();
            ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(data.TempBrg.BRG_MP) && t.CUST == data.TempBrg.CUST).Delete();
            //end change by Tri 6 Des 2019, hapus sesuai cust
            ErasoftDbContext.SaveChanges();

            return Json("", JsonRequestBehavior.AllowGet);

        }

        public BindingBase AutoSyncBrgInduk(STF02 data, TEMP_BRG_MP tempBrg, string kdBrgMO, ARF01 customer, string username, bool createSTF02Induk)
        {
            var ret = new BindingBase()
            {
                status = 0
            };

            try
            {
                using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                {
                    //var defaultCategoryCode = eraDB.STF02E.Where(c => c.LEVEL.Equals("1")).FirstOrDefault();
                    //if (defaultCategoryCode == null)
                    var defaultCategoryCode = eraDB.STF02E.Where(c => c.LEVEL.Equals("1")).ToList();
                    if (defaultCategoryCode.Count == 0)
                    {
                        ret.message = "Kode Kategori tidak ditemukan";
                        return ret;
                    }
                    //var defaultBrand = eraDB.STF02E.Where(c => c.LEVEL.Equals("2")).FirstOrDefault();
                    //if (defaultBrand == null)
                    var defaultBrand = eraDB.STF02E.Where(c => c.LEVEL.Equals("2")).ToList();
                    if (defaultBrand.Count == 0)
                    {
                        ret.message = "Kode Merek tidak ditemukan";
                        return ret;
                    }
                    if (createSTF02Induk)
                    {
                        var stf02 = new STF02
                        {
                            HPP = 0,
                            HBELI = 0,
                            HBESAR = 0,
                            HKECIL = 0,
                            TYPE = "4",//type 4 = brg jasa
                            KLINK = "1",
                            HP_STD = 0,
                            QPROD = 0,
                            ISI3 = 3,
                            ISI4 = 1,
                            TOLERANSI = 0,
                            H_STN_3 = 0,
                            H_STN_4 = 0,
                            SS = 0,
                            METODA_HPP_PER_SN = false,
                            HNA_PPN = 0,
                            LABA = 0,
                            DEFAULT_STN_HRG_JUAL = 0,
                            DEFAULT_STN_JUAL = 0,
                            ISI = 1,
                            Metoda = "1",
                            Tgl_Input = DateTime.Now,
                            TGL_KLR = DateTime.Now,
                            MAXI = 100,
                            MINI = 1,
                            QSALES = 0,
                            DISPLAY_MARKET = false,
                        };
                        stf02.BRG = kdBrgMO;
                        stf02.NAMA = tempBrg.NAMA;
                        stf02.NAMA2 = tempBrg.NAMA2;
                        stf02.NAMA3 = tempBrg.NAMA3;
                        //stf02.HJUAL = tempBrg.HJUAL;
                        stf02.HJUAL = tempBrg.HJUAL_MP;
                        stf02.STN = "pcs";
                        stf02.STN2 = "pcs";
                        //change 20-03-2019, gunakan data yg sudah diinput user
                        if (data == null)
                        {
                            stf02.BERAT = tempBrg.BERAT;
                            stf02.TINGGI = tempBrg.TINGGI;
                            stf02.LEBAR = tempBrg.LEBAR;
                            stf02.PANJANG = tempBrg.PANJANG;
                            stf02.Deskripsi = (string.IsNullOrEmpty(tempBrg.Deskripsi) ? "-" : tempBrg.Deskripsi);

                            if (string.IsNullOrEmpty(tempBrg.AVALUE_40))
                            {
                                stf02.Sort1 = defaultCategoryCode[0].KODE;
                                stf02.KET_SORT1 = defaultCategoryCode[0].KET;
                            }
                            else
                            {
                                if (defaultCategoryCode.Where(m => m.KODE == tempBrg.AVALUE_40 && m.LEVEL == "1").FirstOrDefault() != null)
                                {
                                    stf02.KET_SORT1 = defaultCategoryCode.Where(m => m.KODE == tempBrg.AVALUE_40 && m.LEVEL == "1").FirstOrDefault().KET;
                                    stf02.Sort1 = tempBrg.AVALUE_40;
                                }
                                else
                                {
                                    stf02.Sort1 = defaultCategoryCode[0].KODE;
                                    stf02.KET_SORT1 = defaultCategoryCode[0].KET;
                                }
                            }

                            if (string.IsNullOrEmpty(tempBrg.MEREK))
                            {
                                stf02.Sort2 = defaultBrand[0].KODE;
                                stf02.KET_SORT2 = defaultBrand[0].KET;
                            }
                            else
                            {
                                if (defaultBrand.Where(m => m.KODE == tempBrg.MEREK && m.LEVEL == "2").FirstOrDefault() != null)
                                {
                                    stf02.KET_SORT2 = defaultBrand.Where(m => m.KODE == tempBrg.MEREK && m.LEVEL == "2").FirstOrDefault().KET;
                                    stf02.Sort2 = tempBrg.MEREK;
                                }
                                else
                                {
                                    stf02.Sort2 = defaultBrand[0].KODE;
                                    stf02.KET_SORT2 = defaultBrand[0].KET;
                                }
                            }
                        }
                        else
                        {
                            stf02.BERAT = data.BERAT;
                            stf02.TINGGI = data.TINGGI;
                            stf02.LEBAR = data.LEBAR;
                            stf02.PANJANG = data.PANJANG;
                            stf02.Deskripsi = (string.IsNullOrEmpty(data.Deskripsi) ? "-" : data.Deskripsi);
                            stf02.Sort1 = string.IsNullOrEmpty(data.Sort1) ? defaultCategoryCode[0].KODE : data.Sort1;
                            stf02.Sort2 = string.IsNullOrEmpty(data.Sort2) ? defaultBrand[0].KODE : data.Sort2;
                            stf02.KET_SORT1 = string.IsNullOrEmpty(data.KET_SORT1) ? defaultCategoryCode[0].KET : data.KET_SORT1;
                            stf02.KET_SORT2 = string.IsNullOrEmpty(data.KET_SORT2) ? defaultBrand[0].KET : data.KET_SORT2;
                        }
                        //end change 20-03-2019, gunakan data yg sudah diinput user
                        //stf02.Sort1 = string.IsNullOrEmpty(data.Sort1) ? defaultCategoryCode.KODE : data.Sort1;
                        //stf02.Sort2 = string.IsNullOrEmpty(data.Sort2) ? defaultBrand.KODE : data.Sort2;
                        //stf02.KET_SORT1 = string.IsNullOrEmpty(data.KET_SORT1) ? defaultCategoryCode.KET : data.KET_SORT1;
                        //stf02.KET_SORT2 = string.IsNullOrEmpty(data.KET_SORT2) ? defaultBrand.KET : data.KET_SORT2;

                        if (!string.IsNullOrEmpty(tempBrg.IMAGE))
                        {
                            stf02.LINK_GAMBAR_1 = UploadImageService.UploadSingleImageToImgurFromUrl(tempBrg.IMAGE, "uploaded-image").data.link_l;
                        }
                        //remark 19/9/19, barang induk ambil 1 gambar saja
                        if (!string.IsNullOrEmpty(tempBrg.IMAGE2))
                        {
                            stf02.LINK_GAMBAR_2 = UploadImageService.UploadSingleImageToImgurFromUrl(tempBrg.IMAGE2, "uploaded-image").data.link_l;
                        }
                        if (!string.IsNullOrEmpty(tempBrg.IMAGE3))
                        {
                            stf02.LINK_GAMBAR_3 = UploadImageService.UploadSingleImageToImgurFromUrl(tempBrg.IMAGE3, "uploaded-image").data.link_l;
                        }
                        //end remark 19/9/19, barang induk ambil 1 gambar saja
                        if (!string.IsNullOrEmpty(tempBrg.IMAGE4))
                        {
                            stf02.LINK_GAMBAR_4 = UploadImageService.UploadSingleImageToImgurFromUrl(tempBrg.IMAGE4, "uploaded-image").data.link_l;
                        }
                        if (!string.IsNullOrEmpty(tempBrg.IMAGE5))
                        {
                            stf02.LINK_GAMBAR_5 = UploadImageService.UploadSingleImageToImgurFromUrl(tempBrg.IMAGE5, "uploaded-image").data.link_l;
                        }

                        eraDB.STF02.Add(stf02);

                    }
                    //add 10 Juni 2019, update panjang/lebar/tinggi
                    else
                    {
                        var stf02inDB = eraDB.STF02.Where(m => m.BRG == kdBrgMO).FirstOrDefault();
                        if (stf02inDB != null)
                        {
                            if (data != null)
                            {
                                if (stf02inDB.PANJANG == 0 && data.PANJANG > 0)
                                    stf02inDB.PANJANG = data.PANJANG;
                                if (stf02inDB.LEBAR == 0 && data.LEBAR > 0)
                                    stf02inDB.LEBAR = data.LEBAR;
                                if (stf02inDB.TINGGI == 0 && data.TINGGI > 0)
                                    stf02inDB.TINGGI = data.TINGGI;
                            }
                            else
                            {
                                if (stf02inDB.PANJANG == 0 && tempBrg.PANJANG > 0)
                                    stf02inDB.PANJANG = tempBrg.PANJANG;
                                if (stf02inDB.LEBAR == 0 && tempBrg.LEBAR > 0)
                                    stf02inDB.LEBAR = tempBrg.LEBAR;
                                if (stf02inDB.TINGGI == 0 && tempBrg.TINGGI > 0)
                                    stf02inDB.TINGGI = tempBrg.TINGGI;
                            }

                        }
                    }
                    //end add 10 Juni 2019, update panjang/lebar/tinggi
                    bool insertSTF02h = false;
                    var brgMp = eraDB.STF02H.Where(p => p.BRG == kdBrgMO && p.IDMARKET == tempBrg.IDMARKET).FirstOrDefault();
                    if (brgMp == null)
                    {
                        brgMp = new STF02H();
                        insertSTF02h = true;
                    }

                    //brgMp.BRG = tempBrg.BRG_MP;
                    brgMp.BRG = kdBrgMO;
                    //add by Tri 6 Des 2019
                    brgMp.BRG_MP = tempBrg.BRG_MP;
                    //end add by Tri 6 Des 2019
                    brgMp.HJUAL = tempBrg.HJUAL;
                    brgMp.DISPLAY = tempBrg.DISPLAY;
                    brgMp.CATEGORY_CODE = tempBrg.CATEGORY_CODE;
                    brgMp.CATEGORY_NAME = tempBrg.CATEGORY_NAME;
                    brgMp.IDMARKET = tempBrg.IDMARKET;
                    brgMp.DeliveryTempElevenia = tempBrg.DeliveryTempElevenia;
                    brgMp.PICKUP_POINT = tempBrg.PICKUP_POINT;
                    //var customer = eraDB.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                    //if (customer != null)
                    brgMp.AKUNMARKET = customer.PERSO;
                    //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                    brgMp.USERNAME = username;
                    #region attribute mp
                    brgMp.ACODE_1 = tempBrg.ACODE_1;
                    brgMp.ANAME_1 = tempBrg.ANAME_1;
                    if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                    {
                        brgMp.AVALUE_1 = HttpUtility.HtmlDecode(tempBrg.AVALUE_1);
                    }
                    else
                    {
                        brgMp.AVALUE_1 = tempBrg.AVALUE_1;
                    }
                    brgMp.ACODE_2 = tempBrg.ACODE_2;
                    brgMp.ANAME_2 = tempBrg.ANAME_2;
                    brgMp.AVALUE_2 = tempBrg.AVALUE_2;
                    brgMp.ACODE_3 = tempBrg.ACODE_3;
                    brgMp.ANAME_3 = tempBrg.ANAME_3;
                    brgMp.AVALUE_3 = tempBrg.AVALUE_3;
                    brgMp.ACODE_4 = tempBrg.ACODE_4;
                    brgMp.ANAME_4 = tempBrg.ANAME_4;
                    brgMp.AVALUE_4 = tempBrg.AVALUE_4;
                    brgMp.ACODE_5 = tempBrg.ACODE_5;
                    brgMp.ANAME_5 = tempBrg.ANAME_5;
                    brgMp.AVALUE_5 = tempBrg.AVALUE_5;
                    brgMp.ACODE_6 = tempBrg.ACODE_6;
                    brgMp.ANAME_6 = tempBrg.ANAME_6;
                    brgMp.AVALUE_6 = tempBrg.AVALUE_6;
                    brgMp.ACODE_7 = tempBrg.ACODE_7;
                    brgMp.ANAME_7 = tempBrg.ANAME_7;
                    brgMp.AVALUE_7 = tempBrg.AVALUE_7;
                    brgMp.ACODE_8 = tempBrg.ACODE_8;
                    brgMp.ANAME_8 = tempBrg.ANAME_8;
                    brgMp.AVALUE_8 = tempBrg.AVALUE_8;
                    brgMp.ACODE_9 = tempBrg.ACODE_9;
                    brgMp.ANAME_9 = tempBrg.ANAME_9;
                    brgMp.AVALUE_9 = tempBrg.AVALUE_9;
                    brgMp.ACODE_10 = tempBrg.ACODE_10;
                    brgMp.ANAME_10 = tempBrg.ANAME_10;
                    brgMp.AVALUE_10 = tempBrg.AVALUE_10;
                    brgMp.ACODE_11 = tempBrg.ACODE_11;
                    brgMp.ANAME_11 = tempBrg.ANAME_11;
                    brgMp.AVALUE_11 = tempBrg.AVALUE_11;
                    brgMp.ACODE_12 = tempBrg.ACODE_12;
                    brgMp.ANAME_12 = tempBrg.ANAME_12;
                    brgMp.AVALUE_12 = tempBrg.AVALUE_12;
                    brgMp.ACODE_13 = tempBrg.ACODE_13;
                    brgMp.ANAME_13 = tempBrg.ANAME_13;
                    brgMp.AVALUE_13 = tempBrg.AVALUE_13;
                    brgMp.ACODE_14 = tempBrg.ACODE_14;
                    brgMp.ANAME_14 = tempBrg.ANAME_14;
                    brgMp.AVALUE_14 = tempBrg.AVALUE_14;
                    brgMp.ACODE_15 = tempBrg.ACODE_15;
                    brgMp.ANAME_15 = tempBrg.ANAME_15;
                    brgMp.AVALUE_15 = tempBrg.AVALUE_15;
                    brgMp.ACODE_16 = tempBrg.ACODE_16;
                    brgMp.ANAME_16 = tempBrg.ANAME_16;
                    brgMp.AVALUE_16 = tempBrg.AVALUE_16;
                    brgMp.ACODE_17 = tempBrg.ACODE_17;
                    brgMp.ANAME_17 = tempBrg.ANAME_17;
                    brgMp.AVALUE_17 = tempBrg.AVALUE_17;
                    brgMp.ACODE_18 = tempBrg.ACODE_18;
                    brgMp.ANAME_18 = tempBrg.ANAME_18;
                    brgMp.AVALUE_18 = tempBrg.AVALUE_18;
                    brgMp.ACODE_19 = tempBrg.ACODE_19;
                    brgMp.ANAME_19 = tempBrg.ANAME_19;
                    brgMp.AVALUE_19 = tempBrg.AVALUE_19;
                    brgMp.ACODE_20 = tempBrg.ACODE_20;
                    brgMp.ANAME_20 = tempBrg.ANAME_20;
                    brgMp.AVALUE_20 = tempBrg.AVALUE_20;
                    brgMp.ACODE_21 = tempBrg.ACODE_21;
                    brgMp.ANAME_21 = tempBrg.ANAME_21;
                    brgMp.AVALUE_21 = tempBrg.AVALUE_21;
                    brgMp.ACODE_22 = tempBrg.ACODE_22;
                    brgMp.ANAME_22 = tempBrg.ANAME_22;
                    brgMp.AVALUE_22 = tempBrg.AVALUE_22;
                    brgMp.ACODE_23 = tempBrg.ACODE_23;
                    brgMp.ANAME_23 = tempBrg.ANAME_23;
                    brgMp.AVALUE_23 = tempBrg.AVALUE_23;
                    brgMp.ACODE_24 = tempBrg.ACODE_24;
                    brgMp.ANAME_24 = tempBrg.ANAME_24;
                    brgMp.AVALUE_24 = tempBrg.AVALUE_24;
                    brgMp.ACODE_25 = tempBrg.ACODE_25;
                    brgMp.ANAME_25 = tempBrg.ANAME_25;
                    brgMp.AVALUE_25 = tempBrg.AVALUE_25;
                    brgMp.ACODE_26 = tempBrg.ACODE_26;
                    brgMp.ANAME_26 = tempBrg.ANAME_26;
                    brgMp.AVALUE_26 = tempBrg.AVALUE_26;
                    brgMp.ACODE_27 = tempBrg.ACODE_27;
                    brgMp.ANAME_27 = tempBrg.ANAME_27;
                    brgMp.AVALUE_27 = tempBrg.AVALUE_27;
                    brgMp.ACODE_28 = tempBrg.ACODE_28;
                    brgMp.ANAME_28 = tempBrg.ANAME_28;
                    brgMp.AVALUE_28 = tempBrg.AVALUE_28;
                    brgMp.ACODE_29 = tempBrg.ACODE_29;
                    brgMp.ANAME_29 = tempBrg.ANAME_29;
                    brgMp.AVALUE_29 = tempBrg.AVALUE_29;
                    brgMp.ACODE_30 = tempBrg.ACODE_30;
                    brgMp.ANAME_30 = tempBrg.ANAME_30;
                    brgMp.AVALUE_30 = tempBrg.AVALUE_30;
                    brgMp.ACODE_31 = tempBrg.ACODE_31;
                    brgMp.ANAME_31 = tempBrg.ANAME_31;
                    brgMp.AVALUE_31 = tempBrg.AVALUE_31;
                    brgMp.ACODE_32 = tempBrg.ACODE_32;
                    brgMp.ANAME_32 = tempBrg.ANAME_32;
                    brgMp.AVALUE_32 = tempBrg.AVALUE_32;
                    brgMp.ACODE_33 = tempBrg.ACODE_33;
                    brgMp.ANAME_33 = tempBrg.ANAME_33;
                    brgMp.AVALUE_33 = tempBrg.AVALUE_33;
                    brgMp.ACODE_34 = tempBrg.ACODE_34;
                    brgMp.ANAME_34 = tempBrg.ANAME_34;
                    brgMp.AVALUE_34 = tempBrg.AVALUE_34;
                    brgMp.ACODE_35 = tempBrg.ACODE_35;
                    brgMp.ANAME_35 = tempBrg.ANAME_35;
                    brgMp.AVALUE_35 = tempBrg.AVALUE_35;
                    brgMp.ACODE_36 = tempBrg.ACODE_36;
                    brgMp.ANAME_36 = tempBrg.ANAME_36;
                    brgMp.AVALUE_36 = tempBrg.AVALUE_36;
                    brgMp.ACODE_37 = tempBrg.ACODE_37;
                    brgMp.ANAME_37 = tempBrg.ANAME_37;
                    brgMp.AVALUE_37 = tempBrg.AVALUE_37;
                    brgMp.ACODE_38 = tempBrg.ACODE_38;
                    brgMp.ANAME_38 = tempBrg.ANAME_38;
                    brgMp.AVALUE_38 = tempBrg.AVALUE_38;
                    brgMp.ACODE_39 = tempBrg.ACODE_39;
                    brgMp.ANAME_39 = tempBrg.ANAME_39;
                    brgMp.AVALUE_39 = tempBrg.AVALUE_39;
                    brgMp.ACODE_40 = tempBrg.ACODE_40;
                    brgMp.ANAME_40 = tempBrg.ANAME_40;
                    brgMp.AVALUE_40 = tempBrg.AVALUE_40;
                    brgMp.ACODE_41 = tempBrg.ACODE_41;
                    brgMp.ANAME_41 = tempBrg.ANAME_41;
                    brgMp.AVALUE_41 = tempBrg.AVALUE_41;
                    brgMp.ACODE_42 = tempBrg.ACODE_42;
                    brgMp.ANAME_42 = tempBrg.ANAME_42;
                    brgMp.AVALUE_42 = tempBrg.AVALUE_42;
                    brgMp.ACODE_43 = tempBrg.ACODE_43;
                    brgMp.ANAME_43 = tempBrg.ANAME_43;
                    brgMp.AVALUE_43 = tempBrg.AVALUE_43;
                    brgMp.ACODE_44 = tempBrg.ACODE_44;
                    brgMp.ANAME_44 = tempBrg.ANAME_44;
                    brgMp.AVALUE_44 = tempBrg.AVALUE_44;
                    brgMp.ACODE_45 = tempBrg.ACODE_45;
                    brgMp.ANAME_45 = tempBrg.ANAME_45;
                    brgMp.AVALUE_45 = tempBrg.AVALUE_45;
                    brgMp.ACODE_46 = tempBrg.ACODE_46;
                    brgMp.ANAME_46 = tempBrg.ANAME_46;
                    brgMp.AVALUE_46 = tempBrg.AVALUE_46;
                    brgMp.ACODE_47 = tempBrg.ACODE_47;
                    brgMp.ANAME_47 = tempBrg.ANAME_47;
                    brgMp.AVALUE_47 = tempBrg.AVALUE_47;
                    brgMp.ACODE_48 = tempBrg.ACODE_48;
                    brgMp.ANAME_48 = tempBrg.ANAME_48;
                    brgMp.AVALUE_48 = tempBrg.AVALUE_48;
                    brgMp.ACODE_49 = tempBrg.ACODE_49;
                    brgMp.ANAME_49 = tempBrg.ANAME_49;
                    brgMp.AVALUE_49 = tempBrg.AVALUE_49;
                    brgMp.ACODE_50 = tempBrg.ACODE_50;
                    brgMp.ANAME_50 = tempBrg.ANAME_50;
                    brgMp.AVALUE_50 = tempBrg.AVALUE_50;
                    #endregion
                    //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                    brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                    brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                    brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                    brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                    if (customer.NAMA == "7")
                    {
                        //merek
                        var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == tempBrg.MEREK).FirstOrDefault();
                        if (getKodeMerk != null)
                        {
                            brgMp.ANAME_38 = tempBrg.MEREK;
                            brgMp.AVALUE_38 = getKodeMerk.brand_id;
                        }
                    }
                    if (insertSTF02h)
                        eraDB.STF02H.Add(brgMp);
                    eraDB.SaveChanges();

                    //delete brg induk di temp
                    //change by Tri 6 Des 2019, hapus sesuai cust
                    //eraDB.TEMP_BRG_MP.Where(b => b.BRG_MP == tempBrg.BRG_MP).Delete();
                    eraDB.TEMP_BRG_MP.Where(b => b.BRG_MP == tempBrg.BRG_MP && b.CUST == tempBrg.CUST).Delete();
                    //end change by Tri 6 Des 2019, hapus sesuai cust
                    //remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                    //if (tempBrg.BRG_MP != kdBrgMO)//user input baru kode brg MO -> update kode brg induk pada brg varian
                    //end remark 21 Nov 2019, barang induk bisa memiliki seller sku dan user menggunakan seller sku sbg kode barang MO
                    EDB.ExecuteSQL("CString", CommandType.Text, "UPDATE TEMP_BRG_MP SET KODE_BRG_INDUK = '" + kdBrgMO + "' WHERE KODE_BRG_INDUK = '" + tempBrg.BRG_MP + "' AND CUST = '" + tempBrg.CUST + "'");
                    eraDB.SaveChanges();

                    //add 25 April 2019, create stf02h untuk mp offline
                    var offlineId = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToLower().Contains("offline")).FirstOrDefault();
                    if (offlineId != null)
                    {
                        CreateSTF02HOffline(kdBrgMO, data.HJUAL, offlineId.IdMarket.Value);
                    }
                    //end add 25 April 2019, create stf02h untuk mp offline

                    ret.status = 1;
                }

            }
            catch (Exception ex)
            {
                ret.status = 0;
                ret.message = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
            }

            return ret;
        }

        public ActionResult UploadItemByCust(string cust, string dataPerPage, int skipDataError, string namaFileLog)
        {
            var barangVm = new UploadBarangViewModel()
            {
                //ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.CUST.Equals(cust)).ToList(),
                ListMarket = ErasoftDbContext.ARF01.ToList(),
                Stf02 = new STF02(),
                TempBrg = new TEMP_BRG_MP(),
                Errors = new List<string>(),
                contRecursive = "0",
            };
            //string username = "";
            string username = usernameLogin;

            List<string> listBrgSuccess = new List<string>();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            //if (sessionData?.Account != null)
            //{
            //    username = sessionData.Account.Username;

            //}
            //else
            //{
            //    if (sessionData?.User != null)
            //    {
            //        username = sessionData.User.Username;
            //    }
            //}
            using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
            {
                var customer = eraDB.ARF01.Where(c => c.CUST.ToUpper().Equals(cust.ToUpper())).FirstOrDefault();
                if (customer != null)
                {
                    //add 19 Juli 2019, error log
                    var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), namaFileLog);
                    if (!System.IO.File.Exists(path))
                    {
                        System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), ""));
                        var asd = System.IO.File.Create(path);
                        asd.Close();
                    }
                    StreamWriter tw = new StreamWriter(path);
                    string log_msg = "";
                    //end add 19 Juli 2019, error log

                    var dataBrg = new List<TEMP_BRG_MP>();
                    if (!string.IsNullOrEmpty(dataPerPage))
                    {
                        if (skipDataError > 0)
                        {
                            //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper().Equals(cust.ToUpper())).OrderBy(b => b.RecNum).Skip(skipDataError).Take(Convert.ToInt32(dataPerPage)).ToList();
                            //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper()).OrderBy(b => b.RecNum).Skip(skipDataError).Take(Convert.ToInt32(dataPerPage)).ToList();
                            dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper() && b.AVALUE_36 == "Auto Process").OrderByDescending(b => b.TYPE).ThenBy(b => b.RecNum).Skip(skipDataError).Take(Convert.ToInt32(dataPerPage)).ToList();
                        }
                        else
                        {
                            //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper().Equals(cust.ToUpper())).OrderBy(b => b.RecNum).Take(Convert.ToInt32(dataPerPage)).ToList();
                            //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper()).OrderBy(b => b.RecNum).Take(Convert.ToInt32(dataPerPage)).ToList();
                            dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper() && b.AVALUE_36 == "Auto Process").OrderByDescending(b => b.TYPE).ThenBy(b => b.RecNum).Take(Convert.ToInt32(dataPerPage)).ToList();
                        }
                    }
                    else
                    {
                        //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                        //dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper()).ToList();
                        dataBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.ToUpper() == cust.ToUpper() && b.AVALUE_36 == "Auto Process").OrderByDescending(b => b.TYPE).ToList();
                    }
                    if (dataBrg.Count > 0)
                    {
                        //var defaultCategoryCode = eraDB.STF02E.Where(c => c.LEVEL.Equals("1")).FirstOrDefault();
                        var defaultCategoryCode = eraDB.STF02E.Where(c => c.LEVEL.Equals("1")).ToList();
                        if (defaultCategoryCode.Count == 0)
                        //if (defaultCategoryCode == null)
                        {
                            //change 19 Juli 2019, error log
                            //barangVm.Errors.Add("Kode Kategori tidak ditemukan");
                            log_msg = "Master Kategori belum diisi" + System.Environment.NewLine;
                            tw.WriteLine(log_msg);
                            //end change 19 Juli 2019, error log

                            return Json(barangVm, JsonRequestBehavior.AllowGet);
                        }
                        //var defaultBrand = eraDB.STF02E.Where(c => c.LEVEL.Equals("2")).FirstOrDefault();
                        var defaultBrand = eraDB.STF02E.Where(c => c.LEVEL.Equals("2")).ToList();
                        if (defaultBrand.Count == 0)
                        //if (defaultBrand == null)
                        {
                            //change 19 Juli 2019, error log
                            //barangVm.Errors.Add("Kode Merek tidak ditemukan");
                            log_msg = "Master Merek belum diisi" + System.Environment.NewLine;
                            tw.WriteLine(log_msg);
                            //end change 19 Juli 2019, error log
                            return Json(barangVm, JsonRequestBehavior.AllowGet);
                        }

                        var marketplace = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString().Equals(customer.NAMA)).FirstOrDefault();
                        //var stf02temp = eraDB.STF02.ToList();
                        //var tempBrgInduktemp = eraDB.TEMP_BRG_MP.Where(t => t.IDMARKET == customer.RecNum).ToList();
                        //var stf02htemp = eraDB.STF02H.Where(t => t.IDMARKET == customer.RecNum).ToList();
                        var listBrg = dataBrg.Select(m => m.SELLER_SKU).ToList();
                        var stf02temp = eraDB.STF02.Where(m => listBrg.Contains(m.BRG)).ToList();
                        //var tempBrgInduktemp = eraDB.TEMP_BRG_MP.Where(t => listBrg.Contains(t.SELLER_SKU) && t.IDMARKET == customer.RecNum).ToList();
                        var stf02htemp = eraDB.STF02H.Where(t => listBrg.Contains(t.BRG) && t.IDMARKET == customer.RecNum).ToList();

                        var offlineId = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToLower().Contains("offline")).FirstOrDefault();
                        foreach (var item in dataBrg)
                        {
                            //string brgBlibli = "";
                            //if (marketplace != null)
                            //{
                            //    if (marketplace.NamaMarket.ToUpper().Equals("BLIBLI"))
                            //    {
                            //        var kdBrgBlibli = item.BRG_MP.Split(';');
                            //        //stf02.BRG = "";
                            //        var kdBrg = kdBrgBlibli[0].Split('-');
                            //        for (int i = 1; i < kdBrg.Length; i++)
                            //        {
                            //            brgBlibli += kdBrg[i] + "-";
                            //        }
                            //        brgBlibli = brgBlibli.Substring(0, brgBlibli.Length - 1);
                            //    }
                            //}

                            //var barangInDB = eraDB.STF02.Where(b => b.BRG.ToUpper().Equals(string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP.ToUpper() : brgBlibli.ToUpper())).FirstOrDefault();
                            #region handle brg induk untuk brg varian
                            var indukSukses = true;
                            if (!string.IsNullOrEmpty(item.KODE_BRG_INDUK))//handle induk dari barang varian
                            {
                                bool createSTF02Induk = true;
                                //var brgInduk = stf02temp.Where(b => (b.BRG == null ? "" : b.BRG) == item.KODE_BRG_INDUK.Trim()).FirstOrDefault();
                                //var tempBrgInduk = tempBrgInduktemp.Where(b => (b.BRG_MP == null ? "" : b.BRG_MP) == item.KODE_BRG_INDUK).FirstOrDefault();
                                var brgInduk = eraDB.STF02.Where(b => b.BRG == item.KODE_BRG_INDUK).FirstOrDefault();

                                //change by Tri 5 jun 2020, cek berdasarkan seller sku di temp bukan brg_mp
                                //var tempBrgInduk = eraDB.TEMP_BRG_MP.Where(b => b.BRG_MP == item.KODE_BRG_INDUK).FirstOrDefault();
                                var tempBrgInduk = eraDB.TEMP_BRG_MP.Where(b => b.SELLER_SKU == item.KODE_BRG_INDUK && b.CUST == customer.CUST).FirstOrDefault();
                                //end change by Tri 5 jun 2020, cek berdasarkan seller sku di temp bukan brg_mp

                                if (brgInduk != null)
                                {
                                    //var stf02h_induk = stf02htemp.Where(b => (b.BRG == null ? "" : b.BRG) == brgInduk.BRG.Trim()).FirstOrDefault();
                                    var stf02h_induk = eraDB.STF02H.Where(b => b.BRG == brgInduk.BRG && b.IDMARKET == customer.RecNum).FirstOrDefault();
                                    if (stf02h_induk == null)
                                    {
                                        createSTF02Induk = false;
                                        if (tempBrgInduk != null)
                                        {
                                            var ret1 = AutoSyncBrgInduk(new STF02(), tempBrgInduk, item.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                            if (ret1.status == 0)
                                            //change 19 Juli 2019, error log
                                            {
                                                //barangVm.Errors.Add(item.SELLER_SKU + ";" + ret1.message);
                                                //log_msg = "Gagal sinkronisasi barang " + item.KODE_BRG_INDUK + " karena : " + ret1.message + System.Environment.NewLine;
                                                log_msg = "Gagal sinkronisasi barang " + item.SELLER_SKU + " karena : saat sinkronisasi barang induk(" + item.KODE_BRG_INDUK + ") terdapat error : " + ret1.message + System.Environment.NewLine;
                                                tw.WriteLine(log_msg);
                                                indukSukses = false;
                                            }
                                            //end change 19 Juli 2019, error log
                                        }
                                        else
                                        {
                                            //change 19 Juli 2019, error log
                                            //barangVm.Errors.Add(item.SELLER_SKU + ";Barang Induk tidak ditemukan.");
                                            log_msg = "Gagal sinkronisasi barang " + item.SELLER_SKU + " karena Barang Induk(" + item.KODE_BRG_INDUK + ") tidak ditemukan." + System.Environment.NewLine;
                                            tw.WriteLine(log_msg);
                                            //end change 19 Juli 2019, error log
                                            //return JsonErrorMessage("Barang Induk tidak ditemukan.");
                                            indukSukses = false;
                                        }

                                    }
                                }
                                else
                                {
                                    if (tempBrgInduk != null)
                                    {
                                        //if (tempBrginDB != null)
                                        //{
                                        //sinkron brg induk terlebih dahulu
                                        var ret2 = AutoSyncBrgInduk(new STF02(), tempBrgInduk, item.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                        if (ret2.status == 0)
                                        //change 19 Juli 2019, error log
                                        {
                                            //barangVm.Errors.Add(item.SELLER_SKU + ";" + ret2.message);
                                            log_msg = "Gagal sinkronisasi barang " + item.SELLER_SKU + " karena : saat sinkronisasi barang induk(" + item.KODE_BRG_INDUK + ") terdapat error : " + ret2.message + System.Environment.NewLine;
                                            tw.WriteLine(log_msg);
                                            indukSukses = false;
                                        }
                                        //end change 19 Juli 2019, error log                                
                                        //}
                                        //else
                                        //{
                                        //    return JsonErrorMessage("Barang ini sudah diproses");
                                        //}
                                    }
                                    else
                                    {
                                        log_msg = "Gagal sinkronisasi barang " + item.SELLER_SKU + " karena : Barang Induk(" + item.KODE_BRG_INDUK + ") tidak ditemukan." + System.Environment.NewLine;
                                        tw.WriteLine(log_msg);
                                        indukSukses = false;
                                    }

                                }
                            }
                            #endregion
                            if (indukSukses)
                            {
                                //var barangInDB = eraDB.STF02.Where(b => b.BRG.ToUpper().Equals(item.SELLER_SKU.ToUpper())).FirstOrDefault();
                                var barangInDB = stf02temp.Where(b => (b.BRG == null ? "" : b.BRG).ToUpper() == item.SELLER_SKU.ToUpper().Trim()).FirstOrDefault();
                                if (barangInDB != null)
                                {
                                    //var brgMp = eraDB.STF02H.Where(b => b.BRG.ToUpper().Equals(barangInDB.BRG.ToUpper()) && b.IDMARKET == customer.RecNum).FirstOrDefault();
                                    var brgMp = stf02htemp.Where(b => (b.BRG == null ? "" : b.BRG).ToUpper() == barangInDB.BRG.ToUpper()).FirstOrDefault();
                                    if (brgMp != null)
                                    {
                                        if (!string.IsNullOrEmpty(brgMp.BRG_MP))
                                        {
                                            //change 19 Juli 2019, error log
                                            //barangVm.Errors.Add(brgMp.BRG + ";Barang ini sudah link dengan barang lain di marketplace");
                                            log_msg = "Gagal sinkronisasi barang " + brgMp.BRG + ", Barang ini sudah link dengan barang lain di marketplace" + System.Environment.NewLine;
                                            tw.WriteLine(log_msg);
                                            //end change 19 Juli 2019, error log
                                        }
                                        else
                                        {
                                            //add by nurul 27/11/2019, add tgl last edit
                                            barangInDB.Tgl_Input = DateTime.Today;
                                            //end add by nurul 27/11/2019, add tgl last edit
                                            //add 10 Juni 2019, update panjang/lebar/tinggi
                                            if (barangInDB.PANJANG == 0 && item.PANJANG > 0)
                                            {
                                                barangInDB.PANJANG = item.PANJANG;
                                            }
                                            if (barangInDB.LEBAR == 0 && item.LEBAR > 0)
                                            {
                                                barangInDB.LEBAR = item.LEBAR;
                                            }
                                            if (barangInDB.TINGGI == 0 && item.TINGGI > 0)
                                            {
                                                barangInDB.TINGGI = item.TINGGI;
                                            }
                                            //end add 10 Juni 2019, update panjang/lebar/tinggi

                                            //brgMp.HJUAL = item.HJUAL_MP;
                                            brgMp.HJUAL = item.HJUAL;
                                            brgMp.DISPLAY = item.DISPLAY;
                                            brgMp.BRG_MP = item.BRG_MP;
                                            //change 14 juni 2019, ambil kategori dari temp table
                                            //brgMp.CATEGORY_CODE = defaultCategoryCode.KODE;
                                            //brgMp.CATEGORY_NAME = defaultBrand.KODE;
                                            brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                                            brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                                            //end change 14 juni 2019, ambil kategori dari temp table
                                            brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                                            brgMp.PICKUP_POINT = item.PICKUP_POINT;
                                            #region attribute mp
                                            brgMp.ACODE_1 = item.ACODE_1;
                                            brgMp.ANAME_1 = item.ANAME_1;
                                            if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                            {
                                                brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                                            }
                                            else
                                            {
                                                brgMp.AVALUE_1 = item.AVALUE_1;
                                            }
                                            brgMp.ACODE_2 = item.ACODE_2;
                                            brgMp.ANAME_2 = item.ANAME_2;
                                            brgMp.AVALUE_2 = item.AVALUE_2;
                                            brgMp.ACODE_3 = item.ACODE_3;
                                            brgMp.ANAME_3 = item.ANAME_3;
                                            brgMp.AVALUE_3 = item.AVALUE_3;
                                            brgMp.ACODE_4 = item.ACODE_4;
                                            brgMp.ANAME_4 = item.ANAME_4;
                                            brgMp.AVALUE_4 = item.AVALUE_4;
                                            brgMp.ACODE_5 = item.ACODE_5;
                                            brgMp.ANAME_5 = item.ANAME_5;
                                            brgMp.AVALUE_5 = item.AVALUE_5;
                                            brgMp.ACODE_6 = item.ACODE_6;
                                            brgMp.ANAME_6 = item.ANAME_6;
                                            brgMp.AVALUE_6 = item.AVALUE_6;
                                            brgMp.ACODE_7 = item.ACODE_7;
                                            brgMp.ANAME_7 = item.ANAME_7;
                                            brgMp.AVALUE_7 = item.AVALUE_7;
                                            brgMp.ACODE_8 = item.ACODE_8;
                                            brgMp.ANAME_8 = item.ANAME_8;
                                            brgMp.AVALUE_8 = item.AVALUE_8;
                                            brgMp.ACODE_9 = item.ACODE_9;
                                            brgMp.ANAME_9 = item.ANAME_9;
                                            brgMp.AVALUE_9 = item.AVALUE_9;
                                            brgMp.ACODE_10 = item.ACODE_10;
                                            brgMp.ANAME_10 = item.ANAME_10;
                                            brgMp.AVALUE_10 = item.AVALUE_10;
                                            brgMp.ACODE_11 = item.ACODE_11;
                                            brgMp.ANAME_11 = item.ANAME_11;
                                            brgMp.AVALUE_11 = item.AVALUE_11;
                                            brgMp.ACODE_12 = item.ACODE_12;
                                            brgMp.ANAME_12 = item.ANAME_12;
                                            brgMp.AVALUE_12 = item.AVALUE_12;
                                            brgMp.ACODE_13 = item.ACODE_13;
                                            brgMp.ANAME_13 = item.ANAME_13;
                                            brgMp.AVALUE_13 = item.AVALUE_13;
                                            brgMp.ACODE_14 = item.ACODE_14;
                                            brgMp.ANAME_14 = item.ANAME_14;
                                            brgMp.AVALUE_14 = item.AVALUE_14;
                                            brgMp.ACODE_15 = item.ACODE_15;
                                            brgMp.ANAME_15 = item.ANAME_15;
                                            brgMp.AVALUE_15 = item.AVALUE_15;
                                            brgMp.ACODE_16 = item.ACODE_16;
                                            brgMp.ANAME_16 = item.ANAME_16;
                                            brgMp.AVALUE_16 = item.AVALUE_16;
                                            brgMp.ACODE_17 = item.ACODE_17;
                                            brgMp.ANAME_17 = item.ANAME_17;
                                            brgMp.AVALUE_17 = item.AVALUE_17;
                                            brgMp.ACODE_18 = item.ACODE_18;
                                            brgMp.ANAME_18 = item.ANAME_18;
                                            brgMp.AVALUE_18 = item.AVALUE_18;
                                            brgMp.ACODE_19 = item.ACODE_19;
                                            brgMp.ANAME_19 = item.ANAME_19;
                                            brgMp.AVALUE_19 = item.AVALUE_19;
                                            brgMp.ACODE_20 = item.ACODE_20;
                                            brgMp.ANAME_20 = item.ANAME_20;
                                            brgMp.AVALUE_20 = item.AVALUE_20;
                                            brgMp.ACODE_21 = item.ACODE_21;
                                            brgMp.ANAME_21 = item.ANAME_21;
                                            brgMp.AVALUE_21 = item.AVALUE_21;
                                            brgMp.ACODE_22 = item.ACODE_22;
                                            brgMp.ANAME_22 = item.ANAME_22;
                                            brgMp.AVALUE_22 = item.AVALUE_22;
                                            brgMp.ACODE_23 = item.ACODE_23;
                                            brgMp.ANAME_23 = item.ANAME_23;
                                            brgMp.AVALUE_23 = item.AVALUE_23;
                                            brgMp.ACODE_24 = item.ACODE_24;
                                            brgMp.ANAME_24 = item.ANAME_24;
                                            brgMp.AVALUE_24 = item.AVALUE_24;
                                            brgMp.ACODE_25 = item.ACODE_25;
                                            brgMp.ANAME_25 = item.ANAME_25;
                                            brgMp.AVALUE_25 = item.AVALUE_25;
                                            brgMp.ACODE_26 = item.ACODE_26;
                                            brgMp.ANAME_26 = item.ANAME_26;
                                            brgMp.AVALUE_26 = item.AVALUE_26;
                                            brgMp.ACODE_27 = item.ACODE_27;
                                            brgMp.ANAME_27 = item.ANAME_27;
                                            brgMp.AVALUE_27 = item.AVALUE_27;
                                            brgMp.ACODE_28 = item.ACODE_28;
                                            brgMp.ANAME_28 = item.ANAME_28;
                                            brgMp.AVALUE_28 = item.AVALUE_28;
                                            brgMp.ACODE_29 = item.ACODE_29;
                                            brgMp.ANAME_29 = item.ANAME_29;
                                            brgMp.AVALUE_29 = item.AVALUE_29;
                                            brgMp.ACODE_30 = item.ACODE_30;
                                            brgMp.ANAME_30 = item.ANAME_30;
                                            brgMp.AVALUE_30 = item.AVALUE_30;
                                            brgMp.ACODE_31 = item.ACODE_31;
                                            brgMp.ANAME_31 = item.ANAME_31;
                                            brgMp.AVALUE_31 = item.AVALUE_31;
                                            brgMp.ACODE_32 = item.ACODE_32;
                                            brgMp.ANAME_32 = item.ANAME_32;
                                            brgMp.AVALUE_32 = item.AVALUE_32;
                                            brgMp.ACODE_33 = item.ACODE_33;
                                            brgMp.ANAME_33 = item.ANAME_33;
                                            brgMp.AVALUE_33 = item.AVALUE_33;
                                            brgMp.ACODE_34 = item.ACODE_34;
                                            brgMp.ANAME_34 = item.ANAME_34;
                                            brgMp.AVALUE_34 = item.AVALUE_34;
                                            brgMp.ACODE_35 = item.ACODE_35;
                                            brgMp.ANAME_35 = item.ANAME_35;
                                            brgMp.AVALUE_35 = item.AVALUE_35;
                                            brgMp.ACODE_36 = item.ACODE_36;
                                            brgMp.ANAME_36 = item.ANAME_36;
                                            brgMp.AVALUE_36 = item.AVALUE_36;
                                            brgMp.ACODE_37 = item.ACODE_37;
                                            brgMp.ANAME_37 = item.ANAME_37;
                                            brgMp.AVALUE_37 = item.AVALUE_37;
                                            brgMp.ACODE_38 = item.ACODE_38;
                                            brgMp.ANAME_38 = item.ANAME_38;
                                            brgMp.AVALUE_38 = item.AVALUE_38;
                                            brgMp.ACODE_39 = item.ACODE_39;
                                            brgMp.ANAME_39 = item.ANAME_39;
                                            brgMp.AVALUE_39 = item.AVALUE_39;
                                            brgMp.ACODE_40 = item.ACODE_40;
                                            brgMp.ANAME_40 = item.ANAME_40;
                                            brgMp.AVALUE_40 = item.AVALUE_40;
                                            brgMp.ACODE_41 = item.ACODE_41;
                                            brgMp.ANAME_41 = item.ANAME_41;
                                            brgMp.AVALUE_41 = item.AVALUE_41;
                                            brgMp.ACODE_42 = item.ACODE_42;
                                            brgMp.ANAME_42 = item.ANAME_42;
                                            brgMp.AVALUE_42 = item.AVALUE_42;
                                            brgMp.ACODE_43 = item.ACODE_43;
                                            brgMp.ANAME_43 = item.ANAME_43;
                                            brgMp.AVALUE_43 = item.AVALUE_43;
                                            brgMp.ACODE_44 = item.ACODE_44;
                                            brgMp.ANAME_44 = item.ANAME_44;
                                            brgMp.AVALUE_44 = item.AVALUE_44;
                                            brgMp.ACODE_45 = item.ACODE_45;
                                            brgMp.ANAME_45 = item.ANAME_45;
                                            brgMp.AVALUE_45 = item.AVALUE_45;
                                            brgMp.ACODE_46 = item.ACODE_46;
                                            brgMp.ANAME_46 = item.ANAME_46;
                                            brgMp.AVALUE_46 = item.AVALUE_46;
                                            brgMp.ACODE_47 = item.ACODE_47;
                                            brgMp.ANAME_47 = item.ANAME_47;
                                            brgMp.AVALUE_47 = item.AVALUE_47;
                                            brgMp.ACODE_48 = item.ACODE_48;
                                            brgMp.ANAME_48 = item.ANAME_48;
                                            brgMp.AVALUE_48 = item.AVALUE_48;
                                            brgMp.ACODE_49 = item.ACODE_49;
                                            brgMp.ANAME_49 = item.ANAME_49;
                                            brgMp.AVALUE_49 = item.AVALUE_49;
                                            brgMp.ACODE_50 = item.ACODE_50;
                                            brgMp.ANAME_50 = item.ANAME_50;
                                            brgMp.AVALUE_50 = item.AVALUE_50;
                                            #endregion
                                            //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                            brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                                            brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                            brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                            brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                            if (customer.NAMA == "7")
                                            {
                                                //merek
                                                var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                                if (getKodeMerk != null)
                                                {
                                                    brgMp.ANAME_38 = item.MEREK;
                                                    brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                                }
                                            }
                                            eraDB.SaveChanges();
                                            listBrgSuccess.Add(item.BRG_MP);

                                            //add 25 April 2019, create stf02h untuk mp offline
                                            if (offlineId != null)
                                            {
                                                CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                            }
                                            //end add 25 April 2019, create stf02h untuk mp offline
                                        }
                                    }
                                    else
                                    {
                                        //add by nurul 27/11/2019, add tgl last edit
                                        barangInDB.Tgl_Input = DateTime.Today;
                                        //end add by nurul 27/11/2019, add tgl last edit
                                        if (barangInDB.PANJANG == 0 && item.PANJANG > 0)
                                        {
                                            barangInDB.PANJANG = item.PANJANG;
                                        }
                                        if (barangInDB.LEBAR == 0 && item.LEBAR > 0)
                                        {
                                            barangInDB.LEBAR = item.LEBAR;
                                        }
                                        if (barangInDB.TINGGI == 0 && item.TINGGI > 0)
                                        {
                                            barangInDB.TINGGI = item.TINGGI;
                                        }
                                        brgMp = new STF02H();
                                        //change stf02h brg = seller sku
                                        //brgMp.BRG = string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP : brgBlibli;
                                        brgMp.BRG = item.SELLER_SKU;
                                        //end change stf02h brg = seller sku
                                        brgMp.BRG_MP = item.BRG_MP;
                                        //brgMp.HJUAL = item.HJUAL_MP;
                                        brgMp.HJUAL = item.HJUAL;
                                        brgMp.DISPLAY = item.DISPLAY;
                                        brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                                        brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                                        brgMp.IDMARKET = item.IDMARKET;
                                        brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                                        brgMp.PICKUP_POINT = item.PICKUP_POINT;
                                        //var customer = eraDB.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                                        //if (customer != null)
                                        brgMp.AKUNMARKET = customer.PERSO;
                                        //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                                        brgMp.USERNAME = username;
                                        #region attribute mp
                                        brgMp.ACODE_1 = item.ACODE_1;
                                        brgMp.ANAME_1 = item.ANAME_1;
                                        if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                        {
                                            brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                                        }
                                        else
                                        {
                                            brgMp.AVALUE_1 = item.AVALUE_1;
                                        }
                                        brgMp.ACODE_2 = item.ACODE_2;
                                        brgMp.ANAME_2 = item.ANAME_2;
                                        brgMp.AVALUE_2 = item.AVALUE_2;
                                        brgMp.ACODE_3 = item.ACODE_3;
                                        brgMp.ANAME_3 = item.ANAME_3;
                                        brgMp.AVALUE_3 = item.AVALUE_3;
                                        brgMp.ACODE_4 = item.ACODE_4;
                                        brgMp.ANAME_4 = item.ANAME_4;
                                        brgMp.AVALUE_4 = item.AVALUE_4;
                                        brgMp.ACODE_5 = item.ACODE_5;
                                        brgMp.ANAME_5 = item.ANAME_5;
                                        brgMp.AVALUE_5 = item.AVALUE_5;
                                        brgMp.ACODE_6 = item.ACODE_6;
                                        brgMp.ANAME_6 = item.ANAME_6;
                                        brgMp.AVALUE_6 = item.AVALUE_6;
                                        brgMp.ACODE_7 = item.ACODE_7;
                                        brgMp.ANAME_7 = item.ANAME_7;
                                        brgMp.AVALUE_7 = item.AVALUE_7;
                                        brgMp.ACODE_8 = item.ACODE_8;
                                        brgMp.ANAME_8 = item.ANAME_8;
                                        brgMp.AVALUE_8 = item.AVALUE_8;
                                        brgMp.ACODE_9 = item.ACODE_9;
                                        brgMp.ANAME_9 = item.ANAME_9;
                                        brgMp.AVALUE_9 = item.AVALUE_9;
                                        brgMp.ACODE_10 = item.ACODE_10;
                                        brgMp.ANAME_10 = item.ANAME_10;
                                        brgMp.AVALUE_10 = item.AVALUE_10;
                                        brgMp.ACODE_11 = item.ACODE_11;
                                        brgMp.ANAME_11 = item.ANAME_11;
                                        brgMp.AVALUE_11 = item.AVALUE_11;
                                        brgMp.ACODE_12 = item.ACODE_12;
                                        brgMp.ANAME_12 = item.ANAME_12;
                                        brgMp.AVALUE_12 = item.AVALUE_12;
                                        brgMp.ACODE_13 = item.ACODE_13;
                                        brgMp.ANAME_13 = item.ANAME_13;
                                        brgMp.AVALUE_13 = item.AVALUE_13;
                                        brgMp.ACODE_14 = item.ACODE_14;
                                        brgMp.ANAME_14 = item.ANAME_14;
                                        brgMp.AVALUE_14 = item.AVALUE_14;
                                        brgMp.ACODE_15 = item.ACODE_15;
                                        brgMp.ANAME_15 = item.ANAME_15;
                                        brgMp.AVALUE_15 = item.AVALUE_15;
                                        brgMp.ACODE_16 = item.ACODE_16;
                                        brgMp.ANAME_16 = item.ANAME_16;
                                        brgMp.AVALUE_16 = item.AVALUE_16;
                                        brgMp.ACODE_17 = item.ACODE_17;
                                        brgMp.ANAME_17 = item.ANAME_17;
                                        brgMp.AVALUE_17 = item.AVALUE_17;
                                        brgMp.ACODE_18 = item.ACODE_18;
                                        brgMp.ANAME_18 = item.ANAME_18;
                                        brgMp.AVALUE_18 = item.AVALUE_18;
                                        brgMp.ACODE_19 = item.ACODE_19;
                                        brgMp.ANAME_19 = item.ANAME_19;
                                        brgMp.AVALUE_19 = item.AVALUE_19;
                                        brgMp.ACODE_20 = item.ACODE_20;
                                        brgMp.ANAME_20 = item.ANAME_20;
                                        brgMp.AVALUE_20 = item.AVALUE_20;
                                        brgMp.ACODE_21 = item.ACODE_21;
                                        brgMp.ANAME_21 = item.ANAME_21;
                                        brgMp.AVALUE_21 = item.AVALUE_21;
                                        brgMp.ACODE_22 = item.ACODE_22;
                                        brgMp.ANAME_22 = item.ANAME_22;
                                        brgMp.AVALUE_22 = item.AVALUE_22;
                                        brgMp.ACODE_23 = item.ACODE_23;
                                        brgMp.ANAME_23 = item.ANAME_23;
                                        brgMp.AVALUE_23 = item.AVALUE_23;
                                        brgMp.ACODE_24 = item.ACODE_24;
                                        brgMp.ANAME_24 = item.ANAME_24;
                                        brgMp.AVALUE_24 = item.AVALUE_24;
                                        brgMp.ACODE_25 = item.ACODE_25;
                                        brgMp.ANAME_25 = item.ANAME_25;
                                        brgMp.AVALUE_25 = item.AVALUE_25;
                                        brgMp.ACODE_26 = item.ACODE_26;
                                        brgMp.ANAME_26 = item.ANAME_26;
                                        brgMp.AVALUE_26 = item.AVALUE_26;
                                        brgMp.ACODE_27 = item.ACODE_27;
                                        brgMp.ANAME_27 = item.ANAME_27;
                                        brgMp.AVALUE_27 = item.AVALUE_27;
                                        brgMp.ACODE_28 = item.ACODE_28;
                                        brgMp.ANAME_28 = item.ANAME_28;
                                        brgMp.AVALUE_28 = item.AVALUE_28;
                                        brgMp.ACODE_29 = item.ACODE_29;
                                        brgMp.ANAME_29 = item.ANAME_29;
                                        brgMp.AVALUE_29 = item.AVALUE_29;
                                        brgMp.ACODE_30 = item.ACODE_30;
                                        brgMp.ANAME_30 = item.ANAME_30;
                                        brgMp.AVALUE_30 = item.AVALUE_30;
                                        brgMp.ACODE_31 = item.ACODE_31;
                                        brgMp.ANAME_31 = item.ANAME_31;
                                        brgMp.AVALUE_31 = item.AVALUE_31;
                                        brgMp.ACODE_32 = item.ACODE_32;
                                        brgMp.ANAME_32 = item.ANAME_32;
                                        brgMp.AVALUE_32 = item.AVALUE_32;
                                        brgMp.ACODE_33 = item.ACODE_33;
                                        brgMp.ANAME_33 = item.ANAME_33;
                                        brgMp.AVALUE_33 = item.AVALUE_33;
                                        brgMp.ACODE_34 = item.ACODE_34;
                                        brgMp.ANAME_34 = item.ANAME_34;
                                        brgMp.AVALUE_34 = item.AVALUE_34;
                                        brgMp.ACODE_35 = item.ACODE_35;
                                        brgMp.ANAME_35 = item.ANAME_35;
                                        brgMp.AVALUE_35 = item.AVALUE_35;
                                        brgMp.ACODE_36 = item.ACODE_36;
                                        brgMp.ANAME_36 = item.ANAME_36;
                                        brgMp.AVALUE_36 = item.AVALUE_36;
                                        brgMp.ACODE_37 = item.ACODE_37;
                                        brgMp.ANAME_37 = item.ANAME_37;
                                        brgMp.AVALUE_37 = item.AVALUE_37;
                                        brgMp.ACODE_38 = item.ACODE_38;
                                        brgMp.ANAME_38 = item.ANAME_38;
                                        brgMp.AVALUE_38 = item.AVALUE_38;
                                        brgMp.ACODE_39 = item.ACODE_39;
                                        brgMp.ANAME_39 = item.ANAME_39;
                                        brgMp.AVALUE_39 = item.AVALUE_39;
                                        brgMp.ACODE_40 = item.ACODE_40;
                                        brgMp.ANAME_40 = item.ANAME_40;
                                        brgMp.AVALUE_40 = item.AVALUE_40;
                                        brgMp.ACODE_41 = item.ACODE_41;
                                        brgMp.ANAME_41 = item.ANAME_41;
                                        brgMp.AVALUE_41 = item.AVALUE_41;
                                        brgMp.ACODE_42 = item.ACODE_42;
                                        brgMp.ANAME_42 = item.ANAME_42;
                                        brgMp.AVALUE_42 = item.AVALUE_42;
                                        brgMp.ACODE_43 = item.ACODE_43;
                                        brgMp.ANAME_43 = item.ANAME_43;
                                        brgMp.AVALUE_43 = item.AVALUE_43;
                                        brgMp.ACODE_44 = item.ACODE_44;
                                        brgMp.ANAME_44 = item.ANAME_44;
                                        brgMp.AVALUE_44 = item.AVALUE_44;
                                        brgMp.ACODE_45 = item.ACODE_45;
                                        brgMp.ANAME_45 = item.ANAME_45;
                                        brgMp.AVALUE_45 = item.AVALUE_45;
                                        brgMp.ACODE_46 = item.ACODE_46;
                                        brgMp.ANAME_46 = item.ANAME_46;
                                        brgMp.AVALUE_46 = item.AVALUE_46;
                                        brgMp.ACODE_47 = item.ACODE_47;
                                        brgMp.ANAME_47 = item.ANAME_47;
                                        brgMp.AVALUE_47 = item.AVALUE_47;
                                        brgMp.ACODE_48 = item.ACODE_48;
                                        brgMp.ANAME_48 = item.ANAME_48;
                                        brgMp.AVALUE_48 = item.AVALUE_48;
                                        brgMp.ACODE_49 = item.ACODE_49;
                                        brgMp.ANAME_49 = item.ANAME_49;
                                        brgMp.AVALUE_49 = item.AVALUE_49;
                                        brgMp.ACODE_50 = item.ACODE_50;
                                        brgMp.ANAME_50 = item.ANAME_50;
                                        brgMp.AVALUE_50 = item.AVALUE_50;
                                        #endregion

                                        //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                        brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                                        brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                        brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                        brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                        if (customer.NAMA == "7")
                                        {
                                            //merek
                                            var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                            if (getKodeMerk != null)
                                            {
                                                brgMp.ANAME_38 = item.MEREK;
                                                brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                            }
                                        }
                                        eraDB.STF02H.Add(brgMp);
                                        eraDB.SaveChanges();
                                        listBrgSuccess.Add(item.BRG_MP);

                                        //add 25 April 2019, create stf02h untuk mp offline
                                        if (offlineId != null)
                                        {
                                            CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                        }
                                        //end add 25 April 2019, create stf02h untuk mp offline
                                        //add by calvin 11 juli 2019 jika lazada, cek attribute value 44, jika terisi dengan tgl promo dan harga promo, isi ke master promo
                                        if (customer.NAMA == "7")
                                        {
                                            try
                                            {
                                                if (!string.IsNullOrWhiteSpace(brgMp.AVALUE_44))
                                                {
                                                    if (brgMp.AVALUE_44.Contains(";"))
                                                    {
                                                        var splitAvalue_44 = brgMp.AVALUE_44.Split(';');
                                                        if (splitAvalue_44.Count() == 3) // 0 - tgl from, 1 - tgl to, 2 - promo price
                                                        {
                                                            string dateFrom = Convert.ToDateTime(splitAvalue_44[0]).ToString("yyyy-MM-dd");
                                                            string dateTo = Convert.ToDateTime(splitAvalue_44[1]).ToString("yyyy-MM-dd");
                                                            string sSQL = "INSERT INTO PROMOSIS (NAMA_PROMOSI,NAMA_MARKET,TGL_MULAI,TGL_AKHIR,TGL_INPUT) " + Environment.NewLine;
                                                            sSQL += "SELECT A.NAMA_PROMOSI,A.NAMA_MARKET,A.TGL_MULAI,A.TGL_AKHIR,GETDATE() FROM ( " + Environment.NewLine;
                                                            sSQL += "SELECT 'LAZADA_FROM_SYNC' NAMA_PROMOSI, '" + customer.CUST + "' NAMA_MARKET, " + Environment.NewLine;
                                                            sSQL += "'" + dateFrom + "' TGL_MULAI, " + Environment.NewLine;
                                                            sSQL += "'" + dateTo + "' TGL_AKHIR " + Environment.NewLine;
                                                            sSQL += ") A LEFT JOIN PROMOSIS B ON A.NAMA_PROMOSI = B.NAMA_PROMOSI AND A.NAMA_MARKET = B.NAMA_MARKET AND A.TGL_MULAI = B.TGL_MULAI AND A.TGL_AKHIR = B.TGL_AKHIR WHERE ISNULL(B.RECNUM,0) = 0" + Environment.NewLine;
                                                            EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                            var promosis = eraDB.Database.SqlQuery<Promosi>("SELECT TOP 1 * FROM PROMOSIS WHERE NAMA_PROMOSI='LAZADA_FROM_SYNC' AND NAMA_MARKET = '" + customer.CUST + "' AND TGL_MULAI = '" + dateFrom + "' AND TGL_AKHIR = '" + dateTo + "'").FirstOrDefault();
                                                            if (promosis != null)
                                                            {
                                                                sSQL = "INSERT INTO DETAILPROMOSIS (KODE_BRG,HARGA_NORMAL,HARGA_PROMOSI,TGL_INPUT,RecNumPromosi,MAX_QTY,PERSEN_PROMOSI) " + Environment.NewLine;
                                                                sSQL += "SELECT A.KODE_BRG, A.HARGA_NORMAL, A.HARGA_PROMOSI, GETDATE(), '" + promosis.RecNum + "' RecNumPromosi, 1 AS MAX_QTY, 0 AS PERSEN_PROMOSI FROM " + Environment.NewLine;
                                                                sSQL += "(SELECT '" + brgMp.BRG + "' KODE_BRG, " + Convert.ToString(item.HJUAL_MP).Replace(",", ".") + " HARGA_NORMAL, " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " HARGA_PROMOSI " + Environment.NewLine;
                                                                sSQL += ") A LEFT JOIN DETAILPROMOSIS B ON B.RECNUMPROMOSI = '" + promosis.RecNum + "' AND A.KODE_BRG = B.KODE_BRG WHERE ISNULL(B.RECNUMPROMOSI,0) = 0" + Environment.NewLine;
                                                                int recordTerinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                                if (recordTerinsert == 0)
                                                                {
                                                                    sSQL = "UPDATE DETAILPROMOSIS SET HARGA_NORMAL = " + Convert.ToString(item.HJUAL_MP).Replace(",", ".") + ", HARGA_PROMOSI = " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " " + Environment.NewLine;
                                                                    sSQL += "WHERE RECNUMPROMOSI = '" + promosis.RecNum + "' AND KODE_BRG = '" + brgMp.BRG + "'" + Environment.NewLine;
                                                                    EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        //end add by calvin 11 juli 2019
                                    }
                                }
                                else
                                {
                                    var stf02 = new STF02
                                    {
                                        HPP = 0,
                                        HBELI = 0,
                                        HBESAR = 0,
                                        HKECIL = 0,
                                        //TYPE = "3",
                                        KLINK = "1",
                                        HP_STD = 0,
                                        QPROD = 0,
                                        ISI3 = 3,
                                        ISI4 = 1,
                                        TOLERANSI = 0,
                                        H_STN_3 = 0,
                                        H_STN_4 = 0,
                                        SS = 0,
                                        METODA_HPP_PER_SN = false,
                                        HNA_PPN = 0,
                                        LABA = 0,
                                        DEFAULT_STN_HRG_JUAL = 0,
                                        DEFAULT_STN_JUAL = 0,
                                        ISI = 1,
                                        Metoda = "1",
                                        Tgl_Input = DateTime.Now,
                                        TGL_KLR = DateTime.Now,
                                        MAXI = 100,
                                        MINI = 1,
                                        QSALES = 0,
                                        DISPLAY_MARKET = false,
                                    };
                                    //change stf02 brg = seller sku
                                    //stf02.BRG = string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP : brgBlibli;
                                    stf02.BRG = item.SELLER_SKU;

                                    //end change stf02 brg = seller sku
                                    //var marketplace = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString().Equals(customer.NAMA)).FirstOrDefault();
                                    //if (marketplace != null)
                                    //{
                                    //    if (marketplace.NamaMarket.ToUpper().Equals("BLIBLI"))
                                    //    {
                                    //        var kdBrgBlibli = item.BRG_MP.Split(';');
                                    //        stf02.BRG = "";
                                    //        var kdBrg = kdBrgBlibli[0].Split('-');
                                    //        for(int i =1; i < kdBrg.Length; i++)
                                    //        {
                                    //            stf02.BRG += kdBrg[i] + "-";
                                    //        }
                                    //        stf02.BRG = stf02.BRG.Substring(0, stf02.BRG.Length - 1);
                                    //    }
                                    //}
                                    stf02.NAMA = item.NAMA;
                                    stf02.NAMA2 = item.NAMA2;
                                    stf02.NAMA3 = item.NAMA3;
                                    //stf02.HJUAL = item.HJUAL;
                                    stf02.HJUAL = item.HJUAL_MP;
                                    stf02.STN = "pcs";
                                    stf02.STN2 = "pcs";
                                    stf02.BERAT = item.BERAT;
                                    stf02.TINGGI = item.TINGGI;
                                    stf02.LEBAR = item.LEBAR;
                                    stf02.PANJANG = item.PANJANG;
                                    //change 14 juni 2019, ambil kategori dan merk dari temp table
                                    //stf02.Sort1 = defaultCategoryCode.KODE;
                                    //stf02.Sort2 = defaultBrand.KODE;
                                    //stf02.KET_SORT1 = defaultCategoryCode.KET;
                                    //stf02.KET_SORT2 = defaultBrand.KET;
                                    if (string.IsNullOrEmpty(item.AVALUE_40))
                                    {
                                        stf02.Sort1 = defaultCategoryCode[0].KODE;
                                        stf02.KET_SORT1 = defaultCategoryCode[0].KET;
                                    }
                                    else
                                    {
                                        if (defaultCategoryCode.Where(m => m.KODE == item.AVALUE_40 && m.LEVEL == "1").FirstOrDefault() != null)
                                        {
                                            stf02.KET_SORT1 = defaultCategoryCode.Where(m => m.KODE == item.AVALUE_40 && m.LEVEL == "1").FirstOrDefault().KET;
                                            stf02.Sort1 = item.AVALUE_40;
                                        }
                                        else
                                        {
                                            stf02.Sort1 = defaultCategoryCode[0].KODE;
                                            stf02.KET_SORT1 = defaultCategoryCode[0].KET;
                                        }
                                    }

                                    if (string.IsNullOrEmpty(item.MEREK))
                                    {
                                        stf02.Sort2 = defaultBrand[0].KODE;
                                        stf02.KET_SORT2 = defaultBrand[0].KET;
                                    }
                                    else
                                    {
                                        if (defaultBrand.Where(m => m.KODE == item.MEREK && m.LEVEL == "2").FirstOrDefault() != null)
                                        {
                                            stf02.KET_SORT2 = defaultBrand.Where(m => m.KODE == item.MEREK && m.LEVEL == "2").FirstOrDefault().KET;
                                            stf02.Sort2 = item.MEREK;
                                        }
                                        else
                                        {
                                            stf02.Sort2 = defaultBrand[0].KODE;
                                            stf02.KET_SORT2 = defaultBrand[0].KET;
                                        }
                                    }
                                    //end change 14 juni 2019, ambil kategori dan merk dari temp table
                                    stf02.Deskripsi = (string.IsNullOrEmpty(item.Deskripsi) ? "-" : item.Deskripsi);

                                    //add 25 Jan 2019, handle brg induk & varian
                                    stf02.TYPE = item.TYPE;
                                    if (string.IsNullOrEmpty(stf02.TYPE))
                                    {
                                        //change by Tri 5 Nov 2019, perbaikan logic set type brg
                                        //if (string.IsNullOrEmpty(item.KODE_BRG_INDUK))
                                        if (!string.IsNullOrEmpty(item.KODE_BRG_INDUK))
                                        //end change by Tri 5 Nov 2019, perbaikan logic set type brg
                                        {
                                            stf02.TYPE = "3";
                                        }
                                        else
                                        {
                                            //change by Tri 5 Nov 2019, perbaikan logic set type brg
                                            //stf02.TYPE = "4";
                                            var indukTemp = eraDB.TEMP_BRG_MP.Where(m => m.CUST == cust && (m.KODE_BRG_INDUK == null ? "" : m.KODE_BRG_INDUK) == stf02.BRG).Select(m => m.BRG_MP).ToList();
                                            if (indukTemp.Count == 0)
                                            {
                                                var indukMO = eraDB.STF02.Where(m => (m.PART == null ? "" : m.PART) == stf02.BRG).Select(m => m.BRG).ToList();
                                                if (indukMO.Count == 0)
                                                {
                                                    stf02.TYPE = "3";
                                                }
                                                else
                                                {
                                                    stf02.TYPE = "4";
                                                }
                                            }
                                            else
                                            {
                                                stf02.TYPE = "4";
                                            }
                                            //end change by Tri 5 Nov 2019, perbaikan logic set type brg
                                        }
                                    }
                                    stf02.PART = item.KODE_BRG_INDUK;
                                    //end 25 Jan 2019, handle brg induk & varian

                                    if (!string.IsNullOrEmpty(item.IMAGE))
                                    {
                                        stf02.LINK_GAMBAR_1 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE, "uploaded-image").data.link_l;
                                    }
                                    if (!string.IsNullOrEmpty(item.IMAGE2))
                                    {
                                        stf02.LINK_GAMBAR_2 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE2, "uploaded-image").data.link_l;
                                    }
                                    if (!string.IsNullOrEmpty(item.IMAGE3))
                                    {
                                        stf02.LINK_GAMBAR_3 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE3, "uploaded-image").data.link_l;
                                    }
                                    if (!string.IsNullOrEmpty(item.IMAGE4))
                                    {
                                        stf02.LINK_GAMBAR_4 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE4, "uploaded-image").data.link_l;
                                    }
                                    if (!string.IsNullOrEmpty(item.IMAGE5))
                                    {
                                        stf02.LINK_GAMBAR_5 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE5, "uploaded-image").data.link_l;
                                    }

                                    eraDB.STF02.Add(stf02);
                                    var brgMp = new STF02H();

                                    //brgMp.BRG = item.BRG_MP;
                                    brgMp.BRG = stf02.BRG;
                                    brgMp.BRG_MP = item.BRG_MP;
                                    //brgMp.HJUAL = item.HJUAL_MP;
                                    brgMp.HJUAL = item.HJUAL;
                                    brgMp.DISPLAY = item.DISPLAY;
                                    brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                                    brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                                    brgMp.IDMARKET = item.IDMARKET;
                                    brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                                    brgMp.PICKUP_POINT = item.PICKUP_POINT;
                                    //var customer = eraDB.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                                    //if (customer != null)
                                    brgMp.AKUNMARKET = customer.PERSO;
                                    //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                                    brgMp.USERNAME = username;
                                    #region attribute mp
                                    brgMp.ACODE_1 = item.ACODE_1;
                                    brgMp.ANAME_1 = item.ANAME_1;
                                    if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                    {
                                        brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                                    }
                                    else
                                    {
                                        brgMp.AVALUE_1 = item.AVALUE_1;
                                    }
                                    brgMp.ACODE_2 = item.ACODE_2;
                                    brgMp.ANAME_2 = item.ANAME_2;
                                    brgMp.AVALUE_2 = item.AVALUE_2;
                                    brgMp.ACODE_3 = item.ACODE_3;
                                    brgMp.ANAME_3 = item.ANAME_3;
                                    brgMp.AVALUE_3 = item.AVALUE_3;
                                    brgMp.ACODE_4 = item.ACODE_4;
                                    brgMp.ANAME_4 = item.ANAME_4;
                                    brgMp.AVALUE_4 = item.AVALUE_4;
                                    brgMp.ACODE_5 = item.ACODE_5;
                                    brgMp.ANAME_5 = item.ANAME_5;
                                    brgMp.AVALUE_5 = item.AVALUE_5;
                                    brgMp.ACODE_6 = item.ACODE_6;
                                    brgMp.ANAME_6 = item.ANAME_6;
                                    brgMp.AVALUE_6 = item.AVALUE_6;
                                    brgMp.ACODE_7 = item.ACODE_7;
                                    brgMp.ANAME_7 = item.ANAME_7;
                                    brgMp.AVALUE_7 = item.AVALUE_7;
                                    brgMp.ACODE_8 = item.ACODE_8;
                                    brgMp.ANAME_8 = item.ANAME_8;
                                    brgMp.AVALUE_8 = item.AVALUE_8;
                                    brgMp.ACODE_9 = item.ACODE_9;
                                    brgMp.ANAME_9 = item.ANAME_9;
                                    brgMp.AVALUE_9 = item.AVALUE_9;
                                    brgMp.ACODE_10 = item.ACODE_10;
                                    brgMp.ANAME_10 = item.ANAME_10;
                                    brgMp.AVALUE_10 = item.AVALUE_10;
                                    brgMp.ACODE_11 = item.ACODE_11;
                                    brgMp.ANAME_11 = item.ANAME_11;
                                    brgMp.AVALUE_11 = item.AVALUE_11;
                                    brgMp.ACODE_12 = item.ACODE_12;
                                    brgMp.ANAME_12 = item.ANAME_12;
                                    brgMp.AVALUE_12 = item.AVALUE_12;
                                    brgMp.ACODE_13 = item.ACODE_13;
                                    brgMp.ANAME_13 = item.ANAME_13;
                                    brgMp.AVALUE_13 = item.AVALUE_13;
                                    brgMp.ACODE_14 = item.ACODE_14;
                                    brgMp.ANAME_14 = item.ANAME_14;
                                    brgMp.AVALUE_14 = item.AVALUE_14;
                                    brgMp.ACODE_15 = item.ACODE_15;
                                    brgMp.ANAME_15 = item.ANAME_15;
                                    brgMp.AVALUE_15 = item.AVALUE_15;
                                    brgMp.ACODE_16 = item.ACODE_16;
                                    brgMp.ANAME_16 = item.ANAME_16;
                                    brgMp.AVALUE_16 = item.AVALUE_16;
                                    brgMp.ACODE_17 = item.ACODE_17;
                                    brgMp.ANAME_17 = item.ANAME_17;
                                    brgMp.AVALUE_17 = item.AVALUE_17;
                                    brgMp.ACODE_18 = item.ACODE_18;
                                    brgMp.ANAME_18 = item.ANAME_18;
                                    brgMp.AVALUE_18 = item.AVALUE_18;
                                    brgMp.ACODE_19 = item.ACODE_19;
                                    brgMp.ANAME_19 = item.ANAME_19;
                                    brgMp.AVALUE_19 = item.AVALUE_19;
                                    brgMp.ACODE_20 = item.ACODE_20;
                                    brgMp.ANAME_20 = item.ANAME_20;
                                    brgMp.AVALUE_20 = item.AVALUE_20;
                                    brgMp.ACODE_21 = item.ACODE_21;
                                    brgMp.ANAME_21 = item.ANAME_21;
                                    brgMp.AVALUE_21 = item.AVALUE_21;
                                    brgMp.ACODE_22 = item.ACODE_22;
                                    brgMp.ANAME_22 = item.ANAME_22;
                                    brgMp.AVALUE_22 = item.AVALUE_22;
                                    brgMp.ACODE_23 = item.ACODE_23;
                                    brgMp.ANAME_23 = item.ANAME_23;
                                    brgMp.AVALUE_23 = item.AVALUE_23;
                                    brgMp.ACODE_24 = item.ACODE_24;
                                    brgMp.ANAME_24 = item.ANAME_24;
                                    brgMp.AVALUE_24 = item.AVALUE_24;
                                    brgMp.ACODE_25 = item.ACODE_25;
                                    brgMp.ANAME_25 = item.ANAME_25;
                                    brgMp.AVALUE_25 = item.AVALUE_25;
                                    brgMp.ACODE_26 = item.ACODE_26;
                                    brgMp.ANAME_26 = item.ANAME_26;
                                    brgMp.AVALUE_26 = item.AVALUE_26;
                                    brgMp.ACODE_27 = item.ACODE_27;
                                    brgMp.ANAME_27 = item.ANAME_27;
                                    brgMp.AVALUE_27 = item.AVALUE_27;
                                    brgMp.ACODE_28 = item.ACODE_28;
                                    brgMp.ANAME_28 = item.ANAME_28;
                                    brgMp.AVALUE_28 = item.AVALUE_28;
                                    brgMp.ACODE_29 = item.ACODE_29;
                                    brgMp.ANAME_29 = item.ANAME_29;
                                    brgMp.AVALUE_29 = item.AVALUE_29;
                                    brgMp.ACODE_30 = item.ACODE_30;
                                    brgMp.ANAME_30 = item.ANAME_30;
                                    brgMp.AVALUE_30 = item.AVALUE_30;
                                    brgMp.ACODE_31 = item.ACODE_31;
                                    brgMp.ANAME_31 = item.ANAME_31;
                                    brgMp.AVALUE_31 = item.AVALUE_31;
                                    brgMp.ACODE_32 = item.ACODE_32;
                                    brgMp.ANAME_32 = item.ANAME_32;
                                    brgMp.AVALUE_32 = item.AVALUE_32;
                                    brgMp.ACODE_33 = item.ACODE_33;
                                    brgMp.ANAME_33 = item.ANAME_33;
                                    brgMp.AVALUE_33 = item.AVALUE_33;
                                    brgMp.ACODE_34 = item.ACODE_34;
                                    brgMp.ANAME_34 = item.ANAME_34;
                                    brgMp.AVALUE_34 = item.AVALUE_34;
                                    brgMp.ACODE_35 = item.ACODE_35;
                                    brgMp.ANAME_35 = item.ANAME_35;
                                    brgMp.AVALUE_35 = item.AVALUE_35;
                                    brgMp.ACODE_36 = item.ACODE_36;
                                    brgMp.ANAME_36 = item.ANAME_36;
                                    brgMp.AVALUE_36 = item.AVALUE_36;
                                    brgMp.ACODE_37 = item.ACODE_37;
                                    brgMp.ANAME_37 = item.ANAME_37;
                                    brgMp.AVALUE_37 = item.AVALUE_37;
                                    brgMp.ACODE_38 = item.ACODE_38;
                                    brgMp.ANAME_38 = item.ANAME_38;
                                    brgMp.AVALUE_38 = item.AVALUE_38;
                                    brgMp.ACODE_39 = item.ACODE_39;
                                    brgMp.ANAME_39 = item.ANAME_39;
                                    brgMp.AVALUE_39 = item.AVALUE_39;
                                    brgMp.ACODE_40 = item.ACODE_40;
                                    brgMp.ANAME_40 = item.ANAME_40;
                                    brgMp.AVALUE_40 = item.AVALUE_40;
                                    brgMp.ACODE_41 = item.ACODE_41;
                                    brgMp.ANAME_41 = item.ANAME_41;
                                    brgMp.AVALUE_41 = item.AVALUE_41;
                                    brgMp.ACODE_42 = item.ACODE_42;
                                    brgMp.ANAME_42 = item.ANAME_42;
                                    brgMp.AVALUE_42 = item.AVALUE_42;
                                    brgMp.ACODE_43 = item.ACODE_43;
                                    brgMp.ANAME_43 = item.ANAME_43;
                                    brgMp.AVALUE_43 = item.AVALUE_43;
                                    brgMp.ACODE_44 = item.ACODE_44;
                                    brgMp.ANAME_44 = item.ANAME_44;
                                    brgMp.AVALUE_44 = item.AVALUE_44;
                                    brgMp.ACODE_45 = item.ACODE_45;
                                    brgMp.ANAME_45 = item.ANAME_45;
                                    brgMp.AVALUE_45 = item.AVALUE_45;
                                    brgMp.ACODE_46 = item.ACODE_46;
                                    brgMp.ANAME_46 = item.ANAME_46;
                                    brgMp.AVALUE_46 = item.AVALUE_46;
                                    brgMp.ACODE_47 = item.ACODE_47;
                                    brgMp.ANAME_47 = item.ANAME_47;
                                    brgMp.AVALUE_47 = item.AVALUE_47;
                                    brgMp.ACODE_48 = item.ACODE_48;
                                    brgMp.ANAME_48 = item.ANAME_48;
                                    brgMp.AVALUE_48 = item.AVALUE_48;
                                    brgMp.ACODE_49 = item.ACODE_49;
                                    brgMp.ANAME_49 = item.ANAME_49;
                                    brgMp.AVALUE_49 = item.AVALUE_49;
                                    brgMp.ACODE_50 = item.ACODE_50;
                                    brgMp.ANAME_50 = item.ANAME_50;
                                    brgMp.AVALUE_50 = item.AVALUE_50;
                                    #endregion
                                    //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                    brgMp.AVALUE_39 = HttpUtility.HtmlEncode(brgMp.AVALUE_39);
                                    brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                    brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                    brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                    if (customer.NAMA == "7")
                                    {
                                        //merek
                                        var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                        if (getKodeMerk != null)
                                        {
                                            brgMp.ANAME_38 = item.MEREK;
                                            brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                        }
                                    }
                                    eraDB.STF02H.Add(brgMp);

                                    //change 17 juni 2019, handle gagal save
                                    //eraDB.SaveChanges();
                                    //listBrgSuccess.Add(item.BRG_MP);

                                    ////add 25 April 2019, create stf02h untuk mp offline
                                    //if (offlineId != null)
                                    //{
                                    //    CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                    //}
                                    ////end add 25 April 2019, create stf02h untuk mp offline
                                    try
                                    {
                                        eraDB.SaveChanges();
                                        listBrgSuccess.Add(item.BRG_MP);

                                        //add 25 April 2019, create stf02h untuk mp offline
                                        if (offlineId != null)
                                        {
                                            CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                        }
                                        //end add 25 April 2019, create stf02h untuk mp offline
                                    }
                                    catch (Exception ex)
                                    {
                                        eraDB.STF02.Remove(stf02);
                                        eraDB.STF02H.Remove(brgMp);
                                        eraDB.SaveChanges();
                                        //change 19 Juli 2019, error log
                                        //barangVm.Errors.Add("Kode Barang " + stf02.BRG + " gagal tersimpan. Error : " + (ex.InnerException == null ? ex.Message : ex.InnerException.Message) + "\n");
                                        log_msg = "Kode Barang " + stf02.BRG + " gagal tersimpan karena : " + (ex.InnerException == null ? ex.Message : ex.InnerException.Message) + System.Environment.NewLine;
                                        tw.WriteLine(log_msg);
                                        //end change 19 Juli 2019, error log
                                    }

                                    //end change 17 juni 2019, handle gagal save

                                    //add by calvin 11 juli 2019 jika lazada, cek attribute value 44, jika terisi dengan tgl promo dan harga promo, isi ke master promo
                                    if (customer.NAMA == "7")
                                    {
                                        try
                                        {
                                            if (!string.IsNullOrWhiteSpace(brgMp.AVALUE_44))
                                            {
                                                if (brgMp.AVALUE_44.Contains(";"))
                                                {
                                                    var splitAvalue_44 = brgMp.AVALUE_44.Split(';');
                                                    if (splitAvalue_44.Count() == 3) // 0 - tgl from, 1 - tgl to, 2 - promo price
                                                    {
                                                        string dateFrom = Convert.ToDateTime(splitAvalue_44[0]).ToString("yyyy-MM-dd");
                                                        string dateTo = Convert.ToDateTime(splitAvalue_44[1]).ToString("yyyy-MM-dd");
                                                        string sSQL = "INSERT INTO PROMOSIS (NAMA_PROMOSI,NAMA_MARKET,TGL_MULAI,TGL_AKHIR,TGL_INPUT) " + Environment.NewLine;
                                                        sSQL += "SELECT A.NAMA_PROMOSI,A.NAMA_MARKET,A.TGL_MULAI,A.TGL_AKHIR,GETDATE() FROM ( " + Environment.NewLine;
                                                        sSQL += "SELECT 'LAZADA_FROM_SYNC' NAMA_PROMOSI, '" + customer.CUST + "' NAMA_MARKET, " + Environment.NewLine;
                                                        sSQL += "'" + dateFrom + "' TGL_MULAI, " + Environment.NewLine;
                                                        sSQL += "'" + dateTo + "' TGL_AKHIR " + Environment.NewLine;
                                                        sSQL += ") A LEFT JOIN PROMOSIS B ON A.NAMA_PROMOSI = B.NAMA_PROMOSI AND A.NAMA_MARKET = B.NAMA_MARKET AND A.TGL_MULAI = B.TGL_MULAI AND A.TGL_AKHIR = B.TGL_AKHIR WHERE ISNULL(B.RECNUM,0) = 0" + Environment.NewLine;
                                                        EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                        var promosis = eraDB.Database.SqlQuery<Promosi>("SELECT TOP 1 * FROM PROMOSIS WHERE NAMA_PROMOSI='LAZADA_FROM_SYNC' AND NAMA_MARKET = '" + customer.CUST + "' AND TGL_MULAI = '" + dateFrom + "' AND TGL_AKHIR = '" + dateTo + "'").FirstOrDefault();
                                                        if (promosis != null)
                                                        {
                                                            sSQL = "INSERT INTO DETAILPROMOSIS (KODE_BRG,HARGA_NORMAL,HARGA_PROMOSI,TGL_INPUT,RecNumPromosi,MAX_QTY,PERSEN_PROMOSI) " + Environment.NewLine;
                                                            sSQL += "SELECT A.KODE_BRG, A.HARGA_NORMAL, A.HARGA_PROMOSI, GETDATE(), '" + promosis.RecNum + "' RecNumPromosi, 1 AS MAX_QTY, 0 AS PERSEN_PROMOSI FROM " + Environment.NewLine;
                                                            sSQL += "(SELECT '" + brgMp.BRG + "' KODE_BRG, " + Convert.ToString(item.HJUAL_MP).Replace(",", ".") + " HARGA_NORMAL, " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " HARGA_PROMOSI " + Environment.NewLine;
                                                            sSQL += ") A LEFT JOIN DETAILPROMOSIS B ON B.RECNUMPROMOSI = '" + promosis.RecNum + "' AND A.KODE_BRG = B.KODE_BRG WHERE ISNULL(B.RECNUMPROMOSI,0) = 0" + Environment.NewLine;
                                                            int recordTerinsert = EDB.ExecuteSQL("CString", CommandType.Text, sSQL);

                                                            if (recordTerinsert == 0)
                                                            {
                                                                sSQL = "UPDATE DETAILPROMOSIS SET HARGA_NORMAL = " + Convert.ToString(item.HJUAL_MP).Replace(",", ".") + ", HARGA_PROMOSI = " + Convert.ToString(splitAvalue_44[2]).Replace(",", ".") + " " + Environment.NewLine;
                                                                sSQL += "WHERE RECNUMPROMOSI = '" + promosis.RecNum + "' AND KODE_BRG = '" + brgMp.BRG + "'" + Environment.NewLine;
                                                                EDB.ExecuteSQL("CString", CommandType.Text, sSQL);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                    //end add by calvin 11 juli 2019
                                }
                            }

                        }
                        if (listBrgSuccess.Count > 0)
                        {
                            //if(Convert.ToInt32(dataPerPage) > listBrgSuccess.Count)
                            //{
                            barangVm.failedRecord = string.IsNullOrEmpty(skipDataError.ToString()) ? 0 : skipDataError + Convert.ToInt32(string.IsNullOrEmpty(dataPerPage) ? "0" : dataPerPage) - listBrgSuccess.Count;
                            //}
                            foreach (var brg_mp in listBrgSuccess)
                            {
                                //eraDB.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(brg_mp)).Delete();
                                //change by Tri 6 Des 2019, hapus sesuai cust
                                //eraDB.TEMP_BRG_MP.Where(t => t.BRG_MP == brg_mp).Delete();
                                eraDB.TEMP_BRG_MP.Where(t => t.BRG_MP == brg_mp && t.CUST == cust).Delete();
                                //end change by Tri 6 Des 2019, hapus sesuai cust

                            }
                            eraDB.SaveChanges();
                        }
                        //barangVm.ListTempBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST.Equals(cust)).ToList();
                        //barangVm.ListTempBrg = eraDB.TEMP_BRG_MP.Where(b => b.CUST == cust).ToList();
                        tw.Close();
                        barangVm.contRecursive = "1";
                        //if (barangVm.Errors.Count == 0)
                        //if(dataBrg.Count < Convert.ToInt32(dataPerPage))
                        //remark 19 juli 2019
                        //if (barangVm.Errors.Count == 0 && string.IsNullOrEmpty(dataPerPage))
                        //{
                        //    return PartialView("TableUploadBarangPartial", barangVm);
                        //}
                        //remark 19 juli 2019
                        //else
                        {
                            return Json(barangVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                    tw.Close();
                    barangVm.Errors.Add("Tidak ada barang untuk di upload pada Toko ini.");
                    return Json(barangVm, JsonRequestBehavior.AllowGet);
                }

            }
            barangVm.Errors.Add("Toko ini tidak ditemukan.");
            return Json(barangVm, JsonRequestBehavior.AllowGet);
        }
        public ActionResult EditBarangUpload(string brg_mp, string cust)
        {
            var barangVm = new UploadBarangViewModel()
            {
                //ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST == cust).ToList(),
                ListMarket = ErasoftDbContext.ARF01.ToList(),
                TempArf01 = ErasoftDbContext.ARF01.Where(t => t.CUST == cust).FirstOrDefault(),
                Stf02 = new STF02(),
                TempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(brg_mp.ToUpper()) && t.CUST == cust).FirstOrDefault(),
                ListKategoriMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL.Equals("2")).OrderBy(m => m.KET).ToList(),
                ListKategoriBrg = ErasoftDbContext.STF02E.Where(m => m.LEVEL.Equals("1")).OrderBy(m => m.KET).ToList(),

            };

            return PartialView("FormBarangUploadsPartial", barangVm);
        }

        public ActionResult DeleteBarangTemp(string barangId, string cust)
        {
            try
            {
                var barangInDb = ErasoftDbContext.TEMP_BRG_MP.Single(b => b.BRG_MP.ToUpper() == barangId.ToUpper() && b.CUST == cust);

                ErasoftDbContext.TEMP_BRG_MP.Remove(barangInDb);
                ErasoftDbContext.SaveChanges();

                //change by calvin 14 januari 2019
                //var barangVm = new UploadBarangViewModel()
                //{
                //    ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST == cust).ToList(),
                //    ListMarket = ErasoftDbContext.ARF01.ToList(),
                //    Stf02 = new STF02(),
                //    TempBrg = new TEMP_BRG_MP(),
                //};

                //return Json(barangVm, JsonRequestBehavior.AllowGet);
                var barangVm = new UploadBarangViewModel()
                {
                    //change by nurul 17/6/2019, paging
                    //ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.CUST.Equals(cust)).ToList(),
                    //ListMarket = ErasoftDbContext.ARF01.ToList(),
                    //Stf02 = new STF02(),
                    //TempBrg = new TEMP_BRG_MP(),
                    Errors = null
                };

                return Json(barangInDb, JsonRequestBehavior.AllowGet);
                //return PartialView("TableUploadBarangPartial", barangVm);
                //end change by nurul 17/6/2019, paging 
                //end change by calvin 14 januari 2019
            }
            catch (Exception ex)
            {
                return JsonErrorMessage(ex.Message);
            }
        }

        public ActionResult DeleteAllSyncBrg(string cust)
        {
            try
            {
                //var barangInDb = ErasoftDbContext.TEMP_BRG_MP.Single(b => b.BRG_MP.ToUpper() == barangId.ToUpper() && b.CUST == cust);

                //ErasoftDbContext.TEMP_BRG_MP.Remove(barangInDb);
                ErasoftDbContext.TEMP_BRG_MP.Where(m => m.CUST == cust).Delete();
                ErasoftDbContext.SaveChanges();

                var barangVm = new UploadBarangViewModel()
                {
                    Errors = null
                };

                return Json(barangVm, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage(ex.Message);
            }
        }

        [Route("manage/PromptCustomer")]
        public ActionResult PromptCustomer()
        {
            try
            {
                var PromptModel = new List<PromptCustomerViewModel>();
                var listCust = ErasoftDbContext.ARF01.ToList();
                foreach (var customer in listCust)
                {
                    PromptModel.Add(
                        new PromptCustomerViewModel
                        {
                            KODE = customer.CUST,
                            NAMA = customer.PERSO,
                            MARKETPLACE = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString() == customer.NAMA).FirstOrDefault().NamaMarket,
                            IDMARKET = customer.NAMA
                        }
                        );
                }
                return View("PromptCustomer", PromptModel);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        [Route("manage/PromptBarang")]
        public ActionResult PromptBarang(string cust, string nama, string typeBrg)
        {
            try
            {
                var retObj = new PromptBrg();
                retObj.NAMA_BRG = nama.Length > 10 ? nama.Substring(0, 10) : nama;
                var PromptModel = new List<PromptBarangViewModel>();
                //change 1 Feb 2019, prompt berdasarkan type barang tidak jd dipakai
                ////change by Tri 22-01-2019, prompt sesuai type barang
                //var listBarang = ErasoftDbContext.STF02.ToList();
                //var listBarang = ErasoftDbContext.STF02.Where(b => b.TYPE == typeBrg).ToList();
                //end change by Tri 22-01-2019, prompt sesuai type barang
                //end change 1 Feb 2019, prompt berdasarkan type barang tidak jd dipakai

                ////var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.Equals(cust)).FirstOrDefault();
                ////foreach (var barang in listBarang)
                ////{
                ////    if (customer != null)
                ////    {
                ////        //remark 1 Feb 2019, tidak terpakai
                ////        //if (typeBrg == "4")//ambil brg jasa untuk prompt brg induk
                ////        //{
                ////        //    PromptModel.Add(
                ////        //           new PromptBarangViewModel
                ////        //           {
                ////        //               KODE = barang.BRG,
                ////        //               NAMA = barang.NAMA + " " + barang.NAMA2,
                ////        //               HARGA = barang.HJUAL
                ////        //           }
                ////        //           );
                ////        //}
                ////        //else
                ////        //end remark 1 Feb 2019, tidak terpakai
                ////        {
                ////            var stf02h = ErasoftDbContext.STF02H.Where(b => b.BRG.Equals(barang.BRG) && b.IDMARKET == customer.RecNum).FirstOrDefault();
                ////            if (stf02h != null)
                ////            {
                ////                if (string.IsNullOrEmpty(stf02h.BRG_MP))//belum ada link dgn cust ini
                ////                {
                ////                    PromptModel.Add(
                ////                        new PromptBarangViewModel
                ////                        {
                ////                            KODE = barang.BRG,
                ////                            NAMA = barang.NAMA + " " + barang.NAMA2,
                ////                            HARGA = barang.HJUAL
                ////                        }
                ////                        );
                ////                }
                ////            }
                ////            else
                ////            {
                ////                PromptModel.Add(
                ////                    new PromptBarangViewModel
                ////                    {
                ////                        KODE = barang.BRG,
                ////                        NAMA = barang.NAMA + " " + barang.NAMA2,
                ////                        HARGA = barang.HJUAL
                ////                    }
                ////                );
                ////            }
                ////        }

                ////    }

                ////}
                ////retObj.data = PromptModel;
                retObj.typeBrg = typeBrg;
                retObj.cust = cust;
                ////return View("PromptBarang", retObj);
                return View(retObj);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }
        public ActionResult TablePromptBarangPartial(string cust, string typeBrg, int? page, string search = "")
        {
            try
            {
                int pagenumber = (page ?? 1) - 1;
                ViewData["searchParam"] = search;
                ViewData["LastPage"] = page;

                //ADD by nurul 2/10/2019, contain search 
                string[] getkata = search.Split(' ');
                string sSQLnama = "";
                string sSQLkode = "";
                string sSQLharga = "";
                if (getkata.Length > 0)
                {
                    if (search != "")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (getkata.Length == 1)
                            {
                                sSQLnama += " ( (ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'')) like '%" + getkata[i] + "%' )";
                                sSQLkode += " ( A.BRG like '%" + getkata[i] + "%' )";
                                sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                if (getkata[i] == getkata.First())
                                {
                                    sSQLnama += " ( (ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'')) like '%" + getkata[i] + "%'";
                                    sSQLkode += " ( A.BRG like '%" + getkata[i] + "%'";
                                    sSQLharga += " ( A.HJUAL like '%" + getkata[i] + "%' ";
                                }
                                else if (getkata[i] == getkata.Last())
                                {
                                    sSQLnama += " and (ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'')) like '%" + getkata[i] + "%' )";
                                    sSQLkode += " and A.BRG like '%" + getkata[i] + "%' )";
                                    sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' )";
                                }
                                else
                                {
                                    sSQLnama += " and (ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'')) like '%" + getkata[i] + "%' ";
                                    sSQLkode += " and A.BRG like '%" + getkata[i] + "%' ";
                                    sSQLharga += " and A.HJUAL like '%" + getkata[i] + "%' ";
                                }
                            }
                        }
                    }
                }
                //sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLsellersku + " or " + sSQLmerk + " or " + sSQLkategori + " or " + sSQLharga + " ) ";
                //END ADD  BY NURUL 2/10/2019

                //var retObj = new PromptBrg();
                //retObj.NAMA_BRG = nama.Length > 10 ? nama.Substring(0, 10) : nama;
                //var PromptModel = new List<PromptBarangViewModel>();
                //var PromptModel = new List<PromptBrgBaru>();
                var PromptModel = new List<PromptBarangViewModel>();
                //var nmBrg = search.Length > 10 ? search.Substring(0, 10) : search;
                //var listBarang = ErasoftDbContext.STF02.ToList();


                string sSQLSelect = "";
                //sSQLSelect += "SELECT A.BRG AS KODE, ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'') AS NAMA, A.HJUAL AS HARGA, ISNULL(A.KET_SORT4,'') AS NAMA_BRG, ISNULL(A.KET_SORT5,'') AS typeBrg  ";
                sSQLSelect += "SELECT A.BRG AS KODE, ISNULL(A.NAMA,'') + ' ' + ISNULL(A.NAMA2,'') AS NAMA, A.HJUAL AS HARGA  ";
                string sSQLCount = "";
                sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
                string sSQL2 = "";
                sSQL2 += "FROM STF02 A ";
                sSQL2 += "LEFT JOIN STF02H B ON A.BRG = B.BRG AND B.IDMARKET = '" + cust + "' ";
                sSQL2 += "WHERE ISNULL(B.BRG_MP,'') = '' ";
                if (search != "")
                {
                    //sSQL2 += "AND (A.BRG LIKE '%" + search + "%' OR (ISNULL(A.NAMA, '') + ' ' + ISNULL(A.NAMA2, '')) LIKE '%" + search + "%' ) ";
                    sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLharga + " ) ";
                }
                //if (search != "")
                //{
                //    sSQL2 += "AND (A.BRG LIKE '%" + nmBrg + "%' OR A.NAMA + ' ' + A.NAMA2 LIKE '%" + nmBrg + "%' ) ";
                //}
                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.NAMA ASC, A.BRG ASC ";
                sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
                sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

                var listBarang = ErasoftDbContext.Database.SqlQuery<PromptBarangViewModel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

                var pageContent = new List<PromptBarangViewModel>();
                foreach (var item in listBarang)
                {
                    pageContent.Add(new PromptBarangViewModel()
                    {
                        KODE = item.KODE,
                        NAMA = item.NAMA,
                        HARGA = item.HARGA,
                        //NAMA_BRG = nmBrg,
                        //typeBrg = typeBrg + ";" + cust,
                        //ulang = ulang
                    });
                }
                //if (pageContent.Count() == 0)
                //{
                //    pageContent.Add(new PromptBarangViewModel
                //    {
                //        //KODE = " ",
                //        //NAMA = " ",
                //        //NAMA2 = " ",
                //        //HARGA = 0,
                //        NAMA_BRG = nmBrg,
                //        typeBrg = typeBrg + ";" + cust,
                //        //ulang = ulang
                //    });
                //}
                var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
                //var totalCount = PromptModel.Count();

                IPagedList<PromptBarangViewModel> pageOrders = new StaticPagedList<PromptBarangViewModel>(pageContent, pagenumber + 1, 10, totalCount.JUMLAH);
                return PartialView("TablePromptBarangPartial", pageOrders);
                //return View(pageOrders);
            }
            catch (Exception ex)
            {
                return JsonErrorMessage("Prompt gagal");
            }
        }

        [Route("manage/ImportDataMP")]
        public async Task<ActionResult> ImportDataMP(string cust, int page, int recordCount, int statBL, int totalData)
        {
            if (!string.IsNullOrEmpty(cust))
            {
                try
                {
                    var arf01 = ErasoftDbContext.ARF01.Where(t => t.CUST.Equals(cust)).FirstOrDefault();
                    if (arf01 != null)
                    {
                        var marketplace = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString().Equals(arf01.NAMA)).FirstOrDefault();
                        if (marketplace != null)
                        {
                            //add by Tri 5 jun 2020, hapus data lama sebelum tarik ulang data
                            if (totalData == 0)
                            {
                                EDB.ExecuteSQL("CString", CommandType.Text, "DELETE FROM TEMP_BRG_MP WHERE CUST = '" + cust + "'");
                            }
                            //end add by Tri 5 jun 2020, hapus data lama sebelum tarik ulang data
                            var retBarang = new SyncBarangViewModel
                            {
                                Recursive = false,
                                Page = page + 1,
                                RecordCount = recordCount,
                                Stf02 = new STF02(),
                                TempBrg = new TEMP_BRG_MP(),
                                BLProductActive = statBL,
                                totalData = totalData//add 18 Juli 2019, show total record
                            };
                            //int recordCount = 0;
                            switch (marketplace.NamaMarket.ToUpper())
                            {
                                case "LAZADA":
                                    if (string.IsNullOrEmpty(arf01.TOKEN))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        var lzdApi = new LazadaController();
                                        var resultLzd = lzdApi.GetBrgLazada(cust, arf01.TOKEN, page, recordCount, totalData);
                                        retBarang.exception = resultLzd.exception;
                                        retBarang.totalData = resultLzd.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultLzd.status == 1)
                                        //{
                                        //if (!string.IsNullOrEmpty(resultLzd.message))
                                        if (resultLzd.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultLzd.recordCount;
                                            retBarang.Recursive = true;
                                            //return Json(retBarang, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultLzd.recordCount;
                                            //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                            //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                            //return PartialView("TableUploadBarangPartial", retBarang);
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultLzd.recordCount;
                                        //    //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                        //    //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                        //    //return PartialView("TableUploadBarangPartial", retBarang);
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page
                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                        //var nextPageLzd = true;
                                        //while (nextPageLzd)
                                        //{
                                        //    if (resultLzd.status == 1)
                                        //    {
                                        //        if (!string.IsNullOrEmpty(resultLzd.message))
                                        //        {
                                        //            recordCount += resultLzd.recordCount;
                                        //            resultLzd = lzdApi.GetBrgLazada(cust, arf01.TOKEN, Convert.ToInt32(resultLzd.message), recordCount);
                                        //        }
                                        //        else
                                        //        {
                                        //            nextPageLzd = false;
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        nextPageLzd = false;
                                        //    }
                                        //}
                                    }
                                case "BUKALAPAK":
                                    var blApi = new BukaLapakController();
                                    if (string.IsNullOrEmpty(arf01.TOKEN))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        var result = blApi.getListProduct(cust, arf01.API_KEY, arf01.TOKEN, page + 1, (statBL == 1 ? true : false), recordCount, totalData);
                                        retBarang.exception = result.exception;
                                        retBarang.totalData = result.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (result.status == 1)
                                        //{
                                        //if (!string.IsNullOrEmpty(result.message))
                                        if (result.nextPage == 1)
                                        {
                                            if (result.message == "MOVE_TO_INACTIVE_PRODUCTS")//finish getting active product, move to inactive
                                            {
                                                retBarang.BLProductActive = 0;
                                                if (statBL == 1)
                                                    retBarang.Page = 0;
                                            }
                                            //else
                                            //{
                                            retBarang.RecordCount = result.recordCount;
                                            //}
                                            retBarang.Recursive = true;
                                            //return Json(retBarang, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = result.recordCount;
                                            //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                            //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                            //return PartialView("TableUploadBarangPartial", retBarang);
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = result.recordCount;
                                        //    //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                        //    //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                        //    //return PartialView("TableUploadBarangPartial", retBarang);
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page
                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                        //var nextPage = true;
                                        //while (nextPage)
                                        //{
                                        //    if (result.status == 1)
                                        //    {
                                        //        if (!string.IsNullOrEmpty(result.message))
                                        //        {
                                        //            result = blApi.getListProduct(cust, arf01.API_KEY, arf01.TOKEN, Convert.ToInt32(result.message), true);
                                        //        }
                                        //        else
                                        //        {
                                        //            nextPage = false;
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        nextPage = false;
                                        //    }
                                        //}

                                        //result = blApi.getListProduct(cust, arf01.API_KEY, arf01.TOKEN, 1, false);
                                        //nextPage = true;
                                        //while (nextPage)
                                        //{
                                        //    if (result.status == 1)
                                        //    {
                                        //        if (!string.IsNullOrEmpty(result.message))
                                        //        {
                                        //            result = blApi.getListProduct(cust, arf01.API_KEY, arf01.TOKEN, Convert.ToInt32(result.message), false);
                                        //        }
                                        //        else
                                        //        {
                                        //            nextPage = false;
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        nextPage = false;
                                        //    }
                                        //}
                                    }
                                case "BLIBLI":
                                    var BliApi = new BlibliController();
                                    if (string.IsNullOrEmpty(arf01.TOKEN) && arf01.KD_ANALISA != "2")
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        BlibliController.BlibliAPIData data = new BlibliController.BlibliAPIData()
                                        {
                                            API_client_username = arf01.API_CLIENT_U,
                                            API_client_password = arf01.API_CLIENT_P,
                                            API_secret_key = arf01.API_KEY,
                                            mta_username_email_merchant = arf01.EMAIL,
                                            mta_password_password_merchant = arf01.PASSWORD,
                                            merchant_code = arf01.Sort1_Cust,
                                            token = arf01.TOKEN,
                                            idmarket = arf01.RecNum.Value,
                                            versiToken = arf01.KD_ANALISA
                                        };
                                        var resultBli = BliApi.getProduct(data, "", page, arf01.CUST, recordCount, totalData);
                                        retBarang.exception = resultBli.exception;
                                        retBarang.totalData = resultBli.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultBli.status == 1)
                                        //{
                                        //if (!string.IsNullOrEmpty(resultBli.message))
                                        if (resultBli.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultBli.recordCount;
                                            retBarang.Recursive = true;
                                            //return Json(retBarang, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultBli.recordCount;
                                            //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                            //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                            //return PartialView("TableUploadBarangPartial", retBarang);
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultBli.recordCount;
                                        //    //retBarang.ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                                        //    //retBarang.ListMarket = ErasoftDbContext.ARF01.ToList();
                                        //    //return PartialView("TableUploadBarangPartial", retBarang);
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page
                                        return Json(retBarang, JsonRequestBehavior.AllowGet);

                                        //var nextPageBli = true;
                                        //while (nextPageBli)
                                        //{
                                        //    if (resultBli.status == 1)
                                        //    {
                                        //        if (!string.IsNullOrEmpty(resultBli.message))
                                        //        {
                                        //            resultBli = BliApi.getProduct(data, "", Convert.ToInt32(resultBli.message), arf01.CUST);
                                        //        }
                                        //        else
                                        //        {
                                        //            nextPageBli = false;
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        nextPageBli = false;
                                        //    }
                                        //}
                                    }

                                case "TOKOPEDIA":
                                    var TokoAPI = new TokopediaController();
                                    if (string.IsNullOrEmpty(arf01.Sort1_Cust))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        TokopediaController.TokopediaAPIData data = new TokopediaController.TokopediaAPIData
                                        {
                                            merchant_code = arf01.Sort1_Cust, //FSID
                                            API_client_password = arf01.API_CLIENT_P, //Client ID
                                            API_client_username = arf01.API_CLIENT_U, //Client Secret
                                            API_secret_key = arf01.API_KEY, //Shop ID 
                                            idmarket = arf01.RecNum.Value,
                                        };
                                        var gettoken = await TokoAPI.GetToken(data);
                                        data.token = gettoken.access_token;

                                        if (string.IsNullOrWhiteSpace(data.token))
                                        {
                                            return JsonErrorMessage("Status Akun tidak aktif.");
                                        }

                                        //var resultShopee = await TokoAPI.GetActiveItemList(data, page, recordCount, arf01.CUST, arf01.NAMA, arf01.RecNum.Value);
                                        var resultTokped = await TokoAPI.GetItemListSemua(data, page, recordCount, arf01.CUST, arf01.NAMA, arf01.RecNum.Value, totalData);
                                        retBarang.exception = resultTokped.exception;
                                        retBarang.totalData = resultTokped.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultTokped.status == 1)
                                        //{
                                        //    if (!string.IsNullOrEmpty(resultTokped.message))
                                        if (resultTokped.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultTokped.recordCount;
                                            retBarang.Recursive = true;
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultTokped.recordCount;
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultTokped.recordCount;
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page
                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                    }

                                case "SHOPEE":
                                    var ShopeeApi = new ShopeeController();
                                    if (string.IsNullOrEmpty(arf01.Sort1_Cust))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                                        {
                                            merchant_code = arf01.Sort1_Cust,

                                        };
                                        var resultShopee = await ShopeeApi.GetItemsList(data, arf01.RecNum.Value, page, recordCount, totalData);
                                        retBarang.exception = resultShopee.exception;
                                        retBarang.totalData = resultShopee.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultShopee.status == 1)
                                        //{
                                        //    if (!string.IsNullOrEmpty(resultShopee.message))
                                        if (resultShopee.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultShopee.recordCount;
                                            retBarang.Recursive = true;
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultShopee.recordCount;
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultShopee.recordCount;
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page

                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                    }
                                case "JD.ID":
                                    var JDApi = new JDIDController();
                                    if (string.IsNullOrEmpty(arf01.TOKEN))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        JDIDAPIData data = new JDIDAPIData()
                                        {
                                            no_cust = arf01.CUST,
                                            accessToken = arf01.TOKEN,
                                            appKey = arf01.API_KEY,
                                            appSecret = arf01.API_CLIENT_U,
                                            email = arf01.EMAIL,
                                            DatabasePathErasoft = dbPathEra
                                        };
                                        var resultJD = JDApi.getListProduct(data, page, cust, recordCount, totalData);
                                        retBarang.exception = resultJD.exception;
                                        retBarang.totalData = resultJD.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultJD.status == 1)
                                        //{
                                        //    if (!string.IsNullOrEmpty(resultJD.message))
                                        if (resultJD.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultJD.recordCount;
                                            retBarang.Recursive = true;
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultJD.recordCount;
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultJD.recordCount;
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page
                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                    }
                                case "82CART":
                                    var v82CartAPI = new EightTwoCartController();
                                    if (arf01.STATUS_API != "1")
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        EightTwoCartController.E2CartAPIData data = new EightTwoCartController.E2CartAPIData()
                                        {
                                            no_cust = arf01.CUST,
                                            account_store = arf01.PERSO,
                                            API_key = arf01.API_KEY,
                                            API_credential = arf01.Sort1_Cust,
                                            API_url = arf01.PERSO,
                                            DatabasePathErasoft = dbPathEra
                                        };

                                        // get category for 82Cart
                                        //var resultCategory82Cart = await v82CartAPI.E2Cart_GetCategoryProduct_Sync(data);
                                        // end get category for 82Cart

                                        // get attribute for 82Cart
                                        //var resultAttribute82Cart = await v82CartAPI.E2Cart_GetAttribute_Sync(data);
                                        // end get attribute for 82Cart

                                        var result82Cart = await v82CartAPI.E2Cart_GetProductsList(data, arf01.RecNum.Value, page, recordCount, totalData);
                                        retBarang.exception = result82Cart.exception;
                                        retBarang.totalData = result82Cart.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultShopee.status == 1)
                                        //{
                                        //    if (!string.IsNullOrEmpty(resultShopee.message))
                                        if (result82Cart.nextPage == 1)
                                        {
                                            retBarang.RecordCount = result82Cart.recordCount;
                                            retBarang.Recursive = true;
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = result82Cart.recordCount;
                                            //var resultCategory82Cart = await v82CartAPI.E2Cart_GetCategoryProduct_2
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultShopee.recordCount;
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page

                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                    }
                                case "SHOPIFY":
                                    var Shopify = new ShopifyController();
                                    if (string.IsNullOrEmpty(arf01.Sort1_Cust))
                                    {
                                        return JsonErrorMessage("Anda belum link marketplace dengan Akun ini.\nSilahkan ikuti langkah-langkah untuk link Akun pada menu Pengaturan > Link > Link ke marketplace");
                                    }
                                    else
                                    {
                                        ShopifyController.ShopifyAPIData data = new ShopifyController.ShopifyAPIData()
                                        {
                                            no_cust = arf01.CUST,
                                            account_store = arf01.PERSO,
                                            API_key = arf01.API_KEY,
                                            API_password = arf01.API_CLIENT_P
                                        };
                                        var resultShopify = await Shopify.Shopify_GetProductList_Sync(data, arf01.RecNum.Value, page + 1, recordCount, totalData);
                                        retBarang.exception = resultShopify.exception;
                                        retBarang.totalData = resultShopify.totalData;
                                        //change 18 juli 2019, error tetap lanjut next page
                                        //if (resultShopee.status == 1)
                                        //{
                                        //    if (!string.IsNullOrEmpty(resultShopee.message))
                                        if (resultShopify.nextPage == 1)
                                        {
                                            retBarang.RecordCount = resultShopify.recordCount;
                                            retBarang.Recursive = true;
                                        }
                                        else
                                        {
                                            retBarang.RecordCount = resultShopify.recordCount;
                                        }
                                        //}
                                        //else
                                        //{
                                        //    retBarang.RecordCount = resultShopee.recordCount;
                                        //}
                                        //end change 18 juli 2019, error tetap lanjut next page

                                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                                    }
                                default:
                                    return JsonErrorMessage("Fasilitas untuk mengambil data dari marketplace ini belum dibuka.");
                            }
                        }
                        else
                        {
                            return JsonErrorMessage("Toko tidak dapat ditemukan.");
                        }

                        //var barangVm = new UploadBarangViewModel()
                        //{
                        //    ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList(),
                        //    ListMarket = ErasoftDbContext.ARF01.ToList(),
                        //    Stf02 = new STF02(),
                        //    TempBrg = new TEMP_BRG_MP(),
                        //};

                        //return PartialView("TableUploadBarangPartial", barangVm);
                    }
                    else
                    {
                        return JsonErrorMessage("Toko tidak dapat ditemukan.");
                    }
                }
                catch (Exception ex)
                {
                    return JsonErrorMessage(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                }

            }
            else
            {
                return JsonErrorMessage("Anda belum memilih Toko");
            }
        }

        public ActionResult ProsesTempExcelAutoCompleteBrg(string cust)
        {
            string username = "EXCEL_SYNC_ITEM";
            var customer = ErasoftDbContext.ARF01.Where(p => p.CUST == cust).SingleOrDefault();
            List<string> listBrgSuccess = new List<string>();
            List<string> listKodeSudahDiproses = new List<string>();
            var dataBrg = ErasoftDbContext.Database.SqlQuery<TEMP_BRG_MP_EXCEL>("SELECT A.*, A.SELLER_SKU AS MO_SKU,A.MEREK AS MO_MEREK, A.CATEGORY AS MO_CATEGORY FROM importexcel..TEMP_BRG_MP_EXCEL A WHERE A.CUST='" + cust + "' AND ISNULL(A.CATEGORY ,'') <> ''").ToList();
            var marketplace = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString().Equals(customer.NAMA)).FirstOrDefault();
            var stf02temp = ErasoftDbContext.STF02.ToList();
            var tempBrgInduktemp = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.IDMARKET == customer.RecNum).ToList();
            var stf02htemp = ErasoftDbContext.STF02H.Where(t => t.IDMARKET == customer.RecNum).ToList();
            var kategori = ErasoftDbContext.STF02E.Where(c => c.LEVEL.Equals("1"));
            var merek = ErasoftDbContext.STF02E.Where(c => c.LEVEL.Equals("2"));
            var offlineId = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToLower().Contains("offline")).FirstOrDefault();
            foreach (var item in dataBrg)
            {
                try
                {
                    if (!listKodeSudahDiproses.Contains(item.SELLER_SKU))
                    {
                        //var barangInDB = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP.ToUpper() : brgBlibli.ToUpper())).FirstOrDefault();
                        #region handle brg induk untuk brg varian
                        if (!string.IsNullOrEmpty(item.KODE_BRG_INDUK))//handle induk dari barang varian
                        {
                            bool createSTF02Induk = true;
                            var brgInduk = stf02temp.Where(b => (b.BRG == null ? "" : b.BRG) == item.KODE_BRG_INDUK).FirstOrDefault();
                            var tempBrgInduk = tempBrgInduktemp.Where(b => (b.BRG_MP == null ? "" : b.BRG_MP) == item.KODE_BRG_INDUK).FirstOrDefault();
                            //var brgInduk = ErasoftDbContext.STF02.Where(b => b.BRG == item.KODE_BRG_INDUK).FirstOrDefault();
                            //var tempBrgInduk = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.BRG_MP == item.KODE_BRG_INDUK).FirstOrDefault();
                            if (brgInduk != null)
                            {
                                var stf02h_induk = stf02htemp.Where(b => (b.BRG == null ? "" : b.BRG) == brgInduk.BRG).FirstOrDefault();
                                //var stf02h_induk = ErasoftDbContext.STF02H.Where(b => b.BRG == brgInduk.BRG && b.IDMARKET == customer.RecNum).FirstOrDefault();
                                if (stf02h_induk == null)
                                {
                                    createSTF02Induk = false;
                                    if (tempBrgInduk != null)
                                    {
                                        var ret1 = AutoSyncBrgInduk(new STF02(), tempBrgInduk, item.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                        //if (ret1.status == 0)
                                        //    barangVm.Errors.Add(item.SELLER_SKU + ";" + ret1.message);
                                    }
                                    else
                                    {
                                        //barangVm.Errors.Add(item.SELLER_SKU + ";Barang Induk tidak ditemukan.");
                                        ////return JsonErrorMessage("Barang Induk tidak ditemukan.");
                                    }

                                }
                            }
                            else
                            {
                                //if (tempBrginDB != null)
                                //{
                                //sinkron brg induk terlebih dahulu
                                var ret2 = AutoSyncBrgInduk(new STF02(), tempBrgInduk, item.KODE_BRG_INDUK, customer, username, createSTF02Induk);
                                //if (ret2.status == 0)
                                //    barangVm.Errors.Add(item.SELLER_SKU + ";" + ret2.message);
                                //}
                                //else
                                //{
                                //    return JsonErrorMessage("Barang ini sudah diproses");
                                //}
                            }
                        }
                        #endregion
                        //var barangInDB = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(item.SELLER_SKU.ToUpper())).FirstOrDefault();
                        var barangInDB = stf02temp.Where(b => (b.BRG == null ? "" : b.BRG).ToUpper() == item.SELLER_SKU.ToUpper()).FirstOrDefault();
                        if (barangInDB != null)
                        {
                            //var brgMp = ErasoftDbContext.STF02H.Where(b => b.BRG.ToUpper().Equals(barangInDB.BRG.ToUpper()) && b.IDMARKET == customer.RecNum).FirstOrDefault();
                            var brgMp = stf02htemp.Where(b => (b.BRG == null ? "" : b.BRG).ToUpper() == barangInDB.BRG.ToUpper()).FirstOrDefault();
                            if (brgMp != null)
                            {
                                if (!string.IsNullOrEmpty(brgMp.BRG_MP))
                                {
                                    //barangVm.Errors.Add(brgMp.BRG + ";Barang ini sudah link dengan barang lain di marketplace");
                                }
                                else
                                {
                                    brgMp.HJUAL = item.HJUAL;
                                    brgMp.DISPLAY = item.DISPLAY;
                                    brgMp.BRG_MP = item.BRG_MP;
                                    brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                                    brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                                    brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                                    brgMp.PICKUP_POINT = item.PICKUP_POINT;
                                    #region attribute mp
                                    brgMp.ACODE_1 = item.ACODE_1;
                                    brgMp.ANAME_1 = item.ANAME_1;
                                    if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                    {
                                        brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                                    }
                                    else
                                    {
                                        brgMp.AVALUE_1 = item.AVALUE_1;
                                    }
                                    brgMp.ACODE_2 = item.ACODE_2;
                                    brgMp.ANAME_2 = item.ANAME_2;
                                    brgMp.AVALUE_2 = item.AVALUE_2;
                                    brgMp.ACODE_3 = item.ACODE_3;
                                    brgMp.ANAME_3 = item.ANAME_3;
                                    brgMp.AVALUE_3 = item.AVALUE_3;
                                    brgMp.ACODE_4 = item.ACODE_4;
                                    brgMp.ANAME_4 = item.ANAME_4;
                                    brgMp.AVALUE_4 = item.AVALUE_4;
                                    brgMp.ACODE_5 = item.ACODE_5;
                                    brgMp.ANAME_5 = item.ANAME_5;
                                    brgMp.AVALUE_5 = item.AVALUE_5;
                                    brgMp.ACODE_6 = item.ACODE_6;
                                    brgMp.ANAME_6 = item.ANAME_6;
                                    brgMp.AVALUE_6 = item.AVALUE_6;
                                    brgMp.ACODE_7 = item.ACODE_7;
                                    brgMp.ANAME_7 = item.ANAME_7;
                                    brgMp.AVALUE_7 = item.AVALUE_7;
                                    brgMp.ACODE_8 = item.ACODE_8;
                                    brgMp.ANAME_8 = item.ANAME_8;
                                    brgMp.AVALUE_8 = item.AVALUE_8;
                                    brgMp.ACODE_9 = item.ACODE_9;
                                    brgMp.ANAME_9 = item.ANAME_9;
                                    brgMp.AVALUE_9 = item.AVALUE_9;
                                    brgMp.ACODE_10 = item.ACODE_10;
                                    brgMp.ANAME_10 = item.ANAME_10;
                                    brgMp.AVALUE_10 = item.AVALUE_10;
                                    brgMp.ACODE_11 = item.ACODE_11;
                                    brgMp.ANAME_11 = item.ANAME_11;
                                    brgMp.AVALUE_11 = item.AVALUE_11;
                                    brgMp.ACODE_12 = item.ACODE_12;
                                    brgMp.ANAME_12 = item.ANAME_12;
                                    brgMp.AVALUE_12 = item.AVALUE_12;
                                    brgMp.ACODE_13 = item.ACODE_13;
                                    brgMp.ANAME_13 = item.ANAME_13;
                                    brgMp.AVALUE_13 = item.AVALUE_13;
                                    brgMp.ACODE_14 = item.ACODE_14;
                                    brgMp.ANAME_14 = item.ANAME_14;
                                    brgMp.AVALUE_14 = item.AVALUE_14;
                                    brgMp.ACODE_15 = item.ACODE_15;
                                    brgMp.ANAME_15 = item.ANAME_15;
                                    brgMp.AVALUE_15 = item.AVALUE_15;
                                    brgMp.ACODE_16 = item.ACODE_16;
                                    brgMp.ANAME_16 = item.ANAME_16;
                                    brgMp.AVALUE_16 = item.AVALUE_16;
                                    brgMp.ACODE_17 = item.ACODE_17;
                                    brgMp.ANAME_17 = item.ANAME_17;
                                    brgMp.AVALUE_17 = item.AVALUE_17;
                                    brgMp.ACODE_18 = item.ACODE_18;
                                    brgMp.ANAME_18 = item.ANAME_18;
                                    brgMp.AVALUE_18 = item.AVALUE_18;
                                    brgMp.ACODE_19 = item.ACODE_19;
                                    brgMp.ANAME_19 = item.ANAME_19;
                                    brgMp.AVALUE_19 = item.AVALUE_19;
                                    brgMp.ACODE_20 = item.ACODE_20;
                                    brgMp.ANAME_20 = item.ANAME_20;
                                    brgMp.AVALUE_20 = item.AVALUE_20;
                                    brgMp.ACODE_21 = item.ACODE_21;
                                    brgMp.ANAME_21 = item.ANAME_21;
                                    brgMp.AVALUE_21 = item.AVALUE_21;
                                    brgMp.ACODE_22 = item.ACODE_22;
                                    brgMp.ANAME_22 = item.ANAME_22;
                                    brgMp.AVALUE_22 = item.AVALUE_22;
                                    brgMp.ACODE_23 = item.ACODE_23;
                                    brgMp.ANAME_23 = item.ANAME_23;
                                    brgMp.AVALUE_23 = item.AVALUE_23;
                                    brgMp.ACODE_24 = item.ACODE_24;
                                    brgMp.ANAME_24 = item.ANAME_24;
                                    brgMp.AVALUE_24 = item.AVALUE_24;
                                    brgMp.ACODE_25 = item.ACODE_25;
                                    brgMp.ANAME_25 = item.ANAME_25;
                                    brgMp.AVALUE_25 = item.AVALUE_25;
                                    brgMp.ACODE_26 = item.ACODE_26;
                                    brgMp.ANAME_26 = item.ANAME_26;
                                    brgMp.AVALUE_26 = item.AVALUE_26;
                                    brgMp.ACODE_27 = item.ACODE_27;
                                    brgMp.ANAME_27 = item.ANAME_27;
                                    brgMp.AVALUE_27 = item.AVALUE_27;
                                    brgMp.ACODE_28 = item.ACODE_28;
                                    brgMp.ANAME_28 = item.ANAME_28;
                                    brgMp.AVALUE_28 = item.AVALUE_28;
                                    brgMp.ACODE_29 = item.ACODE_29;
                                    brgMp.ANAME_29 = item.ANAME_29;
                                    brgMp.AVALUE_29 = item.AVALUE_29;
                                    brgMp.ACODE_30 = item.ACODE_30;
                                    brgMp.ANAME_30 = item.ANAME_30;
                                    brgMp.AVALUE_30 = item.AVALUE_30;
                                    brgMp.ACODE_31 = item.ACODE_31;
                                    brgMp.ANAME_31 = item.ANAME_31;
                                    brgMp.AVALUE_31 = item.AVALUE_31;
                                    brgMp.ACODE_32 = item.ACODE_32;
                                    brgMp.ANAME_32 = item.ANAME_32;
                                    brgMp.AVALUE_32 = item.AVALUE_32;
                                    brgMp.ACODE_33 = item.ACODE_33;
                                    brgMp.ANAME_33 = item.ANAME_33;
                                    brgMp.AVALUE_33 = item.AVALUE_33;
                                    brgMp.ACODE_34 = item.ACODE_34;
                                    brgMp.ANAME_34 = item.ANAME_34;
                                    brgMp.AVALUE_34 = item.AVALUE_34;
                                    brgMp.ACODE_35 = item.ACODE_35;
                                    brgMp.ANAME_35 = item.ANAME_35;
                                    brgMp.AVALUE_35 = item.AVALUE_35;
                                    brgMp.ACODE_36 = item.ACODE_36;
                                    brgMp.ANAME_36 = item.ANAME_36;
                                    brgMp.AVALUE_36 = item.AVALUE_36;
                                    brgMp.ACODE_37 = item.ACODE_37;
                                    brgMp.ANAME_37 = item.ANAME_37;
                                    brgMp.AVALUE_37 = item.AVALUE_37;
                                    brgMp.ACODE_38 = item.ACODE_38;
                                    brgMp.ANAME_38 = item.ANAME_38;
                                    brgMp.AVALUE_38 = item.AVALUE_38;
                                    brgMp.ACODE_39 = item.ACODE_39;
                                    brgMp.ANAME_39 = item.ANAME_39;
                                    brgMp.AVALUE_39 = item.AVALUE_39;
                                    brgMp.ACODE_40 = item.ACODE_40;
                                    brgMp.ANAME_40 = item.ANAME_40;
                                    brgMp.AVALUE_40 = item.AVALUE_40;
                                    brgMp.ACODE_41 = item.ACODE_41;
                                    brgMp.ANAME_41 = item.ANAME_41;
                                    brgMp.AVALUE_41 = item.AVALUE_41;
                                    brgMp.ACODE_42 = item.ACODE_42;
                                    brgMp.ANAME_42 = item.ANAME_42;
                                    brgMp.AVALUE_42 = item.AVALUE_42;
                                    brgMp.ACODE_43 = item.ACODE_43;
                                    brgMp.ANAME_43 = item.ANAME_43;
                                    brgMp.AVALUE_43 = item.AVALUE_43;
                                    brgMp.ACODE_44 = item.ACODE_44;
                                    brgMp.ANAME_44 = item.ANAME_44;
                                    brgMp.AVALUE_44 = item.AVALUE_44;
                                    brgMp.ACODE_45 = item.ACODE_45;
                                    brgMp.ANAME_45 = item.ANAME_45;
                                    brgMp.AVALUE_45 = item.AVALUE_45;
                                    brgMp.ACODE_46 = item.ACODE_46;
                                    brgMp.ANAME_46 = item.ANAME_46;
                                    brgMp.AVALUE_46 = item.AVALUE_46;
                                    brgMp.ACODE_47 = item.ACODE_47;
                                    brgMp.ANAME_47 = item.ANAME_47;
                                    brgMp.AVALUE_47 = item.AVALUE_47;
                                    brgMp.ACODE_48 = item.ACODE_48;
                                    brgMp.ANAME_48 = item.ANAME_48;
                                    brgMp.AVALUE_48 = item.AVALUE_48;
                                    brgMp.ACODE_49 = item.ACODE_49;
                                    brgMp.ANAME_49 = item.ANAME_49;
                                    brgMp.AVALUE_49 = item.AVALUE_49;
                                    brgMp.ACODE_50 = item.ACODE_50;
                                    brgMp.ANAME_50 = item.ANAME_50;
                                    brgMp.AVALUE_50 = item.AVALUE_50;
                                    #endregion
                                    //add by calvin 11 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                    brgMp.AVALUE_39 = HttpUtility.HtmlEncode(item.AVALUE_39);
                                    brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                    brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                    brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                    if (customer.NAMA == "7")
                                    {
                                        //merek
                                        var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                        if (getKodeMerk != null)
                                        {
                                            brgMp.ANAME_38 = item.MEREK;
                                            brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                        }
                                    }
                                    ErasoftDbContext.SaveChanges();
                                    listBrgSuccess.Add(item.BRG_MP);
                                    listKodeSudahDiproses.Add(item.SELLER_SKU);
                                    //add 25 April 2019, create stf02h untuk mp offline
                                    if (offlineId != null)
                                    {
                                        CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                    }
                                    //end add 25 April 2019, create stf02h untuk mp offline
                                }
                            }
                            else
                            {
                                brgMp = new STF02H();
                                //change stf02h brg = seller sku
                                //brgMp.BRG = string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP : brgBlibli;
                                brgMp.BRG = item.SELLER_SKU;
                                //end change stf02h brg = seller sku
                                brgMp.BRG_MP = item.BRG_MP;
                                brgMp.HJUAL = item.HJUAL;
                                brgMp.DISPLAY = item.DISPLAY;
                                brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                                brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                                brgMp.IDMARKET = item.IDMARKET;
                                brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                                brgMp.PICKUP_POINT = item.PICKUP_POINT;
                                //var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                                //if (customer != null)
                                brgMp.AKUNMARKET = customer.PERSO;
                                //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                                brgMp.USERNAME = username;
                                #region attribute mp
                                brgMp.ACODE_1 = item.ACODE_1;
                                brgMp.ANAME_1 = item.ANAME_1;
                                if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                                {
                                    brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                                }
                                else
                                {
                                    brgMp.AVALUE_1 = item.AVALUE_1;
                                }
                                brgMp.ACODE_2 = item.ACODE_2;
                                brgMp.ANAME_2 = item.ANAME_2;
                                brgMp.AVALUE_2 = item.AVALUE_2;
                                brgMp.ACODE_3 = item.ACODE_3;
                                brgMp.ANAME_3 = item.ANAME_3;
                                brgMp.AVALUE_3 = item.AVALUE_3;
                                brgMp.ACODE_4 = item.ACODE_4;
                                brgMp.ANAME_4 = item.ANAME_4;
                                brgMp.AVALUE_4 = item.AVALUE_4;
                                brgMp.ACODE_5 = item.ACODE_5;
                                brgMp.ANAME_5 = item.ANAME_5;
                                brgMp.AVALUE_5 = item.AVALUE_5;
                                brgMp.ACODE_6 = item.ACODE_6;
                                brgMp.ANAME_6 = item.ANAME_6;
                                brgMp.AVALUE_6 = item.AVALUE_6;
                                brgMp.ACODE_7 = item.ACODE_7;
                                brgMp.ANAME_7 = item.ANAME_7;
                                brgMp.AVALUE_7 = item.AVALUE_7;
                                brgMp.ACODE_8 = item.ACODE_8;
                                brgMp.ANAME_8 = item.ANAME_8;
                                brgMp.AVALUE_8 = item.AVALUE_8;
                                brgMp.ACODE_9 = item.ACODE_9;
                                brgMp.ANAME_9 = item.ANAME_9;
                                brgMp.AVALUE_9 = item.AVALUE_9;
                                brgMp.ACODE_10 = item.ACODE_10;
                                brgMp.ANAME_10 = item.ANAME_10;
                                brgMp.AVALUE_10 = item.AVALUE_10;
                                brgMp.ACODE_11 = item.ACODE_11;
                                brgMp.ANAME_11 = item.ANAME_11;
                                brgMp.AVALUE_11 = item.AVALUE_11;
                                brgMp.ACODE_12 = item.ACODE_12;
                                brgMp.ANAME_12 = item.ANAME_12;
                                brgMp.AVALUE_12 = item.AVALUE_12;
                                brgMp.ACODE_13 = item.ACODE_13;
                                brgMp.ANAME_13 = item.ANAME_13;
                                brgMp.AVALUE_13 = item.AVALUE_13;
                                brgMp.ACODE_14 = item.ACODE_14;
                                brgMp.ANAME_14 = item.ANAME_14;
                                brgMp.AVALUE_14 = item.AVALUE_14;
                                brgMp.ACODE_15 = item.ACODE_15;
                                brgMp.ANAME_15 = item.ANAME_15;
                                brgMp.AVALUE_15 = item.AVALUE_15;
                                brgMp.ACODE_16 = item.ACODE_16;
                                brgMp.ANAME_16 = item.ANAME_16;
                                brgMp.AVALUE_16 = item.AVALUE_16;
                                brgMp.ACODE_17 = item.ACODE_17;
                                brgMp.ANAME_17 = item.ANAME_17;
                                brgMp.AVALUE_17 = item.AVALUE_17;
                                brgMp.ACODE_18 = item.ACODE_18;
                                brgMp.ANAME_18 = item.ANAME_18;
                                brgMp.AVALUE_18 = item.AVALUE_18;
                                brgMp.ACODE_19 = item.ACODE_19;
                                brgMp.ANAME_19 = item.ANAME_19;
                                brgMp.AVALUE_19 = item.AVALUE_19;
                                brgMp.ACODE_20 = item.ACODE_20;
                                brgMp.ANAME_20 = item.ANAME_20;
                                brgMp.AVALUE_20 = item.AVALUE_20;
                                brgMp.ACODE_21 = item.ACODE_21;
                                brgMp.ANAME_21 = item.ANAME_21;
                                brgMp.AVALUE_21 = item.AVALUE_21;
                                brgMp.ACODE_22 = item.ACODE_22;
                                brgMp.ANAME_22 = item.ANAME_22;
                                brgMp.AVALUE_22 = item.AVALUE_22;
                                brgMp.ACODE_23 = item.ACODE_23;
                                brgMp.ANAME_23 = item.ANAME_23;
                                brgMp.AVALUE_23 = item.AVALUE_23;
                                brgMp.ACODE_24 = item.ACODE_24;
                                brgMp.ANAME_24 = item.ANAME_24;
                                brgMp.AVALUE_24 = item.AVALUE_24;
                                brgMp.ACODE_25 = item.ACODE_25;
                                brgMp.ANAME_25 = item.ANAME_25;
                                brgMp.AVALUE_25 = item.AVALUE_25;
                                brgMp.ACODE_26 = item.ACODE_26;
                                brgMp.ANAME_26 = item.ANAME_26;
                                brgMp.AVALUE_26 = item.AVALUE_26;
                                brgMp.ACODE_27 = item.ACODE_27;
                                brgMp.ANAME_27 = item.ANAME_27;
                                brgMp.AVALUE_27 = item.AVALUE_27;
                                brgMp.ACODE_28 = item.ACODE_28;
                                brgMp.ANAME_28 = item.ANAME_28;
                                brgMp.AVALUE_28 = item.AVALUE_28;
                                brgMp.ACODE_29 = item.ACODE_29;
                                brgMp.ANAME_29 = item.ANAME_29;
                                brgMp.AVALUE_29 = item.AVALUE_29;
                                brgMp.ACODE_30 = item.ACODE_30;
                                brgMp.ANAME_30 = item.ANAME_30;
                                brgMp.AVALUE_30 = item.AVALUE_30;
                                brgMp.ACODE_31 = item.ACODE_31;
                                brgMp.ANAME_31 = item.ANAME_31;
                                brgMp.AVALUE_31 = item.AVALUE_31;
                                brgMp.ACODE_32 = item.ACODE_32;
                                brgMp.ANAME_32 = item.ANAME_32;
                                brgMp.AVALUE_32 = item.AVALUE_32;
                                brgMp.ACODE_33 = item.ACODE_33;
                                brgMp.ANAME_33 = item.ANAME_33;
                                brgMp.AVALUE_33 = item.AVALUE_33;
                                brgMp.ACODE_34 = item.ACODE_34;
                                brgMp.ANAME_34 = item.ANAME_34;
                                brgMp.AVALUE_34 = item.AVALUE_34;
                                brgMp.ACODE_35 = item.ACODE_35;
                                brgMp.ANAME_35 = item.ANAME_35;
                                brgMp.AVALUE_35 = item.AVALUE_35;
                                brgMp.ACODE_36 = item.ACODE_36;
                                brgMp.ANAME_36 = item.ANAME_36;
                                brgMp.AVALUE_36 = item.AVALUE_36;
                                brgMp.ACODE_37 = item.ACODE_37;
                                brgMp.ANAME_37 = item.ANAME_37;
                                brgMp.AVALUE_37 = item.AVALUE_37;
                                brgMp.ACODE_38 = item.ACODE_38;
                                brgMp.ANAME_38 = item.ANAME_38;
                                brgMp.AVALUE_38 = item.AVALUE_38;
                                brgMp.ACODE_39 = item.ACODE_39;
                                brgMp.ANAME_39 = item.ANAME_39;
                                brgMp.AVALUE_39 = item.AVALUE_39;
                                brgMp.ACODE_40 = item.ACODE_40;
                                brgMp.ANAME_40 = item.ANAME_40;
                                brgMp.AVALUE_40 = item.AVALUE_40;
                                brgMp.ACODE_41 = item.ACODE_41;
                                brgMp.ANAME_41 = item.ANAME_41;
                                brgMp.AVALUE_41 = item.AVALUE_41;
                                brgMp.ACODE_42 = item.ACODE_42;
                                brgMp.ANAME_42 = item.ANAME_42;
                                brgMp.AVALUE_42 = item.AVALUE_42;
                                brgMp.ACODE_43 = item.ACODE_43;
                                brgMp.ANAME_43 = item.ANAME_43;
                                brgMp.AVALUE_43 = item.AVALUE_43;
                                brgMp.ACODE_44 = item.ACODE_44;
                                brgMp.ANAME_44 = item.ANAME_44;
                                brgMp.AVALUE_44 = item.AVALUE_44;
                                brgMp.ACODE_45 = item.ACODE_45;
                                brgMp.ANAME_45 = item.ANAME_45;
                                brgMp.AVALUE_45 = item.AVALUE_45;
                                brgMp.ACODE_46 = item.ACODE_46;
                                brgMp.ANAME_46 = item.ANAME_46;
                                brgMp.AVALUE_46 = item.AVALUE_46;
                                brgMp.ACODE_47 = item.ACODE_47;
                                brgMp.ANAME_47 = item.ANAME_47;
                                brgMp.AVALUE_47 = item.AVALUE_47;
                                brgMp.ACODE_48 = item.ACODE_48;
                                brgMp.ANAME_48 = item.ANAME_48;
                                brgMp.AVALUE_48 = item.AVALUE_48;
                                brgMp.ACODE_49 = item.ACODE_49;
                                brgMp.ANAME_49 = item.ANAME_49;
                                brgMp.AVALUE_49 = item.AVALUE_49;
                                brgMp.ACODE_50 = item.ACODE_50;
                                brgMp.ANAME_50 = item.ANAME_50;
                                brgMp.AVALUE_50 = item.AVALUE_50;
                                #endregion
                                //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                                brgMp.AVALUE_39 = HttpUtility.HtmlEncode(item.AVALUE_39);
                                brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                                brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                                brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                                if (customer.NAMA == "7")
                                {
                                    //merek
                                    var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                    if (getKodeMerk != null)
                                    {
                                        brgMp.ANAME_38 = item.MEREK;
                                        brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                    }
                                }
                                ErasoftDbContext.STF02H.Add(brgMp);
                                ErasoftDbContext.SaveChanges();
                                listBrgSuccess.Add(item.BRG_MP);
                                listKodeSudahDiproses.Add(item.SELLER_SKU);

                                //add 25 April 2019, create stf02h untuk mp offline
                                if (offlineId != null)
                                {
                                    CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                                }
                                //end add 25 April 2019, create stf02h untuk mp offline
                            }
                        }
                        else
                        {
                            var stf02 = new STF02
                            {
                                HPP = 0,
                                HBELI = 0,
                                HBESAR = 0,
                                HKECIL = 0,
                                //TYPE = "3",
                                KLINK = "1",
                                HP_STD = 0,
                                QPROD = 0,
                                ISI3 = 3,
                                ISI4 = 1,
                                TOLERANSI = 0,
                                H_STN_3 = 0,
                                H_STN_4 = 0,
                                SS = 0,
                                METODA_HPP_PER_SN = false,
                                HNA_PPN = 0,
                                LABA = 0,
                                DEFAULT_STN_HRG_JUAL = 0,
                                DEFAULT_STN_JUAL = 0,
                                ISI = 1,
                                Metoda = "1",
                                Tgl_Input = DateTime.Now,
                                TGL_KLR = DateTime.Now,
                                MAXI = 100,
                                MINI = 1,
                                QSALES = 0,
                                DISPLAY_MARKET = false,
                            };
                            //change stf02 brg = seller sku
                            //stf02.BRG = string.IsNullOrEmpty(brgBlibli) ? item.BRG_MP : brgBlibli;
                            stf02.BRG = item.SELLER_SKU;
                            //end change stf02 brg = seller sku
                            //var marketplace = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString().Equals(customer.NAMA)).FirstOrDefault();
                            //if (marketplace != null)
                            //{
                            //    if (marketplace.NamaMarket.ToUpper().Equals("BLIBLI"))
                            //    {
                            //        var kdBrgBlibli = item.BRG_MP.Split(';');
                            //        stf02.BRG = "";
                            //        var kdBrg = kdBrgBlibli[0].Split('-');
                            //        for(int i =1; i < kdBrg.Length; i++)
                            //        {
                            //            stf02.BRG += kdBrg[i] + "-";
                            //        }
                            //        stf02.BRG = stf02.BRG.Substring(0, stf02.BRG.Length - 1);
                            //    }
                            //}
                            stf02.NAMA = item.NAMA;
                            stf02.NAMA2 = item.NAMA2;
                            stf02.NAMA3 = item.NAMA3;
                            stf02.HJUAL = item.HJUAL;
                            stf02.STN = "pcs";
                            stf02.STN2 = "pcs";
                            stf02.BERAT = item.BERAT;
                            stf02.TINGGI = item.TINGGI;
                            stf02.LEBAR = item.LEBAR;
                            stf02.PANJANG = item.PANJANG;
                            stf02.Sort1 = item.MO_CATEGORY;
                            stf02.Sort2 = item.MO_MEREK;
                            stf02.KET_SORT1 = kategori.FirstOrDefault(p => p.KODE == item.MO_CATEGORY)?.KET;
                            stf02.KET_SORT2 = merek.FirstOrDefault(p => p.KODE == item.MO_MEREK)?.KET;
                            stf02.Deskripsi = (string.IsNullOrEmpty(item.Deskripsi) ? "-" : item.Deskripsi);

                            //add 25 Jan 2019, handle brg induk & varian
                            stf02.TYPE = item.TYPE;
                            if (string.IsNullOrEmpty(stf02.TYPE))
                            {
                                if (string.IsNullOrEmpty(item.KODE_BRG_INDUK))
                                {
                                    stf02.TYPE = "3";
                                }
                                else
                                {
                                    stf02.TYPE = "4";
                                }
                            }
                            stf02.PART = item.KODE_BRG_INDUK;
                            //end 25 Jan 2019, handle brg induk & varian

                            if (!string.IsNullOrEmpty(item.IMAGE))
                            {
                                stf02.LINK_GAMBAR_1 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE, "uploaded-image").data.link_l;
                            }
                            if (!string.IsNullOrEmpty(item.IMAGE2))
                            {
                                stf02.LINK_GAMBAR_2 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE2, "uploaded-image").data.link_l;
                            }
                            if (!string.IsNullOrEmpty(item.IMAGE3))
                            {
                                stf02.LINK_GAMBAR_3 = UploadImageService.UploadSingleImageToImgurFromUrl(item.IMAGE3, "uploaded-image").data.link_l;
                            }

                            ErasoftDbContext.STF02.Add(stf02);
                            var brgMp = new STF02H();

                            //brgMp.BRG = item.BRG_MP;
                            brgMp.BRG = stf02.BRG;
                            brgMp.BRG_MP = item.BRG_MP;
                            brgMp.HJUAL = item.HJUAL;
                            brgMp.DISPLAY = item.DISPLAY;
                            brgMp.CATEGORY_CODE = item.CATEGORY_CODE;
                            brgMp.CATEGORY_NAME = item.CATEGORY_NAME;
                            brgMp.IDMARKET = item.IDMARKET;
                            brgMp.DeliveryTempElevenia = item.DeliveryTempElevenia;
                            brgMp.PICKUP_POINT = item.PICKUP_POINT;
                            //var customer = ErasoftDbContext.ARF01.Where(c => c.CUST.ToUpper().Equals(data.TempBrg.CUST.ToUpper())).FirstOrDefault();
                            //if (customer != null)
                            brgMp.AKUNMARKET = customer.PERSO;
                            //brgMp.USERNAME = "SYSTEM_UPLOAD_BRG";
                            brgMp.USERNAME = username;
                            #region attribute mp
                            brgMp.ACODE_1 = item.ACODE_1;
                            brgMp.ANAME_1 = item.ANAME_1;
                            if (brgMp.ACODE_1 == "short_description" && brgMp.ANAME_1 == "Short Description")
                            {
                                brgMp.AVALUE_1 = HttpUtility.HtmlDecode(item.AVALUE_1);
                            }
                            else
                            {
                                brgMp.AVALUE_1 = item.AVALUE_1;
                            }
                            brgMp.ACODE_2 = item.ACODE_2;
                            brgMp.ANAME_2 = item.ANAME_2;
                            brgMp.AVALUE_2 = item.AVALUE_2;
                            brgMp.ACODE_3 = item.ACODE_3;
                            brgMp.ANAME_3 = item.ANAME_3;
                            brgMp.AVALUE_3 = item.AVALUE_3;
                            brgMp.ACODE_4 = item.ACODE_4;
                            brgMp.ANAME_4 = item.ANAME_4;
                            brgMp.AVALUE_4 = item.AVALUE_4;
                            brgMp.ACODE_5 = item.ACODE_5;
                            brgMp.ANAME_5 = item.ANAME_5;
                            brgMp.AVALUE_5 = item.AVALUE_5;
                            brgMp.ACODE_6 = item.ACODE_6;
                            brgMp.ANAME_6 = item.ANAME_6;
                            brgMp.AVALUE_6 = item.AVALUE_6;
                            brgMp.ACODE_7 = item.ACODE_7;
                            brgMp.ANAME_7 = item.ANAME_7;
                            brgMp.AVALUE_7 = item.AVALUE_7;
                            brgMp.ACODE_8 = item.ACODE_8;
                            brgMp.ANAME_8 = item.ANAME_8;
                            brgMp.AVALUE_8 = item.AVALUE_8;
                            brgMp.ACODE_9 = item.ACODE_9;
                            brgMp.ANAME_9 = item.ANAME_9;
                            brgMp.AVALUE_9 = item.AVALUE_9;
                            brgMp.ACODE_10 = item.ACODE_10;
                            brgMp.ANAME_10 = item.ANAME_10;
                            brgMp.AVALUE_10 = item.AVALUE_10;
                            brgMp.ACODE_11 = item.ACODE_11;
                            brgMp.ANAME_11 = item.ANAME_11;
                            brgMp.AVALUE_11 = item.AVALUE_11;
                            brgMp.ACODE_12 = item.ACODE_12;
                            brgMp.ANAME_12 = item.ANAME_12;
                            brgMp.AVALUE_12 = item.AVALUE_12;
                            brgMp.ACODE_13 = item.ACODE_13;
                            brgMp.ANAME_13 = item.ANAME_13;
                            brgMp.AVALUE_13 = item.AVALUE_13;
                            brgMp.ACODE_14 = item.ACODE_14;
                            brgMp.ANAME_14 = item.ANAME_14;
                            brgMp.AVALUE_14 = item.AVALUE_14;
                            brgMp.ACODE_15 = item.ACODE_15;
                            brgMp.ANAME_15 = item.ANAME_15;
                            brgMp.AVALUE_15 = item.AVALUE_15;
                            brgMp.ACODE_16 = item.ACODE_16;
                            brgMp.ANAME_16 = item.ANAME_16;
                            brgMp.AVALUE_16 = item.AVALUE_16;
                            brgMp.ACODE_17 = item.ACODE_17;
                            brgMp.ANAME_17 = item.ANAME_17;
                            brgMp.AVALUE_17 = item.AVALUE_17;
                            brgMp.ACODE_18 = item.ACODE_18;
                            brgMp.ANAME_18 = item.ANAME_18;
                            brgMp.AVALUE_18 = item.AVALUE_18;
                            brgMp.ACODE_19 = item.ACODE_19;
                            brgMp.ANAME_19 = item.ANAME_19;
                            brgMp.AVALUE_19 = item.AVALUE_19;
                            brgMp.ACODE_20 = item.ACODE_20;
                            brgMp.ANAME_20 = item.ANAME_20;
                            brgMp.AVALUE_20 = item.AVALUE_20;
                            brgMp.ACODE_21 = item.ACODE_21;
                            brgMp.ANAME_21 = item.ANAME_21;
                            brgMp.AVALUE_21 = item.AVALUE_21;
                            brgMp.ACODE_22 = item.ACODE_22;
                            brgMp.ANAME_22 = item.ANAME_22;
                            brgMp.AVALUE_22 = item.AVALUE_22;
                            brgMp.ACODE_23 = item.ACODE_23;
                            brgMp.ANAME_23 = item.ANAME_23;
                            brgMp.AVALUE_23 = item.AVALUE_23;
                            brgMp.ACODE_24 = item.ACODE_24;
                            brgMp.ANAME_24 = item.ANAME_24;
                            brgMp.AVALUE_24 = item.AVALUE_24;
                            brgMp.ACODE_25 = item.ACODE_25;
                            brgMp.ANAME_25 = item.ANAME_25;
                            brgMp.AVALUE_25 = item.AVALUE_25;
                            brgMp.ACODE_26 = item.ACODE_26;
                            brgMp.ANAME_26 = item.ANAME_26;
                            brgMp.AVALUE_26 = item.AVALUE_26;
                            brgMp.ACODE_27 = item.ACODE_27;
                            brgMp.ANAME_27 = item.ANAME_27;
                            brgMp.AVALUE_27 = item.AVALUE_27;
                            brgMp.ACODE_28 = item.ACODE_28;
                            brgMp.ANAME_28 = item.ANAME_28;
                            brgMp.AVALUE_28 = item.AVALUE_28;
                            brgMp.ACODE_29 = item.ACODE_29;
                            brgMp.ANAME_29 = item.ANAME_29;
                            brgMp.AVALUE_29 = item.AVALUE_29;
                            brgMp.ACODE_30 = item.ACODE_30;
                            brgMp.ANAME_30 = item.ANAME_30;
                            brgMp.AVALUE_30 = item.AVALUE_30;
                            brgMp.ACODE_31 = item.ACODE_31;
                            brgMp.ANAME_31 = item.ANAME_31;
                            brgMp.AVALUE_31 = item.AVALUE_31;
                            brgMp.ACODE_32 = item.ACODE_32;
                            brgMp.ANAME_32 = item.ANAME_32;
                            brgMp.AVALUE_32 = item.AVALUE_32;
                            brgMp.ACODE_33 = item.ACODE_33;
                            brgMp.ANAME_33 = item.ANAME_33;
                            brgMp.AVALUE_33 = item.AVALUE_33;
                            brgMp.ACODE_34 = item.ACODE_34;
                            brgMp.ANAME_34 = item.ANAME_34;
                            brgMp.AVALUE_34 = item.AVALUE_34;
                            brgMp.ACODE_35 = item.ACODE_35;
                            brgMp.ANAME_35 = item.ANAME_35;
                            brgMp.AVALUE_35 = item.AVALUE_35;
                            brgMp.ACODE_36 = item.ACODE_36;
                            brgMp.ANAME_36 = item.ANAME_36;
                            brgMp.AVALUE_36 = item.AVALUE_36;
                            brgMp.ACODE_37 = item.ACODE_37;
                            brgMp.ANAME_37 = item.ANAME_37;
                            brgMp.AVALUE_37 = item.AVALUE_37;
                            brgMp.ACODE_38 = item.ACODE_38;
                            brgMp.ANAME_38 = item.ANAME_38;
                            brgMp.AVALUE_38 = item.AVALUE_38;
                            brgMp.ACODE_39 = item.ACODE_39;
                            brgMp.ANAME_39 = item.ANAME_39;
                            brgMp.AVALUE_39 = item.AVALUE_39;
                            brgMp.ACODE_40 = item.ACODE_40;
                            brgMp.ANAME_40 = item.ANAME_40;
                            brgMp.AVALUE_40 = item.AVALUE_40;
                            brgMp.ACODE_41 = item.ACODE_41;
                            brgMp.ANAME_41 = item.ANAME_41;
                            brgMp.AVALUE_41 = item.AVALUE_41;
                            brgMp.ACODE_42 = item.ACODE_42;
                            brgMp.ANAME_42 = item.ANAME_42;
                            brgMp.AVALUE_42 = item.AVALUE_42;
                            brgMp.ACODE_43 = item.ACODE_43;
                            brgMp.ANAME_43 = item.ANAME_43;
                            brgMp.AVALUE_43 = item.AVALUE_43;
                            brgMp.ACODE_44 = item.ACODE_44;
                            brgMp.ANAME_44 = item.ANAME_44;
                            brgMp.AVALUE_44 = item.AVALUE_44;
                            brgMp.ACODE_45 = item.ACODE_45;
                            brgMp.ANAME_45 = item.ANAME_45;
                            brgMp.AVALUE_45 = item.AVALUE_45;
                            brgMp.ACODE_46 = item.ACODE_46;
                            brgMp.ANAME_46 = item.ANAME_46;
                            brgMp.AVALUE_46 = item.AVALUE_46;
                            brgMp.ACODE_47 = item.ACODE_47;
                            brgMp.ANAME_47 = item.ANAME_47;
                            brgMp.AVALUE_47 = item.AVALUE_47;
                            brgMp.ACODE_48 = item.ACODE_48;
                            brgMp.ANAME_48 = item.ANAME_48;
                            brgMp.AVALUE_48 = item.AVALUE_48;
                            brgMp.ACODE_49 = item.ACODE_49;
                            brgMp.ANAME_49 = item.ANAME_49;
                            brgMp.AVALUE_49 = item.AVALUE_49;
                            brgMp.ACODE_50 = item.ACODE_50;
                            brgMp.ANAME_50 = item.ANAME_50;
                            brgMp.AVALUE_50 = item.AVALUE_50;
                            #endregion
                            //add by calvin 2 september 2019, karena avalue_39 dipakai untuk simpan unique selling point blibli
                            brgMp.AVALUE_39 = HttpUtility.HtmlEncode(item.AVALUE_39);
                            brgMp.LINK_STATUS = "Sinkronisasi Produk Berhasil";
                            brgMp.LINK_DATETIME = DateTime.UtcNow.AddHours(7);
                            brgMp.LINK_ERROR = "0;Sinkronisasi Produk;;";
                            if (customer.NAMA == "7")
                            {
                                //merek
                                var getKodeMerk = MoDbContext.BrandLazada.Where(p => p.name == item.MEREK).FirstOrDefault();
                                if (getKodeMerk != null)
                                {
                                    brgMp.ANAME_38 = item.MEREK;
                                    brgMp.AVALUE_38 = getKodeMerk.brand_id;
                                }
                            }
                            ErasoftDbContext.STF02H.Add(brgMp);
                            ErasoftDbContext.SaveChanges();
                            listBrgSuccess.Add(item.BRG_MP);
                            listKodeSudahDiproses.Add(item.SELLER_SKU);

                            //add 25 April 2019, create stf02h untuk mp offline
                            if (offlineId != null)
                            {
                                CreateSTF02HOffline(brgMp.BRG, item.HJUAL, offlineId.IdMarket.Value);
                            }
                            //end add 25 April 2019, create stf02h untuk mp offline
                        }
                    }

                }
                catch (Exception ex)
                {

                }

            }
            if (listBrgSuccess.Count > 0)
            {
                foreach (var brg_mp in listBrgSuccess)
                {
                    //change by Tri 6 Des 2019, hapus sesuai cust
                    //ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP == brg_mp).Delete();
                    ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP == brg_mp && t.CUST == cust).Delete();
                    //end change by Tri 6 Des 2019, hapus sesuai cust
                }
                ErasoftDbContext.SaveChanges();
            }

            //if (listBrgSuccess.Count > 0)
            //{
            //    foreach (var brg_mp in listBrgSuccess)
            //    {
            //        ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(brg_mp)).Delete();
            //    }
            //    ErasoftDbContext.SaveChanges();
            //}
            return JsonErrorMessage("Akun tidak ada");
        }

        public ActionResult AutoCompleteBrg(string brg, string brg_mp, string cust)
        {
            //var barangVm = new UploadBarangViewModel()
            //{
            //    ListTempBrg = ErasoftDbContext.TEMP_BRG_MP.ToList(),
            //    ListMarket = ErasoftDbContext.ARF01.ToList(),
            //    //Stf02 = new STF02(),
            //    TempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(t => t.BRG_MP.Equals(brg_mp)).FirstOrDefault(),
            //    ListKategoriMerk = ErasoftDbContext.STF02E.Where(m => m.LEVEL.Equals("2")).OrderBy(m => m.KET).ToList(),
            //    ListKategoriBrg = ErasoftDbContext.STF02E.Where(m => m.LEVEL.Equals("1")).OrderBy(m => m.KET).ToList(),

            //};
            //var customer = ErasoftDbContext.ARF01.Where(m => m.CUST == cust).FirstOrDefault();
            var tempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.BRG_MP.ToUpper().Equals(brg_mp.ToUpper()) && b.CUST == cust).FirstOrDefault();
            var retBarang = new STF02();
            if (!string.IsNullOrEmpty(brg))
            {
                retBarang = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(brg.ToUpper())).FirstOrDefault();
                if (retBarang != null)
                {
                    if (!string.IsNullOrEmpty(retBarang.PART))
                    {
                        var brg_induk = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(retBarang.PART.ToUpper())).FirstOrDefault();
                        if (brg_induk != null)
                        {
                            retBarang.Sort1 = brg_induk.Sort1;
                            retBarang.Sort2 = brg_induk.Sort2;
                            retBarang.KET_SORT1 = brg_induk.KET_SORT1;
                            retBarang.KET_SORT2 = brg_induk.KET_SORT2;
                            retBarang.Deskripsi = brg_induk.Deskripsi;
                            retBarang.PANJANG = brg_induk.PANJANG;
                            retBarang.LEBAR = brg_induk.LEBAR;
                            retBarang.BERAT = brg_induk.BERAT;
                            retBarang.TINGGI = brg_induk.TINGGI;
                        }
                    }
                    //var stf02h = ErasoftDbContext.STF02H.Where(m => m.BRG == brg && m.IDMARKET == customer.RecNum).FirstOrDefault();
                    //if (stf02h != null)
                    //{
                    //    retBarang.HJUAL = stf02h.HJUAL;
                    //}
                    //else
                    //{
                    retBarang.HJUAL = tempBrg.HJUAL;
                    //}
                    return Json(retBarang, JsonRequestBehavior.AllowGet);
                    //barangVm.Stf02 = retBarang;
                    //return PartialView("FormBarangUploadsPartial", barangVm);

                }
                else
                {
                    //var tempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.BRG_MP.ToUpper().Equals(brg_mp.ToUpper()) && b.CUST == cust).FirstOrDefault();
                    if (tempBrg != null)
                    {
                        retBarang = new STF02();
                        //retBarang = ErasoftDbContext.STF02.FirstOrDefault();
                        retBarang.NAMA = tempBrg.NAMA;
                        retBarang.NAMA2 = tempBrg.NAMA2;
                        retBarang.BERAT = tempBrg.BERAT;
                        retBarang.PANJANG = tempBrg.PANJANG;
                        retBarang.LEBAR = tempBrg.LEBAR;
                        retBarang.TINGGI = tempBrg.TINGGI;
                        retBarang.HJUAL = tempBrg.HJUAL;
                        retBarang.STN2 = "pcs";
                        retBarang.MINI = 1;
                        retBarang.MAXI = 100;
                        retBarang.Deskripsi = tempBrg.Deskripsi;
                        retBarang.BRG = brg;
                        retBarang.LINK_GAMBAR_1 = tempBrg.IMAGE;
                        retBarang.LINK_GAMBAR_2 = tempBrg.IMAGE2;
                        retBarang.LINK_GAMBAR_3 = tempBrg.IMAGE3;
                        retBarang.LINK_GAMBAR_4 = tempBrg.IMAGE4;
                        retBarang.LINK_GAMBAR_5 = tempBrg.IMAGE5;
                        retBarang.TYPE = tempBrg.TYPE;
                        //add 14 juni 2019, kategori dan merek dari transfer excel
                        if (!string.IsNullOrEmpty(tempBrg.AVALUE_40))//kategori mo di avalue_40
                        {
                            var cat = ErasoftDbContext.STF02E.Where(m => m.KODE == tempBrg.AVALUE_40 && m.LEVEL == "1").FirstOrDefault();
                            if (cat != null)
                            {
                                retBarang.Sort1 = cat.KODE;
                                retBarang.KET_SORT1 = cat.KET;
                            }
                        }
                        if (!string.IsNullOrEmpty(tempBrg.MEREK))
                        {
                            var mrk = ErasoftDbContext.STF02E.Where(m => m.KODE == tempBrg.MEREK && m.LEVEL == "2").FirstOrDefault();
                            if (mrk != null)
                            {
                                retBarang.Sort2 = mrk.KODE;
                                retBarang.KET_SORT2 = mrk.KET;
                            }
                        }
                        //end add 14 juni 2019, kategori code dari transfer excel

                        if (!string.IsNullOrEmpty(tempBrg.KODE_BRG_INDUK))
                        {
                            var brg_induk = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(tempBrg.KODE_BRG_INDUK.ToUpper())).FirstOrDefault();
                            if (brg_induk != null)
                            {
                                retBarang.Sort1 = brg_induk.Sort1;
                                retBarang.Sort2 = brg_induk.Sort2;
                                retBarang.KET_SORT1 = brg_induk.KET_SORT1;
                                retBarang.KET_SORT2 = brg_induk.KET_SORT2;
                            }
                        }

                        return Json(retBarang, JsonRequestBehavior.AllowGet);
                        //barangVm.Stf02 = retBarang;
                        //return PartialView("FormBarangUploadsPartial", barangVm);

                    }
                    else
                    {
                        return JsonErrorMessage("Barang ini sudah disinkronisasi. Silahkan refresh halaman ini.");
                    }
                }
            }
            else
            {
                //var tempBrg = ErasoftDbContext.TEMP_BRG_MP.Where(b => b.BRG_MP.ToUpper().Equals(brg_mp.ToUpper()) && b.CUST == cust).FirstOrDefault();
                if (tempBrg != null)
                {
                    retBarang = new STF02();
                    //retBarang = ErasoftDbContext.STF02.FirstOrDefault();
                    retBarang.NAMA = tempBrg.NAMA;
                    retBarang.NAMA2 = tempBrg.NAMA2;
                    retBarang.BERAT = tempBrg.BERAT;
                    retBarang.PANJANG = tempBrg.PANJANG;
                    retBarang.LEBAR = tempBrg.LEBAR;
                    retBarang.TINGGI = tempBrg.TINGGI;
                    retBarang.HJUAL = tempBrg.HJUAL;
                    retBarang.STN2 = "pcs";
                    retBarang.MINI = 1;
                    retBarang.MAXI = 100;
                    retBarang.Deskripsi = tempBrg.Deskripsi;
                    retBarang.BRG = brg;
                    retBarang.LINK_GAMBAR_1 = tempBrg.IMAGE;
                    retBarang.LINK_GAMBAR_2 = tempBrg.IMAGE2;
                    retBarang.LINK_GAMBAR_3 = tempBrg.IMAGE3;
                    retBarang.LINK_GAMBAR_4 = tempBrg.IMAGE4;
                    retBarang.LINK_GAMBAR_5 = tempBrg.IMAGE5;
                    retBarang.TYPE = tempBrg.TYPE;
                    //add 14 juni 2019, kategori dan merek dari transfer excel
                    if (!string.IsNullOrEmpty(tempBrg.AVALUE_40))//kategori mo di avalue_40
                    {
                        var cat = ErasoftDbContext.STF02E.Where(m => m.KODE == tempBrg.AVALUE_40 && m.LEVEL == "1").FirstOrDefault();
                        if (cat != null)
                        {
                            retBarang.Sort1 = cat.KODE;
                            retBarang.KET_SORT1 = cat.KET;
                        }
                    }
                    if (!string.IsNullOrEmpty(tempBrg.MEREK))
                    {
                        var mrk = ErasoftDbContext.STF02E.Where(m => m.KODE == tempBrg.MEREK && m.LEVEL == "2").FirstOrDefault();
                        if (mrk != null)
                        {
                            retBarang.Sort2 = mrk.KODE;
                            retBarang.KET_SORT2 = mrk.KET;
                        }
                    }
                    //end add 14 juni 2019, kategori code dari transfer excel

                    if (!string.IsNullOrEmpty(tempBrg.KODE_BRG_INDUK))
                    {
                        var brg_induk = ErasoftDbContext.STF02.Where(b => b.BRG.ToUpper().Equals(tempBrg.KODE_BRG_INDUK.ToUpper())).FirstOrDefault();
                        if (brg_induk != null)
                        {
                            retBarang.Sort1 = brg_induk.Sort1;
                            retBarang.Sort2 = brg_induk.Sort2;
                            retBarang.KET_SORT1 = brg_induk.KET_SORT1;
                            retBarang.KET_SORT2 = brg_induk.KET_SORT2;
                        }
                    }

                    return Json(retBarang, JsonRequestBehavior.AllowGet);
                    //barangVm.Stf02 = retBarang;
                    //return PartialView("FormBarangUploadsPartial", barangVm);

                }
                else
                {
                    return JsonErrorMessage("Kode Barang tidak ditemukan.");

                }
            }
        }

        public ActionResult CreateSTF02HTokped(string cust)
        {
            if (!string.IsNullOrEmpty(cust))
            {
                var marketplace = ErasoftDbContext.ARF01.Where(c => c.CUST == cust).FirstOrDefault();
                var tokped = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToUpper() == "TOKOPEDIA").FirstOrDefault();
                if (marketplace != null && tokped != null)
                {
                    if (marketplace.NAMA == tokped.IdMarket.ToString())
                    {
                        SqlCommand CommandSQL = new SqlCommand();
                        CommandSQL.Parameters.Add("@idmarket", SqlDbType.Int).Value = marketplace.RecNum;
                        CommandSQL.Parameters.Add("@username", SqlDbType.NVarChar, 30).Value = "AUTO_CREATE_SP";
                        CommandSQL.Parameters.Add("@akunmarket", SqlDbType.NVarChar, 50).Value = marketplace.PERSO;
                        EDB.ExecuteSQL("MOConnectionString", "autocreate_stf02h_tokped", CommandSQL);
                        return Json("sukses", JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return JsonErrorMessage("Akun yang anda pilih bukan akun dari marketplace Tokopedia");
                    }

                }
                else
                {
                    return JsonErrorMessage("Akun tidak ditemukan");
                }


            }
            return JsonErrorMessage("Akun tidak ada");

        }
        public ActionResult GetTotalData(string cust)
        {
            var ret = new SimpleJsonObject();
            ret.Total = 0;
            if (!string.IsNullOrEmpty(cust))
            {
                try
                {
                    using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                    {
                        //var customer = eraDB.ARF01.Where(m => m.CUST == cust).FirstOrDefault();
                        //if (customer != null)
                        //{
                        //    var tokped = MoDbContext.Marketplaces.Where(m => m.NamaMarket.ToUpper() == "TOKOPEDIA").FirstOrDefault();
                        //    if (tokped != null)
                        //    {
                        //        if (customer.NAMA == tokped.IdMarket.ToString())
                        //        {
                        //            ret.Errors = "Silahkan edit per barang untuk sikronisasi barang dari marketplace Tokopedia.";
                        //            return Json(ret, JsonRequestBehavior.AllowGet);
                        //        }
                        //    }
                        //}
                        //var listTempBrg = eraDB.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper())).ToList();
                        var listTempBrg = eraDB.TEMP_BRG_MP.Where(t => t.CUST.ToUpper().Equals(cust.ToUpper()) && t.AVALUE_36 == "Auto Process").ToList();
                        if (listTempBrg != null)
                        {
                            ret.Total = listTempBrg.Count();
                            //var mp = MoDbContext.Marketplaces.Where(m => m.IdMarket.ToString() == customer.NAMA).FirstOrDefault();
                            //if (mp != null)
                            //{
                            //    var api_log = eraDB.API_LOG_MARKETPLACE.Where(m => m.MARKETPLACE.ToUpper() == mp.NamaMarket.ToUpper()).OrderByDescending(m => m.RECNUM).ToList();
                            //    if (api_log.Count > 0)
                            //    {
                            //        ret.startRecnum = api_log[0].RECNUM;
                            //    }
                            //}
                            #region Logging
                            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                            string uname = sessionData.Account.Username;

                            //string message = "";
                            string filename = "Log_SyncBrg_" + cust + "_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
                            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), filename);
                            if (!System.IO.File.Exists(path))
                            {
                                System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/" + sessionData.Account.DatabasePathErasoft + "/"), ""));
                                //var asd = System.IO.File.Create(path);
                                //asd.Close();
                            }
                            var asd = System.IO.File.Create(path);
                            asd.Close();

                            LOG_IMPORT_FAKTUR newLogImportFaktur = new LOG_IMPORT_FAKTUR
                            {
                                CUST = cust,
                                UPLOADER = uname,
                                //change by nurul 28/11/2019
                                //UPLOAD_DATETIME = DateTime.Now,
                                UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                                //end change by nurul 28/11/2019
                                LOG_FILE = filename,
                                //change by nurul 28/11/2019
                                //LAST_FAKTUR_UPLOADED_DATETIME = DateTime.Now
                                LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7)
                                //end change by nurul 28/11/2019
                            };
                            //string lastFakturInUpload = "";
                            //DateTime lastFakturDateInUpload = DateTime.Now;
                            ret.fileName = filename;
                            eraDB.LOG_IMPORT_FAKTUR.Add(newLogImportFaktur);
                            eraDB.SaveChanges();
                            #endregion
                        }
                        else
                        {
                            ret.Errors = "Gagal mengambil data.";
                        }
                    }

                }
                catch (Exception ex)
                {
                    ret.Errors = (ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                }

            }
            else
            {
                ret.Errors = "Anda belum memilih Akun.";
            }

            return Json(ret, JsonRequestBehavior.AllowGet);
        }
        // =============================================== Bagian Upload Barang (END)
        protected double GetQOHSTF08A(string Barang, string Gudang)
        {
            //ADD BY NURUL 4/9/2020, handle cek stok brg multi sku 
            var cekBrgMultiSKU = ErasoftDbContext.STF02.Where(a => a.BRG == Barang).SingleOrDefault();
            var tempBrgAwal = Barang;
            if (cekBrgMultiSKU.TYPE == "6" && cekBrgMultiSKU.KUBILASI == 1 && cekBrgMultiSKU.BRG_NON_OS != "" && cekBrgMultiSKU.BRG_NON_OS != null)
            {
                Barang = cekBrgMultiSKU.BRG_NON_OS;
            }
            //END ADD BY NURUL 4/9/2020, handle cek stok brg multi sku 

            double qtyOnHand = 0d;
            {
                object[] spParams = {
                    new SqlParameter("@BRG", Barang),
                    new SqlParameter("@GD", Gudang),
                    new SqlParameter("@Satuan", "2"),
                    new SqlParameter("@THN", Convert.ToInt16(DateTime.Now.ToString("yyyy"))),
                    new SqlParameter("@QOH", SqlDbType.Decimal) {Direction = ParameterDirection.Output}
                };

                ErasoftDbContext.Database.ExecuteSqlCommand("exec [GetQOH_STF08A] @BRG, @GD, @Satuan, @THN, @QOH OUTPUT", spParams);
                qtyOnHand = Convert.ToDouble(((SqlParameter)spParams[4]).Value);
            }

            //ErasoftDbContext.Database.ExecuteSqlCommand("exec [GetQOH_STF08A] @BRG, @GD, @Satuan, @THN, @QOH OUTPUT", spParams);

            double qtySO = ErasoftDbContext.Database.SqlQuery<double>("SELECT ISNULL(SUM(ISNULL(QTY,0)),0) QSO FROM SOT01A A (NOLOCK) INNER JOIN SOT01B B (NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI LEFT JOIN SIT01A C (NOLOCK) ON A.NO_BUKTI = C.NO_SO WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND B.LOKASI = CASE '" + Gudang + "' WHEN 'ALL' THEN B.LOKASI ELSE '" + Gudang + "' END AND ISNULL(C.NO_BUKTI,'') = '' AND B.BRG = '" + Barang + "'").FirstOrDefault();
            qtyOnHand = qtyOnHand - qtySO;
            return qtyOnHand;
        }

        [HttpGet]
        public void UpdateCategoryShopeeAPI()
        {
            var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");
            var listShopee = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
            bool onlyFirst = true;
            foreach (ARF01 tblCustomer in listShopee)
            {
                if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                {
                    if (onlyFirst)
                    {
                        ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                        };
                        ShopeeController shoAPI = new ShopeeController();
                        Task.Run(() => shoAPI.GetCategory(iden).Wait());

                        onlyFirst = false;
                    }
                }
            }
        }
        [HttpGet]
        public void UpdateCategoryTokpedAPI()
        {
            var kdTokped = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
            var listTokped = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdTokped.IdMarket.ToString()).ToList();
            bool onlyFirst = true;
            foreach (ARF01 tblCustomer in listTokped)
            {
                if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                {
                    if (onlyFirst)
                    {
                        TokopediaController.TokopediaAPIData iden = new TokopediaController.TokopediaAPIData
                        {

                            merchant_code = tblCustomer.Sort1_Cust, //FSID
                            API_client_password = tblCustomer.API_CLIENT_P, //Client ID
                            API_client_username = tblCustomer.API_CLIENT_U, //Client Secret
                            API_secret_key = tblCustomer.API_KEY, //Shop ID 
                            token = tblCustomer.TOKEN,
                            idmarket = tblCustomer.RecNum.Value
                        };
                        TokopediaController tokoAPI = new TokopediaController();
                        Task.Run(() => tokoAPI.GetCategoryTree(iden).Wait());

                        onlyFirst = false;
                    }
                }
            }
        }

        [HttpGet]
        public void UpdateAttributeShopeeAPI()
        {
            var kdShopee = MoDbContext.Marketplaces.SingleOrDefault(m => m.NamaMarket.ToUpper() == "SHOPEE");
            var listShopee = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopee.IdMarket.ToString()).ToList();
            bool onlyFirst = true;
            foreach (ARF01 tblCustomer in listShopee)
            {
                if (!string.IsNullOrEmpty(tblCustomer.Sort1_Cust))
                {
                    if (onlyFirst)
                    {
                        ShopeeController.ShopeeAPIData iden = new ShopeeController.ShopeeAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                        };
                        ShopeeController shoAPI = new ShopeeController();
                        Task.Run(() => shoAPI.GetAttribute(iden).Wait());

                        onlyFirst = false;
                    }
                }
            }
        }
        //end add by calvin 7 april 2019
        public ActionResult RequeueFailedJob(string nourut)
        {
            try
            {
                string jobid = nourut;
                //string EDBConnID = EDB.GetConnectionString("ConnID");
                //var sqlStorage = new Hangfire.SqlServer.SqlServerStorage(EDBConnID);

                var sqlStorage = new SqlServerStorage(EDBConnID);
                var clientJobServer = new BackgroundJobClient(sqlStorage);
                //var client = new BackgroundJobClient(sqlStorage);
                clientJobServer.Requeue(jobid);

                return new JsonResult { Data = "Success", JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //end add by calvin 7 april 2019

        [Route("manage/TransferExcel")]
        public ActionResult TransferExcel()
        {
            var ret = new TransferExcelViewModel
            {
                Customer = new List<ARF01>()
            };

            //var tempMP = MoDbContext.Marketplaces.ToList();
            //for(int i = 0; i < ret.Customer.Count; i++)
            //{
            //    ret.Customer[i].NAMA = tempMP.Where(m => m.IdMarket.ToString() == ret.Customer[i].NAMA).SingleOrDefault().NamaMarket;
            //}

            return View(ret);
        }

        [Route("manage/SyncMenu")]
        public ActionResult SyncMenu()
        {
            //var ret = new SyncMenuViewModel
            //{
            //    Customers = new List<BindingCustomer>()
            //};
            //var customer = ErasoftDbContext.ARF01.Where(m => m.NAMA != "18").OrderBy(m => m.NAMA).ToList();
            //var mp = MoDbContext.Marketplaces.ToList();
            //if (customer.Count > 0)
            //{
            //    foreach (var tbl in customer)
            //    {
            //        var data = new BindingCustomer
            //        {
            //            cust = tbl.CUST,
            //            namaCust = tbl.PERSO,
            //        };
            //        data.namaMarket = mp.Where(m => m.IdMarket.ToString() == tbl.NAMA).FirstOrDefault().NamaMarket;

            //        ret.Customers.Add(data);
            //    }
            //}
            return View();
        }

        [Route("manage/GetDataMenu")]
        public ActionResult GetDataMenu()
        {
            var ret = new SyncMenuViewModel
            {
                Customers = new List<BindingCustomer>()
            };
            var customer = ErasoftDbContext.ARF01.Where(m => m.NAMA != "18").OrderBy(m => m.NAMA).ToList();
            var mp = MoDbContext.Marketplaces.ToList();
            if (customer.Count > 0)
            {
                foreach (var tbl in customer)
                {
                    var data = new BindingCustomer
                    {
                        cust = tbl.CUST,
                        namaCust = tbl.PERSO,
                    };
                    data.namaMarket = mp.Where(m => m.IdMarket.ToString() == tbl.NAMA).FirstOrDefault().NamaMarket;

                    ret.Customers.Add(data);
                }
            }
            return PartialView("SyncMenuPartialPage", ret);
        }

        public ActionResult GetCustomerData()
        {
            var ret = new TransferExcelViewModel
            {
                Customer = ErasoftDbContext.ARF01.OrderBy(m => m.NAMA).ToList()
            };

            var tempMP = MoDbContext.Marketplaces.ToList();
            for (int i = 0; i < ret.Customer.Count; i++)
            {
                ret.Customer[i].NAMA = tempMP.Where(m => m.IdMarket.ToString() == ret.Customer[i].NAMA).SingleOrDefault().NamaMarket;
            }

            return Json(ret.Customer, JsonRequestBehavior.AllowGet);
        }
        public ActionResult MarketplaceLogRetryAllJobs()
        {
            var sqlStorage = new SqlServerStorage(EDBConnID);
            var clientJobServer = new BackgroundJobClient(sqlStorage);
            //var QueryHangfireLog = (from a in ErasoftDbContext.API_LOG_MARKETPLACE
            //                        where a.REQUEST_ATTRIBUTE_5 == "HANGFIRE"
            //                        && a.REQUEST_STATUS == "FAILED"
            //                        orderby a.REQUEST_DATETIME descending
            //                        select a.REQUEST_ID).ToList();
            var QueryHangfireLog = (from a in ErasoftDbContext.API_LOG_MARKETPLACE
                                    where a.REQUEST_ATTRIBUTE_5 == "HANGFIRE"
                                    && a.REQUEST_STATUS == "FAILED"
                                    orderby a.REQUEST_DATETIME descending
                                    select new { REQUEST_ID = a.REQUEST_ID, MARKETPLACE = a.MARKETPLACE, REQUEST_ACTION = a.REQUEST_ACTION }).ToList();
            string listJobID = "";
            foreach (var item in QueryHangfireLog)
            {
                listJobID += "'" + item.REQUEST_ID + "',";
            }
            listJobID = listJobID.Substring(0, listJobID.Length - 1);

            string sSQL = "UPDATE B SET REQUEST_STATUS = 'RETRYING', REQUEST_DATETIME = '" + DateTime.UtcNow.AddHours(7).ToString("yyyy-MM-dd HH:mm:ss") + "' ";
            sSQL += "FROM API_LOG_MARKETPLACE B WHERE REQUEST_ID IN (" + listJobID + ")";
            EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);

            foreach (var item in QueryHangfireLog)
            {
                //if(item.REQUEST_ACTION.ToLower() == "update stok" && item.MARKETPLACE.ToLower() == "tokopedia")//update stok tokped di delay agar tidak kena limit
                //{
                //    clientJobServer.Requeue(item.REQUEST_ID, TimeSpan.FromSeconds(1));
                //}
                //else
                {
                    clientJobServer.Requeue(item.REQUEST_ID);
                }
            }
            return new JsonResult { Data = "Success", JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        //add by calvin 17 mei 2019
        public ActionResult RequeueFailedJobLog(string nourut)
        {
            try
            {
                string jobid = nourut;
                //string EDBConnID = EDB.GetConnectionString("ConnID");
                //var sqlStorage = new Hangfire.SqlServer.SqlServerStorage(EDBConnID);

                //var client = new BackgroundJobClient(sqlStorage);

                //update JOBID,STATUS,DATE,FAIL COUNT
                string sSQL = "UPDATE B SET REQUEST_STATUS = 'RETRYING', REQUEST_DATETIME = '" + DateTime.UtcNow.AddHours(7).ToString("yyyy-MM-dd HH:mm:ss") + "' ";
                sSQL += "FROM API_LOG_MARKETPLACE B WHERE REQUEST_ID = '" + nourut + "'";
                EDB.ExecuteSQL("sConn", CommandType.Text, sSQL);
                var sqlStorage = new SqlServerStorage(EDBConnID);
                var clientJobServer = new BackgroundJobClient(sqlStorage);
                clientJobServer.Requeue(jobid);

                return new JsonResult { Data = "Success", JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //end add by calvin 17 mei 2019

        //add by Tri 18 Juli 2019
        public async Task<ActionResult> RetryGetData(string cust, int recnum)
        {
            var ret = new BindingBase();
            var arf01 = ErasoftDbContext.ARF01.Where(m => m.CUST == cust).FirstOrDefault();
            if (arf01 != null)
            {
                var api_log = ErasoftDbContext.API_LOG_MARKETPLACE.Where(m => m.CUST == cust && m.RECNUM > recnum && m.REQUEST_STATUS != "Success" && m.REQUEST_ACTION.Contains("Get Item List")).ToList();
                if (api_log.Count > 0)
                {
                    foreach (var apiLog in api_log)
                    {
                        switch (apiLog.MARKETPLACE)
                        {
                            case "Lazada":
                                var lzdApi = new LazadaController();
                                lzdApi.GetBrgLazada(cust, arf01.TOKEN, Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), 0, 0);
                                break;
                            case "Bukalapak":
                                var blApi = new BukaLapakController();
                                blApi.getListProduct(cust, arf01.API_KEY, arf01.TOKEN, Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), (apiLog.REQUEST_ACTION.Contains("Not Active") ? false : true), 0, 0);
                                break;
                            case "Tokopedia":
                                var TokoAPI = new TokopediaController();
                                TokopediaController.TokopediaAPIData data = new TokopediaController.TokopediaAPIData()
                                {
                                    merchant_code = arf01.Sort1_Cust, //FSID
                                    API_client_password = arf01.API_CLIENT_P, //Client ID
                                    API_client_username = arf01.API_CLIENT_U, //Client Secret
                                    API_secret_key = arf01.API_KEY, //Shop ID 
                                    token = arf01.TOKEN
                                };
                                await TokoAPI.GetItemListSemua(data, Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), 0, arf01.CUST, arf01.NAMA, arf01.RecNum.Value, 0);
                                break;
                            case "Blibli":
                                var BliApi = new BlibliController();
                                BlibliController.BlibliAPIData dataBL = new BlibliController.BlibliAPIData()
                                {
                                    API_client_username = arf01.API_CLIENT_U,
                                    API_client_password = arf01.API_CLIENT_P,
                                    API_secret_key = arf01.API_KEY,
                                    mta_username_email_merchant = arf01.EMAIL,
                                    mta_password_password_merchant = arf01.PASSWORD,
                                    merchant_code = arf01.Sort1_Cust,
                                    token = arf01.TOKEN,
                                    idmarket = arf01.RecNum.Value,
                                    versiToken = arf01.KD_ANALISA
                                };
                                var resultBli = BliApi.getProduct(dataBL, "", Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), arf01.CUST, 0, 0);
                                break;
                            case "Shopee":
                                var ShopeeApi = new ShopeeController();
                                ShopeeController.ShopeeAPIData dataSp = new ShopeeController.ShopeeAPIData()
                                {
                                    merchant_code = arf01.Sort1_Cust,
                                };
                                var resultShopee = await ShopeeApi.GetItemsList(dataSp, arf01.RecNum.Value, Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), 0, 0);
                                break;
                            case "JD.ID":
                                var JDApi = new JDIDController();
                                JDIDAPIData dataJD = new JDIDAPIData()
                                {
                                    accessToken = arf01.TOKEN,
                                    appKey = arf01.API_KEY,
                                    appSecret = arf01.API_CLIENT_U,
                                };
                                var resultJD = JDApi.getListProduct(dataJD, Convert.ToInt32(apiLog.REQUEST_ATTRIBUTE_3), cust, 0, 0);
                                break;
                        }
                    }
                }
            }

            return Json(ret, JsonRequestBehavior.AllowGet);
        }
        //end add by Tri 18 Juli 2019
        //add by Tri 22 Agustus 2019
        public BindingBase ValidasiHarga(string idmarket, double price)
        {
            var ret = new BindingBase
            {
                status = 1
            };
            switch (idmarket)
            {
                case "7"://Lazada
                    if (price < 3000)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 3000.";
                    }
                    break;
                case "8"://Bukalapak                   
                case "9"://Elevenia
                    if (price < 100)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 100.";
                    }
                    else if (price % 100 != 0)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus kelipatan 100.";
                    }
                    break;
                case "15"://Tokopedia
                    if (price < 100)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 100.";
                    }
                    break;
                case "16"://Blibli
                          //change 24 jan 2020, change min price to 1000
                          //if (price < 1100)
                          //{
                          //    ret.status = 0;
                          //    ret.message = "Harga Jual harus lebih dari 1100.";
                          //}
                    if (price < 1000)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 1000.";
                    }
                    //end change 24 jan 2020, change min price to 1000
                    break;
                case "17"://Shopee
                    if (price < 100)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 100.";
                    }
                    break;
                case "19"://JD.ID
                    if (price < 100)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 100.";
                    }
                    break;
                case "21"://SHOPIFY
                    if (price < 0)
                    {
                        ret.status = 0;
                        ret.message = "Harga Jual harus lebih dari 0.";
                    }
                    break;
            }
            return ret;
        }

        //add by nurul 19/8/2019, tambah form pengiriman 
        // =============================================== Bagian Pengiriman (START)
        [HttpGet]
        public ActionResult GetDataPesanan(string code)
        {
            //add by nurul 16/9/2019
            var nmKurir = "";
            bool adaGO = false;
            adaGO = code.ToUpper().Contains("GO");
            if (adaGO)
            {
                nmKurir = "go";
            }
            else
            {
                string[] kataAwal = code.Split(' ');
                nmKurir = kataAwal.First();
            }
            //end add by nurul 16/9/2019
            string sSQL = "";
            sSQL += "select a.no_bukti AS PESANAN, ";
            sSQL += "isnull(a.CUST,'') AS MARKETPLACE, ";
            sSQL += "isnull(c.namamarket, '') + ' (' + isnull(b.perso, '') + ')' AS NAMA_MARKET, ";
            sSQL += "isnull(a.pemesan, '') as PEMBELI, ";
            sSQL += "isnull(a.namapemesan, '') as NAMA_PEMBELI, ";
            sSQL += "isnull(a.alamat_kirim, '') AS ALAMAT, ";
            sSQL += "isnull(a.kota, '') AS KOTA, isnull(a.propinsi, '') AS PROPINSI, isnull(a.kode_pos, '') AS KODE_POS, ";
            sSQL += "isnull(a.SHIPMENT,'') AS NAMAKURIR ";
            sSQL += "from sot01a a ";
            sSQL += "inner join arf01 b on a.cust=b.cust ";
            sSQL += "left join MO.dbo.marketplace c on b.nama = c.idmarket ";
            sSQL += "left join (select distinct pesanan from sit04a e inner join sit04b f on e.no_bukti=f.no_bukti)d on a.no_bukti=d.pesanan ";
            sSQL += "where isnull(d.pesanan, '')='' and a.status_transaksi='03' and a.shipment like '%" + nmKurir + "%' ";
            var listPesananBlmKirim = ErasoftDbContext.Database.SqlQuery<smolSOT01A>(sSQL).ToList();

            return Json(listPesananBlmKirim, JsonRequestBehavior.AllowGet);

        }

        //[HttpGet]
        //public ActionResult GetDataPesanan(string code)
        //{
        //    //var listBarang = ErasoftDbContext.STF02.ToList();
        //    var listBarang = (from a in ErasoftDbContext.STF02
        //                      join b in ErasoftDbContext.STF02H on a.BRG equals b.BRG
        //                      join c in ErasoftDbContext.ARF01 on b.IDMARKET equals c.RecNum
        //                      //change by nurul 21/1/2019 -- where c.CUST == code
        //                      where c.CUST == code && a.TYPE == "3"
        //                      select new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, STN2 = a.STN2, HJUAL = b.HJUAL });

        //    return Json(listBarang, JsonRequestBehavior.AllowGet);
        //}

        public ActionResult PengirimanMenu()
        {
            var vm = new PengirimanViewModel()
            {
            };

            return View(vm);
        }

        public ActionResult SaveKirim(PengirimanViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }
            List<string> listSOT01A = new List<string>();
            List<string> listDetail = new List<string>();
            try
            {
                DateTime? jamkirim = Convert.ToDateTime(dataVm.Pengiriman.TGL_KIRIM?.ToString("dd/MM/yyyy") + ' ' + dataVm.Pengiriman.JAM_KIRIM?.ToString("HH:mm"));
                dataVm.Pengiriman.JAM_KIRIM = jamkirim;
                if (dataVm.Pengiriman.RECNUM == null)
                {
                    //change by nurul 23/12/2019, perbaikan no bukti
                    //var listKirimInDb = ErasoftDbContext.SIT04A.OrderByDescending(p => p.RECNUM).FirstOrDefault();
                    //var digitAkhir = "";
                    //var noKirim = "";

                    //if (listKirimInDb == null)
                    //{
                    //    digitAkhir = "000001";
                    //    noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT04A, RESEED, 0)");
                    //}
                    //else
                    //{
                    //    var lastRecNum = listKirimInDb.RECNUM;
                    //    var lastKode = listKirimInDb.NO_BUKTI;
                    //    lastRecNum++;

                    //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                    //    noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                    //    if (noKirim == lastKode)
                    //    {
                    //        lastRecNum++;
                    //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                    //        noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                    //    }
                    //}
                    var lastBukti = GenerateAutoNumber(ErasoftDbContext, "DO", "SIT04A", "NO_BUKTI");
                    var noKirim = "DO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    dataVm.Pengiriman.NO_BUKTI = noKirim;
                    dataVm.PengirimanDetail.NO_BUKTI = noKirim;

                    #region agar field yg penting di sit04a tidak null
                    #endregion


                    //change by nurul 23/12/2019, perbaikan no_bukti
                    //ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                    try
                    {
                        ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                        ErasoftDbContext.SaveChanges();
                    }
                    catch (Exception ex)
                    {
                        var tempSI = ErasoftDbContext.SIT04A.Where(a => a.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI).Single();
                        if (tempSI != null)
                        {
                            if (tempSI.NO_BUKTI == noKirim)
                            {
                                var lastBuktiNew = Convert.ToInt32(lastBukti);
                                lastBuktiNew++;
                                noKirim = "DO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                dataVm.Pengiriman.NO_BUKTI = noKirim;
                                ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                                dataVm.PengirimanDetail.NO_BUKTI = noKirim;
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                            return Json(dataVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                    //end change by nurul 23/12/2019, perbaikan no bukti

                    if (dataVm.PengirimanDetail.NO_URUT == null)
                    {
                        #region agar field yg penting di sit04b tidak null
                        #endregion

                        ErasoftDbContext.SIT04B.Add(dataVm.PengirimanDetail);


                    }
                }
                else
                {
                    var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI);

                    kirimInDb.TGL_KIRIM = dataVm.Pengiriman.TGL_KIRIM;

                    kirimInDb.KURIR = dataVm.Pengiriman.KURIR;
                    kirimInDb.NAMA_KURIR = dataVm.Pengiriman.NAMA_KURIR;
                    kirimInDb.NAMA_EKSPEDISI = dataVm.Pengiriman.NAMA_EKSPEDISI;
                    //kirimInDb.JAM_KIRIM = jamkirim;

                    dataVm.PengirimanDetail.NO_BUKTI = dataVm.Pengiriman.NO_BUKTI;

                    if (dataVm.PengirimanDetail.NO_URUT == null)
                    {
                        #region agar field yg penting di sit04b tidak null
                        #endregion

                        ErasoftDbContext.SIT04B.Add(dataVm.PengirimanDetail);
                    }
                }

                ErasoftDbContext.SaveChanges();

                var selectSOT01a = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == dataVm.PengirimanDetail.PESANAN).Single();
                selectSOT01a.JAMKIRIM = jamkirim;
                ErasoftDbContext.SaveChanges();
                ModelState.Clear();

                var ListKirimDetail = ErasoftDbContext.SIT04B.Where(pd => pd.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI).ToList();
                var listPesananInKirimDetail = ListKirimDetail.Select(p => p.PESANAN).ToList();
                //var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI);
                //var listPesanan = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).Select(a => a.PESANAN).ToList();
                string ordersn = "";
                foreach (var item in listPesananInKirimDetail)
                {
                    if (item == listPesananInKirimDetail.Last())
                    {
                        ordersn = ordersn + "'" + item + "'";
                    }
                    else
                    {
                        ordersn = ordersn + "'" + item + "',";
                    }
                }
                string ssql = "";
                ssql += "SELECT SHIPMENT, NO_BUKTI FROM SOT01A WHERE NO_BUKTI IN (" + ordersn + ")";
                var listShipment = ErasoftDbContext.Database.SqlQuery<ShipmentOfKirim>(ssql).ToList();
                var vm = new PengirimanViewModel()
                {
                    Pengiriman = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI),
                    ListPengirimanDetail = ListKirimDetail,
                    Shipment = listShipment
                };

                return PartialView("BarangKirimPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        public ActionResult RefreshTableKirim(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            //sSQLSelect += "SELECT A.RECNUM, A.NO_BUKTI, A.TGL_KIRIM, A.NAMA_KURIR, A.JAM_KIRIM, B.NAMAEKSPEDISI AS KURIR ";
            sSQLSelect += "SELECT * ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM SIT04A  ";
            if (search != "")
            {
                sSQL2 += "WHERE (NO_BUKTI LIKE '%" + search + "%' OR NAMA_EKSPEDISI LIKE '%" + search + "%' OR NAMA_KURIR LIKE '%" + search + "%' ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY JAM_KIRIM DESC, NO_BUKTI DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListSit04a = ErasoftDbContext.Database.SqlQuery<SIT04A>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<SIT04A> pageOrders = new StaticPagedList<SIT04A>(ListSit04a, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableKirimPartial", pageOrders);
        }

        public ActionResult RefreshKirimForm()
        {
            try
            {
                var vm = new PengirimanViewModel()
                {
                    ListPengiriman = ErasoftDbContext.SIT04A.ToList(),
                };

                return PartialView("BarangKirimPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }
        public class Shipments
        {
            public string SHIPMENT { get; set; }
            public string NO_BUKTI { get; set; }
        }
        public ActionResult EditKirim(int? kirimId)
        {
            try
            {
                var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.RECNUM == kirimId);
                var listPesanan = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).Select(a => a.PESANAN).ToList();

                string ordersn = "";
                foreach (var item in listPesanan)
                {
                    if (item == listPesanan.Last())
                    {
                        ordersn = ordersn + "'" + item + "'";
                    }
                    else
                    {
                        ordersn = ordersn + "'" + item + "',";
                    }
                }


                var vm = new PengirimanViewModel()
                {
                    Pengiriman = kirimInDb,
                    ListPengiriman = ErasoftDbContext.SIT04A.ToList(),
                    ListPengirimanDetail = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).ToList(),
                    //Shipment = ErasoftDbContext.SOT01A.Where(a => listPesanan.Contains(a.NO_BUKTI)).Select(a => a.SHIPMENT).ToList()

                };
                if (listPesanan.Count() != 0)
                {
                    string ssql = "";
                    ssql += "SELECT SHIPMENT, NO_BUKTI FROM SOT01A WHERE NO_BUKTI IN (" + ordersn + ")";
                    var listShipment = ErasoftDbContext.Database.SqlQuery<Shipments>(ssql).ToList();
                    foreach (var item in listShipment)
                    {
                        vm.Shipment.Add(new ShipmentOfKirim()
                        {
                            SHIPMENT = item.SHIPMENT,
                            NO_BUKTI = item.NO_BUKTI
                        });
                    }
                }

                return PartialView("BarangKirimPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteKirim(int? kirimId)
        {
            var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.RECNUM == kirimId);

            List<string> listDetail = new List<string>();

            var kirimDetailInDb = ErasoftDbContext.SIT04B.Where(b => b.NO_BUKTI == kirimInDb.NO_BUKTI).ToList();
            foreach (var item in kirimDetailInDb)
            {
                listDetail.Add(item.PESANAN);
                var listOrder = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == item.PESANAN).ToList();
                listOrder.Single().JAMKIRIM = null;
                ErasoftDbContext.SaveChanges();
            }

            ErasoftDbContext.SIT04B.RemoveRange(kirimDetailInDb);

            ErasoftDbContext.SIT04A.Remove(kirimInDb);
            ErasoftDbContext.SaveChanges();

            var vm = new StokViewModel()
            {
                Errors = null
            };

            return Json(kirimInDb, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DeleteDetailKirim(int noUrut)
        {
            try
            {
                var detailKirimInDb = ErasoftDbContext.SIT04B.Single(b => b.NO_URUT == noUrut);
                var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == detailKirimInDb.NO_BUKTI);

                var listOrder = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == detailKirimInDb.PESANAN).ToList();
                listOrder.Single().JAMKIRIM = null;

                ErasoftDbContext.SIT04B.Remove(detailKirimInDb);
                ErasoftDbContext.SaveChanges();

                var listPesanan = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).Select(a => a.PESANAN).ToList();
                string ordersn = "";
                foreach (var item in listPesanan)
                {
                    if (item == listPesanan.Last())
                    {
                        ordersn = ordersn + "'" + item + "'";
                    }
                    else
                    {
                        ordersn = ordersn + "'" + item + "',";
                    }
                }
                var vm = new PengirimanViewModel()
                {
                    Pengiriman = ErasoftDbContext.SIT04A.Single(a => a.NO_BUKTI == kirimInDb.NO_BUKTI),
                    ListPengiriman = ErasoftDbContext.SIT04A.ToList(),
                    ListPengirimanDetail = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).ToList(),
                    //Shipment = listShipment
                };

                if (listPesanan.Count() != 0)
                {
                    string ssql = "";
                    ssql += "SELECT SHIPMENT, NO_BUKTI FROM SOT01A WHERE NO_BUKTI IN (" + ordersn + ")";
                    var listShipment = ErasoftDbContext.Database.SqlQuery<ShipmentOfKirim>(ssql).ToList();
                    foreach (var item in listShipment)
                    {
                        vm.Shipment.Add(new ShipmentOfKirim()
                        {
                            SHIPMENT = item.SHIPMENT,
                            NO_BUKTI = item.NO_BUKTI
                        });
                    }
                }

                return PartialView("BarangKirimPartial", vm);
            }
            catch (Exception ex)
            {
                return View("Error");
            }
        }

        [HttpPost]
        public ActionResult UpdateKirim(UpdateData dataUpdate)
        {
            var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataUpdate.NoBuktiKirim);
            kirimInDb.TGL_KIRIM = DateTime.ParseExact(dataUpdate.TglKirim, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            kirimInDb.KURIR = dataUpdate.Kurir;
            kirimInDb.NAMA_KURIR = dataUpdate.NamaKurir;
            kirimInDb.NAMA_EKSPEDISI = dataUpdate.Ekspedisi;

            DateTime? jamkirim = Convert.ToDateTime(dataUpdate.TglKirim + ' ' + dataUpdate.jamKirim);
            kirimInDb.JAM_KIRIM = jamkirim;
            //kirimInDb.JAM_KIRIM = DateTime.ParseExact(dataUpdate.jamKirim, "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture);
            ErasoftDbContext.SaveChanges();


            var getDetail = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == dataUpdate.NoBuktiKirim).ToList();
            var getPesanan = getDetail.Select(a => a.PESANAN).ToList();
            for (int z = 0; z < getPesanan.Count; z++)
            {
                if (getPesanan[z] != null)
                {
                    var nobuk = getPesanan[z];
                    var selectSOT01a = ErasoftDbContext.SOT01A.Where(a => a.NO_BUKTI == nobuk).Single();

                    selectSOT01a.JAMKIRIM = kirimInDb.JAM_KIRIM;
                    ErasoftDbContext.SaveChanges();
                    ModelState.Clear();
                }
            }

            return new EmptyResult();
        }

        [HttpGet]
        public ActionResult CetakPengiriman(int? KirimId)
        {
            try
            {
                var kirimInDb = ErasoftDbContext.SIT04A.Single(a => a.RECNUM == KirimId);
                var sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                var namaToko = "";
                if (sessionData?.Account != null)
                {
                    namaToko = sessionData.Account.NamaTokoOnline;
                }
                else
                {
                    if (sessionData?.User != null)
                    {
                        var accFromUser = MoDbContext.Account.Single(a => a.AccountId == sessionData.User.AccountId);
                        namaToko = accFromUser.NamaTokoOnline;
                    }
                }
                var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                var alamat = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;
                //var getKurir = Convert.ToInt32(kirimInDb.KURIR);
                //var kurir = MoDbContext.Ekspedisi.Single(a => a.RecNum == getKurir).NamaEkspedisi;
                //var ListKirimDetail = ErasoftDbContext.SIT04B.Where(pd => pd.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI).ToList();
                //var listPesananInKirimDetail = ListKirimDetail.Select(p => p.PESANAN).ToList();
                //var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI);
                var listPesanan = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).Select(a => a.PESANAN).ToList();


                var vm = new PengirimanViewModel()
                {
                    Pengiriman = kirimInDb,
                    ListPengirimanDetail = ErasoftDbContext.SIT04B.Where(fd => fd.NO_BUKTI == kirimInDb.NO_BUKTI).ToList(),
                    NamaToko = namaToko,
                    NamaPerusahaan = namaPT,
                    AlamatToko = alamat,
                    TlpToko = tlp,
                    NamaKurir = kirimInDb.NAMA_EKSPEDISI
                };

                if (listPesanan.Count() != 0)
                {
                    string ordersn = "";
                    foreach (var item in listPesanan)
                    {
                        if (item == listPesanan.Last())
                        {
                            ordersn = ordersn + "'" + item + "'";
                        }
                        else
                        {
                            ordersn = ordersn + "'" + item + "',";
                        }
                    }
                    string ssql = "";
                    ssql += "SELECT SHIPMENT, NO_BUKTI FROM SOT01A WHERE NO_BUKTI IN (" + ordersn + ")";
                    var listShipment = ErasoftDbContext.Database.SqlQuery<Shipments>(ssql).ToList();
                    foreach (var item in listShipment)
                    {
                        vm.Shipment.Add(new ShipmentOfKirim()
                        {
                            SHIPMENT = item.SHIPMENT,
                            NO_BUKTI = item.NO_BUKTI
                        });
                    }
                }

                return View(vm);
            }
            catch (Exception ex)
            {
                return View("NotFoundPage");
            }
        }

        public ActionResult GetDetailKirim(string orderId)
        {
            var listDetail = ErasoftDbContext.SIT04B.Where(b => b.NO_BUKTI == orderId).ToList();
            var detail = listDetail.Count();

            return Json(detail, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveAutoloadKirim(PengirimanViewModel dataVm, string param)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            var vmError = new InvoiceViewModel() { };

            var drTgl = Convert.ToDateTime(param.Split(';')[param.Split(';').Length - 4]);
            var sdTgl = Convert.ToDateTime(param.Split(';')[param.Split(';').Length - 3]);
            var drCust = param.Split(';')[param.Split(';').Length - 2];
            var sdCust = param.Split(';')[param.Split(';').Length - 1];
            var tglInput = dataVm.PengirimanDetail.TGL_INPUT;

            if (drTgl > sdTgl)
            {
                vmError.Errors.Add("Dari Tanggal tidak boleh lebih besar dari S/d Tanggal");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }
            if (sdCust.ToUpper() != "ZZZ")
            {
                if (drCust != "")
                {
                    if (Convert.ToInt32(drCust) > Convert.ToInt32(sdCust))
                    {
                        vmError.Errors.Add("Dari Marketplace tidak boleh lebih besar dari Sampai Marketplace");
                        return Json(vmError, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            if (dataVm.Pengiriman.KURIR == null || dataVm.Pengiriman.KURIR == "")
            {
                vmError.Errors.Add("Kurir tidak boleh kosong");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            //add by nurul 16/9/2019
            var nmKurir = "";
            bool adaGO = false;
            adaGO = dataVm.Pengiriman.NAMA_EKSPEDISI.ToUpper().Contains("GO");
            if (adaGO)
            {
                nmKurir = "go";
            }
            else
            {
                string[] kataAwal = dataVm.Pengiriman.NAMA_EKSPEDISI.Split(' ');
                nmKurir = kataAwal.First();
            }
            //end add by nurul 16/9/2019

            var sSql = "";
            sSql = "SELECT a.no_bukti AS PESANAN, ";
            sSql += "isnull(a.CUST, '') AS MARKETPLACE, ";
            sSql += "isnull(c.namamarket, '') +' (' + isnull(b.perso, '') + ')' AS NAMA_MARKET, ";
            sSql += "isnull(a.pemesan, '') as PEMBELI, ";
            sSql += "isnull(a.namapemesan, '') as NAMA_PEMBELI, ";
            sSql += "isnull(a.alamat_kirim, '') AS ALAMAT, ";
            sSql += "isnull(a.kota, '') AS KOTA, isnull(a.propinsi, '') AS PROPINSI, isnull(a.kode_pos, '') AS KODE_POS ";
            sSql += "FROM SOT01A a ";
            sSql += "INNER JOIN ARF01 b on a.cust = b.cust ";
            sSql += "LEFT JOIN MO.dbo.MARKETPLACE c on b.nama = c.idmarket ";
            sSql += "LEFT JOIN(SELECT DISTINCT PESANAN FROM SIT04A e INNER JOIN SIT04B f on e.no_bukti= f.no_bukti)d on a.no_bukti = d.pesanan ";
            sSql += "WHERE isnull(d.pesanan, '')= '' and a.status_transaksi = '03' ";
            sSql += "AND a.TGL BETWEEN '" + drTgl.ToString("yyyy-MM-dd") + " 00:00:00.000" + "' AND '" + sdTgl.ToString("yyyy-MM-dd") + " 23:59:59.999" + "' ";
            sSql += "AND a.CUST BETWEEN '" + drCust + "' AND '" + sdCust + "' ";
            //sSql += "AND a.SHIPMENT = '" + dataVm.Pengiriman.NAMA_EKSPEDISI + "'";
            sSql += "AND a.SHIPMENT like '%" + nmKurir + "%'";
            var cekPesanan = ErasoftDbContext.Database.SqlQuery<smolSOT01A>(sSql).ToList();
            if (cekPesanan.Count() == 0)
            {
                vmError.Errors.Add("Pesanan tidak ditemukan");
                return Json(vmError, JsonRequestBehavior.AllowGet);
            }

            for (int i = 0; i < cekPesanan.Count(); i++)
            {
                if (cekPesanan[i].NAMA_MARKET == " ()")
                {
                    vmError.Errors.Add("Marketplace tidak ditemukan");
                    return Json(vmError, JsonRequestBehavior.AllowGet);
                }
            }

            DateTime? jamkirim = Convert.ToDateTime(dataVm.Pengiriman.TGL_KIRIM?.ToString("dd/MM/yyyy") + ' ' + dataVm.Pengiriman.JAM_KIRIM?.ToString("HH:mm"));
            if (dataVm.Pengiriman.RECNUM == null)
            {
                //change by nurul 23/12/2019, perbaikan no bukti
                //var listKirimInDb = ErasoftDbContext.SIT04A.OrderByDescending(p => p.RECNUM).FirstOrDefault();
                //var digitAkhir = "";
                //var noKirim = "";

                //if (listKirimInDb == null)
                //{
                //    digitAkhir = "000001";
                //    noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT04A, RESEED, 0)");
                //}
                //else
                //{
                //    var lastRecNum = listKirimInDb.RECNUM;
                //    var lastKode = listKirimInDb.NO_BUKTI;
                //    lastRecNum++;

                //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //    noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";

                //    if (noKirim == lastKode)
                //    {
                //        lastRecNum++;
                //        digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                //        noKirim = $"DO{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                //    }
                //}
                var lastBukti = GenerateAutoNumber(ErasoftDbContext, "DO", "SIT04A", "NO_BUKTI");
                var noKirim = "DO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                //end change by nurul 23/12/2019, perbaikan no bukti

                dataVm.Pengiriman.NO_BUKTI = noKirim;
                dataVm.Pengiriman.JAM_KIRIM = jamkirim;

                //change by nurul 23/12/2019, perbaikan no_bukti
                //ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                try
                {
                    ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                    ErasoftDbContext.SaveChanges();
                }
                catch (Exception ex)
                {
                    var tempSI = ErasoftDbContext.SIT04A.Where(a => a.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI).Single();
                    if (tempSI != null)
                    {
                        if (tempSI.NO_BUKTI == noKirim)
                        {
                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                            lastBuktiNew++;
                            noKirim = "DO" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                            dataVm.Pengiriman.NO_BUKTI = noKirim;
                            ErasoftDbContext.SIT04A.Add(dataVm.Pengiriman);
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }
                }
                //end change by nurul 23/12/2019, perbaikan no bukti

            }
            else
            {
                var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI);

                kirimInDb.TGL_KIRIM = dataVm.Pengiriman.TGL_KIRIM;

                kirimInDb.KURIR = dataVm.Pengiriman.KURIR;
                kirimInDb.NAMA_KURIR = dataVm.Pengiriman.NAMA_KURIR;
                kirimInDb.NAMA_EKSPEDISI = dataVm.Pengiriman.NAMA_EKSPEDISI;
                kirimInDb.JAM_KIRIM = jamkirim;

            }

            ErasoftDbContext.SaveChanges();

            var spDrTgl = drTgl.ToString("yyyy-MM-dd") + " 00:00:00.000"; //23
            var spSdTgl = sdTgl.ToString("yyyy-MM-dd") + " 23:59:59.999";
            var spTglInput = dataVm.PengirimanDetail.TGL_INPUT?.ToString("yyyy-MM-dd");
            var spJamKirim = jamkirim?.ToString("yyyy-MM-dd HH:mm");

            SqlCommand CommandSQL = new SqlCommand();
            CommandSQL.Parameters.Add("@NOBUK", SqlDbType.VarChar, 10).Value = dataVm.Pengiriman.NO_BUKTI;

            CommandSQL.Parameters.Add("@DR_TGL", SqlDbType.VarChar, 23).Value = spDrTgl;
            CommandSQL.Parameters.Add("@SD_TGL", SqlDbType.VarChar, 23).Value = spSdTgl;
            CommandSQL.Parameters.Add("@DR_CUST", SqlDbType.VarChar, 10).Value = drCust;
            CommandSQL.Parameters.Add("@SD_CUST", SqlDbType.VarChar, 10).Value = sdCust;
            //CommandSQL.Parameters.Add("@KURIR", SqlDbType.VarChar, 50).Value = dataVm.Pengiriman.NAMA_EKSPEDISI;
            CommandSQL.Parameters.Add("@KURIR", SqlDbType.VarChar, 50).Value = nmKurir;
            CommandSQL.Parameters.Add("@USERNAME", SqlDbType.VarChar, 30).Value = dataVm.PengirimanDetail.USERNAME;
            CommandSQL.Parameters.Add("@TGL_INPUT", SqlDbType.VarChar, 10).Value = spTglInput;
            CommandSQL.Parameters.Add("@JAM_KIRIM", SqlDbType.VarChar, 16).Value = spJamKirim;

            EDB.ExecuteSQL("Con", "SP_AUTOLOAD_PENGIRIMAN", CommandSQL);

            ModelState.Clear();

            var ListKirimDetail = ErasoftDbContext.SIT04B.Where(pd => pd.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI).ToList();
            var listPesananInKirimDetail = ListKirimDetail.Select(p => p.PESANAN).ToList();
            //var kirimInDb = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI);
            //var listPesanan = ErasoftDbContext.SIT04B.Where(a => a.NO_BUKTI == kirimInDb.NO_BUKTI).Select(a => a.PESANAN).ToList();
            string ordersn = "";
            foreach (var item in listPesananInKirimDetail)
            {
                if (item == listPesananInKirimDetail.Last())
                {
                    ordersn = ordersn + "'" + item + "'";
                }
                else
                {
                    ordersn = ordersn + "'" + item + "',";
                }
            }
            string ssql = "";
            ssql += "SELECT SHIPMENT, NO_BUKTI FROM SOT01A WHERE NO_BUKTI IN (" + ordersn + ")";
            var listShipment = ErasoftDbContext.Database.SqlQuery<ShipmentOfKirim>(ssql).ToList();
            var vm = new PengirimanViewModel()
            {
                Pengiriman = ErasoftDbContext.SIT04A.Single(p => p.NO_BUKTI == dataVm.Pengiriman.NO_BUKTI),
                ListPengirimanDetail = ListKirimDetail,
                Shipment = listShipment
            };


            return PartialView("BarangKirimPartial", vm);
        }

        [HttpGet]
        public ActionResult GetEkspedisiKirim()
        {
            //change by nurul 16/9/2019, ambil ekspedisi dr master
            //var ssQl = "";
            //ssQl = "select distinct SHIPMENT from sot01a where isnull(shipment, '') <> '' and shipment <> 'replaceDeliveryProv' and status_transaksi = '03'";
            //var listEkspedisi = ErasoftDbContext.Database.SqlQuery<listKurir>(ssQl).ToList();
            var listEkspedisi = MoDbContext.Ekspedisi.ToList();
            //end change by nurul 16/9/2019

            return Json(listEkspedisi, JsonRequestBehavior.AllowGet);
        }

        // =============================================== Bagian Pengiriman (END)
        //end add by nurul 19/8/2019, tambah form pengiriman 

        //add by Tri 27 agustus 2019, validasi ubah barang non-varian menjadi varian
        public ActionResult ValidateCkVarian(string brg)
        {
            var barangInDB = ErasoftDbContext.STF02.Where(m => m.BRG == brg).FirstOrDefault();
            if (barangInDB != null)
            {
                if (barangInDB.TYPE == "3")
                {
                    var customer = ErasoftDbContext.ARF01.Where(m => m.NAMA == "7").ToList();//cari customer lazada
                    if (customer.Count > 0)
                    {
                        var listIdmarket = new List<int>();
                        foreach (var cust in customer)
                        {
                            listIdmarket.Add(cust.RecNum.Value);
                        }
                        var stf02h = ErasoftDbContext.STF02H.Where(m => m.BRG == brg && listIdmarket.Contains(m.IDMARKET) && !string.IsNullOrEmpty(m.BRG_MP)).ToList();
                        if (stf02h.Count > 0)// sudah link dengan akun lazada
                        {
                            return JsonErrorMessage("Barang ini sudah link dengan marketplace lazada, tidak dapat diubah menjadi barang varian.");
                        }
                    }
                }
            }
            return Json("", JsonRequestBehavior.AllowGet);
        }
        //end add by Tri 27 agustus 2019, validasi ubah barang non-varian menjadi varian

        //add by Tri 30-08-2019, picking list
        [Route("manage/Packinglist")]
        public ActionResult Packinglist()
        {
            var vm = new PackingListViewModel()
            {
                //listParent = ErasoftDbContext.SOT03A.ToList(),
            };

            return View("Pickinglist", vm);
        }

        public ActionResult Packinglist(string nobuk)
        {
            var vm = new PackingListViewModel()
            {
                //listParent = ErasoftDbContext.SOT03A.ToList(),
            };

            return View("Pickinglist", vm);
        }

        public ActionResult refreshTablePackinglist(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            sSQLSelect += "SELECT RECNUM, NO_BUKTI, TGL ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM SOT03A ";
            //sSQL2 += "LEFT JOIN ARF01 B ON A.NAMA_MARKET = B.CUST ";
            //sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE C ON B.NAMA = C.IdMarket ";
            if (search != "")
            {
                sSQL2 += "WHERE (NO_BUKTI LIKE '%" + search + "%' ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                //if (pagenumber == 0)
                //{
                //    pagenumber = 1;
                //}
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY TGL DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPackinglist = ErasoftDbContext.Database.SqlQuery<mdlPackinglist>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            //var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();

            IPagedList<mdlPackinglist> pagePackinglist = new StaticPagedList<mdlPackinglist>(listPackinglist, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePackinglistPartialView", pagePackinglist);
        }

        public ActionResult RefreshPackinglistForm()
        {
            try
            {
                var vm = new PackingListViewModel()
                {
                    listPesanan = new List<SOT03B>(),
                    listDetailPacking = new List<SOT03BDetailPacking>(),
                    listRekapBarang = new List<RekapBarang>()
                };

                return PartialView("FormPackinglistPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult GetDataPesananPackinglist(string nobuk)
        {
            var listPesanan = new List<SOT03B>();
            var dsPesanan = EDB.GetDataSet("CString", "SOT03B", "SELECT A.NO_BUKTI, A.TGL, NAMAPEMESAN, C.NAMAMARKET FROM SOT01A A INNER JOIN ARF01 B ON A.CUST = B.CUST INNER JOIN MO..MARKETPLACE C ON B.NAMA = C.IDMARKET INNER JOIN SOT01B  D ON A.NO_BUKTI = D.NO_BUKTI WHERE A.STATUS_TRANSAKSI = '02' AND D.QTY_N > 0");
            var listPesanandiPackinglist = new List<SOT03B>();
            //if (!string.IsNullOrEmpty(nobuk))
            //{
            //listPesanandiPackinglist = ErasoftDbContext.SOT03B.Where(dp => dp.NO_BUKTI == nobuk).ToList();
            //}
            listPesanandiPackinglist = ErasoftDbContext.SOT03B.ToList();

            if (dsPesanan.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dsPesanan.Tables[0].Rows.Count; i++)
                {
                    var pesanan = new SOT03B();
                    pesanan.NO_PESANAN = dsPesanan.Tables[0].Rows[i]["NO_BUKTI"].ToString();
                    pesanan.TGL_PESANAN = Convert.ToDateTime(dsPesanan.Tables[0].Rows[i]["TGL"]);
                    pesanan.PEMBELI = dsPesanan.Tables[0].Rows[i]["NAMAPEMESAN"].ToString();
                    pesanan.MARKETPLACE = dsPesanan.Tables[0].Rows[i]["NAMAMARKET"].ToString();

                    //if (!string.IsNullOrEmpty(nobuk))
                    //{
                    if (!listPesanandiPackinglist.Select(m => m.NO_PESANAN).Contains(pesanan.NO_PESANAN))
                        listPesanan.Add(pesanan);
                    //}
                    //else
                    //{
                    //    listPesanan.Add(pesanan);
                    //}
                }
            }


            return Json(listPesanan, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UpdatePackinglist(UpdateData dataUpdate)
        {
            var packinglistInDb = ErasoftDbContext.SOT03A.Single(p => p.RecNum == dataUpdate.RecNumPackinglist);
            packinglistInDb.TGL = DateTime.ParseExact(dataUpdate.Tgl, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        public ActionResult EditPackinglist(string nobuk)
        {
            var vm = new PackingListViewModel()
            {
            };
            vm.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == nobuk).FirstOrDefault();
            vm.listDetailPacking = new List<SOT03BDetailPacking>();
            var listSOT03B = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == vm.packingList.NO_BUKTI).ToList();

            var listPesanan = listSOT03B.Select(p => p.NO_PESANAN).ToList();
            var listSO = ErasoftDbContext.SOT01A.Where(p => listPesanan.Contains(p.NO_BUKTI)).ToList();
            foreach (var detil in listSOT03B)
            {
                var isiDetailpacking = new SOT03BDetailPacking()
                {
                    RecNum = detil.RecNum,
                    NO_BUKTI = detil.NO_BUKTI,
                    PEMBELI = detil.PEMBELI,
                    TGL_INPUT = detil.TGL_INPUT,
                    USERNAME = detil.USERNAME,
                    NO_PESANAN = detil.NO_PESANAN,
                    TGL_PESANAN = detil.TGL_PESANAN,
                    MARKETPLACE = detil.MARKETPLACE,
                };
                isiDetailpacking.SO_STATUS_KIRIM = "0";
                isiDetailpacking.SO_TRACKING_NUMBER = "";
                var cariSO = listSO.Where(p => p.NO_BUKTI == detil.NO_PESANAN).FirstOrDefault();
                if (cariSO != null)
                {
                    isiDetailpacking.SO_STATUS_KIRIM = cariSO.status_kirim;
                    isiDetailpacking.SO_TRACKING_NUMBER = cariSO.TRACKING_SHIPMENT;
                    //ADD BY NURUL 22/7/2020
                    isiDetailpacking.NO_REFERENSI = cariSO.NO_REFERENSI;
                    isiDetailpacking.STATUS_PRINT = cariSO.status_print;
                    isiDetailpacking.BARCODE = cariSO.TIPE_KIRIM;
                    //END ADD BY NURUL 22/7/2020
                }
                vm.listDetailPacking.Add(isiDetailpacking);
            }

            vm.listRekapBarang = new List<RekapBarang>();
            //CHANGE BY NURUL 22/7/2020
            //var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + nobuk + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
            //var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(A.QTY) QTY, ISNULL(C.BRG_CUST,'') AS BARCODE from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG INNER JOIN SOT01B C ON A.NO_PESANAN=C.NO_BUKTI AND A.BRG=C.BRG WHERE A.NO_BUKTI = '" + nobuk + "' GROUP BY A.BRG, B.NAMA, B.NAMA2, C.BRG_CUST");
            var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY, ISNULL(B.WARNA,'') as BARCODE from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + nobuk + "' GROUP BY A.BRG, B.NAMA, B.NAMA2, B.WARNA");
            //END CHANGE BY NURUL 22/7/2020
            for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
            {
                var newData = new RekapBarang
                {
                    BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                    NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                    QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
                    //ADD BY NURUL 22/7/2020
                    BARCODE = dsRekap.Tables[0].Rows[i]["BARCODE"].ToString(),
                    //END ADD BY NURUL 22/7/2020
                };
                vm.listRekapBarang.Add(newData);
            }


            return PartialView("FormPackinglistPartial", vm);
        }

        public ActionResult SavePackinglist(PackingListViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.packingList.RecNum == null)
            {
                var listPackinglistInDb = ErasoftDbContext.SOT03A.OrderBy(p => p.RecNum).ToList();
                int? lastRecNum = 0;
                string nobuk = "";
                if (listPackinglistInDb.Count == 0)
                {
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SOT03A, RESEED, 0)");
                    lastRecNum++;
                }
                else
                {
                    lastRecNum = listPackinglistInDb.Last().RecNum;
                    lastRecNum++;
                }
                nobuk = "PL" + lastRecNum.ToString().PadLeft(6, '0');
                dataVm.packingList.NO_BUKTI = nobuk;
                dataVm.packingList.USERNAME = usernameLogin;

                ErasoftDbContext.SOT03A.Add(dataVm.packingList);
                ErasoftDbContext.SaveChanges();

                if (dataVm.detailPackingList.RecNum == null)
                {
                    //change by nurul 3/1/2019 -- dataVm.PromosiDetail.RecNumPromosi = lastRecNum;
                    dataVm.detailPackingList.NO_BUKTI = dataVm.packingList.NO_BUKTI;
                    dataVm.detailPackingList.USERNAME = usernameLogin;
                    ErasoftDbContext.SOT03B.Add(dataVm.detailPackingList);
                    ErasoftDbContext.SaveChanges();
                }

            }
            else
            {
                var packinglistInDb = ErasoftDbContext.SOT03A.Single(p => p.NO_BUKTI == dataVm.packingList.NO_BUKTI);

                if (dataVm.detailPackingList.RecNum == null)
                {
                    dataVm.detailPackingList.NO_BUKTI = packinglistInDb.NO_BUKTI;
                    dataVm.detailPackingList.USERNAME = usernameLogin;
                    ErasoftDbContext.SOT03B.Add(dataVm.detailPackingList);
                    ErasoftDbContext.SaveChanges();

                }
            }

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            //add 9/9/19, proses ulang setiap penambahan pesanan
            ProsesDetailPackinglist(dataVm.packingList.NO_BUKTI);
            //end add 9/9/19, proses ulang setiap penambahan pesanan

            var vm = new PackingListViewModel()
            {

            };
            vm.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == dataVm.packingList.NO_BUKTI).FirstOrDefault();
            vm.listDetailPacking = new List<SOT03BDetailPacking>();
            var listSOT03B = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == dataVm.packingList.NO_BUKTI).ToList();

            var listPesanan = listSOT03B.Select(p => p.NO_PESANAN).ToList();
            var listSO = ErasoftDbContext.SOT01A.Where(p => listPesanan.Contains(p.NO_BUKTI)).ToList();
            foreach (var detil in listSOT03B)
            {
                var isiDetailpacking = new SOT03BDetailPacking()
                {
                    RecNum = detil.RecNum,
                    NO_BUKTI = detil.NO_BUKTI,
                    PEMBELI = detil.PEMBELI,
                    TGL_INPUT = detil.TGL_INPUT,
                    USERNAME = detil.USERNAME,
                    NO_PESANAN = detil.NO_PESANAN,
                    TGL_PESANAN = detil.TGL_PESANAN,
                    MARKETPLACE = detil.MARKETPLACE,
                };
                isiDetailpacking.SO_STATUS_KIRIM = "0";
                isiDetailpacking.SO_TRACKING_NUMBER = "";
                var cariSO = listSO.Where(p => p.NO_BUKTI == detil.NO_PESANAN).FirstOrDefault();
                if (cariSO != null)
                {
                    isiDetailpacking.SO_STATUS_KIRIM = cariSO.status_kirim;
                    isiDetailpacking.SO_TRACKING_NUMBER = cariSO.TRACKING_SHIPMENT;
                }
                vm.listDetailPacking.Add(isiDetailpacking);
            }

            vm.listRekapBarang = new List<RekapBarang>();
            var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + dataVm.packingList.NO_BUKTI + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
            for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
            {
                var newData = new RekapBarang
                {
                    BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                    NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                    QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
                };
                vm.listRekapBarang.Add(newData);
            }

            return PartialView("FormPackinglistPartial", vm);
        }

        public ActionResult DeletePackinglist(string nobuk)
        {
            var packinglistInDb = ErasoftDbContext.SOT03A.Single(p => p.NO_BUKTI == nobuk);
            var detailPackinglistInDb = ErasoftDbContext.SOT03B.Where(dp => dp.NO_BUKTI == packinglistInDb.NO_BUKTI).ToList();
            var detailBrgPackinglistInDb = ErasoftDbContext.SOT03C.Where(dp => dp.NO_BUKTI == packinglistInDb.NO_BUKTI).ToList();

            if (detailPackinglistInDb.Count > 0)
            {
                ErasoftDbContext.SOT03B.RemoveRange(detailPackinglistInDb);
            }
            if (detailBrgPackinglistInDb.Count > 0)
            {
                ErasoftDbContext.SOT03C.RemoveRange(detailBrgPackinglistInDb);
            }
            ErasoftDbContext.SOT03A.Remove(packinglistInDb);
            ErasoftDbContext.SaveChanges();


            return Json(packinglistInDb, JsonRequestBehavior.AllowGet);
            //return PartialView("TablePromosiPartial", vm);
        }

        [HttpGet]
        public ActionResult DeletePesananPackinglist(int noUrut)
        {
            try
            {
                var pesananPackinglistInDb = ErasoftDbContext.SOT03B.Single(b => b.RecNum == noUrut);
                var sot03c = ErasoftDbContext.SOT03C.Where(m => m.NO_BUKTI == pesananPackinglistInDb.NO_BUKTI && m.NO_PESANAN == pesananPackinglistInDb.NO_PESANAN).ToList();

                ErasoftDbContext.SOT03B.Remove(pesananPackinglistInDb);
                if (sot03c.Count > 0)
                {
                    ErasoftDbContext.SOT03C.RemoveRange(sot03c);
                }
                ErasoftDbContext.SaveChanges();

                var vm = new PackingListViewModel()
                {

                };
                vm.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == pesananPackinglistInDb.NO_BUKTI).FirstOrDefault();
                vm.listDetailPacking = new List<SOT03BDetailPacking>();
                var listSOT03B = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == vm.packingList.NO_BUKTI).ToList();

                var listPesanan = listSOT03B.Select(p => p.NO_PESANAN).ToList();
                var listSO = ErasoftDbContext.SOT01A.Where(p => listPesanan.Contains(p.NO_BUKTI)).ToList();
                foreach (var detil in listSOT03B)
                {
                    var isiDetailpacking = new SOT03BDetailPacking()
                    {
                        RecNum = detil.RecNum,
                        NO_BUKTI = detil.NO_BUKTI,
                        PEMBELI = detil.PEMBELI,
                        TGL_INPUT = detil.TGL_INPUT,
                        USERNAME = detil.USERNAME,
                        NO_PESANAN = detil.NO_PESANAN,
                        TGL_PESANAN = detil.TGL_PESANAN,
                        MARKETPLACE = detil.MARKETPLACE,
                    };
                    isiDetailpacking.SO_STATUS_KIRIM = "0";
                    isiDetailpacking.SO_TRACKING_NUMBER = "";
                    var cariSO = listSO.Where(p => p.NO_BUKTI == detil.NO_PESANAN).FirstOrDefault();
                    if (cariSO != null)
                    {
                        isiDetailpacking.SO_STATUS_KIRIM = cariSO.status_kirim;
                        isiDetailpacking.SO_TRACKING_NUMBER = cariSO.TRACKING_SHIPMENT;
                    }
                    vm.listDetailPacking.Add(isiDetailpacking);
                }

                vm.listRekapBarang = new List<RekapBarang>();
                var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + pesananPackinglistInDb.NO_BUKTI + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
                for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
                {
                    var newData = new RekapBarang
                    {
                        BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                        NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                        QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
                    };
                    vm.listRekapBarang.Add(newData);
                }


                return PartialView("FormPackinglistPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public void ProsesDetailPackinglist(string nobuk)
        {
            var sot03b = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == nobuk).ToList();
            var tglInput = DateTime.Now;
            if (sot03b.Count > 0)
            {
                EDB.ExecuteSQL("CString", CommandType.Text, "DELETE FROM SOT03C WHERE NO_BUKTI = '" + nobuk + "'");
                var listNoPesanan = sot03b.Select(m => m.NO_PESANAN).ToList();
                var pesananInDB = ErasoftDbContext.SOT01B.Where(m => listNoPesanan.Contains(m.NO_BUKTI)).ToList();
                foreach (var data in pesananInDB)
                {
                    var newSot03c = new SOT03C();
                    newSot03c.NO_BUKTI = nobuk;
                    newSot03c.NO_PESANAN = data.NO_BUKTI;
                    newSot03c.BRG = data.BRG;
                    //newSot03c.QTY = data.QTY_N == 0 ? Convert.ToInt32(data.QTY) : Convert.ToInt32(data.QTY_N);
                    newSot03c.QTY = Convert.ToInt32(data.QTY_N);
                    newSot03c.USERNAME = usernameLogin;
                    newSot03c.TGL_INPUT = tglInput;

                    //var brgInDB = ErasoftDbContext.STF02.Where(m => m.BRG == data.BRG).FirstOrDefault();
                    //if(brgInDB != null)
                    //{
                    //    newSot03c.NAMA_BARANG = brgInDB.NAMA + (string.IsNullOrEmpty(brgInDB.NAMA2) ? "" : " " + brgInDB.NAMA2);
                    //}

                    ErasoftDbContext.SOT03C.Add(newSot03c);
                    ErasoftDbContext.SaveChanges();
                }
            }
            //remark 9/9/19, proses dipanggil saat insert pesanan
            //else
            //{
            //    return JsonErrorMessage("Tidak ada pesanan pada No Bukti ini untuk diproses");
            //}

            ////return Json("", JsonRequestBehavior.AllowGet);
            //var vm = new PackingListViewModel()
            //{

            //};

            //vm.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == nobuk).FirstOrDefault();
            //vm.listDetailPacking = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == nobuk).ToList();
            //var listRekapBarang = ErasoftDbContext.SOT03C.Where(m => m.NO_BUKTI == nobuk).ToList();
            //vm.listRekapBarang = new List<RekapBarang>();
            //if (listRekapBarang.Count > 0)
            //{
            //    var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + nobuk + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
            //    for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
            //    {
            //        var newData = new RekapBarang
            //        {
            //            BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
            //            NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
            //            QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
            //        };
            //        vm.listRekapBarang.Add(newData);
            //    }
            //}

            //return PartialView("FormPackinglistPartial", vm);
            //end remark 9/9/19, proses dipanggil saat insert pesanan
        }

        public ActionResult LihatRekapPackingList(string nobuk, string mode)
        {
            var retData = new PackingListViewModel();
            retData.printMode = mode;
            retData.listRekapBarang = new List<RekapBarang>();
            retData.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == nobuk).FirstOrDefault();
            if (mode == "1")
            {
                //CHANGE BY NURUL 17/9/2020, BRG MULTI SKU
                //var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.NO_PESANAN, A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, QTY, PEMBELI, MARKETPLACE FROM SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG INNER JOIN SOT03B C ON A.NO_BUKTI = C.NO_BUKTI AND A.NO_PESANAN = C.NO_PESANAN WHERE A.NO_BUKTI = '" + nobuk + "' ORDER BY A.NO_PESANAN, NAMA_BARANG");
                ////var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.NO_PESANAN, A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, QTY, PEMBELI, MARKETPLACE, ISNULL(D.NO_REFERENSI,'') AS NO_REFERENSI FROM SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG INNER JOIN SOT03B C ON A.NO_BUKTI = C.NO_BUKTI AND A.NO_PESANAN = C.NO_PESANAN INNER JOIN SOT01A D ON A.NO_PESANAN = D.NO_BUKTI WHERE A.NO_BUKTI = '" + nobuk + "' ORDER BY A.NO_PESANAN, NAMA_BARANG");
                //CHANGE BY NURUL 26/9/2020
                //var sSQL = "SELECT A.NO_PESANAN, A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, QTY, PEMBELI, MARKETPLACE, ISNULL(D.NO_REFERENSI,'') AS NO_REFERENSI, ISNULL(E.BRG_MULTISKU,'') BRG_MULTISKU , ISNULL(E.NAMA_BRG_MULTISKU,'') NAMA_BRG_MULTISKU FROM SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG INNER JOIN SOT03B C ON A.NO_BUKTI = C.NO_BUKTI AND A.NO_PESANAN = C.NO_PESANAN INNER JOIN SOT01A D ON A.NO_PESANAN = D.NO_BUKTI " +
                //            "LEFT JOIN (SELECT B.NO_BUKTI, ISNULL(B.BRG_MULTISKU,'') BRG_MULTISKU, ISNULL(C.NAMA + ' ' + (ISNULL(C.NAMA2, '')),'') NAMA_BRG_MULTISKU FROM SOT03C A INNER JOIN SOT01B B ON A.NO_PESANAN = B.NO_BUKTI INNER JOIN STF02 C ON B.BRG_MULTISKU = C.BRG where A.NO_BUKTI = '" + nobuk + "')E ON A.NO_PESANAN = E.NO_BUKTI " +
                //            "WHERE A.NO_BUKTI = '" + nobuk + "' GROUP BY A.NO_PESANAN,A.BRG,B.NAMA,B.NAMA2,QTY, PEMBELI, MARKETPLACE,D.NO_REFERENSI ,E.BRG_MULTISKU,E.NAMA_BRG_MULTISKU ORDER BY A.NO_PESANAN, NAMA_BARANG";
                var sSQL = "SELECT A.NO_BUKTI AS NO_PESANAN, B.BRG,C.NAMA + ' ' + (ISNULL(C.NAMA2, '')) NAMA_BARANG,B.QTY,A.NAMAPEMESAN AS PEMBELI,F.NAMAMARKET + ' (' + E.PERSO +')' AS MARKETPLACE, ISNULL(A.NO_REFERENSI,'')NO_REFERENSI, ISNULL(B.BRG_MULTISKU,'')BRG_MULTISKU, ISNULL(D.NAMA + ' ' + (ISNULL(D.NAMA2, '')),'') NAMA_BRG_MULTISKU " +
                            "FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI=B.NO_BUKTI LEFT JOIN STF02 C ON B.BRG=C.BRG LEFT JOIN STF02 D ON D.BRG=B.BRG_MULTISKU  " +
                            "LEFT JOIN ARF01 E ON A.CUST=E.CUST LEFT JOIN MO..MARKETPLACE F ON E.NAMA=F.IDMARKET " +
                            "WHERE A.NO_BUKTI IN (SELECT NO_PESANAN FROM SOT03C WHERE NO_BUKTI='" + nobuk + "')";
                //END CHANGE BY NURUL 26/9/2020
                var dsRekap = EDB.GetDataSet("CString", "SOT03C", sSQL);
                //END CHANGE BY NURUL 17/9/2020, BRG MULTI SKU
                var retRekap = new List<RekapBarang>();
                if (dsRekap.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
                    {
                        var newData = new RekapBarang
                        {
                            NO_PESANAN = dsRekap.Tables[0].Rows[i]["NO_PESANAN"].ToString(),
                            NO_REFERENSI = dsRekap.Tables[0].Rows[i]["NO_REFERENSI"].ToString(),
                            BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                            NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                            PEMBELI = dsRekap.Tables[0].Rows[i]["PEMBELI"].ToString(),
                            MARKETPLACE = dsRekap.Tables[0].Rows[i]["MARKETPLACE"].ToString(),
                            QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),

                            //add BY NURUL 17/9/2020, BRG MULTI SKU
                            BRG_MULTISKU = dsRekap.Tables[0].Rows[i]["BRG_MULTISKU"].ToString(),
                            NAMA_BRG_MULTISKU = dsRekap.Tables[0].Rows[i]["NAMA_BRG_MULTISKU"].ToString(),
                            //end add BY NURUL 17/9/2020, BRG MULTI SKU
                        };
                        retRekap.Add(newData);
                    }
                }
                retData.listRekapBarang = retRekap;
            }
            else
            {
                var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + nobuk + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
                for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
                {
                    var newData = new RekapBarang
                    {
                        BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                        NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                        QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
                    };
                    retData.listRekapBarang.Add(newData);
                }
            }

            return View(retData);
        }
        public class PackingSuccess
        {
            public string no_bukti { get; set; }
            public int recnum { get; set; }
        }
        public class GeneratePacking
        {
            public List<listErrorPacking> errors { get; set; }
            public List<PackingSuccess> so_success { get; set; }
            public string packingNo { get; set; }
        }

        public PesananViewModel ProsesPesananToPackingList(/*string[] rows_selected*/List<string> rows_selected)
        {
            var vmError = new PesananViewModel() { };
            if (rows_selected == null)
            {


                vmError.Errors.Add("Silahkan pilih pesanan yang akan masuk packing list !");
                //return Json(vmError, JsonRequestBehavior.AllowGet);
                return vmError;
            }
            var listPackinglistinDB = ErasoftDbContext.SOT03B.Select(m => m.NO_PESANAN).ToList();
            var listorder = new List<SOT01A>();
            var listBuyer = new List<ARF01C>();
            var listPesanan = new List<string>();
            for (int i = 0; i < rows_selected.Count; i++)
            {
                if (!string.IsNullOrEmpty(rows_selected[i]))
                {
                    Int32 row = Convert.ToInt32(rows_selected[i]);
                    var xx = ErasoftDbContext.SOT01A.Where(a => a.RecNum == row && a.STATUS_TRANSAKSI == "03").FirstOrDefault();
                    if (xx != null)
                    {
                        if (!listPackinglistinDB.Contains(xx.NO_BUKTI))
                        {
                            listPesanan.Add(xx.NO_BUKTI);
                        }
                    }
                }
            }

            if (listPesanan.Count > 0)
            {
                var newPackinglist = new SOT03A
                {
                    TGL = DateTime.Now,
                    USERNAME = "AUTO_CREATE"
                };
                var listPackinglistInDb = ErasoftDbContext.SOT03A.OrderBy(p => p.RecNum).ToList();
                int? lastRecNum = 0;
                string nobuk = "";
                if (listPackinglistInDb.Count == 0)
                {
                    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SOT03A, RESEED, 0)");
                    lastRecNum++;
                }
                else
                {
                    lastRecNum = listPackinglistInDb.Last().RecNum;
                    lastRecNum++;
                }
                nobuk = "PL" + lastRecNum.ToString().PadLeft(6, '0');
                newPackinglist.NO_BUKTI = nobuk;
                ErasoftDbContext.SOT03A.Add(newPackinglist);
                ErasoftDbContext.SaveChanges();


                foreach (var order in listPesanan)
                {
                    var dsPesanan = EDB.GetDataSet("CString", "SOT03B", "SELECT A.NO_BUKTI, A.TGL, NAMAPEMESAN, C.NAMAMARKET FROM SOT01A A INNER JOIN ARF01 B ON A.CUST = B.CUST INNER JOIN MO..MARKETPLACE C ON B.NAMA = C.IDMARKET WHERE A.NO_BUKTI = '" + order + "'");
                    if (dsPesanan.Tables[0].Rows.Count > 0)
                    {
                        var pesanan = new SOT03B();
                        pesanan.NO_PESANAN = dsPesanan.Tables[0].Rows[0]["NO_BUKTI"].ToString();
                        pesanan.TGL_PESANAN = Convert.ToDateTime(dsPesanan.Tables[0].Rows[0]["TGL"]);
                        pesanan.PEMBELI = dsPesanan.Tables[0].Rows[0]["NAMAPEMESAN"].ToString();
                        pesanan.MARKETPLACE = dsPesanan.Tables[0].Rows[0]["NAMAMARKET"].ToString();
                        pesanan.NO_BUKTI = newPackinglist.NO_BUKTI;
                        pesanan.USERNAME = newPackinglist.USERNAME;
                        pesanan.TGL_INPUT = newPackinglist.TGL;
                        ErasoftDbContext.SOT03B.Add(pesanan);
                        ErasoftDbContext.SaveChanges();
                    }
                }

                ProsesDetailPackinglist(newPackinglist.NO_BUKTI);
                vmError.selectRec = newPackinglist.NO_BUKTI;
                //return Json(vmError, JsonRequestBehavior.AllowGet);
                return vmError;
                //var vm = new PackingListViewModel()
                //{

                //};
                //vm.packingList = ErasoftDbContext.SOT03A.Where(m => m.NO_BUKTI == newPackinglist.NO_BUKTI).FirstOrDefault();
                //vm.listDetailPacking = ErasoftDbContext.SOT03B.Where(m => m.NO_BUKTI == newPackinglist.NO_BUKTI).ToList();
                //var listRekapBarang = ErasoftDbContext.SOT03C.Where(m => m.NO_BUKTI == newPackinglist.NO_BUKTI).ToList();
                //vm.listRekapBarang = new List<RekapBarang>();
                //if (listRekapBarang.Count > 0)
                //{
                //    var dsRekap = EDB.GetDataSet("CString", "SOT03C", "SELECT A.BRG, B.NAMA + ' ' + (ISNULL(NAMA2, '')) NAMA_BARANG, sum(QTY) QTY from SOT03C A INNER JOIN STF02 B ON A.BRG = B.BRG WHERE NO_BUKTI = '" + newPackinglist.NO_BUKTI + "' GROUP BY A.BRG, B.NAMA, B.NAMA2");
                //    for (int i = 0; i < dsRekap.Tables[0].Rows.Count; i++)
                //    {
                //        var newData = new RekapBarang
                //        {
                //            BRG = dsRekap.Tables[0].Rows[i]["BRG"].ToString(),
                //            NAMA_BARANG = dsRekap.Tables[0].Rows[i]["NAMA_BARANG"].ToString(),
                //            QTY = Convert.ToInt32(dsRekap.Tables[0].Rows[i]["QTY"].ToString()),
                //        };
                //        vm.listRekapBarang.Add(newData);
                //    }
                //}

                //return View("FormPackinglistPartial", vm);
            }
            vmError.Errors.Add("Pesanan yang ada pilih sudah masuk Packing List");
            //return JsonErrorMessage("Pesanan yang ada pilih sudah masuk Packing List");
            return vmError;
        }

        //end add by Tri 30-08-2019, picking list

        public ActionResult RefreshTablePackingPesananMP(string bukti, string nama_cust, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["tableBukti"] = bukti;

            string viewName = "";
            switch (nama_cust)
            {
                case "7":
                    viewName = "PackingListLazada";
                    break;
                case "8":
                    viewName = "PackingListBukalapak";
                    break;
                case "9":
                    viewName = "PackingListElevenia";
                    break;
                case "15":
                    viewName = "PackingListTokped";
                    break;
                case "16":
                    viewName = "PackingListBlibli";
                    break;
                case "17":
                    viewName = "PackingListShopee";
                    break;
                case "19":
                    viewName = "PackingListJDID";
                    break;
                case "20":
                    viewName = "PackingList82Cart";
                    break;
                case "21":
                    viewName = "PackingListShopify";
                    break;
                default:
                    viewName = "";
                    break;
            }

            string cust = "";
            var listAkunTokped = ErasoftDbContext.ARF01.Where(p => p.NAMA == nama_cust).Select(p => p.CUST).ToList();
            foreach (var item in listAkunTokped)
            {
                cust += item + "','";
            }

            string[] getkata = search.Split(' ');
            string sSQL_No_Bukti = "";
            string sSQL_No_Ref = "";
            string sSQL_Pembeli = "";
            string sSQL_Shipment = "";

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (getkata.Length == 1)
                        {
                            sSQL_No_Bukti += " ( A.NO_BUKTI like '%" + getkata[i] + "%' )";
                            sSQL_No_Ref += " ( A.NO_REFERENSI like '%" + getkata[i] + "%' )";
                            sSQL_Pembeli += " ( B.PEMBELI like '%" + getkata[i] + "%' )";
                            sSQL_Shipment += " ( A.SHIPMENT like '%" + getkata[i] + "%' )";
                        }
                        else
                        {
                            if (getkata[i] == getkata.First())
                            {
                                sSQL_No_Bukti += " ( A.NO_BUKTI like '%" + getkata[i] + "%' ";
                                sSQL_No_Ref += " ( A.NO_REFERENSI like '%" + getkata[i] + "%' ";
                                sSQL_Pembeli += " ( B.PEMBELI like '%" + getkata[i] + "%' ";
                                sSQL_Shipment += " ( A.SHIPMENT like '%" + getkata[i] + "%' ";
                            }
                            else if (getkata[i] == getkata.Last())
                            {
                                sSQL_No_Bukti += " and A.NO_BUKTI like '%" + getkata[i] + "%' )";
                                sSQL_No_Ref += " and A.NO_REFERENSI like '%" + getkata[i] + "%' )";
                                sSQL_Pembeli += " and B.PEMBELI like '%" + getkata[i] + "%' )";
                                sSQL_Shipment += " and A.SHIPMENT like '%" + getkata[i] + "%' )";
                            }
                            else
                            {
                                sSQL_No_Bukti += " and A.NO_BUKTI like '%" + getkata[i] + "%' ";
                                sSQL_No_Ref += " and A.NO_REFERENSI like '%" + getkata[i] + "%' ";
                                sSQL_Pembeli += " and B.PEMBELI like '%" + getkata[i] + "%' ";
                                sSQL_Shipment += " and A.SHIPMENT like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.CUST,A.NAMA_CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item, isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no, A.recnum as so_recnum ";
            sSQLSelect += ", A.NO_PO_CUST as no_job ";
            //add by nurul 22/7/2020
            sSQLSelect += ", isnull(A.status_print,'') AS status_print ";
            //end add by nurul 22/7/2020
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.NO_BUKTI) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQL_No_Bukti + " or " + sSQL_No_Ref + " or " + sSQL_Pembeli + " or " + sSQL_Shipment + " ) ";
            }

            //var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            //if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            //{
            //    pagenumber = pagenumber - 1;
            //}

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
            //            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            //            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            var pageContent = ListStt01a;

            IPagedList<PackingPerMP> pageOrders = new StaticPagedList<PackingPerMP>(pageContent, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView(viewName, pageOrders);
        }

        public ActionResult SaveNoResiPesananJDID(string idpesanan, string noresi)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();

                if(noresi != null && idpesanan != null)
                {

                    var dataPesanan = ErasoftDbContext.SOT01A.Where(p => p.NO_BUKTI == idpesanan).SingleOrDefault();
                    dataPesanan.TRACKING_SHIPMENT = noresi.ToString();
                    ErasoftDbContext.SaveChanges();
                    var successCount = listSuccess.Count();
                    return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "No Resi Kosong." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses tambah no resi. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public ActionResult RequestPickupTokpedPerPacking(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                //string cust = "";
                //var listAkunTokped = ErasoftDbContext.ARF01.Where(p => p.NAMA == "15").Select(p => p.CUST).ToList();
                //foreach (var item in listAkunTokped)
                //{
                //    cust += item + "','";
                //}
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();
                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NAMA_CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                //sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                foreach (var item in ListStt01a)
                {
                    var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == item.CUST);
                    if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                    {
                        if (marketPlace.STATUS_API == "1")
                        {
                            TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                            {
                                merchant_code = marketPlace.Sort1_Cust, //FSID
                                API_client_password = marketPlace.API_CLIENT_P, //Client ID
                                API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                                API_secret_key = marketPlace.API_KEY, //Shop ID 
                                token = marketPlace.TOKEN,
                                idmarket = marketPlace.RecNum.Value,
                                DatabasePathErasoft = dbPathEra,
                                username = usernameLogin
                            };


                            string[] referensi = item.no_referensi.Split(';');
                            if (referensi.Count() > 0)
                            {
#if (DEBUG || Debug_AWS)
                                //Task.Run(() => tokpedController.PostRequestPickup(dbPathEra, item.nama_pemesan, marketPlace.CUST, "Pesanan", "Ganti Status", iden, item.no_bukti, referensi[0]).Wait());
                                TokopediaControllerJob tokpedController = new TokopediaControllerJob();
                                Task.Run(() => tokpedController.PostRequestPickup(dbPathEra, item.no_bukti, marketPlace.CUST, "Pesanan", "Ganti Status", iden, item.no_bukti, referensi[0]).Wait());
#else
                                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.PostRequestPickup(dbPathEra, item.no_bukti, marketPlace.CUST, "Pesanan", "Ganti Status", iden, item.no_bukti, referensi[0]));
#endif

                                listSuccess.Add(new listSuccessPrintLabel
                                {
                                    no_referensi = item.no_bukti
                                });
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = item.no_bukti,
                                    errorMessage = "Pesanan tidak bisa diproses Pickup."
                                });
                            }
                        }
                        else
                        {
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = item.no_bukti,
                                errorMessage = "Status Link ke Marketplace tidak aktif."
                            });
                        }
                    }
                    else
                    {
                        listErrors.Add(new PackingListErrors
                        {
                            keyname = item.no_bukti,
                            errorMessage = "Status Link ke Marketplace tidak aktif."
                        });
                    }
                }

                var successCount = listSuccess.Count();
                return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public ActionResult RequestPackedLazadaPerPacking(string cust, string bukti, string DeliveryProvider, List<string> rows_selected)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        string sSQLSelect = "";
                        sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item,isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no ";
                        string sSQL2 = "";
                        sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                        string sSQLSelect2 = "";
                        sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
                        var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                        foreach (var so in ListStt01a)
                        {
                            if (!string.IsNullOrWhiteSpace(so.no_referensi))
                            {
                                if (string.IsNullOrWhiteSpace(so.tracking_no))
                                {
                                    var lzdApi = new LazadaController();
                                    List<string> orderItemIds = new List<string>();
                                    var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == so.no_bukti).ToList();
                                    var adaItem = false;
                                    var adaOrderItemIdNull = false;
                                    if (sot01b.Count > 0)
                                    {
                                        List<string> ordItemId = new List<string>();
                                        foreach (SOT01B item in sot01b)
                                        {
                                            adaItem = true;
                                            if (string.IsNullOrWhiteSpace(item.ORDER_ITEM_ID))
                                            {
                                                adaOrderItemIdNull = true;
                                            }
                                            ordItemId.Add(item.ORDER_ITEM_ID);
                                        }
                                        if (adaItem && !adaOrderItemIdNull && !string.IsNullOrWhiteSpace(so.no_referensi))
                                        {
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);
                                            var jobId = clientJobServer.Enqueue<LazadaControllerJob>(x => x.GetToPackedToDeliver(dbPathEra, so.nama_pemesan, marketPlace.CUST, "Pesanan", "Packing", usernameLogin, ordItemId, DeliveryProvider, marketPlace.TOKEN));

                                            listSuccess.Add(new listSuccessPrintLabel
                                            {
                                                no_referensi = so.no_referensi
                                            });
                                        }
                                        else
                                        {
                                            listErrors.Add(new PackingListErrors
                                            {
                                                keyname = so.no_referensi,
                                                errorMessage = "Terjadi kesalahan saat mengupdate status pesanan."
                                            });
                                        }
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Pesanan tidak memiliki barang."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_referensi,
                                        errorMessage = "Pesanan sudah memiliki resi."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = so.no_referensi,
                                    errorMessage = "Pesanan tidak link dengan marketplace."
                                });
                            }
                        }

                        var successCount = listSuccess.Count();
                        return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    return new JsonResult { Data = new { mo_error = "Status link akun lazada tidak aktif / expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Status link akun lazada tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public ActionResult RequestRTSLazadaPerPacking(string cust, string bukti, string DeliveryProvider, List<string> rows_selected)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        string sSQLSelect = "";
                        sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item,isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no ";
                        string sSQL2 = "";
                        sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                        string sSQLSelect2 = "";
                        sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";
                        var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                        foreach (var so in ListStt01a)
                        {
                            if (!string.IsNullOrWhiteSpace(so.no_referensi))
                            {
                                var lzdApi = new LazadaController();
                                List<string> orderItemIds = new List<string>();
                                var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == so.no_bukti).ToList();
                                var adaItem = false;
                                var adaOrderItemIdNull = false;
                                if (sot01b.Count > 0)
                                {
                                    List<string> ordItemId = new List<string>();
                                    foreach (SOT01B item in sot01b)
                                    {
                                        adaItem = true;
                                        if (string.IsNullOrWhiteSpace(item.ORDER_ITEM_ID))
                                        {
                                            adaOrderItemIdNull = true;
                                        }
                                        ordItemId.Add(item.ORDER_ITEM_ID);
                                    }
                                    if (adaItem && !adaOrderItemIdNull && !string.IsNullOrWhiteSpace(so.no_referensi))
                                    {
                                        var sqlStorage = new SqlServerStorage(EDBConnID);
                                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                                        var jobId = clientJobServer.Enqueue<LazadaControllerJob>(x => x.GetToDeliver(dbPathEra, so.nama_pemesan, marketPlace.CUST, "Pesanan", "Ganti Status", usernameLogin, ordItemId, DeliveryProvider, so.tracking_no, marketPlace.TOKEN));

                                        listSuccess.Add(new listSuccessPrintLabel
                                        {
                                            no_referensi = so.no_referensi
                                        });
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Terjadi kesalahan saat memproses pesanan."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_referensi,
                                        errorMessage = "Pesanan tidak memiliki barang."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = so.no_referensi,
                                    errorMessage = "Pesanan tidak link dengan marketplace."
                                });
                            }
                        }

                        var successCount = listSuccess.Count();
                        return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    return new JsonResult { Data = new { mo_error = "Status link akun lazada tidak aktif / expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Status link akun lazada tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        public class ORDERITEMSO
        {
            public string ORDER_ITEM_ID { get; set; }
            public string NO_BUKTI { get; set; }
        }
        public ActionResult LazadaLabelPerPacking(string cust, string bukti, List<string> rows_selected, string label)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();


                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);

                List<string> orderItemIds = new List<string>();
                List<string> temp_htmlString = new List<string>();
                List<string> temp_strmsg = new List<string>();

                //add by nurul 16/12/2019
                bool gakketemulagi = false;
                bool JNEgakketemulagi = false;
                var tempResiLazada = new List<tempBarcodeLazada>();
                var lastIndexBarcode = 0;
                var lastIndexReferensi = 0;
                var lastIndexPortCode = 0;
                var lastIndexHarga = 0;
                var lastIndexKurir = 0;
                var lastIndexTgl = 0;
                //end add by nurul 16/12/2019

                var listNobuk = "";
                var Valid = false;
                //ADD BY NURUL 24/2/2020
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        Valid = true;
                    }
                    else
                    {
                        return new JsonResult { Data = new { mo_error = "Account link status is expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                var string_detailSO = "";
                foreach (var nobuk in ListStt01a)
                {
                    if (string_detailSO != "")
                    {
                        string_detailSO += ",";
                    }

                    string_detailSO += "'" + nobuk.no_bukti + "'";
                }
                string ssql = "SELECT ORDER_ITEM_ID,NO_BUKTI FROM SOT01B WHERE NO_BUKTI IN (" + string_detailSO + ") ";
                var listDetailSo = ErasoftDbContext.Database.SqlQuery<ORDERITEMSO>(ssql).ToList();
                var hitungDetail = listDetailSo.Count();

                //END ADD BY NURUL 24/2/2020

                foreach (var so in ListStt01a)
                {
                    if (listNobuk != "")
                    {
                        listNobuk += ",";
                    }
                    listNobuk += "'" + so.no_bukti + "'";
                    if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                    {
                        if (marketPlace.STATUS_API == "1")
                        {
                            var sot01b = ErasoftDbContext.SOT01B.Where(p => p.NO_BUKTI == so.no_bukti).ToList();
                            if (sot01b.Count > 0)
                            {
                                if ((orderItemIds.Count() + sot01b.Count()) > 50)
                                {
                                    var lzdApi = new LazadaController();
                                    var retApi = lzdApi.GetLabel(orderItemIds, marketPlace.TOKEN);
                                    if (retApi.code == "0")
                                    {
                                        var htmlString = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(retApi.data.document.file));

                                        //add by nurul 16/12/2019
                                        if (label == "2")
                                        {
                                            while (!gakketemulagi) //lex - ninja
                                            {
                                                //var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);

                                                //if (idxBarcode < 0) { gakketemulagi = true; break; }

                                                //var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                                                //var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17))); 

                                                var idxKurir = htmlString.IndexOf("Dikirim Oleh :", lastIndexKurir);

                                                if (idxKurir < 0) { gakketemulagi = true; break; }

                                                var idxKurir2 = htmlString.IndexOf("src=\"", idxKurir);
                                                var idxEndKurir = htmlString.IndexOf("\" style", idxKurir);
                                                var noKurir = htmlString.Substring((idxKurir2 + 5), (idxEndKurir - (idxKurir2 + 5)));

                                                lastIndexTgl = idxEndKurir;
                                                var idxTgl = htmlString.IndexOf("<div><b>", lastIndexTgl);
                                                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                                                var idxEndTgl = htmlString.IndexOf("</b>", idxTgl);
                                                var noTgl = htmlString.Substring((idxTgl + 8), (idxEndTgl - (idxTgl + 8)));

                                                lastIndexBarcode = idxEndTgl;
                                                var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);
                                                //if (idxBarcode < 0) { gakketemulagi = true; break; }
                                                var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                                                var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17)));

                                                lastIndexPortCode = idxEndBarcode;
                                                var idxPortCode = htmlString.IndexOf("Port Code: ", lastIndexPortCode);
                                                var idxPortCode2 = htmlString.IndexOf(">", idxPortCode);
                                                var idxEndPortCode = htmlString.IndexOf("</span>", idxPortCode2);
                                                var noPortCode = htmlString.Substring((idxPortCode2 + 1), (idxEndPortCode - (idxPortCode2 + 1)));

                                                lastIndexHarga = idxEndPortCode;
                                                var idxHarga = htmlString.IndexOf("<!-- ###=== Right Column - COD Collection ===### -->", lastIndexHarga);
                                                var idxHarga2 = htmlString.IndexOf(";\">", idxHarga);
                                                var idxEndHarga = htmlString.IndexOf("</div>", idxHarga);
                                                var hargaAPI = htmlString.Substring((idxHarga2 + 3), (idxEndHarga - (idxHarga2 + 3)));

                                                lastIndexReferensi = idxEndHarga;
                                                var idxReferensi = htmlString.IndexOf("Order Number: ", lastIndexReferensi);
                                                var idxEndReferensi = htmlString.IndexOf("</div>", idxReferensi);
                                                var noReferensi = htmlString.Substring((idxReferensi + 14), (idxEndReferensi - (idxReferensi + 14)));

                                                lastIndexBarcode = idxEndReferensi;
                                                lastIndexPortCode = idxEndReferensi;
                                                lastIndexHarga = idxEndReferensi;
                                                lastIndexReferensi = idxEndReferensi;
                                                lastIndexKurir = idxEndReferensi;
                                                lastIndexTgl = idxEndReferensi;

                                                tempResiLazada.Add(new tempBarcodeLazada()
                                                {
                                                    referensiApi = noReferensi,
                                                    ResiApi = noBarcode,
                                                    PortCodeApi = noPortCode,
                                                    HargaApi = hargaAPI,
                                                    urlLogoKurirApi = noKurir,
                                                    tglApi = noTgl
                                                });

                                            }

                                            while (!JNEgakketemulagi) //JNE
                                            {
                                                var JNEidxReferensi = htmlString.IndexOf("Nomor Order:", lastIndexReferensi);

                                                if (JNEidxReferensi < 0) { JNEgakketemulagi = true; break; }

                                                var JNEidxReferensi2 = htmlString.IndexOf(";\">", JNEidxReferensi);
                                                var JNEidxEndReferensi = htmlString.IndexOf("</span>", JNEidxReferensi2);
                                                var JNEnoReferensi = htmlString.Substring((JNEidxReferensi2 + 3), (JNEidxEndReferensi - (JNEidxReferensi2 + 3)));

                                                lastIndexBarcode = JNEidxEndReferensi;
                                                var JNEidxBarcode = htmlString.IndexOf("Kode Tracking: <b>", lastIndexBarcode);
                                                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                                                var JNEidxEndBarcode = htmlString.IndexOf("</b>", JNEidxBarcode);
                                                var JNEnoBarcode = htmlString.Substring((JNEidxBarcode + 18), (JNEidxEndBarcode - (JNEidxBarcode + 18)));

                                                lastIndexKurir = JNEidxEndBarcode;
                                                var JNEidxKurir = htmlString.IndexOf("class=\"lm-logo\"", lastIndexKurir);
                                                var JNEidxKurir2 = htmlString.IndexOf("src=\"", JNEidxKurir);
                                                var JNEidxEndKurir = htmlString.IndexOf("\" style", JNEidxKurir2);
                                                var JNEnoKurir = htmlString.Substring((JNEidxKurir2 + 5), (JNEidxEndKurir - (JNEidxKurir2 + 5)));

                                                lastIndexHarga = JNEidxEndKurir;
                                                var JNEidxHarga = htmlString.IndexOf("Bayar di Tempat:", lastIndexHarga);
                                                var JNEidxHarga2 = htmlString.IndexOf("Rp. ", JNEidxHarga);
                                                var JNEidxEndHarga = htmlString.IndexOf(" </b>", JNEidxHarga2);
                                                var JNEhargaAPI = htmlString.Substring((JNEidxHarga2 + 4), (JNEidxEndHarga - (JNEidxHarga2 + 4)));

                                                lastIndexBarcode = JNEidxEndReferensi;
                                                lastIndexHarga = JNEidxEndReferensi;
                                                lastIndexReferensi = JNEidxEndReferensi;
                                                lastIndexKurir = JNEidxEndReferensi;

                                                tempResiLazada.Add(new tempBarcodeLazada()
                                                {
                                                    referensiApi = JNEnoReferensi,
                                                    ResiApi = JNEnoBarcode,
                                                    //PortCodeApi = noPortCode,
                                                    HargaApi = JNEhargaAPI,
                                                    urlLogoKurirApi = JNEnoKurir,
                                                    //tglApi = noTgl
                                                });

                                            }
                                        }
                                        //end add by nurul 16/12/2019

                                        //#region add button cetak
                                        //htmlString += "<button id='print-btn' >Cetak</button>";
                                        htmlString += "<script>";
                                        //change by nurul 6/1/2020
                                        ////htmlString += "document.getElementsByClassName('awb lex')[0].style.width = '90%'; ";
                                        htmlString += "var awb = document.getElementsByClassName('awb lex'); ";
                                        htmlString += "for (var a = 0; a < awb.length; a++){ awb[a].style.width = '95%'; } ; ";
                                        //end change by nurul 6/1/2020
                                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.display = 'block'; ";
                                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.fontSize  = 'small'; ";
                                        //remark by nurul 6/1/2020
                                        //htmlString += "var x = document.getElementById('item-desc-table').parentElement; ";
                                        //htmlString += "x.style.height = 'auto'; ";
                                        //end remark by nurul 6/1/2020
                                        //htmlString += "document.getElementsByClassName('item_sku')[0].style.fontSize  = 'small'; ";
                                        //htmlString += "document.getElementsByClassName('item_name')[0].style.fontSize  = 'small'; ";
                                        //change by nurul 6/1/2020
                                        ////htmlString += "document.getElementsByClassName('order_item_table')[0].style.fontSize  = 'small'; ";
                                        htmlString += "var item = document.getElementsByClassName('order_item_table'); ";
                                        htmlString += "for (var b = 0; b < item.length; b++){ item[b].style.fontSize  = 'xx-small'; } ; ";
                                        htmlString += "var harga = document.getElementsByClassName('box text-left'); ";
                                        htmlString += "for (var d = 0; d < harga.length; d++){ harga[d].style.fontSize  = '10px'; } ; ";
                                        //end change by nurul 6/1/2020
                                        //                        htmlString += " function run() { document.getElementById('print-btn').onclick = function () {";
                                        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'hidden';";
                                        //                        htmlString += "window.print(); }; window.onafterprint = function () {";
                                        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'visible'; } }";
                                        //                        htmlString += " if (document.readyState!='loading') run();";
                                        //                        htmlString += " else if (document.addEventListener) document.addEventListener('DOMContentLoaded', run);";
                                        //                        htmlString += "else document.attachEvent('onreadystatechange', function(){ if (document.readyState=='complete') run(); });";
                                        htmlString += "</script>";
                                        //#endregion
                                        //EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in (''," + listNobuk + ")");
                                        //if (label == "1")
                                        //{
                                        //    return Json(htmlString, JsonRequestBehavior.AllowGet);
                                        //}
                                        //else if (label == "2")
                                        //{
                                        //    return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                                        //}

                                        temp_htmlString.Add(htmlString);
                                    }
                                    else
                                    {
                                        var strmsg = retApi.message;
                                        if (retApi.message.Contains("Please call setStatusToReadyToShip"))
                                        {
                                            strmsg = "Status Pesanan belum siap dikirim. Mohon lakukan Ready To Ship terlebih dahulu.";
                                        }
                                        temp_strmsg.Add(strmsg);
                                        //return new JsonResult { Data = new { mo_error = strmsg }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                    }



                                    hitungDetail = hitungDetail - orderItemIds.Count();
                                    orderItemIds.Clear();
                                    foreach (SOT01B item in sot01b)
                                    {
                                        orderItemIds.Add(item.ORDER_ITEM_ID);
                                        //Valid = true;
                                    }
                                }
                                else
                                {
                                    foreach (SOT01B item in sot01b)
                                    {
                                        orderItemIds.Add(item.ORDER_ITEM_ID);
                                        //Valid = true;
                                    }
                                }

                                if (orderItemIds.Count() == 50 || orderItemIds.Count() == hitungDetail)
                                {
                                    var lzdApi = new LazadaController();
                                    var retApi = lzdApi.GetLabel(orderItemIds, marketPlace.TOKEN);
                                    if (retApi.code == "0")
                                    {
                                        var htmlString = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(retApi.data.document.file));

                                        //add by nurul 16/12/2019
                                        if (label == "2")
                                        {
                                            while (!gakketemulagi) //lex - ninja
                                            {
                                                //var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);

                                                //if (idxBarcode < 0) { gakketemulagi = true; break; }

                                                //var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                                                //var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17))); 

                                                var idxKurir = htmlString.IndexOf("Dikirim Oleh :", lastIndexKurir);

                                                if (idxKurir < 0) { gakketemulagi = true; break; }

                                                var idxKurir2 = htmlString.IndexOf("src=\"", idxKurir);
                                                var idxEndKurir = htmlString.IndexOf("\" style", idxKurir);
                                                var noKurir = htmlString.Substring((idxKurir2 + 5), (idxEndKurir - (idxKurir2 + 5)));

                                                lastIndexTgl = idxEndKurir;
                                                var idxTgl = htmlString.IndexOf("<div><b>", lastIndexTgl);
                                                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                                                var idxEndTgl = htmlString.IndexOf("</b>", idxTgl);
                                                var noTgl = htmlString.Substring((idxTgl + 8), (idxEndTgl - (idxTgl + 8)));

                                                lastIndexBarcode = idxEndTgl;
                                                var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);
                                                //if (idxBarcode < 0) { gakketemulagi = true; break; }
                                                var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                                                var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17)));

                                                lastIndexPortCode = idxEndBarcode;
                                                var idxPortCode = htmlString.IndexOf("Port Code: ", lastIndexPortCode);
                                                var idxPortCode2 = htmlString.IndexOf(">", idxPortCode);
                                                var idxEndPortCode = htmlString.IndexOf("</span>", idxPortCode2);
                                                var noPortCode = htmlString.Substring((idxPortCode2 + 1), (idxEndPortCode - (idxPortCode2 + 1)));

                                                lastIndexHarga = idxEndPortCode;
                                                var idxHarga = htmlString.IndexOf("<!-- ###=== Right Column - COD Collection ===### -->", lastIndexHarga);
                                                var idxHarga2 = htmlString.IndexOf(";\">", idxHarga);
                                                var idxEndHarga = htmlString.IndexOf("</div>", idxHarga);
                                                var hargaAPI = htmlString.Substring((idxHarga2 + 3), (idxEndHarga - (idxHarga2 + 3)));

                                                lastIndexReferensi = idxEndHarga;
                                                var idxReferensi = htmlString.IndexOf("Order Number: ", lastIndexReferensi);
                                                var idxEndReferensi = htmlString.IndexOf("</div>", idxReferensi);
                                                var noReferensi = htmlString.Substring((idxReferensi + 14), (idxEndReferensi - (idxReferensi + 14)));

                                                lastIndexBarcode = idxEndReferensi;
                                                lastIndexPortCode = idxEndReferensi;
                                                lastIndexHarga = idxEndReferensi;
                                                lastIndexReferensi = idxEndReferensi;
                                                lastIndexKurir = idxEndReferensi;
                                                lastIndexTgl = idxEndReferensi;

                                                tempResiLazada.Add(new tempBarcodeLazada()
                                                {
                                                    referensiApi = noReferensi,
                                                    ResiApi = noBarcode,
                                                    PortCodeApi = noPortCode,
                                                    HargaApi = hargaAPI,
                                                    urlLogoKurirApi = noKurir,
                                                    tglApi = noTgl
                                                });

                                            }

                                            while (!JNEgakketemulagi) //JNE
                                            {
                                                var JNEidxReferensi = htmlString.IndexOf("Nomor Order:", lastIndexReferensi);

                                                if (JNEidxReferensi < 0) { JNEgakketemulagi = true; break; }

                                                var JNEidxReferensi2 = htmlString.IndexOf(";\">", JNEidxReferensi);
                                                var JNEidxEndReferensi = htmlString.IndexOf("</span>", JNEidxReferensi2);
                                                var JNEnoReferensi = htmlString.Substring((JNEidxReferensi2 + 3), (JNEidxEndReferensi - (JNEidxReferensi2 + 3)));

                                                lastIndexBarcode = JNEidxEndReferensi;
                                                var JNEidxBarcode = htmlString.IndexOf("Kode Tracking: <b>", lastIndexBarcode);
                                                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                                                var JNEidxEndBarcode = htmlString.IndexOf("</b>", JNEidxBarcode);
                                                var JNEnoBarcode = htmlString.Substring((JNEidxBarcode + 18), (JNEidxEndBarcode - (JNEidxBarcode + 18)));

                                                lastIndexKurir = JNEidxEndBarcode;
                                                var JNEidxKurir = htmlString.IndexOf("class=\"lm-logo\"", lastIndexKurir);
                                                var JNEidxKurir2 = htmlString.IndexOf("src=\"", JNEidxKurir);
                                                var JNEidxEndKurir = htmlString.IndexOf("\" style", JNEidxKurir2);
                                                var JNEnoKurir = htmlString.Substring((JNEidxKurir2 + 5), (JNEidxEndKurir - (JNEidxKurir2 + 5)));

                                                lastIndexHarga = JNEidxEndKurir;
                                                var JNEidxHarga = htmlString.IndexOf("Bayar di Tempat:", lastIndexHarga);
                                                var JNEidxHarga2 = htmlString.IndexOf("Rp. ", JNEidxHarga);
                                                var JNEidxEndHarga = htmlString.IndexOf(" </b>", JNEidxHarga2);
                                                var JNEhargaAPI = htmlString.Substring((JNEidxHarga2 + 4), (JNEidxEndHarga - (JNEidxHarga2 + 4)));

                                                lastIndexBarcode = JNEidxEndReferensi;
                                                lastIndexHarga = JNEidxEndReferensi;
                                                lastIndexReferensi = JNEidxEndReferensi;
                                                lastIndexKurir = JNEidxEndReferensi;

                                                tempResiLazada.Add(new tempBarcodeLazada()
                                                {
                                                    referensiApi = JNEnoReferensi,
                                                    ResiApi = JNEnoBarcode,
                                                    //PortCodeApi = noPortCode,
                                                    HargaApi = JNEhargaAPI,
                                                    urlLogoKurirApi = JNEnoKurir,
                                                    //tglApi = noTgl
                                                });

                                            }
                                        }
                                        //end add by nurul 16/12/2019

                                        //#region add button cetak
                                        //htmlString += "<button id='print-btn' >Cetak</button>";
                                        htmlString += "<script>";
                                        //change by nurul 6/1/2020
                                        ////htmlString += "document.getElementsByClassName('awb lex')[0].style.width = '90%'; ";
                                        htmlString += "var awb = document.getElementsByClassName('awb lex'); ";
                                        htmlString += "for (var a = 0; a < awb.length; a++){ awb[a].style.width = '95%'; } ; ";
                                        //end change by nurul 6/1/2020
                                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.display = 'block'; ";
                                        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.fontSize  = 'small'; ";
                                        //remark by nurul 6/1/2020
                                        //htmlString += "var x = document.getElementById('item-desc-table').parentElement; ";
                                        //htmlString += "x.style.height = 'auto'; ";
                                        //end remark by nurul 6/1/2020
                                        //htmlString += "document.getElementsByClassName('item_sku')[0].style.fontSize  = 'small'; ";
                                        //htmlString += "document.getElementsByClassName('item_name')[0].style.fontSize  = 'small'; ";
                                        //change by nurul 6/1/2020
                                        ////htmlString += "document.getElementsByClassName('order_item_table')[0].style.fontSize  = 'small'; ";
                                        htmlString += "var item = document.getElementsByClassName('order_item_table'); ";
                                        htmlString += "for (var b = 0; b < item.length; b++){ item[b].style.fontSize  = 'xx-small'; } ; ";
                                        htmlString += "var harga = document.getElementsByClassName('box text-left'); ";
                                        htmlString += "for (var d = 0; d < harga.length; d++){ harga[d].style.fontSize  = '10px'; } ; ";
                                        //end change by nurul 6/1/2020
                                        //                        htmlString += " function run() { document.getElementById('print-btn').onclick = function () {";
                                        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'hidden';";
                                        //                        htmlString += "window.print(); }; window.onafterprint = function () {";
                                        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'visible'; } }";
                                        //                        htmlString += " if (document.readyState!='loading') run();";
                                        //                        htmlString += " else if (document.addEventListener) document.addEventListener('DOMContentLoaded', run);";
                                        //                        htmlString += "else document.attachEvent('onreadystatechange', function(){ if (document.readyState=='complete') run(); });";
                                        htmlString += "</script>";
                                        //#endregion
                                        //EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in (''," + listNobuk + ")");
                                        //if (label == "1")
                                        //{
                                        //    return Json(htmlString, JsonRequestBehavior.AllowGet);
                                        //}
                                        //else if (label == "2")
                                        //{
                                        //    return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                                        //}

                                        temp_htmlString.Add(htmlString);
                                    }
                                    else
                                    {
                                        var strmsg = retApi.message;
                                        if (retApi.message.Contains("Please call setStatusToReadyToShip"))
                                        {
                                            strmsg = "Status Pesanan belum siap dikirim. Mohon lakukan Ready To Ship terlebih dahulu.";
                                        }
                                        temp_strmsg.Add(strmsg);
                                        //return new JsonResult { Data = new { mo_error = strmsg }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                    }

                                    hitungDetail = hitungDetail - orderItemIds.Count();
                                    orderItemIds.Clear();
                                    foreach (SOT01B item in sot01b)
                                    {
                                        orderItemIds.Add(item.ORDER_ITEM_ID);
                                        //Valid = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (temp_strmsg.Count() > 0)
                {
                    return new JsonResult { Data = new { mo_error = temp_strmsg }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                else
                {
                    EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in (''," + listNobuk + ")");
                    if (label == "1")
                    {
                        return Json(temp_htmlString, JsonRequestBehavior.AllowGet);
                    }
                    else if (label == "2")
                    {
                        return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                    }
                }

                //if(orderItemIds.Count() > 100)
                //{
                //    return new JsonResult { Data = new { mo_error = "Maximal barang yang bisa diproses adalah 100. Barang yang diproses saat ini " + orderItemIds.Count() + "." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                //}
                //if (Valid)
                //{
                //    var lzdApi = new LazadaController();
                //    var retApi = lzdApi.GetLabel(orderItemIds, marketPlace.TOKEN);
                //    if (retApi.code == "0")
                //    {
                //        var htmlString = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(retApi.data.document.file));

                //        //add by nurul 16/12/2019
                //        if (label == "2")
                //        {
                //            while (!gakketemulagi) //lex - ninja
                //            {
                //                //var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);

                //                //if (idxBarcode < 0) { gakketemulagi = true; break; }

                //                //var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                //                //var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17))); 

                //                var idxKurir = htmlString.IndexOf("Dikirim Oleh :", lastIndexKurir);

                //                if (idxKurir < 0){ gakketemulagi = true; break; }

                //                var idxKurir2 = htmlString.IndexOf("src=\"", idxKurir);
                //                var idxEndKurir = htmlString.IndexOf("\" style", idxKurir);
                //                var noKurir = htmlString.Substring((idxKurir2 + 5), (idxEndKurir - (idxKurir2 + 5)));

                //                lastIndexTgl = idxEndKurir;
                //                var idxTgl = htmlString.IndexOf("<div><b>", lastIndexTgl);
                //                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                //                var idxEndTgl = htmlString.IndexOf("</b>", idxTgl);
                //                var noTgl = htmlString.Substring((idxTgl + 8), (idxEndTgl - (idxTgl + 8)));

                //                lastIndexBarcode = idxEndTgl;
                //                var idxBarcode = htmlString.IndexOf("Tracking Number: ", lastIndexBarcode);
                //                //if (idxBarcode < 0) { gakketemulagi = true; break; }
                //                var idxEndBarcode = htmlString.IndexOf("</div>", idxBarcode);
                //                var noBarcode = htmlString.Substring((idxBarcode + 17), (idxEndBarcode - (idxBarcode + 17)));

                //                lastIndexPortCode = idxEndBarcode;
                //                var idxPortCode = htmlString.IndexOf("Port Code: ", lastIndexPortCode);
                //                var idxPortCode2 = htmlString.IndexOf(">", idxPortCode);
                //                var idxEndPortCode = htmlString.IndexOf("</span>", idxPortCode2);
                //                var noPortCode = htmlString.Substring((idxPortCode2 + 1), (idxEndPortCode - (idxPortCode2 + 1)));

                //                lastIndexHarga = idxEndPortCode;
                //                var idxHarga = htmlString.IndexOf("<!-- ###=== Right Column - COD Collection ===### -->", lastIndexHarga);
                //                var idxHarga2 = htmlString.IndexOf(";\">", idxHarga);
                //                var idxEndHarga = htmlString.IndexOf("</div>", idxHarga);
                //                var hargaAPI = htmlString.Substring((idxHarga2 + 3), (idxEndHarga - (idxHarga2 + 3)));

                //                lastIndexReferensi = idxEndHarga;
                //                var idxReferensi = htmlString.IndexOf("Order Number: ", lastIndexReferensi);
                //                var idxEndReferensi = htmlString.IndexOf("</div>", idxReferensi);
                //                var noReferensi = htmlString.Substring((idxReferensi + 14), (idxEndReferensi - (idxReferensi + 14)));

                //                lastIndexBarcode = idxEndReferensi;
                //                lastIndexPortCode = idxEndReferensi;
                //                lastIndexHarga = idxEndReferensi;
                //                lastIndexReferensi = idxEndReferensi;
                //                lastIndexKurir = idxEndReferensi;
                //                lastIndexTgl = idxEndReferensi;

                //                tempResiLazada.Add(new tempBarcodeLazada()
                //                {
                //                    referensiApi = noReferensi,
                //                    ResiApi = noBarcode,
                //                    PortCodeApi = noPortCode,
                //                    HargaApi = hargaAPI,
                //                    urlLogoKurirApi = noKurir,
                //                    tglApi = noTgl
                //                });

                //            }

                //            while (!JNEgakketemulagi) //JNE
                //            {
                //                var JNEidxReferensi = htmlString.IndexOf("Nomor Order:", lastIndexReferensi);

                //                if (JNEidxReferensi < 0) { JNEgakketemulagi = true; break; }

                //                var JNEidxReferensi2 = htmlString.IndexOf(";\">", JNEidxReferensi);
                //                var JNEidxEndReferensi = htmlString.IndexOf("</span>", JNEidxReferensi2);
                //                var JNEnoReferensi = htmlString.Substring((JNEidxReferensi2 + 3), (JNEidxEndReferensi - (JNEidxReferensi2 + 3)));

                //                lastIndexBarcode = JNEidxEndReferensi;
                //                var JNEidxBarcode = htmlString.IndexOf("Kode Tracking: <b>", lastIndexBarcode);
                //                //var idxTgl2 = htmlString.IndexOf(">", idxTgl);
                //                var JNEidxEndBarcode = htmlString.IndexOf("</b>", JNEidxBarcode);
                //                var JNEnoBarcode = htmlString.Substring((JNEidxBarcode + 18), (JNEidxEndBarcode - (JNEidxBarcode + 18)));

                //                lastIndexKurir = JNEidxEndBarcode;
                //                var JNEidxKurir = htmlString.IndexOf("class=\"lm-logo\"", lastIndexKurir);
                //                var JNEidxKurir2 = htmlString.IndexOf("src=\"", JNEidxKurir);
                //                var JNEidxEndKurir = htmlString.IndexOf("\" style", JNEidxKurir2);
                //                var JNEnoKurir = htmlString.Substring((JNEidxKurir2 + 5), (JNEidxEndKurir - (JNEidxKurir2 + 5)));

                //                lastIndexHarga = JNEidxEndKurir;
                //                var JNEidxHarga = htmlString.IndexOf("Bayar di Tempat:", lastIndexHarga);
                //                var JNEidxHarga2 = htmlString.IndexOf("Rp. ", JNEidxHarga);
                //                var JNEidxEndHarga = htmlString.IndexOf(" </b>", JNEidxHarga2);
                //                var JNEhargaAPI = htmlString.Substring((JNEidxHarga2 + 4), (JNEidxEndHarga - (JNEidxHarga2 + 4)));

                //                lastIndexBarcode = JNEidxEndReferensi;
                //                lastIndexHarga = JNEidxEndReferensi;
                //                lastIndexReferensi = JNEidxEndReferensi;
                //                lastIndexKurir = JNEidxEndReferensi;

                //                tempResiLazada.Add(new tempBarcodeLazada()
                //                {
                //                    referensiApi = JNEnoReferensi,
                //                    ResiApi = JNEnoBarcode,
                //                    //PortCodeApi = noPortCode,
                //                    HargaApi = JNEhargaAPI,
                //                    urlLogoKurirApi = JNEnoKurir,
                //                    //tglApi = noTgl
                //                });

                //            }
                //        }
                //        //end add by nurul 16/12/2019

                //        //#region add button cetak
                //        //htmlString += "<button id='print-btn' >Cetak</button>";
                //        htmlString += "<script>";
                //        //change by nurul 6/1/2020
                //        ////htmlString += "document.getElementsByClassName('awb lex')[0].style.width = '90%'; ";
                //        htmlString += "var awb = document.getElementsByClassName('awb lex'); ";
                //        htmlString += "for (var a = 0; a < awb.length; a++){ awb[a].style.width = '95%'; } ; ";
                //        //end change by nurul 6/1/2020
                //        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.display = 'block'; ";
                //        //htmlString += "document.getElementsByClassName('item_quantity')[2].style.fontSize  = 'small'; ";
                //        //remark by nurul 6/1/2020
                //        //htmlString += "var x = document.getElementById('item-desc-table').parentElement; ";
                //        //htmlString += "x.style.height = 'auto'; ";
                //        //end remark by nurul 6/1/2020
                //        //htmlString += "document.getElementsByClassName('item_sku')[0].style.fontSize  = 'small'; ";
                //        //htmlString += "document.getElementsByClassName('item_name')[0].style.fontSize  = 'small'; ";
                //        //change by nurul 6/1/2020
                //        ////htmlString += "document.getElementsByClassName('order_item_table')[0].style.fontSize  = 'small'; ";
                //        htmlString += "var item = document.getElementsByClassName('order_item_table'); ";
                //        htmlString += "for (var b = 0; b < item.length; b++){ item[b].style.fontSize  = 'xx-small'; } ; ";
                //        htmlString += "var harga = document.getElementsByClassName('box text-left'); ";
                //        htmlString += "for (var d = 0; d < harga.length; d++){ harga[d].style.fontSize  = '10px'; } ; ";
                //        //end change by nurul 6/1/2020
                //        //                        htmlString += " function run() { document.getElementById('print-btn').onclick = function () {";
                //        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'hidden';";
                //        //                        htmlString += "window.print(); }; window.onafterprint = function () {";
                //        //                        htmlString += "document.getElementById('print-btn').style.visibility = 'visible'; } }";
                //        //                        htmlString += " if (document.readyState!='loading') run();";
                //        //                        htmlString += " else if (document.addEventListener) document.addEventListener('DOMContentLoaded', run);";
                //        //                        htmlString += "else document.attachEvent('onreadystatechange', function(){ if (document.readyState=='complete') run(); });";
                //        htmlString += "</script>";
                //        //#endregion
                //        EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in (''," + listNobuk + ")");
                //        if (label == "1")
                //        {
                //            return Json(htmlString, JsonRequestBehavior.AllowGet);
                //        }
                //        else if (label == "2")
                //        {
                //            return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                //        }
                //    }
                //    else
                //    {
                //        var strmsg = retApi.message;
                //        if (retApi.message.Contains("Please call setStatusToReadyToShip"))
                //        {
                //            strmsg = "Status Pesanan belum siap dikirim. Mohon lakukan Ready To Ship terlebih dahulu.";
                //        }
                //        return new JsonResult { Data = new { mo_error = strmsg }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                //    }
                //}
                //else
                //{
                //    return new JsonResult { Data = new { mo_error = "Account link status is expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                //}
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            return JsonErrorMessage("This Function is for Lazada only");
        }

        public async Task<ActionResult> RequestPickupShopeePerPacking(string cust, string bukti, string alamat, List<string> rows_selected)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();

                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);

                foreach (var so in ListStt01a)
                {
                    if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                    {
                        if (marketPlace.STATUS_API == "1")
                        {
                            var pesananInDb = ErasoftDbContext.SOT01A.Where(p => p.NO_BUKTI == so.no_bukti).FirstOrDefault();
                            if (pesananInDb != null)
                            {
                                if (!string.IsNullOrWhiteSpace(pesananInDb.NO_REFERENSI))
                                {
                                    if (string.IsNullOrWhiteSpace(pesananInDb.TRACKING_SHIPMENT))
                                    {
                                        var paramsInit = await GetParameterInitLogisticShopee(pesananInDb, marketPlace.Sort1_Cust);
                                        var splitParamsInit = paramsInit[5].Split(';');
                                        if (splitParamsInit.Contains("PICKUP"))
                                        {
                                            string pAddress = "";
                                            string pTime = "";
                                            ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                            {
                                                merchant_code = marketPlace.Sort1_Cust,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin
                                            };
                                            if (splitParamsInit.Contains("ADDRESS_ID"))
                                            {
                                                pAddress = alamat;
                                                if (splitParamsInit.Contains("PICKUP_TIME"))
                                                {
                                                    var firstpickuptime = await GetShopeeFirstPickupTime(pesananInDb, Convert.ToInt64(alamat), marketPlace.Sort1_Cust);
                                                    pTime = firstpickuptime.pickup_time_id;
                                                }
                                            }

                                            ShopeeControllerJob.ShopeeInitLogisticPickupDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticPickupDetailData()
                                            {
                                                address_id = 0,
                                                pickup_time_id = ""
                                            };
                                            if (pAddress != "")
                                            {
                                                detail.address_id = Convert.ToInt64(pAddress);
                                            }
                                            if (pTime != "")
                                            {
                                                detail.pickup_time_id = pTime;
                                            }
                                            //change by calvin 10 april 2019, jadi pakai backgroundjob
                                            //await shoAPI.InitLogisticPickup(data, pesananInDb.NO_REFERENSI, detail, recNum.Value, nilaiTRACKING_SHIPMENT);
                                            var sqlStorage = new SqlServerStorage(EDBConnID);
                                            var clientJobServer = new BackgroundJobClient(sqlStorage);

                                            string nilaiTRACKING_SHIPMENT = "P[;]" + pAddress + "[;]" + pTime;
                                            //change by nurul 16/6/2020
                                            //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticPickup(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, nilaiTRACKING_SHIPMENT));
#if (DEBUG || Debug_AWS)
                                            var shoApi = new ShopeeControllerJob();
                                            //change by nurul 16/6/2020
                                            //Task.Run(() => shoApi.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job)).Wait();
                                            Task.Run(() => shoApi.InitLogisticPickup(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, nilaiTRACKING_SHIPMENT)).Wait();
                                            //end change by nurul 16/6/2020
#else
                                            clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticPickup(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, nilaiTRACKING_SHIPMENT));
#endif
                                            //end change by nurul 16/6/2020
                                            listSuccess.Add(new listSuccessPrintLabel
                                            {
                                                no_referensi = so.no_referensi
                                            });
                                        }
                                        else
                                        {
                                            listErrors.Add(new PackingListErrors
                                            {
                                                keyname = so.no_referensi,
                                                errorMessage = "Pesanan tidak bisa diproses Pickup."
                                            });
                                        }
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Pesanan sudah pernah diproses."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_bukti,
                                        errorMessage = "Pesanan tidak memiliki nomor referensi."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = so.no_bukti,
                                    errorMessage = "Pesanan tidak ditemukan."
                                });
                            }
                        }
                        else
                        {
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = so.no_bukti,
                                errorMessage = "Status Link ke Marketplace tidak aktif."
                            });
                        }
                    }
                    else
                    {
                        listErrors.Add(new PackingListErrors
                        {
                            keyname = so.no_bukti,
                            errorMessage = "Status Link ke Marketplace tidak aktif."
                        });
                    }
                }

                var successCount = listSuccess.Count();
                return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public async Task<ActionResult> RequestDropoffShopeePerPacking(string cust, string bukti, List<string> rows_selected, string job)
        {
            try
            {
                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();

                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);

                //parameters += "DROPOFF;";

                //if (InitParam.dropoff.Contains("branch_id"))
                //{
                //    parameters += "BRANCH_ID;";
                //}
                //if (InitParam.dropoff.Contains("sender_real_name"))
                //{
                //    parameters += "SENDER;";
                //}
                //if (InitParam.dropoff.Contains("tracking_no"))
                //{
                //    parameters += "DROPOFF_TRACKING_NO;";
                foreach (var so in ListStt01a)
                {
                    if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                    {
                        if (marketPlace.STATUS_API == "1")
                        {
                            var pesananInDb = ErasoftDbContext.SOT01A.Where(p => p.NO_BUKTI == so.no_bukti).FirstOrDefault();
                            if (pesananInDb != null)
                            {
                                if (!string.IsNullOrWhiteSpace(pesananInDb.NO_REFERENSI))
                                {
                                    if (string.IsNullOrWhiteSpace(pesananInDb.TRACKING_SHIPMENT))
                                    {
                                        var paramsInit = await GetParameterInitLogisticShopee(pesananInDb, marketPlace.Sort1_Cust);
                                        var splitParamsInit = paramsInit[5].Split(';');
                                        if (splitParamsInit.Contains("DROPOFF"))
                                        {
                                            string dBranch = "";
                                            ShopeeControllerJob.ShopeeAPIData data = new ShopeeControllerJob.ShopeeAPIData()
                                            {
                                                merchant_code = marketPlace.Sort1_Cust,
                                                DatabasePathErasoft = dbPathEra,
                                                username = usernameLogin
                                            };
                                            if (job == "0" && !splitParamsInit.Contains("BRANCH_ID") && !splitParamsInit.Contains("SENDER_REAL_NAME") && !splitParamsInit.Contains("DROPOFF_TRACKING_NO"))
                                            {
                                                ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData()
                                                {
                                                    branch_id = 0,
                                                    sender_real_name = "",
                                                    tracking_no = ""
                                                };
#if (DEBUG || Debug_AWS)
                                                var shoApi = new ShopeeControllerJob();
                                                //change by nurul 16/6/2020
                                                //var notrack = Task.Run(() => shoApi.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                var notrack = Task.Run(() => shoApi.InitLogisticDropOff(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                //end change by nurul 16/6/2020
#else
                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                //change by nurul 16/6/2020
                                                //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                //end change by nurul 16/6/2020
#endif
                                                listSuccess.Add(new listSuccessPrintLabel()
                                                {
                                                    no_referensi = pesananInDb.NO_REFERENSI
                                                });
                                            }
                                            //add by nurul 21/2/2020
                                            else if (job == "1" && splitParamsInit.Contains("SENDER"))
                                            {
                                                ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData detail = new ShopeeControllerJob.ShopeeInitLogisticDropOffDetailData()
                                                {
                                                    branch_id = 0,
                                                    sender_real_name = marketPlace.PERSO,
                                                    tracking_no = ""
                                                };
#if (DEBUG || Debug_AWS)
                                                var shoApi = new ShopeeControllerJob();
                                                //change by nurul 16/6/2020
                                                //Task.Run(() => shoApi.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job)).Wait();
                                                Task.Run(() => shoApi.InitLogisticDropOff(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job)).Wait();
                                                //end change by nurul 16/6/2020
#else
                                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                                //change by nurul 16/6/2020
                                                //clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NAMAPEMESAN, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                clientJobServer.Enqueue<ShopeeControllerJob>(x => x.InitLogisticDropOff(dbPathEra, pesananInDb.NO_BUKTI, marketPlace.CUST, "Pesanan", "Ganti Status", data, pesananInDb.NO_REFERENSI, detail, pesananInDb.RecNum.Value, "", "", "", job));
                                                //end change by nurul 16/6/2020
#endif

                                                listSuccess.Add(new listSuccessPrintLabel()
                                                {
                                                    no_referensi = pesananInDb.NO_REFERENSI
                                                });
                                            }
                                            //end add by nurul 21/2/2020
                                            else
                                            {
                                                var reasonFail = "Karena memerlukan data : ";
                                                if (splitParamsInit.Contains("BRANCH_ID")) { reasonFail += "Kode Cabang,"; }
                                                if (splitParamsInit.Contains("SENDER_REAL_NAME")) { reasonFail += "Nama Pengirim,"; }
                                                if (splitParamsInit.Contains("DROPOFF_TRACKING_NO")) { reasonFail += "No Resi,"; }

                                                reasonFail = reasonFail.Substring(0, reasonFail.Length - 1);

                                                listErrors.Add(new PackingListErrors
                                                {
                                                    keyname = so.no_referensi,
                                                    errorMessage = "Pesanan tidak bisa diproses Dropoff. " + reasonFail
                                                });
                                            }
                                        }
                                        else
                                        {
                                            listErrors.Add(new PackingListErrors
                                            {
                                                keyname = so.no_referensi,
                                                errorMessage = "Pesanan tidak bisa diproses Dropoff."
                                            });
                                        }
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Pesanan sudah pernah diproses."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_bukti,
                                        errorMessage = "Pesanan tidak memiliki nomor referensi."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = so.no_bukti,
                                    errorMessage = "Pesanan tidak ditemukan."
                                });
                            }
                        }
                        else
                        {
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = so.no_bukti,
                                errorMessage = "Status Link ke Marketplace tidak aktif."
                            });
                        }
                    }
                    else
                    {
                        listErrors.Add(new PackingListErrors
                        {
                            keyname = so.no_bukti,
                            errorMessage = "Status Link ke Marketplace tidak aktif."
                        });
                    }
                }

                var successCount = listSuccess.Count();
                return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        [HttpGet]
        public async Task<ActionResult> GetShopeePickupAddressByCust(string cust)
        {
            var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
            var shoAPI = new ShopeeController();
            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = marketPlace.Sort1_Cust,
            };
            var result = await shoAPI.GetAddress(data);
            return Json(result.address_list, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<ShopeeController.ShopeeGetTimeSlotResultPickup_Time> GetShopeeFirstPickupTime(SOT01A pesananInDb, long address_id, string sort1_cust)
        {
            var shoAPI = new ShopeeController();
            ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
            {
                merchant_code = sort1_cust,
            };
            var result = await shoAPI.GetTimeSlot(data, address_id, pesananInDb.NO_REFERENSI);
            var firsttime = result.pickup_time.ToList().First();
            return firsttime;
        }
        public async Task<string[]> GetParameterInitLogisticShopee(SOT01A pesananInDb, string sort1_cust)
        {
            string[] shipment = new string[6];
            shipment[0] = pesananInDb.TRACKING_SHIPMENT;
            shipment[1] = pesananInDb.SHIPMENT;
            shipment[2] = pesananInDb.NO_BUKTI;
            shipment[3] = pesananInDb.NAMAPEMESAN;
            shipment[4] = pesananInDb.NAMAPENGIRIM;

            string parameters = "";
            shipment[5] = "";
            if (string.IsNullOrWhiteSpace(pesananInDb.TRACKING_SHIPMENT))
            {
                var shoAPI = new ShopeeController();
                ShopeeController.ShopeeAPIData data = new ShopeeController.ShopeeAPIData()
                {
                    merchant_code = sort1_cust,
                };
                ShopeeController.ShopeeGetParameterForInitLogisticResult InitParam;
                InitParam = await shoAPI.GetParameterForInitLogistic(data, pesananInDb.NO_REFERENSI);

                if (InitParam.dropoff != null)
                {
                    parameters += "DROPOFF;";

                    if (InitParam.dropoff.Contains("branch_id"))
                    {
                        parameters += "BRANCH_ID;";
                    }
                    if (InitParam.dropoff.Contains("sender_real_name"))
                    {
                        parameters += "SENDER;";
                    }
                    if (InitParam.dropoff.Contains("tracking_no"))
                    {
                        parameters += "DROPOFF_TRACKING_NO;";
                    }
                }
                if (InitParam.pickup != null)
                {
                    parameters += "PICKUP;";

                    if (InitParam.pickup.Contains("address_id"))
                    {
                        parameters += "ADDRESS_ID;";
                    }
                    if (InitParam.pickup.Contains("pickup_time_id"))
                    {
                        parameters += "PICKUP_TIME;";
                    }
                }
                if (InitParam.non_integrated != null)
                {
                    parameters += "NON;";
                    if (InitParam.non_integrated.Contains("tracking_no"))
                    {
                        parameters += "TRACKING_NO;";
                    }
                }
            }
            else
            {
                if (pesananInDb.TRACKING_SHIPMENT.Contains("[;]"))
                {
                    parameters = "AUTO_SHOPEE";
                }
            }
            shipment[5] = parameters;
            return shipment;
        }

        public async Task<ActionResult> ShopeeLabelPerPacking(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    string sSQLSelect = "";
                    sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                    //add by nurul 28/2/2020, untuk job
                    sSQLSelect += ", A.TRACKING_SHIPMENT as tracking_no, A.NO_PO_CUST AS no_job ";
                    //end add by nurul 28/2/2020, untuk job
                    string sSQL2 = "";
                    sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                    string sSQLSelect2 = "";
                    sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                    var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                    List<string> ordersn_list = new List<string>();
                    foreach (var so in ListStt01a)
                    {
                        ordersn_list.Add(so.no_referensi);
                    }
                    ShopeeControllerJob.ShopeeAPIData iden = new ShopeeControllerJob.ShopeeAPIData
                    {
                        merchant_code = marketPlace.Sort1_Cust,
                    };
                    //ADD BY NURUL 28/2/2020, untuk job
                    //List<string> string_job = new List<string>();
                    var adaJOB = false;
                    ShopeeControllerJob.getJOBShopee temp_job = new ShopeeControllerJob.getJOBShopee() { };
                    foreach (var resi in ListStt01a)
                    {
                        if (!string.IsNullOrWhiteSpace(resi.no_job))
                        {
                            adaJOB = true;
                            temp_job.job_ordersn_list.Add(resi.no_referensi);
                        }
                        else
                        {
                            temp_job.job_ordersn_list.Add("");
                        }
                    };
                    //END ADD BY NURUL 28/2/2020, untuk job
                    ShopeeControllerJob shoAPI = new ShopeeControllerJob();
                    //change by nurul 28/2/2020, untuk job
                    //var ret = await shoAPI.GetAirwayBills(iden, ordersn_list.ToArray());
                    var ret = await shoAPI.GetAirwayBills(iden, ordersn_list.ToArray(), temp_job, adaJOB);
                    //end change by nurul 28/2/2020, untuk job
                    var listErrors = new List<PackingListErrors>();
                    foreach (var item in ret.batch_result.errors)
                    {
                        if (listErrors.Where(p => p.keyname == item.error_description).Count() == 0)
                        {
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = item.error_description,
                                errorMessage = item.ordersn
                            });
                            ordersn_list.Remove(item.ordersn);
                        }
                    }

                    var listSuccess = "";
                    foreach (var osn in ordersn_list)
                    {
                        if (listSuccess != "")
                        {
                            listSuccess += ",";
                        }
                        listSuccess += "'" + osn + "'";
                    }

                    string sSQLWhere = "";
                    if (listSuccess != "")
                    {
                        sSQLWhere += " no_referensi in (" + listSuccess + ")" + Environment.NewLine;
                    }
                    else
                    {
                        sSQLWhere += " 0=1" + Environment.NewLine;
                    }
                    EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where " + sSQLWhere);

                    return new JsonResult { Data = new { listErrors, ret }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };

                }
                return new JsonResult { Data = new { mo_error = "Status Link ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        public async Task<ActionResult> BlibliCreatePackage(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }
                var tblCustomer = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                var EDB = new DatabaseSQL(dbPathEra);

                if (!string.IsNullOrEmpty(tblCustomer.STATUS_API))
                {
                    if (tblCustomer.STATUS_API == "1")
                    {
                        string sSQLSelect = "";
                        sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item,isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no ";
                        string sSQL2 = "";
                        sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                        string sSQLSelect2 = "";
                        sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                        var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

                        BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                            API_client_password = tblCustomer.API_CLIENT_P,
                            API_client_username = tblCustomer.API_CLIENT_U,
                            API_secret_key = tblCustomer.API_KEY,
                            token = tblCustomer.TOKEN,
                            mta_username_email_merchant = tblCustomer.EMAIL,
                            mta_password_password_merchant = tblCustomer.PASSWORD,
                            idmarket = tblCustomer.RecNum.Value,
                            DatabasePathErasoft = dbPathEra,
                            username = usernameLogin,
                            versiToken = tblCustomer.KD_ANALISA
                        };
                        var bliJob = new BlibliControllerJob();
                        var listErrors = new List<PackingListErrors>();
                        var listSuccess = new List<listSuccessPrintLabel>();
                        foreach (var so in ListStt01a)
                        {
                            if (!string.IsNullOrWhiteSpace(so.no_referensi))
                            {
                                if (string.IsNullOrWhiteSpace(so.tracking_no))
                                {
                                    var orderItemIds = new List<string>();

                                    var dsSOT01B = EDB.GetDataSet("SConn", "SO", "SELECT ORDER_ITEM_ID FROM SOT01B NOLOCK WHERE NO_BUKTI = '" + so.no_bukti + "'");
                                    for (int i = 0; i < dsSOT01B.Tables[0].Rows.Count; i++)
                                    {
                                        orderItemIds.Add(Convert.ToString(dsSOT01B.Tables[0].Rows[i]["ORDER_ITEM_ID"]));
                                    }
                                    if (orderItemIds.Count > 0)
                                    {
                                        var success = true;
                                        try
                                        {
                                            var bookingAWB = await bliJob.createPackage(dbPathEra, iden, orderItemIds);
                                            if (!string.IsNullOrWhiteSpace(bookingAWB))
                                            {
                                                var updated = EDB.ExecuteSQL("SConn", CommandType.Text, "UPDATE SOT01A SET TRACKING_SHIPMENT = '" + bookingAWB + "' WHERE NO_BUKTI='" + so.no_bukti + "'");
                                                if (updated < 1)
                                                {
                                                    success = false;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            success = false;
                                        }

                                        if (!success)
                                        {
                                            listErrors.Add(new PackingListErrors
                                            {
                                                keyname = so.no_referensi,
                                                errorMessage = "Pesanan gagal diproses."
                                            });
                                        }
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Pesanan tidak memiliki barang."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_referensi,
                                        errorMessage = "Pesanan sudah memiliki resi."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = so.no_bukti,
                                    errorMessage = "Pesanan tidak link dengan marketplace."
                                });
                            }
                        }
                        var successCount = listSuccess.Count();
                        return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    return new JsonResult { Data = new { mo_error = "Status Link Ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Status Link Ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        public class PackingListErrors
        {
            public string keyname { get; set; }
            public string errorMessage { get; set; }
        }
        public class listSuccessPrintLabel
        {
            public string no_referensi { get; set; }
            public string orderItemId { get; set; }
            public string pdf64 { get; set; }
        }
        public async Task<ActionResult> BlibliLabelPerPacking(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }
                var tblCustomer = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                var EDB = new DatabaseSQL(dbPathEra);

                if (!string.IsNullOrEmpty(tblCustomer.STATUS_API))
                {
                    if (tblCustomer.STATUS_API == "1")
                    {
                        string sSQLSelect = "";
                        sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                        string sSQL2 = "";
                        sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                        string sSQLSelect2 = "";
                        sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                        var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

                        BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                            API_client_password = tblCustomer.API_CLIENT_P,
                            API_client_username = tblCustomer.API_CLIENT_U,
                            API_secret_key = tblCustomer.API_KEY,
                            token = tblCustomer.TOKEN,
                            mta_username_email_merchant = tblCustomer.EMAIL,
                            mta_password_password_merchant = tblCustomer.PASSWORD,
                            idmarket = tblCustomer.RecNum.Value,
                            DatabasePathErasoft = dbPathEra,
                            username = usernameLogin,
                            versiToken = tblCustomer.KD_ANALISA
                        };
                        var bliJob = new BlibliControllerJob();
                        var listErrors = new List<PackingListErrors>();
                        var listSuccess = new List<listSuccessPrintLabel>();
                        foreach (var so in ListStt01a)
                        {
                            var dsSOT01B = EDB.GetDataSet("SConn", "SO", "SELECT ORDER_ITEM_ID FROM SOT01B NOLOCK WHERE NO_BUKTI = '" + so.no_bukti + "'");
                            if (dsSOT01B.Tables[0].Rows.Count == 0)
                            {
                                if (listErrors.Where(p => p.keyname == so.no_referensi).Count() == 0)
                                {
                                    listErrors.Add(new PackingListErrors { keyname = so.no_referensi, errorMessage = "Pesanan tidak memiliki barang." });
                                }
                            }

                            for (int i = 0; i < dsSOT01B.Tables[0].Rows.Count; i++)
                            {
                                var orderItemId = Convert.ToString(dsSOT01B.Tables[0].Rows[i]["ORDER_ITEM_ID"]);
                                string failedReason = "";
                                var success = false;
                                try
                                {
                                    var bookingAWB = await bliJob.GetShippingLabel(dbPathEra, iden, orderItemId);
                                    if (bookingAWB.success)
                                    {
                                        listSuccess.Add(new listSuccessPrintLabel
                                        {
                                            no_referensi = so.no_referensi,
                                            pdf64 = bookingAWB.value.document,
                                            orderItemId = orderItemId
                                        });
                                        success = true;
                                    }
                                    else
                                    {
                                        failedReason = bookingAWB.errorMessage;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    failedReason = "Internal Server Error.";
                                }

                                if (!success)
                                {

                                    if (listErrors.Where(p => p.keyname == so.no_referensi + "_" + orderItemId).Count() == 0)
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi + "_" + orderItemId,
                                            errorMessage = "Order [" + so.no_referensi + "] Item ID [" + orderItemId + "] gagal cetak label, karena : " + failedReason
                                        });
                                    }
                                }
                            }

                            var buktiSuccess = "";
                            foreach (var osn in listSuccess)
                            {
                                if (buktiSuccess != "")
                                {
                                    buktiSuccess += ",";
                                }
                                buktiSuccess += "'" + osn.no_referensi + "'";
                            }

                            string sSQLWhere = "";
                            if (buktiSuccess != "")
                            {
                                sSQLWhere += " no_referensi in (" + buktiSuccess + ")" + Environment.NewLine;
                            }
                            else
                            {
                                sSQLWhere += " 0=1" + Environment.NewLine;
                            }
                            EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where " + sSQLWhere);

                        }
                        return new JsonResult { Data = new { listErrors, listSuccess }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    return new JsonResult { Data = new { mo_error = "Status Link ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Status Link ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {

                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        public async Task<ActionResult> BlibliBatchFulfill(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var tblCustomer = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                var EDB = new DatabaseSQL(dbPathEra);
                if (!string.IsNullOrEmpty(tblCustomer.STATUS_API))
                {
                    if (tblCustomer.STATUS_API == "1")
                    {
                        string sSQLSelect = "";
                        sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item,isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no ";
                        string sSQL2 = "";
                        sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                        string sSQLSelect2 = "";
                        sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                        var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

                        BlibliControllerJob.BlibliAPIData iden = new BlibliControllerJob.BlibliAPIData
                        {
                            merchant_code = tblCustomer.Sort1_Cust,
                            API_client_password = tblCustomer.API_CLIENT_P,
                            API_client_username = tblCustomer.API_CLIENT_U,
                            API_secret_key = tblCustomer.API_KEY,
                            token = tblCustomer.TOKEN,
                            mta_username_email_merchant = tblCustomer.EMAIL,
                            mta_password_password_merchant = tblCustomer.PASSWORD,
                            idmarket = tblCustomer.RecNum.Value,
                            DatabasePathErasoft = dbPathEra,
                            username = usernameLogin,
                            versiToken = tblCustomer.KD_ANALISA
                        };

                        var bliJob = new BlibliControllerJob();
                        var listErrors = new List<PackingListErrors>();
                        var listSuccess = new List<listSuccessPrintLabel>();

                        var sqlStorage = new SqlServerStorage(EDBConnID);
                        var clientJobServer = new BackgroundJobClient(sqlStorage);
                        foreach (var so in ListStt01a)
                        {
                            if (!string.IsNullOrWhiteSpace(so.no_referensi))
                            {
                                var orderItemIds = new List<string>();
                                var dsSOT01B = EDB.GetDataSet("SConn", "SO", "SELECT ORDER_ITEM_ID FROM SOT01B NOLOCK WHERE NO_BUKTI = '" + so.no_bukti + "'");
                                var success = false;
                                try
                                {
                                    for (int i = 0; i < dsSOT01B.Tables[0].Rows.Count; i++)
                                    {
                                        string order_item_id = Convert.ToString(dsSOT01B.Tables[0].Rows[i]["ORDER_ITEM_ID"]);
                                        orderItemIds.Add(order_item_id);
                                        //                                        new BlibliControllerJob().fillOrderAWB(dbPathEra, so.nama_pemesan, cust,
                                        //                                            "Pesanan", "Ganti Status", iden, so.tracking_no, so.no_referensi,
                                        //                                            order_item_id);
                                        clientJobServer.Enqueue<BlibliControllerJob>(x => x.fillOrderAWB(dbPathEra, so.nama_pemesan, cust, "Pesanan", "Ganti Status", iden, so.tracking_no, so.no_referensi, order_item_id));
                                    }
                                    listSuccess.Add(new listSuccessPrintLabel()
                                    {
                                        no_referensi = so.no_referensi
                                    });
                                    success = true;
                                }
                                catch (Exception ex)
                                {

                                }

                                if (orderItemIds.Count > 0)
                                {
                                    if (!success)
                                    {
                                        if (listErrors.Where(p => p.keyname == so.no_referensi).Count() == 0)
                                        {
                                            listErrors.Add(new PackingListErrors
                                            {
                                                keyname = so.no_referensi,
                                                errorMessage = "Pesanan gagal diproses."
                                            });
                                        }
                                    }
                                }
                                else
                                {
                                    if (listErrors.Where(p => p.keyname == so.no_referensi).Count() == 0)
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = so.no_referensi,
                                            errorMessage = "Pesanan tidak memiliki barang."
                                        });
                                    }
                                }
                            }
                            else
                            {
                                if (listErrors.Where(p => p.keyname == so.no_referensi).Count() == 0)
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = so.no_referensi,
                                        errorMessage = "Pesanan tidak link dengan marketplace."
                                    });
                                }
                            }
                        }
                        var successCount = listSuccess.Count();
                        return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    return new JsonResult { Data = new { mo_error = "Status Link Ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                return new JsonResult { Data = new { mo_error = "Status Link Ke Marketplace tidak aktif." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        //add by calvin 10 september 2019, update stock ulang ke seluruh marketplace
        public ActionResult MarketplaceLogRetryStock()
        {
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string username = sessionData.Account != null ? sessionData.Account.Username : sessionData.User.Username;

            Task.Run(() => new StokControllerJob().updateStockMarketPlace_ForItemInSTF08A("", dbPathEra, username));

            return new JsonResult { Data = "Success", JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        //end add by calvin 10 september 2019, update stock ulang ke seluruh marketplace

        //add by nurul 23/10/2019
        public ActionResult GetDetailBayarPiutang(string orderId)
        {
            var detail = 0;
            try
            {
                var listDetail = ErasoftDbContext.ART03B.Where(b => b.BUKTI == orderId).Select(a => a.NO).ToList();
                detail = listDetail.Count();
            }
            catch (Exception ex)
            {
                //return View("Error");
            }

            return Json(detail, JsonRequestBehavior.AllowGet);
        }

        public async Task<ActionResult> UploadXcelBayar1(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess, string log, bool NoProcess, string percentDanprogressDownload, string statusLoopSuccessDownload, string filename, string percentDanprogressTemp, string statusLoopSuccessTemp, string fileCsvTemp)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            //string dataVm = Request["dataVm"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };
            List<TEMP_UPLOAD_EXCEL_BAYAR> temp_records = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
            List<int> recnum_record = new List<int>();

            byte[] data = null;
            byte[] dataByte = null;
            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');
            ret.TidakLanjutProses = NoProcess;

            string[] statusDownload = statusLoopSuccessDownload.Split(';');
            string[] progDownload = percentDanprogressDownload.Split(';');

            string[] statusTemp = statusLoopSuccessTemp.Split(';');
            string[] progTemp = percentDanprogressTemp.Split(';');

            ret.statusLoop = Convert.ToBoolean(status[0]);
            ret.statusLoopDownload = Convert.ToBoolean(statusDownload[0]);
            ret.statusLoopTemp = Convert.ToBoolean(statusTemp[0]);
            if (ret.statusLoop == false && ret.statusLoopDownload == false && ret.statusLoopTemp == false)
            {
                ret.buktiLog = "Log_Upload_Pembayaran_Shopee" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            }
            else
            {
                ret.buktiLog = log;
            }

            ret.statusLoopDownload = Convert.ToBoolean(statusDownload[0]);
            if (filename != null && filename != "")
            {
                ret.TipeData = filename;
            }
            //ret.selesaiProsesDownload = false;
            ret.TidakLanjutProses = NoProcess;


            try
            {

                var mp = MoDbContext.Marketplaces.ToList();
                ret.statusSuccess = Convert.ToBoolean(status[1]);
                ret.statusSuccessDownload = Convert.ToBoolean(statusDownload[1]);
                ret.statusSuccessTemp = Convert.ToBoolean(statusTemp[1]);
                ret.sudahSimpanTemp = false;
                //var tipeData = "";

                if (ret.byteData == null && ret.statusLoop == false && ret.statusSuccessTemp == false)
                {
                    if (ret.statusLoopTemp == false)
                    {
                        ret.adaError = false;
                        LOG_IMPORT_FAKTUR newLogImportPiutang = new LOG_IMPORT_FAKTUR
                        {
                            CUST = cust_id,
                            UPLOADER = uname,
                            LAST_FAKTUR_UPLOADED = "",
                            UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                            LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7),
                            LOG_FILE = ret.buktiLog,
                        };
                        ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportPiutang);
                        ErasoftDbContext.SaveChanges();
                    }

                    if (Request.Files[0] != null && Request.Files[0].ContentLength > 0)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        //dataByte = UploadFileServices.UploadFile(Request.Files[0]);
                        //ret.byteData = dataByte;

                        if (recnum_record.Count() == 0)
                        {
                            if (ret.TipeData.Split('.').Last().ToLower() == "csv")
                            {
                                TextReader tr;
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;
                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }
                                    //ret.byteData = memoryStream.ToArray();
                                    data = memoryStream.ToArray();
                                    tr = new StreamReader(inputStream);
                                }

                                string namaFile = "";
                                if (ret.statusLoopTemp == false)
                                {
                                    namaFile = dbPathEra + "_BayarShopee_" + DateTime.Now.ToString("yyyyMMdd_HHmmssffff") + ".csv";
                                }
                                else
                                {
                                    namaFile = fileCsvTemp;
                                }
                                ret.fileCsvPath = namaFile;
                                System.IO.File.WriteAllBytes(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile), data);
                                using (var sr = new StreamReader(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile)))
                                {
                                    sr.ReadLine();
                                    sr.ReadLine();
                                    sr.ReadLine();
                                    sr.ReadLine();
                                    sr.ReadLine();
                                    sr.ReadLine();
                                    CsvReader reader = new CsvReader(sr);
                                    reader.Configuration.Delimiter = ",";
                                    reader.Configuration.PrepareHeaderForMatch = (header, index) => Regex.Replace(header, @"\s|[().]", string.Empty);
                                    var records_excell = reader.GetRecords<ShopeeExcelBayarPiutang>();
                                    var cekCount = records_excell.ToList();
                                    ret.countAllTemp = cekCount.Count();
                                    try
                                    {
                                        if (ret.statusLoopTemp == true)
                                        {
                                            progTemp[1] = Convert.ToString(Convert.ToInt32(progTemp[1]) - 1);
                                        }
                                        if (Convert.ToInt32(progTemp[1]) == 0)
                                        {
                                            progTemp[1] = "0";
                                        }

                                        if (cekCount.Count() > 0)
                                        {
                                            ret.TidakLanjutProses = false;

                                            var tempPercent = Convert.ToInt32(progTemp[0]);
                                            var cekPer10 = (ret.countAllTemp / 4);
                                            var temp40 = Convert.ToInt32(progTemp[1]) + 1000;

                                            if (ret.statusLoopTemp == false)
                                            {
                                                var cekAdaTemp = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.FirstOrDefault();
                                                if (cekAdaTemp != null)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from TEMP_UPLOAD_EXCEL_BAYAR");
                                                }
                                            }
                                            ret.statusLoopTemp = true;
                                            //foreach (var dataPiutang in records_excell)
                                            for (int i = Convert.ToInt32(progTemp[1]); i < cekCount.Count(); i++)
                                            {
                                                ret.TidakLanjutProses = false;
                                                ret.statusLoopTemp = true;
                                                ret.progressTemp = i + 1;
                                                ret.percentTemp = ((i + 1) * 100) / ret.countAllTemp;

                                                var a = new ShopeeExcelBayarPiutang
                                                {
                                                    //Tanggal = Convert.ToDateTime(dataPiutang.Tanggal),
                                                    //PenerimaDana = Convert.ToString(dataPiutang.PenerimaDana),
                                                    //JumlahDana = Convert.ToDouble(dataPiutang.JumlahDana),
                                                    //Deskripsi = Convert.ToString(dataPiutang.Deskripsi),
                                                    //Status = Convert.ToString(dataPiutang.Status),
                                                    //Saldo = Convert.ToDouble(dataPiutang.Saldo)
                                                    Tanggal = Convert.ToDateTime(cekCount[i].Tanggal),
                                                    PenerimaDana = Convert.ToString(cekCount[i].PenerimaDana),
                                                    JumlahDana = Convert.ToDouble(cekCount[i].JumlahDana),
                                                    Deskripsi = Convert.ToString(cekCount[i].Deskripsi),
                                                    Status = Convert.ToString(cekCount[i].Status),
                                                    Saldo = Convert.ToDouble(cekCount[i].Saldo)
                                                };
                                                if (!string.IsNullOrEmpty(a.Deskripsi) && a.PenerimaDana == "Saldo Penjual")
                                                {
                                                    var getref = a.Deskripsi.Split('#');
                                                    if (getref.Count() > 1)
                                                    {
                                                        TEMP_UPLOAD_EXCEL_BAYAR rec = new TEMP_UPLOAD_EXCEL_BAYAR()
                                                        {
                                                            NAMA_FILE = ret.TipeData,
                                                            CUST = cust_id,
                                                            MARKETPLACE = "SHOPEE",
                                                            NOREF = getref.Last(),
                                                            TGL = a.Tanggal,
                                                            BAYAR = a.JumlahDana,
                                                            POTONGAN = 0,
                                                            NILAI_REF = a.JumlahDana,
                                                            NILAI_LAIN = 0,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            SUDAH_INPUT = false,
                                                            USERNAME = uname,
                                                            KET = ""
                                                        };
                                                        temp_records.Add(rec);
                                                        ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Add(rec);
                                                        ErasoftDbContext.SaveChanges();
                                                        //ret.sudahSimpanTemp = true;                                                        
                                                    }
                                                }

                                                if (cekPer10 > 1000)
                                                {
                                                    if ((ret.progressTemp == temp40) || ret.percentTemp == 100)
                                                    {
                                                        ret.statusSuccessTemp = false;
                                                        if (ret.percentTemp > 99 && ret.percentTemp <= 101)
                                                        {
                                                            ret.statusSuccessTemp = true;
                                                            ret.statusLoopTemp = false;
                                                            ret.sudahSimpanTemp = true;
                                                        }
                                                        if (tempPercent != ret.percentTemp)
                                                        {
                                                            if (ret.statusSuccessTemp == false)
                                                            {
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (ret.percentTemp == 20 ||
                                                ret.percentTemp == 40 ||
                                                ret.percentTemp == 60 ||
                                                ret.percentTemp == 80 ||
                                                ret.percentTemp == 100)
                                                {
                                                    ret.statusSuccessTemp = false;
                                                    if (ret.percentTemp > 99 && ret.percentTemp <= 101)
                                                    {
                                                        ret.statusSuccessTemp = true;
                                                        ret.statusLoopTemp = false;
                                                        ret.sudahSimpanTemp = true;
                                                    }
                                                    if (tempPercent != ret.percentTemp)
                                                    {
                                                        if (ret.statusSuccessTemp == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File " + ret.TipeData + " tidak ada data pembayaran.<br />");
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "File " + ret.TipeData + " tidak ada data pembayaran.<br />",
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ret.Errors.Add("Format file yang anda upload salah.<br />");
                                        ret.adaError = true;
                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        {
                                            LOG_FILE = ret.buktiLog,
                                            VARIABLE_1 = ret.nobuk,
                                            VARIABLE_2 = ret.TipeData,
                                            TEXT_1 = "Format file yang anda upload salah.<br />",
                                            TEXT_2 = "",
                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                            USERNAME = uname
                                        };
                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        ErasoftDbContext.SaveChanges();
                                        ret.TidakLanjutProses = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }

                                }
                                System.IO.File.Delete(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile));
                                if (ret.statusSuccessTemp == false)
                                {
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                            }
                            else if (ret.TipeData.Split('.').Last().ToLower().Contains("xls"))
                            {
                                if (ret.TipeData.Split('.').Last().ToLower() == "xls")
                                {
                                    using (Stream inputStream = Request.Files[0].InputStream)
                                    {
                                        Workbook workbook = new Workbook();
                                        workbook.LoadFromStream(inputStream);
                                        MemoryStream memoryStream = new MemoryStream();
                                        workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                        data = memoryStream.ToArray();
                                    }
                                }
                                else if (ret.TipeData.Split('.').Last().ToLower() == "xlsx")
                                {
                                    using (Stream inputStream = Request.Files[0].InputStream)
                                    {
                                        MemoryStream memoryStream = inputStream as MemoryStream;
                                        if (memoryStream == null)
                                        {
                                            memoryStream = new MemoryStream();
                                            inputStream.CopyTo(memoryStream);
                                        }
                                        data = memoryStream.ToArray();
                                    }
                                }
                                using (MemoryStream stream = new MemoryStream(data))
                                {
                                    using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                                    {
                                        //loop all worksheets
                                        var worksheet = excelPackage.Workbook.Worksheets[1];
                                        string cekValid = worksheet.Cells[1, 1].Value == null ? "" : worksheet.Cells[1, 1].Value.ToString();
                                        if (!string.IsNullOrEmpty(cekValid) && cekValid.Contains("Shopee"))
                                        {
                                            if (ret.statusLoopTemp == false)
                                            {
                                                var cekAdaTemp = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.FirstOrDefault();
                                                if (cekAdaTemp != null)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from TEMP_UPLOAD_EXCEL_BAYAR");
                                                }
                                            }
                                            ret.countAllTemp = worksheet.Dimension.End.Row - 8;
                                            //for (int i = 8; i <= worksheet.Dimension.End.Row; i++)
                                            if (ret.countAllTemp > 0)
                                            {
                                                if (ret.statusLoopTemp == true)
                                                {
                                                    progTemp[1] = Convert.ToString(Convert.ToInt32(progTemp[1]) - 1);
                                                }

                                                if (Convert.ToInt32(progTemp[1]) == 0)
                                                {
                                                    progTemp[1] = "0";
                                                }
                                                ret.TidakLanjutProses = false;
                                                ret.statusLoopTemp = true;
                                                var tempPercent = Convert.ToInt32(progTemp[0]);
                                                var cekPer10 = (ret.countAllTemp / 4);
                                                var temp40 = Convert.ToInt32(progTemp[1]) + 1000;

                                                for (int i = Convert.ToInt32(progTemp[1]) + 8; i < worksheet.Dimension.End.Row; i++)
                                                {
                                                    ret.TidakLanjutProses = false;
                                                    ret.statusLoopTemp = true;
                                                    ret.progressTemp = i - 7;
                                                    ret.percentTemp = ((i - 7) * 100) / ret.countAllTemp;


                                                    //Columns start from A5, start mapping column
                                                    var a = new ShopeeExcelBayarPiutang
                                                    {
                                                        Tanggal = worksheet.Cells[i, 1].Value == null ? DateTime.Now : Convert.ToDateTime(worksheet.Cells[i, 1].Value),
                                                        PenerimaDana = worksheet.Cells[i, 2].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 2].Value),
                                                        JumlahDana = worksheet.Cells[i, 3].Value == null ? 0 : Convert.ToDouble(worksheet.Cells[i, 3].Value),
                                                        Deskripsi = worksheet.Cells[i, 4].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 4].Value),
                                                        Status = worksheet.Cells[i, 5].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 5].Value),
                                                        Saldo = worksheet.Cells[i, 6].Value == null ? 0 : Convert.ToDouble(worksheet.Cells[i, 6].Value)
                                                    };
                                                    if (!string.IsNullOrEmpty(a.Deskripsi) && a.PenerimaDana == "Saldo Penjual")
                                                    {
                                                        var getref = a.Deskripsi.Split('#');
                                                        if (getref.Count() > 1)
                                                        {
                                                            TEMP_UPLOAD_EXCEL_BAYAR rec = new TEMP_UPLOAD_EXCEL_BAYAR()
                                                            {
                                                                NAMA_FILE = ret.TipeData,
                                                                CUST = cust_id,
                                                                MARKETPLACE = "SHOPEE",
                                                                NOREF = getref.Last(),
                                                                TGL = a.Tanggal,
                                                                BAYAR = a.JumlahDana,
                                                                POTONGAN = 0,
                                                                NILAI_REF = a.JumlahDana,
                                                                NILAI_LAIN = 0,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                SUDAH_INPUT = false,
                                                                USERNAME = uname,
                                                                KET = ""
                                                            };
                                                            temp_records.Add(rec);
                                                            ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Add(rec);
                                                            ErasoftDbContext.SaveChanges();
                                                            //ret.sudahSimpanTemp = true;
                                                        }
                                                    }

                                                    if (cekPer10 > 1000)
                                                    {
                                                        if ((ret.progressTemp == temp40) || ret.percentTemp == 100)
                                                        {
                                                            ret.statusSuccessTemp = false;
                                                            if (ret.percentTemp > 99 && ret.percentTemp <= 101)
                                                            {
                                                                ret.statusSuccessTemp = true;
                                                                ret.statusLoopTemp = false;
                                                                ret.sudahSimpanTemp = true;
                                                            }
                                                            if (tempPercent != ret.percentTemp)
                                                            {
                                                                if (ret.statusSuccessTemp == false)
                                                                {
                                                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else if (ret.percentTemp == 20 ||
                                                    ret.percentTemp == 40 ||
                                                    ret.percentTemp == 60 ||
                                                    ret.percentTemp == 80 ||
                                                    ret.percentTemp == 100)
                                                    {
                                                        ret.statusSuccessTemp = false;
                                                        if (ret.percentTemp > 99 && ret.percentTemp <= 101)
                                                        {
                                                            ret.statusSuccessTemp = true;
                                                            ret.statusLoopTemp = false;
                                                            ret.sudahSimpanTemp = true;
                                                        }
                                                        if (tempPercent != ret.percentTemp)
                                                        {
                                                            if (ret.statusSuccessTemp == false)
                                                            {
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                ret.Errors.Add("File " + ret.TipeData + " tidak ada data pembayaran.<br />");
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = "File " + ret.TipeData + " tidak ada data pembayaran.<br />",
                                                    TEXT_2 = "",
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                                ret.TidakLanjutProses = true;
                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File bukan data pembayaran Shopee.<br />");
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "File bukan data pembayaran Shopee.<br />",
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + ret.TipeData + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />");
                                ret.adaError = true;
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "File " + ret.TipeData + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                                ret.TidakLanjutProses = true;
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                }
                else
                {
                    ret.byteData = null;
                    ret.nobuk = nobuk;
                }

                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    if (ret.statusLoop == false)
                    {
                        ret.lastRow.Add(0);
                    }

                    if (ret.statusLoop == true)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        if (log != null)
                        {
                            ret.buktiLog = log;
                        }
                    }



                    var customer = ErasoftDbContext.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                    if (customer != null)
                    {
                        List<double> nilaiFaktur = new List<double>();
                        List<double> nilaiRef = new List<double>();
                        List<double> nilaiPot = new List<double>();
                        List<double?> nilaiLebihBayar = new List<double?>();
                        string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;


                        var listTemp = ErasoftDbContext.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                        if (listTemp > 0)
                        {
                            List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                            List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses_lanjut = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                            List<ART03B> list_detail = new List<ART03B>();
                            #region create induk
                            //if (temp_records.Count() > 0)
                            if (ret.countAllTemp > 0 && ret.statusLoopDownload == false && ret.statusSuccessTemp == true)
                            {
                                if (ret.statusLoop == false)
                                {
                                    var art03a = new ART03A
                                    {
                                        KET = "-",
                                        USERNAME = "UPLOAD_SHOPEE",
                                        TUKAR = 1,
                                        MUKA1 = 0,
                                        MUKA2 = 0,
                                        KONTAN = 0,
                                        VLT = "IDR",
                                        TOTAL_KREDIT_GL = 0,
                                        TOTAL_DEBET_GL = 0,
                                        POSTING = "'",
                                        NCUST = "",
                                        TGLINPUT = DateTime.Now,
                                        TBAYAR = 0,
                                        TPOT = 0,
                                        TGL = Convert.ToDateTime(tgl),
                                        CUST = cust_id,
                                        //add logfile u/ save log name and count record process
                                        //log_file = ret.buktiLog + ";" + temp_records.Count().ToString()
                                        log_file = ret.buktiLog + ";" + ret.countAllTemp.ToString()
                                    };

                                    var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                    var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                                    //end change by nurul 23/12/2019, perbaikan no bukti

                                    art03a.BUKTI = noOrder;
                                    bukti = noOrder;
                                    ret.nobuk = noOrder;

                                    var cekAdaErr = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == noOrder).Select(a => a.LOG_FILE).ToList();
                                    if (cekAdaErr.Count() > 0)
                                    {
                                        var string_log = "";
                                        foreach (var log1 in cekAdaErr)
                                        {
                                            if (string_log != "")
                                            {
                                                string_log += ",";
                                            }

                                            string_log += "'" + log1 + "'";
                                        }
                                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from TABLE_LOG_DETAIL where VARIABLE_1 ='" + noOrder + "' and LOG_FILE in (" + string_log + ")");
                                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from LOG_IMPORT_FAKTUR where LAST_FAKTUR_UPLOADED ='" + noOrder + "'");
                                    }

                                    try
                                    {
                                        ErasoftDbContext.ART03A.Add(art03a);
                                        ErasoftDbContext.SaveChanges();
                                    }
                                    catch (Exception ex)
                                    {
                                        var tempSI = ErasoftDbContext.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                        if (tempSI != null)
                                        {
                                            if (tempSI.BUKTI == noOrder)
                                            {
                                                var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                lastBuktiNew++;
                                                noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                art03a.BUKTI = noOrder;
                                                ErasoftDbContext.ART03A.Add(art03a);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                            ret.Errors.Add(errMsg);
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = errMsg,
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    ErasoftDbContext.Database.ExecuteSqlCommand("update LOG_IMPORT_FAKTUR set LAST_FAKTUR_UPLOADED = '" + art03a.BUKTI + "' where CUST ='" + cust_id + "' and LOG_FILE ='" + ret.buktiLog + "'");

                                    ret.TPOT = art03a.TPOT;
                                    ret.TBAYAR = art03a.TBAYAR;
                                    ret.TLEBIHBAYAR = Convert.ToDouble(art03a.TLEBIH_BAYAR);
                                    //if (temp_records.Count() > 0)
                                    //{
                                    //    var string_rec = "";
                                    //    foreach (var rec1 in temp_records)
                                    //    {
                                    //        if (string_rec != "")
                                    //        {
                                    //            string_rec += ",";
                                    //        }
                                    //        string_rec += "'" + rec1.RECNUM + "'";
                                    //    }
                                    //    ErasoftDbContext.Database.ExecuteSqlCommand("update TEMP_UPLOAD_EXCEL_BAYAR set ket = '" + art03a.BUKTI + "' where RECNUM in (" + string_rec + ")");
                                    //}
                                    ErasoftDbContext.Database.ExecuteSqlCommand("update TEMP_UPLOAD_EXCEL_BAYAR set ket = '" + art03a.BUKTI + "'");

                                    List<string> list_ref = new List<string>();
                                    list_ref = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Where(a => a.KET == ret.nobuk && a.NAMA_FILE == ret.TipeData && a.CUST == cust_id).Select(A => A.NOREF).ToList();
                                    if (list_ref.Count() > 0)
                                    {
                                        var string_ref = "";
                                        foreach (var ref1 in list_ref)
                                        {
                                            if (string_ref != "")
                                            {
                                                string_ref += ",";
                                            }
                                            string_ref += "'" + ref1 + "'";
                                        }

                                        string ssql1 = "UPDATE A SET A.NILAI_LAIN = isnull(B.SISA,0), A.KET2 = B.NO_BUKTI + ';' + CONVERT(NVARCHAR, B.NETTO) + ';' + B.DATABAYAR + ';' + B.BUKTI_BAYAR + ';' + CONVERT(NVARCHAR,B.TGLREF_BAYAR) + ';' + CONVERT(NVARCHAR,B.TGL) ";
                                        ssql1 += "FROM TEMP_UPLOAD_EXCEL_BAYAR AS A LEFT JOIN ( ";
                                        ssql1 += "select a.no_bukti, a.no_ref, a.netto, isnull((isnull(b.NETTO,0) - isnull(b.BAYAR,0) - isnull(b.KREDIT,0) + isnull(b.DEBET,0)),0) sisa, ISNULL(CASE WHEN CONVERT(DATE, D.TGL) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), D.TGL, 103) END, '') AS TGL ";
                                        ssql1 += ",(case when isnull(c.BUKTI,'') <> '' then 'SUDAH ADA' ELSE 'TIDAK ADA' END) DATABAYAR,ISNULL(C.BUKTI,'')BUKTI_BAYAR, ISNULL(CASE WHEN CONVERT(DATE, C.TGL_REF) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), C.TGL_REF, 103) END, '') AS TGLREF_BAYAR ";
                                        ssql1 += "from sit01a a left join art01d b on a.no_bukti = b.faktur LEFT JOIN ART03B C ON A.NO_BUKTI=C.NFAKTUR LEFT JOIN SOT01A D ON A.NO_SO=D.NO_BUKTI WHERE a.CUST= '" + cust_id + "' and a.no_ref in (" + string_ref + ")) ";
                                        ssql1 += "AS B ON A.NOREF = B.no_ref ";
                                        ssql1 += "WHERE A.CUST = '" + cust_id + "' AND A.KET = '" + ret.nobuk + "' and A.NOREF in (" + string_ref + ") ";
                                        ErasoftDbContext.Database.ExecuteSqlCommand(ssql1);
                                    }
                                    //var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                    //data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());

                                    //data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                    //ret.countAll = data_proses_lanjut.Count();
                                    //if (data_proses_lanjut.Count() > 0)
                                    //{
                                    //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                    //    if (cekListSIKosong.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekListSIKosong)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                    //    if (cekSudahAda.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekSudahAda)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                    //    if (cekLunas.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekLunas)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                    //    if (cekListSIKosong.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekListSIKosong)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                    //    if (cekSudahAda.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekSudahAda)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                    //    if (cekLunas.Count() > 0)
                                    //    {
                                    //        foreach (var ref1 in cekLunas)
                                    //        {
                                    //            ret.adaError = true;
                                    //            if (ret.buktiLog != "")
                                    //            {
                                    //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    //                {
                                    //                    LOG_FILE = ret.buktiLog,
                                    //                    VARIABLE_1 = ret.nobuk,
                                    //                    VARIABLE_2 = ret.TipeData,
                                    //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                    //                    TEXT_2 = ref1,
                                    //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //                    USERNAME = uname
                                    //                };
                                    //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    //                ErasoftDbContext.SaveChanges();
                                    //            }
                                    //        }
                                    //    }
                                    //    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                                    //    ErasoftDbContext.ART03A.Remove(piutangInDb);
                                    //    ErasoftDbContext.SaveChanges();
                                    //    ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                                    //    ret.adaError = true;

                                    //    TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                                    //    {
                                    //        LOG_FILE = ret.buktiLog,
                                    //        VARIABLE_1 = ret.nobuk,
                                    //        VARIABLE_2 = ret.TipeData,
                                    //        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                                    //        TEXT_2 = "",
                                    //        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    //        USERNAME = uname
                                    //    };
                                    //    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                                    //    ErasoftDbContext.SaveChanges();

                                    //    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                                    //    if (cekErr > 0)
                                    //    {
                                    //        ret.adaError = true;
                                    //    }
                                    //    ret.TidakLanjutProses = true;
                                    //    return Json(ret, JsonRequestBehavior.AllowGet);
                                    //}
                                    ret.TidakLanjutProses = false;
                                    ret.statusLoopDownload = true;
                                    //ret.percentDownload = 10;
                                    ret.statusLoop = true;
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                            }

                            if (ret.statusLoopDownload == true && ret.statusSuccessDownload == false && ret.selesaiProsesDownload == false)
                            {
                                var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());
                                ret.countAllDownload = data_proses.Count();
                                if (ret.statusLoop == true)
                                {
                                    progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - 1);
                                }
                                if (Convert.ToInt32(progDownload[1]) == 0)
                                {
                                    progDownload[1] = "0";
                                }

                                if (data_proses.Count() > 0)
                                {
                                    ret.TidakLanjutProses = false;
                                    ret.statusLoopDownload = true;
                                    var tempPercent = Convert.ToInt32(progDownload[0]);
                                    //var cekPer20 = (ret.countAllDownload / 10);
                                    var cekPer10 = (ret.countAllDownload / 4);
                                    var temp40 = Convert.ToInt32(progDownload[1]) + 1000;
                                    data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                    ret.countAll = data_proses_lanjut.Count();

                                    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();

                                    if (data_proses_lanjut.Count() > 0 && data_proses_lanjut.Count() == data_proses.Count())
                                    {
                                        ret.selesaiProsesDownload = true;
                                        ret.statusSuccessDownload = true;
                                        ret.percentDownload = 100;
                                        ret.progressDownload = data_proses.Count();
                                        ret.statusLoopDownload = false;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(progDownload[1]) > 0)
                                        {
                                            progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - data_proses_lanjut.Count());
                                        }
                                        var hitungTotal = cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count();
                                        for (int i = Convert.ToInt32(progDownload[1]); i < (cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count()); i++)
                                        {
                                            var countProcess = data_proses_lanjut.Count() + i;
                                            ret.TidakLanjutProses = false;
                                            ret.statusLoopDownload = true;
                                            ret.progressDownload = countProcess + 1;
                                            ret.percentDownload = ((countProcess + 1) * 100) / ret.countAllDownload;
                                            var a = cekSudahAda.Count();
                                            var b = cekListSIKosong.Count();
                                            var c = cekLunas.Count();
                                            var cek1 = cekListSIKosong.Count() - (i);
                                            int cek2 = Convert.ToInt32(a - (i - b));
                                            var cek3 = Convert.ToInt32(c - (i - (a + b)));
                                            if (cekListSIKosong.Count() - (i) > 0)
                                            {
                                                ret.adaError = true;
                                                if (ret.buktiLog != "")
                                                {
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Faktur dengan No. Ref " + cekListSIKosong[i] + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                        TEXT_2 = cekListSIKosong[i],
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else if (cek2 > 0)
                                            {
                                                var indexAda = (i) - cekListSIKosong.Count();
                                                ret.adaError = true;
                                                if (ret.buktiLog != "")
                                                {
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Faktur dengan No. Ref " + cekSudahAda[indexAda] + " sudah proses bayar",
                                                        TEXT_2 = cekSudahAda[indexAda],
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else if (cek3 > 0)
                                            {
                                                var indexLunas = (i) - (cekListSIKosong.Count() + cekSudahAda.Count());
                                                ret.adaError = true;
                                                if (ret.buktiLog != "")
                                                {
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Faktur dengan No. Ref " + cekLunas[indexLunas] + " sudah lunas.<br />",
                                                        TEXT_2 = cekLunas[indexLunas],
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }

                                            if (cekPer10 > 1000)
                                            {
                                                if ((ret.progressDownload == temp40) || ret.percentDownload == 100)
                                                {
                                                    ret.statusSuccessDownload = false;
                                                    if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                    {
                                                        ret.statusSuccessDownload = true;
                                                        ret.selesaiProsesDownload = true;
                                                        ret.statusLoopDownload = false;
                                                    }
                                                    if (tempPercent != ret.percentDownload)
                                                    {
                                                        if (ret.statusSuccessDownload == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (ret.percentDownload == 25 ||
                                            ret.percentDownload == 50 ||
                                            ret.percentDownload == 75 ||
                                            ret.percentDownload == 100)
                                            {
                                                ret.statusSuccessDownload = false;
                                                if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                {
                                                    ret.statusSuccessDownload = true;
                                                    ret.selesaiProsesDownload = true;
                                                    ret.statusLoopDownload = false;
                                                }
                                                if (tempPercent != ret.percentDownload)
                                                {
                                                    if (ret.statusSuccessDownload == false)
                                                    {
                                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                ret.TidakLanjutProses = false;
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }

                            if (ret.statusLoop == true)
                            {
                                var ssql3 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "' and NILAI_LAIN <> 0 and KET2 like '%TIDAK ADA%'";
                                data_proses_lanjut.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql3).ToList());
                                ret.countAll = data_proses_lanjut.Count();
                                prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                            }

                            if (Convert.ToInt32(prog[1]) == 0)
                            {
                                prog[1] = "0";
                            }
                            #endregion


                            //loop all rows
                            if (data_proses_lanjut.Count() > 0)
                            {
                                var tempPercent = Convert.ToInt32(prog[0]);
                                var cekPer10 = (ret.countAll / 10);
                                var temp40 = Convert.ToInt32(prog[1]) + 100;
                                for (int i = Convert.ToInt32(prog[1]); i < data_proses_lanjut.Count(); i++)
                                {
                                    ret.statusLoop = true;
                                    ret.progress = i + 1;
                                    ret.percent = ((i + 1) * 100) / ret.countAll;
                                    var getData = data_proses_lanjut[i];
                                    if (getData != null)
                                    {
                                        var current_ref = getData.NOREF;
                                        if (getData.KET2 != null && getData.KET2.Contains(";"))
                                        {
                                            var splitKet = getData.KET2.Split(';');
                                            var ketSI = splitKet[0];
                                            var ketNetto = Convert.ToDouble(splitKet[1]);
                                            var ketDATABAYAR = splitKet[2];
                                            var ketBUKTI_BAYAR = splitKet[3];
                                            var ketTGLREF_BAYAR = splitKet[4];
                                            var ketTGLSO = splitKet[5];
                                            var ketSisa = getData.NILAI_LAIN;

                                            if (!string.IsNullOrEmpty(current_ref))
                                            {
                                                var noref = current_ref;
                                                var so = "";
                                                double nettoSI = 0;

                                                if (ketSI != "")
                                                {
                                                    so = ketSI;
                                                    nettoSI = Convert.ToDouble(ketNetto);
                                                    var totalSisa = 0d;
                                                    var bayarpiutang = 0d;
                                                    var adaBayar = false;
                                                    totalSisa = ketSisa;
                                                    bayarpiutang = getData.NILAI_REF;
                                                    if (totalSisa != 0 && ketDATABAYAR == "TIDAK ADA")
                                                    {

                                                        var art03b = new ART03B
                                                        {
                                                            USERNAME = "UPLOAD_SHOPEE",
                                                            POT = 0,
                                                            LEBIH_BAYAR = 0,
                                                            BUKTI = ret.nobuk,
                                                        };

                                                        if (!string.IsNullOrEmpty(Convert.ToString(noref)))
                                                        {
                                                            art03b.NOREF = noref;
                                                        }
                                                        else
                                                        {
                                                            art03b.NOREF = null;
                                                        }

                                                        art03b.NFAKTUR = ketSI;
                                                        art03b.SISA = ketSisa;

                                                        //change by nurul 22/4/2020
                                                        //art03b.TGL_REF = getData.TGL;
                                                        if (ketTGLSO != "" && ketTGLSO != null)
                                                        {
                                                            art03b.TGL_REF = Convert.ToDateTime(ketTGLSO);
                                                        }
                                                        //end change by nurul 22/4/2020

                                                        if (totalSisa >= bayarpiutang)
                                                        {
                                                            art03b.BAYAR = bayarpiutang;
                                                            //if (totalSisa - bayarpiutang > 0)
                                                            //{
                                                            //    art03b.POT = totalSisa - bayarpiutang;
                                                            //}
                                                        }
                                                        else if (totalSisa < bayarpiutang)
                                                        {
                                                            art03b.LEBIH_BAYAR = bayarpiutang - totalSisa;
                                                            art03b.BAYAR = Convert.ToDouble(bayarpiutang - art03b.LEBIH_BAYAR);
                                                        }
                                                        nilaiFaktur.Add(art03b.SISA);
                                                        nilaiRef.Add(art03b.BAYAR);
                                                        nilaiPot.Add(art03b.POT);
                                                        nilaiLebihBayar.Add(art03b.LEBIH_BAYAR);
                                                        list_detail.Add(art03b);
                                                        getData.SUDAH_INPUT = true;
                                                    }
                                                    else if (totalSisa != 0 && ketDATABAYAR == "SUDAH ADA")
                                                    {
                                                        ret.adaError = true;
                                                        if (ret.buktiLog != "")
                                                        {
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah proses bayar dengan No Bukti " + ketBUKTI_BAYAR + ".<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah lunas.<br />",
                                                            TEXT_2 = noref,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else
                                                {
                                                    ret.adaError = true;
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                        TEXT_2 = noref,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                    TEXT_2 = current_ref,
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                TEXT_2 = current_ref,
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                        }
                                    }

                                    if (cekPer10 > 100)
                                    {
                                        if ((ret.progress == temp40) || ret.percent == 100)
                                        {
                                            ret.statusSuccess = false;
                                            if (ret.percent > 99 && ret.percent <= 101)
                                            {
                                                ret.statusSuccess = true;
                                            }
                                            if (tempPercent != ret.percent)
                                            {
                                                if (nilaiRef.Count() > 0)
                                                {
                                                    ret.TBAYAR = 0;
                                                    for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                    {

                                                        ret.TBAYAR += nilaiRef[ab];
                                                    }
                                                }
                                                if (nilaiPot.Count() > 0)
                                                {
                                                    ret.TPOT = 0;
                                                    for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                    {

                                                        ret.TPOT += nilaiPot[ab];
                                                    }
                                                }
                                                if (nilaiLebihBayar.Count() > 0)
                                                {
                                                    ret.TLEBIHBAYAR = 0;
                                                    for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                    {

                                                        ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                    }
                                                }
                                                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                {
                                                    try
                                                    {
                                                        ErasoftDbContext.ART03B.AddRange(list_detail);
                                                        var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                        getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                        getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                        if (getheader.TLEBIH_BAYAR == null)
                                                        {
                                                            getheader.TLEBIH_BAYAR = 0;
                                                        }
                                                        getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //transaction.Rollback();
                                                        var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = errMsg,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                        ret.TidakLanjutProses = true;
                                                    }
                                                    if (ret.statusSuccess == false)
                                                    {
                                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (ret.percent == 10 || ret.percent == 20 ||
                                    ret.percent == 30 || ret.percent == 40 ||
                                    ret.percent == 50 || ret.percent == 60 ||
                                    ret.percent == 70 || ret.percent == 80 ||
                                    ret.percent == 90 || ret.percent == 100)
                                    {
                                        ret.statusSuccess = false;
                                        if (ret.percent > 99 && ret.percent <= 101)
                                        {
                                            ret.statusSuccess = true;
                                        }
                                        if (tempPercent != ret.percent)
                                        {
                                            if (nilaiRef.Count() > 0)
                                            {
                                                ret.TBAYAR = 0;
                                                for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                {

                                                    ret.TBAYAR += nilaiRef[ab];
                                                }
                                            }
                                            if (nilaiPot.Count() > 0)
                                            {
                                                ret.TPOT = 0;
                                                for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                {

                                                    ret.TPOT += nilaiPot[ab];
                                                }
                                            }
                                            if (nilaiLebihBayar.Count() > 0)
                                            {
                                                ret.TLEBIHBAYAR = 0;
                                                for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                {

                                                    ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                }
                                            }
                                            using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                            {
                                                try
                                                {
                                                    ErasoftDbContext.ART03B.AddRange(list_detail);
                                                    var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                    getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                    getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                    if (getheader.TLEBIH_BAYAR == null)
                                                    {
                                                        getheader.TLEBIH_BAYAR = 0;
                                                    }
                                                    getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                    ErasoftDbContext.SaveChanges();
                                                    transaction.Commit();
                                                }
                                                catch (Exception ex)
                                                {
                                                    //transaction.Rollback();
                                                    var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                    ret.adaError = true;
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = errMsg,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                    transaction.Commit();
                                                    ret.TidakLanjutProses = true;
                                                }
                                                if (ret.statusSuccess == false)
                                                {
                                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ret.TidakLanjutProses = true;
                            }

                        }
                        else
                        {
                            ret.Errors.Add("Faktur dari marketplace tidak ditemukan.<br />");
                            ret.adaError = true;
                            ret.TidakLanjutProses = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "Faktur dari marketplace tidak ditemukan.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                        }
                    }
                    else
                    {
                        //customer not found
                        ret.Errors.Add("Akun marketplace tidak ditemukan.<br />");
                        ret.adaError = true;
                        ret.TidakLanjutProses = true;
                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                        {
                            LOG_FILE = ret.buktiLog,
                            VARIABLE_1 = ret.nobuk,
                            VARIABLE_2 = ret.TipeData,
                            TEXT_1 = "Akun marketplace tidak ditemukan.<br />",
                            TEXT_2 = "",
                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                            USERNAME = uname
                        };
                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                        ErasoftDbContext.SaveChanges();
                    }

                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                {
                    LOG_FILE = ret.buktiLog,
                    VARIABLE_1 = ret.nobuk,
                    VARIABLE_2 = ret.TipeData,
                    TEXT_1 = ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />",
                    TEXT_2 = "",
                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                    USERNAME = uname
                };
                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                ErasoftDbContext.SaveChanges();
                if (ret.nobuk != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                        vm.ret = ret;
                        vm.adaError = ret.adaError;
                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                        //ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                        ret.adaError = true;

                        TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                        {
                            LOG_FILE = ret.buktiLog,
                            VARIABLE_1 = ret.nobuk,
                            VARIABLE_2 = ret.TipeData,
                            TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                            TEXT_2 = "",
                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                            USERNAME = uname
                        };
                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                        ErasoftDbContext.SaveChanges();

                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                        ret.TidakLanjutProses = true;
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                var getOngkir1 = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
                vm.ListOngkir = getOngkir1;
                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();


            if (ret.nobuk != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                    vm.ret = ret;
                    vm.adaError = ret.adaError;
                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                    //ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                    ErasoftDbContext.SaveChanges();
                    ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                    ret.adaError = true;

                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                    {
                        LOG_FILE = ret.buktiLog,
                        VARIABLE_1 = ret.nobuk,
                        VARIABLE_2 = ret.TipeData,
                        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                        TEXT_2 = "",
                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                        USERNAME = uname
                    };
                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                    ErasoftDbContext.SaveChanges();

                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                    ret.TidakLanjutProses = true;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }
            var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
            vm.ListOngkir = getOngkir;
            return PartialView("DetailBayarPiutangPartial", vm);
        }

        [HttpPost]
        public ActionResult UpdatePotonganBayarPiutang(UpdateDataBayarPiutang dataUpdate)
        {
            var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == dataUpdate.OrderId);
            var cekTotalPot = 0d;
            if (dataUpdate.getPot.Count() > 0)
            {
                if (dataUpdate.getPot.Count() == dataUpdate.getRec.Count())
                {
                    for (int y = 0; y < dataUpdate.getPot.Count(); y++)
                    {
                        var rec = Convert.ToInt32(dataUpdate.getRec[y]);
                        var piutangDetailInDb = ErasoftDbContext.ART03B.SingleOrDefault(p => p.BUKTI == dataUpdate.OrderId && p.NO == rec);
                        if (piutangDetailInDb != null)
                        {
                            var totalSisa = new decimal();
                            var nofaktur = dataUpdate.getFaktur[y];
                            var potongan = dataUpdate.getPot[y];
                            var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == nofaktur && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                            if (getBayar.Count() > 0)
                            {
                                var testDesimal = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == nofaktur && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                totalSisa = Math.Round(Convert.ToDecimal(testDesimal), 2, MidpointRounding.AwayFromZero);
                                var rowPot = Math.Round(Convert.ToDecimal(potongan), 2, MidpointRounding.AwayFromZero);
                                if (totalSisa >= rowPot)
                                {
                                    piutangDetailInDb.POT += dataUpdate.getPot[y];
                                    cekTotalPot += dataUpdate.getPot[y];
                                    ErasoftDbContext.SaveChanges();
                                }
                                else
                                {
                                    return Json("Nilai Potongan melebihi nilai bayar.", JsonRequestBehavior.AllowGet);
                                }
                            }
                        }
                    }
                }
            }

            piutangInDb.TPOT = piutangInDb.TPOT + cekTotalPot;

            ErasoftDbContext.SaveChanges();

            return new EmptyResult();
        }

        [HttpPost]
        public ActionResult UpdatePotonganBayarPiutang1(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            string cust_id = Request["cust"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            var vm = new BayarPiutangViewModel() { };

            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');

            ret.nobuk = nobuk;
            ret.statusLoop = Convert.ToBoolean(status[0]);
            ret.statusSuccess = Convert.ToBoolean(status[1]);
            try
            {
                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                if (piutangInDb != null)
                {
                    var ssql2 = "select * from ART03B where bukti = '" + ret.nobuk + "' and (sisa - bayar) > 0";
                    var piutangDetaiInDb = ErasoftDbContext.Database.SqlQuery<ART03B>(ssql2).ToList();
                    ret.countAll = piutangDetaiInDb.Count();
                    if (ret.statusLoop == true)
                    {
                        prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                    }

                    if (Convert.ToInt32(prog[1]) == 0)
                    {
                        prog[1] = "0";
                    }
                    if (piutangDetaiInDb.Count() > 0)
                    {
                        var tempPercent = Convert.ToInt32(prog[0]);
                        var cekPer10 = (ret.countAll / 10);
                        var temp40 = Convert.ToInt32(prog[1]) + 35;
                        List<double> Pot = new List<double>();
                        List<int> recnum = new List<int>();
                        for (int i = Convert.ToInt32(prog[1]); i < piutangDetaiInDb.Count(); i++)
                        {
                            ret.statusLoop = true;
                            ret.progress = i + 1;
                            ret.percent = ((i + 1) * 100) / ret.countAll;
                            var getData = piutangDetaiInDb[i];
                            if (getData != null)
                            {
                                getData.POT = Convert.ToDouble(Math.Abs(Math.Round(Convert.ToDecimal(getData.SISA - getData.BAYAR), 2, MidpointRounding.AwayFromZero)));
                                Pot.Add(getData.POT);
                                recnum.Add(Convert.ToInt32(getData.NO));
                            }
                            else
                            {
                                ret.Errors.Add("Detail dengan faktur " + piutangDetaiInDb[i].NFAKTUR + "  tidak ditemukan./n");
                            }

                            if (cekPer10 > 35)
                            {
                                if ((ret.progress == temp40) || ret.percent == 100)
                                {
                                    ret.statusSuccess = false;
                                    if (ret.percent > 99 && ret.percent <= 101)
                                    {
                                        ret.statusSuccess = true;
                                        ret.TidakLanjutProses = true;
                                        using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=" + Pot[ax] + " where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                                var totalpot = ErasoftDbContext.ART03B.Where(a => (a.SISA - a.BAYAR) > 0).Sum(a => a.POT);

                                                ErasoftDbContext.SaveChanges();
                                                transaction.Commit();
                                            }
                                            catch (Exception ex)
                                            {
                                                transaction.Rollback();
                                                var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk && (a.SISA - a.BAYAR) > 0).Sum(a => (a.SISA - a.BAYAR - a.POT));
                                                var cekheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).Select(a => a.TPOT);
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=0 where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");

                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "/n";
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                            }
                                        }
                                        if (ret.Errors.Count() > 0)
                                        {
                                            ret.adaError = true;
                                        }
                                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                                        var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a where no_bukti in (select NFAKTUR from art03b where bukti='" + ret.nobuk + "')").ToList();
                                        vm.ListOngkir = getOngkir;
                                        vm.ret = ret;

                                        return PartialView("DetailBayarPiutangPartial", vm);
                                    }
                                    if (tempPercent != ret.percent)
                                    {
                                        if (Pot.Count() > 0)
                                        {
                                            ret.TPOT = 0;
                                            for (int ab = 0; ab < Pot.Count(); ab++)
                                            {
                                                ret.TPOT += Pot[ab];
                                            }
                                        }
                                        using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=" + Pot[ax] + " where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                                var totalpot = ErasoftDbContext.ART03B.Where(a => (a.SISA - a.BAYAR) > 0).Sum(a => a.POT);

                                                ErasoftDbContext.SaveChanges();
                                                transaction.Commit();
                                            }
                                            catch (Exception ex)
                                            {
                                                transaction.Rollback();
                                                var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk && (a.SISA - a.BAYAR) > 0).Sum(a => (a.SISA - a.BAYAR - a.POT));
                                                var cekheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).Select(a => a.TPOT);
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=0 where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");

                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "/n";
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                            }
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                            else if (ret.percent == 10 || ret.percent == 20 ||
                            ret.percent == 30 || ret.percent == 40 ||
                            ret.percent == 50 || ret.percent == 60 ||
                            ret.percent == 70 || ret.percent == 80 ||
                            ret.percent == 90 || ret.percent == 100)
                            {
                                ret.statusSuccess = false;
                                if (ret.percent > 99 && ret.percent <= 101)
                                {
                                    ret.statusSuccess = true;
                                    ret.TidakLanjutProses = true;
                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=" + Pot[ax] + " where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            var totalpot = ErasoftDbContext.ART03B.Where(a => (a.SISA - a.BAYAR) > 0).Sum(a => a.POT);

                                            ErasoftDbContext.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception ex)
                                        {
                                            transaction.Rollback();
                                            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk && (a.SISA - a.BAYAR) > 0).Sum(a => (a.SISA - a.BAYAR - a.POT));
                                            var cekheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).Select(a => a.TPOT);
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=0 where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");

                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "/n";
                                            ret.Errors.Add(errMsg);
                                            ret.adaError = true;
                                        }
                                    }
                                    if (ret.Errors.Count() > 0)
                                    {
                                        ret.adaError = true;
                                    }
                                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                                    var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
                                    vm.ListOngkir = getOngkir;
                                    vm.ret = ret;

                                    return PartialView("DetailBayarPiutangPartial", vm);
                                }
                                if (tempPercent != ret.percent)
                                {
                                    if (Pot.Count() > 0)
                                    {
                                        ret.TPOT = 0;
                                        for (int ab = 0; ab < Pot.Count(); ab++)
                                        {
                                            ret.TPOT += Pot[ab];
                                        }
                                    }
                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=" + Pot[ax] + " where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            var totalpot = ErasoftDbContext.ART03B.Where(a => (a.SISA - a.BAYAR) > 0).Sum(a => a.POT);
                                            ErasoftDbContext.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception ex)
                                        {
                                            transaction.Rollback();
                                            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk && (a.SISA - a.BAYAR) > 0).Sum(a => (a.SISA - a.BAYAR - a.POT));
                                            var cekheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).Select(a => a.TPOT);
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("update art03b set pot=0 where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            //transaction.Rollback();
                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "/n";
                                            ret.Errors.Add(errMsg);
                                            ret.adaError = true;
                                        }
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    ret.Errors.Add("No Bukti " + ret.nobuk + " tidak ditemukan./n");
                    ret.adaError = true;
                    ret.TidakLanjutProses = true;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                return Json(ret, JsonRequestBehavior.AllowGet);
            }

            return Json(ret, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteBayarPiutang1(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            string cust_id = Request["cust"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            var vm = new BayarPiutangViewModel() { };

            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');

            ret.nobuk = nobuk;
            ret.statusLoop = Convert.ToBoolean(status[0]);
            ret.statusSuccess = Convert.ToBoolean(status[1]);
            try
            {
                var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                if (piutangInDb != null)
                {
                    var ssql2 = "select no from ART03B where bukti = '" + ret.nobuk + "'";
                    var piutangDetaiInDb = ErasoftDbContext.Database.SqlQuery<int>(ssql2).ToList();
                    if (ret.statusLoop == false)
                    {
                        ret.countAll = piutangDetaiInDb.Count();
                    }
                    if (ret.statusLoop == true)
                    {
                        ret.countAll = countAll;
                        prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                    }

                    if (Convert.ToInt32(prog[1]) == 0)
                    {
                        prog[1] = "0";
                    }
                    ret.progress = Convert.ToInt32(prog[1]);
                    if (piutangDetaiInDb.Count() > 0)
                    {
                        var tempPercent = Convert.ToInt32(prog[0]);
                        var cekPer10 = (ret.countAll / 10);
                        var temp40 = Convert.ToInt32(prog[1]) + 70;
                        List<int> recnum = new List<int>();
                        for (int i = 0; i < piutangDetaiInDb.Count(); i++)
                        {

                            ret.statusLoop = true;
                            ret.progress = ret.progress + 1;
                            ret.percent = ((ret.progress) * 100) / ret.countAll;
                            var getData = piutangDetaiInDb[i];
                            recnum.Add(Convert.ToInt32(getData));

                            if (cekPer10 > 70)
                            {
                                if ((ret.progress == temp40) || ret.percent == 100)
                                {
                                    ret.statusSuccess = false;
                                    if (ret.percent > 99 && ret.percent <= 101)
                                    {
                                        ret.statusSuccess = true;
                                        ret.TidakLanjutProses = true;
                                        using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from art03b where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                var cekcount = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                                                if (cekcount > 0)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                                }
                                                else
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM ART03A WHERE BUKTI = '" + ret.nobuk + "'");
                                                }

                                                ErasoftDbContext.SaveChanges();
                                                transaction.Commit();
                                            }
                                            catch (Exception ex)
                                            {
                                                transaction.Rollback();
                                                var cekcount = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                                                if (cekcount > 0)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                                }
                                                else
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM ART03A WHERE BUKTI = '" + ret.nobuk + "'");
                                                }
                                                transaction.Commit();
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                            }
                                        }
                                        if (ret.Errors.Count() > 0)
                                        {
                                            ret.adaError = true;
                                        }
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                    if (tempPercent != ret.percent)
                                    {
                                        using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int ax = 0; ax < recnum.Count(); ax++)
                                                {
                                                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from art03b where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                                }
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT, A.TBAYAR = B.TOTALBAYAR, A.TLEBIH_BAYAR = B.TOTALLBAYAR FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, SUM(BAYAR) AS TOTALBAYAR, SUM(LEBIH_BAYAR) AS TOTALLBAYAR, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");

                                                ErasoftDbContext.SaveChanges();
                                                transaction.Commit();
                                            }
                                            catch (Exception ex)
                                            {
                                                transaction.Rollback();
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                                transaction.Commit();
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                            }
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                            else if (ret.percent == 10 || ret.percent == 20 ||
                            ret.percent == 30 || ret.percent == 40 ||
                            ret.percent == 50 || ret.percent == 60 ||
                            ret.percent == 70 || ret.percent == 80 ||
                            ret.percent == 90 || ret.percent == 100)
                            {
                                ret.statusSuccess = false;
                                if (ret.percent > 99 && ret.percent <= 101)
                                {
                                    ret.statusSuccess = true;
                                    ret.TidakLanjutProses = true;
                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("delete from art03b where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            var cekcount = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                                            if (cekcount > 0)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            }
                                            else
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM ART03A WHERE BUKTI = '" + ret.nobuk + "'");
                                            }

                                            ErasoftDbContext.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception ex)
                                        {
                                            transaction.Rollback();
                                            var cekcount = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                                            if (cekcount > 0)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            }
                                            else
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM ART03A WHERE BUKTI = '" + ret.nobuk + "'");
                                            }
                                            transaction.Commit();
                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                            ret.Errors.Add(errMsg);
                                            ret.adaError = true;
                                        }
                                    }
                                    if (ret.Errors.Count() > 0)
                                    {
                                        ret.adaError = true;
                                    }
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                                if (tempPercent != ret.percent)
                                {
                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            for (int ax = 0; ax < recnum.Count(); ax++)
                                            {
                                                ErasoftDbContext.Database.ExecuteSqlCommand("delete from art03b where no =" + recnum[ax] + " and bukti='" + ret.nobuk + "'");
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT, A.TBAYAR = B.TOTALBAYAR, A.TLEBIH_BAYAR = B.TOTALLBAYAR FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, SUM(BAYAR) AS TOTALBAYAR, SUM(LEBIH_BAYAR) AS TOTALLBAYAR, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            ErasoftDbContext.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception ex)
                                        {
                                            transaction.Rollback();
                                            ErasoftDbContext.Database.ExecuteSqlCommand("UPDATE A SET A.TPOT = B.TOTALPOT FROM ART03A AS A INNER JOIN (SELECT SUM(POT) AS TOTALPOT, BUKTI FROM ART03B WHERE BUKTI='" + ret.nobuk + "' GROUP BY BUKTI) AS B ON A.BUKTI = B.BUKTI WHERE A.BUKTI = '" + ret.nobuk + "'");
                                            transaction.Commit();
                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                            ret.Errors.Add(errMsg);
                                            ret.adaError = true;
                                        }
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        ret.statusSuccess = true;
                        ret.TidakLanjutProses = true;
                        ErasoftDbContext.Database.ExecuteSqlCommand("DELETE FROM ART03A WHERE BUKTI = '" + ret.nobuk + "'");
                        if (ret.Errors.Count() > 0)
                        {
                            ret.adaError = true;
                        }
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    ret.Errors.Add("No Bukti " + ret.nobuk + " tidak ditemukan./n");
                    ret.adaError = true;
                    ret.TidakLanjutProses = true;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "/n");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                return Json(ret, JsonRequestBehavior.AllowGet);
            }
            return Json(ret, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ListLogBayarPiutang(string cust)
        {
            ActionResult ret = RefreshTableLogBayarPiutang(1, cust);
            return ret;
        }

        public ActionResult RefreshTableLogBayarPiutang(int? page, string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = cust;
            ViewData["LastPage"] = page;
            string sSQLSelect = "";
            sSQLSelect += "SELECT A.RECNUM AS RECNUM, A.UPLOADER AS UPLOADER , A.LAST_FAKTUR_UPLOADED AS LAST_FAKTUR_UPLOADED, A.UPLOAD_DATETIME AS UPLOAD_DATETIME, A.LAST_FAKTUR_UPLOADED_DATETIME AS LAST_FAKTUR_UPLOADED_DATETIME, ISNULL(B.PERSO,'') AS CUST, A.LOG_FILE AS LOG_FILE ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.RECNUM) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM LOG_IMPORT_FAKTUR A ";
            sSQL2 += "LEFT JOIN ARF01 B ON A.CUST = B.CUST ";
            if (cust != "")
            {
                sSQL2 += "WHERE (A.CUST LIKE '%" + cust + "%' ) ";
                sSQL2 += "AND A.LOG_FILE LIKE '%Log_Upload_Pembayaran%' ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 5) - 4;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                if (minimal_harus_ada_item_untuk_current_page == 1 && totalCount.JUMLAH == 0)
                {
                    pagenumber = 0;
                }
                else
                {
                    pagenumber = pagenumber - 1;
                }
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.UPLOAD_DATETIME DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 5) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPromosi = ErasoftDbContext.Database.SqlQuery<ListImportFaktur>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<ListImportFaktur> pageOrders = new StaticPagedList<ListImportFaktur>(listPromosi, pagenumber + 1, 5, totalCount.JUMLAH);
            return PartialView("BayarPiutangLog", pageOrders);
        }
        //end add by nurul 23/10/2019

        public ActionResult UndoStatusPesananBatchTransaction(string[] get_selected)
        {
            List<listErrorPacking> listError = new List<listErrorPacking>();
            var listSuccess = new List<string>();
            var listSuccessRecnum = new List<int>();
            int successCount = 0;

            try
            {
                var stringListRecnum = "";
                for (int i = 0; i < get_selected.Length; i++)
                {
                    if (!string.IsNullOrWhiteSpace(get_selected[i]))
                    {
                        if (stringListRecnum != "")
                        {
                            stringListRecnum += ",";
                        }
                        stringListRecnum += "'" + get_selected[i].Trim() + "'";
                    }
                }
                var dsSOFail = EDB.GetDataSet("sConn", "SO", "SELECT A.NO_BUKTI FROM SOT01A A LEFT JOIN SIT01A B ON A.NO_BUKTI = B.NO_SO WHERE A.RECNUM IN (" + stringListRecnum + ") AND ISNULL(B.NO_SO,'') <> '' ORDER BY A.NO_BUKTI");
                if (dsSOFail.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsSOFail.Tables[0].Rows.Count; i++)
                    {
                        listError.Add(new listErrorPacking
                        {
                            error_msg = "Pesanan sudah menjadi faktur. Status pesanan tidak bisa dimundurkan.",
                            no_bukti_so = Convert.ToString(dsSOFail.Tables[0].Rows[i]["NO_BUKTI"])
                        });
                    }
                }

                var dsSO = EDB.GetDataSet("sConn", "SO", "SELECT * FROM SOT01A A LEFT JOIN SIT01A B ON A.NO_BUKTI = B.NO_SO WHERE A.RECNUM IN (" + stringListRecnum + ") AND ISNULL(B.NO_SO,'') = '' ORDER BY A.NO_BUKTI");
                if (dsSO.Tables[0].Rows.Count > 0)
                {
                    string listNobuk = "";
                    for (int i = 0; i < dsSO.Tables[0].Rows.Count; i++)
                    {
                        var dsSORow = dsSO.Tables[0].Rows[i];
                        var Nobuk = Convert.ToString(dsSORow["NO_BUKTI"]);
                        if (listNobuk != "")
                        {
                            listNobuk += ",";
                        }
                        listNobuk += "'" + Nobuk + "'";
                    }

                    string sSQLWhere = "";
                    if (listNobuk != "")
                    {
                        sSQLWhere += " NO_PESANAN IN (" + listNobuk + ")" + Environment.NewLine;
                    }
                    else
                    {
                        sSQLWhere += " 0=1" + Environment.NewLine;
                    }
                    //hapus bukti packing list yg akan kosong ( dari packing list yang dihapus sot03b nya )
                    var sSQLPACKING = "SELECT RECNUM,NO_BUKTI INTO #TEMP FROM SOT03B WHERE " + sSQLWhere + ";";
                    sSQLPACKING += "DELETE A FROM SOT03A A " + Environment.NewLine;
                    sSQLPACKING += "LEFT JOIN SOT03B B ON A.NO_BUKTI = B.NO_BUKTI AND B.RECNUM NOT IN (SELECT RECNUM FROM #TEMP) " + Environment.NewLine;
                    sSQLPACKING += "WHERE A.NO_BUKTI IN (SELECT NO_BUKTI FROM #TEMP) " + Environment.NewLine;
                    sSQLPACKING += "AND ISNULL(B.NO_BUKTI,'') = '' " + Environment.NewLine;
                    EDB.ExecuteSQL("sConn", CommandType.Text, sSQLPACKING);
                    EDB.ExecuteSQL("sConn", CommandType.Text, "DELETE FROM SOT03B WHERE " + sSQLWhere);
                    EDB.ExecuteSQL("sConn", CommandType.Text, "DELETE FROM SOT03C WHERE " + sSQLWhere);

                    var successRow = EDB.ExecuteSQL("sConn", CommandType.Text, "UPDATE SOT01A SET STATUS_TRANSAKSI = '02' WHERE NO_BUKTI IN (" + listNobuk + ")");
                    successCount += successRow;
                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }

            return new JsonResult { Data = new { error_packing_list = false, listError, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        public ActionResult UbahStatusPesananSelesaiBatchTransaction(string[] get_selected)
        {
            List<listErrorPacking> listError = new List<listErrorPacking>();
            var listSuccess = new List<string>();
            var listSuccessRecnum = new List<int>();
            int successCount = 0;

            try
            {
                var stringListRecnum = "";
                for (int i = 0; i < get_selected.Length; i++)
                {
                    if (!string.IsNullOrWhiteSpace(get_selected[i]))
                    {
                        if (stringListRecnum != "")
                        {
                            stringListRecnum += ",";
                        }
                        stringListRecnum += "'" + get_selected[i].Trim() + "'";
                    }
                }
                var dsSOFail = EDB.GetDataSet("sConn", "SO", "SELECT A.NO_BUKTI FROM SOT01A A WHERE A.RECNUM IN (" + stringListRecnum + ") AND A.STATUS_TRANSAKSI <> '03' ORDER BY A.NO_BUKTI");
                if (dsSOFail.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsSOFail.Tables[0].Rows.Count; i++)
                    {
                        listError.Add(new listErrorPacking
                        {
                            error_msg = "Pesanan tidak berstatus packing. Status pesanan tidak bisa diubah.",
                            no_bukti_so = Convert.ToString(dsSOFail.Tables[0].Rows[i]["NO_BUKTI"])
                        });
                    }
                }
                //change by nurul 24/1/2020
                //var dsSO = EDB.GetDataSet("sConn", "SO", "SELECT * FROM SOT01A A WHERE A.RECNUM IN (" + stringListRecnum + ") AND A.STATUS_TRANSAKSI = '04' ORDER BY A.NO_BUKTI");
                var dsSO = EDB.GetDataSet("sConn", "SO", "SELECT * FROM SOT01A A WHERE A.RECNUM IN (" + stringListRecnum + ") AND A.STATUS_TRANSAKSI = '03' ORDER BY A.NO_BUKTI");
                //end change by nurul 24/1/2020
                if (dsSO.Tables[0].Rows.Count > 0)
                {
                    string listNobuk = "";
                    for (int i = 0; i < dsSO.Tables[0].Rows.Count; i++)
                    {
                        var dsSORow = dsSO.Tables[0].Rows[i];
                        var Nobuk = Convert.ToString(dsSORow["NO_BUKTI"]);
                        var SOA_NOREF = Convert.ToString(dsSORow["NO_REFERENSI"]);
                        var SOA_CUST = Convert.ToString(dsSORow["CUST"]);
                        if (listNobuk != "")
                        {
                            listNobuk += ",";
                        }
                        listNobuk += "'" + Nobuk + "'";

                        //add by fauzi for change status 82Cart to DELIVERED CODE 5
                        //                        var kd82Cart = "20";
                        //                        var mpCust82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kd82Cart && m.CUST == SOA_CUST).FirstOrDefault();
                        //                        if (mpCust82Cart != null)
                        //                        {
                        //                            if (mpCust82Cart.Sort1_Cust != "" && !string.IsNullOrEmpty(mpCust82Cart.API_KEY) && !string.IsNullOrEmpty(mpCust82Cart.PERSO))
                        //                            {
                        //                                var sqlStorage = new SqlServerStorage(EDBConnID);
                        //                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                        //                                EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                        //                                idenJob.API_key = mpCust82Cart.API_KEY;
                        //                                idenJob.API_credential = mpCust82Cart.Sort1_Cust;
                        //                                idenJob.API_url = mpCust82Cart.PERSO;
                        //                                idenJob.DatabasePathErasoft = dbPathEra;
                        //                                idenJob.username = usernameLogin;
                        //                                idenJob.no_cust = mpCust82Cart.CUST;

                        //                                //add by fauzi for update status TO DELIVERED CODE 5
                        //#if (AWS || DEV)
                        //                                clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, mpCust82Cart.CUST, "Pesanan", "Delivered Order", SOA_NOREF, "5"));
                        //#else                            
                        //                                new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, mpCust82Cart.CUST, "Pesanan", "Delivered Order", SOA_NOREF, "5");
                        //#endif
                        //                            }
                        //                        }
                        //end

                        var kdShopify = "21";
                        var mpCust82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopify && m.CUST == SOA_CUST).FirstOrDefault();
                        if (mpCust82Cart != null)
                        {
                            if (mpCust82Cart.Sort1_Cust != "" && !string.IsNullOrEmpty(mpCust82Cart.API_KEY) && !string.IsNullOrEmpty(mpCust82Cart.PERSO))
                            {
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
                                idenJob.no_cust = mpCust82Cart.CUST;
                                idenJob.username = usernameLogin;
                                idenJob.DatabasePathErasoft = dbPathEra;
                                idenJob.account_store = mpCust82Cart.PERSO;
                                idenJob.API_key = mpCust82Cart.API_KEY;
                                idenJob.API_password = mpCust82Cart.API_CLIENT_P;

                                //add by fauzi for update status TO PACKING
#if (DEBUG || Debug_AWS)
                                new ShopifyControllerJob().Shopify_SetOrderStatusFulfillment(dbPathEra, SOA_NOREF, mpCust82Cart.CUST, "Pesanan", "Delivered Order", idenJob);
#else
                                clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusFulfillment(dbPathEra, SOA_NOREF, mpCust82Cart.CUST, "Pesanan", "Delivered Order", idenJob));

#endif
                            }
                        }
                    }
                    //change by nurul 24/1/2020
                    //var successRow = EDB.ExecuteSQL("sConn", CommandType.Text, "UPDATE SOT01A SET STATUS_TRANSAKSI = '04' WHERE NO_BUKTI IN (" + listNobuk + ") AND STATUS_TRANSAKSI = '04'");
                    var successRow = EDB.ExecuteSQL("sConn", CommandType.Text, "UPDATE SOT01A SET STATUS_TRANSAKSI = '04' WHERE NO_BUKTI IN (" + listNobuk + ") AND STATUS_TRANSAKSI = '03'");
                    //end change by nurul 24/1/2020
                    successCount += successRow;
                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }

            return new JsonResult { Data = new { error_packing_list = false, listError, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        public class listErrorPacking
        {
            public string no_bukti_so { get; set; }
            public string error_msg { get; set; }
        }

        //add by nurul 7/7/2020
        public class listProsesUbahStatusPackingTransaction
        {
            public string NO_BUKTI { get; set; }
            public string STATUS_TRANSAKSI { get; set; }
            public string BRG { get; set; }
            public double QTY { get; set; }
            public double? QTY_N { get; set; }
            public string LOKASI { get; set; }
            public int SOA_RECNUM { get; set; }
            public int SOB_RECNUM { get; set; }
            public string SOA_CUST { get; set; }
            public string SOA_NOREF { get; set; }
            public string Sort1_Cust { get; set; }
            public string API_CLIENT_P { get; set; }
            public string API_CLIENT_U { get; set; }
            public string API_KEY { get; set; }
            public int ARF01_RECNUM { get; set; }
            public string NAMAMARKET { get; set; }
        }
        public class tempCekExistPL
        {
            public string NO_BUKTI { get; set; }
            public string NO_PESANAN { get; set; }
        }
        public class templistSemuaSO
        {
            public string NO_BUKTI { get; set; }
            public string STATUS_TRANSAKSI { get; set; }
            public int RecNum { get; set; }
            public string bukti_faktur { get; set; }
            public string bukti_packingList { get; set; }
        }
        public class updateGudangQtySOT01b
        {
            public string recnum { get; set; }
            public string brg { get; set; }
            public double qty { get; set; }
            public string nobuk { get; set; }//add by Tri 1 sep 2020
            public bool sudahAdaLokasiNQtyN { get; set; }
        }
        //end add by nurul 7/7/2020
        public ActionResult UbahStatusPesananPackingTransaction(string[] get_selected, bool packinglist, int approved)
        {
            List<listErrorPacking> listError = new List<listErrorPacking>();
            var listSuccess = new List<string>();
            var listSuccessRecnum = new List<int>();
            int successCount = 0;
            string packingNo = "";

            //add by nurul 12/8/2020
            List<string> brgTidakProses = new List<string>();
            List<updateGudangQtySOT01b> tempBerhasilUpdate = new List<updateGudangQtySOT01b>();
            List<updateGudangQtySOT01b> tempBarangGagalUpdate = new List<updateGudangQtySOT01b>();
            //end add by nurul 12/8/2020

            try
            {

                var default_gudang = "";
                using (var context = new ErasoftContext(dbSourceEra, dbPathEra))
                {
                    var gudang_parsys = context.SIFSYS.FirstOrDefault().GUDANG;
                    var cekgudang = context.STF18.ToList();
                    if (cekgudang.Where(p => p.Kode_Gudang == gudang_parsys).Count() > 0)
                    {
                        default_gudang = gudang_parsys;
                    }
                    else
                    {
                        default_gudang = cekgudang.FirstOrDefault().Kode_Gudang;
                    }
                }

                var stringListRecnum = "";
                for (int i = 0; i < get_selected.Length; i++)
                {
                    if (!string.IsNullOrWhiteSpace(get_selected[i]))
                    {
                        if (stringListRecnum != "")
                        {
                            stringListRecnum += ",";
                        }
                        stringListRecnum += "'" + get_selected[i].Trim() + "'";
                    }
                }

                if (approved == 2)
                {
                    //undo alokasi stok pesanan, HANYA UNTUK YG LOKASI = DEFAULT GUDANG
                    EDB.ExecuteSQL("sConn", CommandType.Text, "UPDATE B SET LOKASI = '', QTY_N = 0 FROM SOT01A A INNER JOIN SOT01B B ON A.NO_BUKTI = B.NO_BUKTI WHERE B.LOKASI = '" + default_gudang + "' AND A.RECNUM IN (" + stringListRecnum + ") AND A.STATUS_TRANSAKSI = '02'");
                    return new JsonResult { Data = new { error_packing_list = false, listError, successCount = 0, need_approval = 2 }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                //change by nurul 7/7/2020
                //var dsSO = EDB.GetDataSet("sConn", "SO", "SELECT A.NO_BUKTI,STATUS_TRANSAKSI,BRG,QTY,ISNULL(QTY_N,0) QTY_N,ISNULL(LOKASI,'') LOKASI,A.RECNUM AS SOA_RECNUM, B.NO_URUT AS SOB_RECNUM FROM SOT01A A (NOLOCK) INNER JOIN SOT01B B (NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI WHERE A.RECNUM IN (" + stringListRecnum + ") AND STATUS_TRANSAKSI = '02' ORDER BY A.NO_BUKTI, B.NO_URUT");
                //var dsSO = EDB.GetDataSet("sConn", "SO", "SELECT A.NO_BUKTI,STATUS_TRANSAKSI,BRG,QTY,ISNULL(QTY_N,0) QTY_N,ISNULL(LOKASI,'') LOKASI,A.RECNUM AS SOA_RECNUM, B.NO_URUT AS SOB_RECNUM, A.CUST AS SOA_CUST,A.NO_REFERENSI AS SOA_NOREF FROM SOT01A A (NOLOCK) INNER JOIN SOT01B B (NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI WHERE A.RECNUM IN (" + stringListRecnum + ") AND STATUS_TRANSAKSI = '02' ORDER BY A.NO_BUKTI, B.NO_URUT");
                //if (dsSO.Tables[0].Rows.Count > 0)
                var sSql1 = "SELECT A.NO_BUKTI,STATUS_TRANSAKSI,BRG,QTY,ISNULL(QTY_N,0) QTY_N,ISNULL(LOKASI,'') LOKASI,A.RECNUM AS SOA_RECNUM, B.NO_URUT AS SOB_RECNUM, A.CUST AS SOA_CUST,A.NO_REFERENSI AS SOA_NOREF ";
                sSql1 += ", ISNULL(C.Sort1_Cust,'') AS Sort1_Cust, ISNULL(C.API_CLIENT_P,'') AS API_CLIENT_P, ISNULL(C.API_CLIENT_U,'') AS API_CLIENT_U, ISNULL(C.API_KEY,'') AS API_KEY, ISNULL(D.NAMAMARKET,'') AS NAMAMARKET ";
                sSql1 += "FROM SOT01A A (NOLOCK) INNER JOIN SOT01B B (NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI ";
                sSql1 += "LEFT JOIN ARF01 C (NOLOCK) ON A.CUST=C.CUST ";
                sSql1 += "LEFT JOIN MO..MARKETPLACE D (NOLOCK) ON C.NAMA=D.IDMARKET ";
                sSql1 += "WHERE A.RECNUM IN (" + stringListRecnum + ") AND STATUS_TRANSAKSI = '02' ";
                sSql1 += "ORDER BY A.NO_BUKTI, B.NO_URUT ";
                var getlistSO = ErasoftDbContext.Database.SqlQuery<listProsesUbahStatusPackingTransaction>(sSql1).ToList();
                if (getlistSO.Count() > 0)
                {

                    var lastNobuk = "";
                    var lastNobukRecnum = "";
                    var validNobuk = true;
                    var stringUpdateSOB = "";
                    
                    //for (int i = 0; i < dsSO.Tables[0].Rows.Count; i++)
                    for (int i = 0; i < getlistSO.Count(); i++)
                    {
                        //var dsSORow = dsSO.Tables[0].Rows[i];
                        //var Nobuk = Convert.ToString(dsSORow["NO_BUKTI"]);
                        //var SOB_Brg = Convert.ToString(dsSORow["BRG"]);
                        //var SOB_Qty = Convert.ToInt32(dsSORow["QTY"]);
                        //var SOB_QtyN = Convert.ToInt32(dsSORow["QTY_N"]);
                        //var SOB_Lokasi = Convert.ToString(dsSORow["LOKASI"]);
                        //var SOB_RECNUM = Convert.ToInt32(dsSORow["SOB_RECNUM"]);
                        //var SOA_RECNUM = Convert.ToString(dsSORow["SOA_RECNUM"]);
                        //var SOA_NOREF = Convert.ToString(dsSORow["SOA_NOREF"]);
                        ////ADD BY NURUL 3/4/2020, update no kode booking
                        //var SOA_CUST = Convert.ToString(dsSORow["SOA_CUST"]);
                        //var kdtokped = MoDbContext.Marketplaces.Single(m => m.NamaMarket.ToUpper() == "TOKOPEDIA");
                        //var mpCust = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdtokped.IdMarket.ToString() && m.CUST == SOA_CUST).FirstOrDefault();
                        //if (mpCust != null)
                        var dsSORow = getlistSO[i];
                        var Nobuk = dsSORow.NO_BUKTI;
                        //ADD BY NURUL 3/4/2020, update no kode booking
                        var SOA_RECNUM = Convert.ToString(dsSORow.SOA_RECNUM);
                        var SOA_CUST = dsSORow.SOA_CUST;
                        if (dsSORow.NAMAMARKET == "TOKOPEDIA")
                        {
                            if (dsSORow.Sort1_Cust != "" && !string.IsNullOrEmpty(dsSORow.API_CLIENT_P) && !string.IsNullOrEmpty(dsSORow.API_CLIENT_U))
                            {
                                TokopediaControllerJob.TokopediaAPIData data = new TokopediaControllerJob.TokopediaAPIData
                                {
                                    merchant_code = dsSORow.Sort1_Cust, //fsid
                                    API_client_password = dsSORow.API_CLIENT_P, //client secret
                                    API_client_username = dsSORow.API_CLIENT_U, //client id
                                    API_secret_key = dsSORow.API_KEY, //shop id 
                                    idmarket = dsSORow.ARF01_RECNUM,
                                    DatabasePathErasoft = dbPathEra,
                                    username = "support"
                                };
                                var tokpedApi = new TokopediaControllerJob();
                                //#if (DEBUG || Debug_AWS)
                                //Task.Run(() => tokpedApi.JOBCOD(data, Nobuk, SOA_NOREF).Wait());
#if (DEBUG || Debug_AWS)
                                Task.Run(() => tokpedApi.JOBCOD1(data, Nobuk, dsSORow.SOA_NOREF).Wait());
#else                            
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.JOBCOD1(data, Nobuk, dsSORow.SOA_NOREF));
#endif
                                //Task.Run(() => tokpedApi.JOBCOD(data, Nobuk, dsSORow.SOA_NOREF).Wait());
                                //var kodeBookingTokped = tokpedApi.JOBCOD(data, Nobuk, SOA_NOREF);
                                //if (kodeBookingTokped.Result.ToString() == "")
                                //{
                                //    listError.Add(new listErrorPacking
                                //    {
                                //        no_bukti_so = Nobuk,
                                //        error_msg = "Gagal Update Kode Booking pesanan " + Nobuk + "."
                                //    });
                                //}
                                //#else
                                //                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                //                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                //                                clientJobServer.Enqueue<TokopediaControllerJob>(x => x.JOBCOD(data, Nobuk, SOA_NOREF));
                                //#endif
                            }
                        }
                        //END ADD BY NURUL 3/4/2020, update no kode booking

                        ////add by fauzi for change status 82Cart to SHIPPED
                        ////var kd82Cart = "20";
                        ////var mpCust82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kd82Cart && m.CUST == SOA_CUST).FirstOrDefault();
                        ////if (mpCust82Cart != null)
                        ////{
                        ////    if (mpCust82Cart.Sort1_Cust != "" && !string.IsNullOrEmpty(mpCust82Cart.API_KEY) && !string.IsNullOrEmpty(mpCust82Cart.PERSO))
                        ////    {
                        ////        var sqlStorage = new SqlServerStorage(EDBConnID);
                        ////        var clientJobServer = new BackgroundJobClient(sqlStorage);
                        ////        EightTwoCartControllerJob.E2CartAPIData idenJob = new EightTwoCartControllerJob.E2CartAPIData();
                        ////        idenJob.API_key = mpCust82Cart.API_KEY;
                        ////        idenJob.API_credential = mpCust82Cart.Sort1_Cust;
                        ////        idenJob.API_url = mpCust82Cart.PERSO;
                        ////        idenJob.DatabasePathErasoft = dbPathEra;
                        ////        idenJob.username = usernameLogin;
                        ////        idenJob.no_cust = mpCust82Cart.CUST;

                        ////        //add by fauzi for update status TO SHIPPED CODE 4
                        ////        //new EightTwoCartControllerJob().E2Cart_SetOrderStatus(idenJob, dbPathEra, mpCust82Cart.CUST, "Pesanan", "Shipped Order", SOA_NOREF, "4");
                        ////        clientJobServer.Enqueue<EightTwoCartControllerJob>(x => x.E2Cart_SetOrderStatus(idenJob, dbPathEra, mpCust82Cart.CUST, "Pesanan", "Shipped Order", SOA_NOREF, "4"));

                        ////    }
                        ////}

//                        var kdShopify = "21";
//                        var mpCust82Cart = ErasoftDbContext.ARF01.Where(m => m.NAMA == kdShopify && m.CUST == SOA_CUST).FirstOrDefault();
//                        if (mpCust82Cart != null)
//                        {
//                            if (mpCust82Cart.Sort1_Cust != "" && !string.IsNullOrEmpty(mpCust82Cart.API_KEY) && !string.IsNullOrEmpty(mpCust82Cart.PERSO))
//                            {
//                                var sqlStorage = new SqlServerStorage(EDBConnID);
//                                var clientJobServer = new BackgroundJobClient(sqlStorage);
//                                ShopifyControllerJob.ShopifyAPIData idenJob = new ShopifyControllerJob.ShopifyAPIData();
//                                idenJob.no_cust = mpCust82Cart.CUST;
//                                idenJob.username = usernameLogin;
//                                idenJob.DatabasePathErasoft = dbPathEra;
//                                idenJob.account_store = mpCust82Cart.PERSO;
//                                idenJob.API_key = mpCust82Cart.API_KEY;
//                                idenJob.API_password = mpCust82Cart.API_CLIENT_P;

//                                //add by fauzi for update status TO PACKING
//#if (DEBUG || Debug_AWS)
//                                new ShopifyControllerJob().Shopify_SetOrderStatusFulfillment(dbPathEra, dsSORow.SOA_NOREF, mpCust82Cart.CUST, "Pesanan", "Shipped Order", idenJob);
//#else                            
//                                clientJobServer.Enqueue<ShopifyControllerJob>(x => x.Shopify_SetOrderStatusFulfillment(dbPathEra, dsSORow.SOA_NOREF, mpCust82Cart.CUST, "Pesanan", "Shipped Order", idenJob));

//#endif
//                            }
//                        }

                        //end by fauzi

                        if (lastNobuk != Nobuk)
                        {
                            if (validNobuk & lastNobuk != "")
                            {
                                //var doUpdateSOB = "SELECT 0 NO_URUT, LOKASI INTO #TEMP_SOT01B FROM SOT01B WHERE 0=1; " + Environment.NewLine;
                                //doUpdateSOB += "INSERT INTO #TEMP_SOT01B (NO_URUT,LOKASI) VALUES " + Environment.NewLine;
                                //stringUpdateSOB = stringUpdateSOB.Substring(0, stringUpdateSOB.Length - 1) + ";" + Environment.NewLine;
                                //stringUpdateSOB += "UPDATE B SET LOKASI = TEMP.LOKASI, QTY_N = QTY FROM SOT01B B INNER JOIN #TEMP_SOT01B TEMP ON B.NO_URUT = TEMP.NO_URUT;";

                                //EDB.ExecuteSQL("sConn", CommandType.Text, doUpdateSOB + stringUpdateSOB);

                                listSuccessRecnum.Add(Convert.ToInt32(lastNobukRecnum));
                                listSuccess.Add(lastNobuk);
                            }

                            //reset
                            validNobuk = true;
                            lastNobuk = Nobuk;
                            lastNobukRecnum = SOA_RECNUM;
                            stringUpdateSOB = "";
                        }

                        var gudang = default_gudang;
                        //if (!string.IsNullOrWhiteSpace(SOB_Lokasi))
                        if (!string.IsNullOrWhiteSpace(dsSORow.LOKASI))
                        {
                            //gudang = SOB_Lokasi;
                            gudang = dsSORow.LOKASI;
                        }
                        //var qtyOnHand = GetQOHSTF08A(SOB_Brg, gudang);
                        //if (qtyOnHand + (SOB_QtyN > 0 ? (SOB_Lokasi == gudang ? SOB_QtyN : 0) : 0) - SOB_Qty < 0)
                        var qtyOnHand = GetQOHSTF08A(dsSORow.BRG, gudang);
                        //change by nurul 31/8/2020
                        var tempCountQtyBrgX = tempBerhasilUpdate.Where(a => a.brg == dsSORow.BRG && a.sudahAdaLokasiNQtyN == false).Sum(a => a.qty);
                        
                        //if (qtyOnHand + (dsSORow.QTY_N > 0 ? (dsSORow.LOKASI == gudang ? dsSORow.QTY_N : 0) : 0) - dsSORow.QTY < 0)
                        var cekQty = (dsSORow.QTY_N > 0 ? (dsSORow.LOKASI == gudang ? dsSORow.QTY_N : 0) : 0);
                        var totalQOH = qtyOnHand - tempCountQtyBrgX;
                        var cekQtyN = dsSORow.QTY_N;
                        var cekGudang = dsSORow.LOKASI;
                        //if (approved == 0)
                        //{
                        if (cekQtyN > 0)
                        {
                            if (qtyOnHand + (dsSORow.QTY_N > 0 ? (dsSORow.LOKASI == gudang ? dsSORow.QTY_N : 0) : 0) - dsSORow.QTY < 0)
                            //end change by nurul 31/8/2020
                            {
                                brgTidakProses.Add(dsSORow.SOB_RECNUM.ToString());
                                validNobuk = false;
                                var inListError = listError.Where(p => p.no_bukti_so == Nobuk).FirstOrDefault();
                                if (inListError == null)
                                {
                                    listError.Add(new listErrorPacking
                                    {
                                        no_bukti_so = Nobuk,
                                        //error_msg = "Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                                        error_msg = "Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                                    });
                                }
                                else
                                {
                                    //inListError.error_msg += "</br>Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                                    inListError.error_msg += "</br>Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                                }
                                //add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate
                                //var removeData = tempBerhasilUpdate.Where(m => m.nobuk == dsSORow.NO_BUKTI).ToList();
                                //if(removeData.Count > 0)
                                //{
                                tempBerhasilUpdate.RemoveAll(m => m.nobuk == dsSORow.NO_BUKTI);
                                //    tempBerhasilUpdate.RemoveRange(removeData);
                                //}
                                //end add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate

                                //add by nurul 11/9/2020
                                var tempData = new updateGudangQtySOT01b()
                                {
                                    brg = dsSORow.BRG,
                                    qty = dsSORow.QTY,
                                    recnum = dsSORow.SOB_RECNUM.ToString(),
                                    nobuk = dsSORow.NO_BUKTI
                                };
                                if (dsSORow.LOKASI != "" && dsSORow.QTY_N > 0)
                                {
                                    tempData.sudahAdaLokasiNQtyN = true;
                                }
                                tempBarangGagalUpdate.Add(tempData);
                                //end add by nurul 11/9/2020
                            }
                            else
                            {
                                //add by nurul 31/8/2020
                                var tempData = new updateGudangQtySOT01b()
                                {
                                    brg = dsSORow.BRG,
                                    qty = dsSORow.QTY,
                                    recnum = dsSORow.SOB_RECNUM.ToString(),
                                    nobuk = dsSORow.NO_BUKTI//add by Tri 1 sep 2020
                                };
                                if (dsSORow.LOKASI != "" && dsSORow.QTY_N > 0)
                                {
                                    tempData.sudahAdaLokasiNQtyN = true;
                                }
                                tempBerhasilUpdate.Add(tempData);
                                //add by nurul 31/8/2020
                                //stringUpdateSOB += Environment.NewLine + "(" + SOB_RECNUM + ", '" + gudang + "'),";
                                stringUpdateSOB += Environment.NewLine + "(" + dsSORow.SOB_RECNUM + ", '" + gudang + "'),";
                            }
                        }
                        else
                        {
                            if (totalQOH + (dsSORow.QTY_N > 0 ? (dsSORow.LOKASI == gudang ? dsSORow.QTY_N : 0) : 0) - dsSORow.QTY < 0)
                            //end change by nurul 31/8/2020
                            {
                                brgTidakProses.Add(dsSORow.SOB_RECNUM.ToString());
                                validNobuk = false;
                                var inListError = listError.Where(p => p.no_bukti_so == Nobuk).FirstOrDefault();
                                if (inListError == null)
                                {
                                    listError.Add(new listErrorPacking
                                    {
                                        no_bukti_so = Nobuk,
                                        //error_msg = "Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                                        error_msg = "Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                                    });
                                }
                                else
                                {
                                    //inListError.error_msg += "</br>Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                                    inListError.error_msg += "</br>Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                                }
                                //add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate
                                //var removeData = tempBerhasilUpdate.Where(m => m.nobuk == dsSORow.NO_BUKTI).ToList();
                                //if(removeData.Count > 0)
                                //{
                                tempBerhasilUpdate.RemoveAll(m => m.nobuk == dsSORow.NO_BUKTI);
                                //    tempBerhasilUpdate.RemoveRange(removeData);
                                //}
                                //end add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate

                                //add by nurul 11/9/2020
                                var tempData = new updateGudangQtySOT01b()
                                {
                                    brg = dsSORow.BRG,
                                    qty = dsSORow.QTY,
                                    recnum = dsSORow.SOB_RECNUM.ToString(),
                                    nobuk = dsSORow.NO_BUKTI
                                };
                                if (dsSORow.LOKASI != "" && dsSORow.QTY_N > 0)
                                {
                                    tempData.sudahAdaLokasiNQtyN = true;
                                }
                                tempBarangGagalUpdate.Add(tempData);
                                //end add by nurul 11/9/2020
                            }
                            else
                            {
                                //add by nurul 31/8/2020
                                var tempData = new updateGudangQtySOT01b()
                                {
                                    brg = dsSORow.BRG,
                                    qty = dsSORow.QTY,
                                    recnum = dsSORow.SOB_RECNUM.ToString(),
                                    nobuk = dsSORow.NO_BUKTI//add by Tri 1 sep 2020
                                };
                                if (dsSORow.LOKASI != "" && dsSORow.QTY_N > 0)
                                {
                                    tempData.sudahAdaLokasiNQtyN = true;
                                }
                                tempBerhasilUpdate.Add(tempData);
                                //add by nurul 31/8/2020
                                //stringUpdateSOB += Environment.NewLine + "(" + SOB_RECNUM + ", '" + gudang + "'),";
                                stringUpdateSOB += Environment.NewLine + "(" + dsSORow.SOB_RECNUM + ", '" + gudang + "'),";
                            }
                        }
                        //}
                        //else if(approved == 1)
                        //{
                        //    if (totalQOH + (dsSORow.QTY_N > 0 ? (dsSORow.LOKASI == gudang ? dsSORow.QTY_N : 0) : 0) - dsSORow.QTY < 0)
                        //    //end change by nurul 31/8/2020
                        //    {
                        //        brgTidakProses.Add(dsSORow.SOB_RECNUM.ToString());
                        //        validNobuk = false;
                        //        var inListError = listError.Where(p => p.no_bukti_so == Nobuk).FirstOrDefault();
                        //        if (inListError == null)
                        //        {
                        //            listError.Add(new listErrorPacking
                        //            {
                        //                no_bukti_so = Nobuk,
                        //                //error_msg = "Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                        //                error_msg = "Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ")."
                        //            });
                        //        }
                        //        else
                        //        {
                        //            //inListError.error_msg += "</br>Qty sisa untuk item [" + SOB_Brg + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                        //            inListError.error_msg += "</br>Qty sisa untuk item [" + dsSORow.BRG + "] di gudang [" + gudang + "] adalah (" + Convert.ToString(qtyOnHand) + ").";
                        //        }
                        //        //add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate
                        //        //var removeData = tempBerhasilUpdate.Where(m => m.nobuk == dsSORow.NO_BUKTI).ToList();
                        //        //if (removeData.Count > 0)
                        //        //{
                        //        //    tempBerhasilUpdate.RemoveRange(removeData);
                        //        //}
                        //        tempBerhasilUpdate.RemoveAll(m => m.nobuk == dsSORow.NO_BUKTI);

                        //        //end add by Tri 1 sep 2020, remove nobuk from tempBerhasilUpdate
                        //    }
                        //    else
                        //    {
                        //        //add by nurul 31/8/2020
                        //        var tempData = new updateGudangQtySOT01b()
                        //        {
                        //            brg = dsSORow.BRG,
                        //            qty = dsSORow.QTY,
                        //            recnum = dsSORow.SOB_RECNUM.ToString(),
                        //            nobuk = dsSORow.NO_BUKTI//add by Tri 1 sep 2020
                        //        };
                        //        tempBerhasilUpdate.Add(tempData);
                        //        //add by nurul 31/8/2020
                        //        //stringUpdateSOB += Environment.NewLine + "(" + SOB_RECNUM + ", '" + gudang + "'),";
                        //        stringUpdateSOB += Environment.NewLine + "(" + dsSORow.SOB_RECNUM + ", '" + gudang + "'),";
                        //    }
                        //}
                    }
                    if (validNobuk)
                    {
                        //var doUpdateSOB = "SELECT 0 NO_URUT, LOKASI INTO #TEMP_SOT01B FROM SOT01B WHERE 0=1; " + Environment.NewLine;
                        //doUpdateSOB += "INSERT INTO #TEMP_SOT01B (NO_URUT,LOKASI) VALUES " + Environment.NewLine;
                        //stringUpdateSOB = stringUpdateSOB.Substring(0, stringUpdateSOB.Length - 1) + ";" + Environment.NewLine;
                        //stringUpdateSOB += "UPDATE B SET LOKASI = TEMP.LOKASI, QTY_N = QTY FROM SOT01B B INNER JOIN #TEMP_SOT01B TEMP ON B.NO_URUT = TEMP.NO_URUT;";

                        //EDB.ExecuteSQL("sConn", CommandType.Text, doUpdateSOB + stringUpdateSOB);
                        listSuccessRecnum.Add(Convert.ToInt32(lastNobukRecnum));
                        listSuccess.Add(lastNobuk);
                    }

                    //add by nurul 12/8/2020
                    //if (brgTidakProses.Count() < getlistSO.Count())
                    //{
                    //    var stringListRecnumSOB = "";
                    //    for (int i = 0; i < getlistSO.Count(); i++)
                    //    {
                    //        if (!string.IsNullOrWhiteSpace(getlistSO[i].SOB_RECNUM.ToString()))
                    //        {
                    //            var a = getlistSO[i].SOB_RECNUM.ToString();
                    //            if (!brgTidakProses.Contains(a))
                    //            {
                    //                if (stringListRecnumSOB != "")
                    //                {
                    //                    stringListRecnumSOB += ",";
                    //                }

                    //                stringListRecnumSOB += "'" + getlistSO[i].SOB_RECNUM.ToString().Trim() + "'";
                    //            }
                    //        }
                    //    }
                    //    var sSQL4 = "update sot01b set lokasi = '" + default_gudang + "' , qty_n = qty where isnull(lokasi,'')='' and no_urut in (" + stringListRecnumSOB + ")";
                    //    ErasoftDbContext.Database.ExecuteSqlCommand(sSQL4);
                    //}

                    var cekrec = true;
                    var listNobukGagal = tempBarangGagalUpdate.Select(a => a.nobuk).ToList();
                    if ((tempBerhasilUpdate.Count() < getlistSO.Count() && tempBerhasilUpdate.Count() > 0 && approved == 1) || (tempBerhasilUpdate.Count() ==  getlistSO.Count() && approved == 0))
                    {
                        var stringListRecnumSOB = "";
                        for (int i = 0; i < tempBerhasilUpdate.Count(); i++)
                        {
                            if (!string.IsNullOrWhiteSpace(tempBerhasilUpdate[i].recnum.ToString()))
                            {
                                if (!listNobukGagal.Contains(tempBerhasilUpdate[i].nobuk))
                                {
                                    var a = tempBerhasilUpdate[i].recnum.ToString();
                                    if (stringListRecnumSOB != "")
                                    {
                                        stringListRecnumSOB += ",";
                                    }

                                    stringListRecnumSOB += "'" + tempBerhasilUpdate[i].recnum.ToString().Trim() + "'";
                                    if (brgTidakProses.Contains(a))
                                    {
                                        cekrec = false;
                                    }
                                }
                            }
                        }
                        if (cekrec)
                        {
                            var sSQL4 = "update sot01b set lokasi = '" + default_gudang + "' , qty_n = qty where isnull(lokasi,'')='' and no_urut in (" + stringListRecnumSOB + ")";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sSQL4);
                        }
                    }
                    //end add by nurul 12/8/2020
                }

                successCount = listSuccess.Count();
                if (listError.Count() > 0 && approved == 0)
                {
                    if (successCount > 0)
                    {
                        return new JsonResult { Data = new { error_packing_list = false, listError, successCount = successCount, need_approval = 1 }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    else
                    {
                        return new JsonResult { Data = new { error_packing_list = false, listError, successCount = 0, need_approval = 0 }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else if (listError.Count() == 0 || approved == 1)
                {
                    using (var context = new ErasoftContext(dbSourceEra, dbPathEra))
                    {
                        var listRecnumEnd = "";
                        using (System.Data.Entity.DbContextTransaction transaction = context.Database.BeginTransaction())
                        {
                            try
                            {
                                var validContinue = true;
                                //var listSemuaSO = context.SOT01A.Where(p => listSuccessRecnum.Contains(p.RecNum.Value)).ToList();
                                var ListRecnum = "";
                                for (int i = 0; i < listSuccessRecnum.Count(); i++)
                                {
                                    if (!string.IsNullOrWhiteSpace(Convert.ToString(listSuccessRecnum[i])))
                                    {
                                        if (ListRecnum != "")
                                        {
                                            ListRecnum += ",";
                                        }
                                        ListRecnum += "'" + Convert.ToString(listSuccessRecnum[i]).Trim() + "'";
                                    }
                                }
                                var sSQL2 = "select a.status_transaksi,a.RecNum,a.no_bukti,isnull(b.no_bukti,'') as bukti_faktur,isnull(c.no_bukti,'') as bukti_packingList ";
                                sSQL2 += "from sot01a a left join sit01a b on a.no_bukti=b.no_so left join sot03b c on a.no_bukti=c.no_pesanan where A.RECNUM IN (" + ListRecnum + ") ";
                                var listSemuaSO = context.Database.SqlQuery<templistSemuaSO>(sSQL2).ToList();
                                var listSemuaDetailSOQty0 = context.SOT01B.Where(a => (a.QTY <= 0 || a.QTY_N == 0 || a.LOKASI == "" || a.LOKASI == null) && listSuccess.Contains(a.NO_BUKTI)).Select(a => new { NO_BUKTI = a.NO_BUKTI, QTY = a.QTY, BRG = a.BRG, QTY_N = a.QTY_N, GUDANG = a.LOKASI }).ToList();
                                foreach (var gagal in listSemuaSO)
                                {
                                    if (gagal.STATUS_TRANSAKSI != "02")
                                    {
                                        validContinue = false;
                                        listError.Add(new listErrorPacking
                                        {
                                            error_msg = "Status pesanan bukan packing",
                                            no_bukti_so = gagal.NO_BUKTI
                                        });
                                    }
                                    //var cekNoSOExist = context.SIT01A.Where(p => p.NO_SO == gagal.NO_BUKTI).FirstOrDefault();
                                    //if (cekNoSOExist != null)
                                    if (gagal.bukti_faktur != "")
                                    {
                                        validContinue = false;
                                        listError.Add(new listErrorPacking
                                        {
                                            //error_msg = "Pesanan sudah memiliki faktur",
                                            error_msg = "Pesanan sudah memiliki faktur. [" + gagal.bukti_faktur + "]",
                                            no_bukti_so = gagal.NO_BUKTI
                                        });
                                    }

                                    if (gagal.bukti_packingList != "")
                                    {
                                        validContinue = false;
                                        listError.Add(new listErrorPacking
                                        {
                                            error_msg = "Pesanan sudah pernah dibuatkan packing list. [" + gagal.bukti_packingList + "]",
                                            no_bukti_so = gagal.NO_BUKTI
                                        });
                                    }
                                }
                                if (listSemuaDetailSOQty0.Count() > 0)
                                {
                                    foreach (var gagal in listSemuaDetailSOQty0)
                                    {
                                        if (gagal.QTY <= 0)
                                        {
                                            validContinue = false;
                                            listError.Add(new listErrorPacking
                                            {
                                                error_msg = "Qty pesanan [" + gagal.NO_BUKTI + "] pada barang [" + gagal.BRG + "] adalah [" + gagal.QTY + "]",
                                                no_bukti_so = gagal.NO_BUKTI
                                            });
                                        }

                                        //add by nurul 11/9/2020
                                        if(gagal.QTY_N <= 0 || gagal.GUDANG == "" || gagal.GUDANG == null)
                                        {
                                            validContinue = false;
                                            listError.Add(new listErrorPacking
                                            {
                                                error_msg = "Barang [" + gagal.BRG + "] pada pesanan [" + gagal.NO_BUKTI + "] gagal diproses.",
                                                no_bukti_so = gagal.NO_BUKTI
                                            });
                                        }
                                        //end add by nurul 11/9/2020
                                    }
                                }

                                //var listPackinglistinDB = context.SOT03B.Where(p => listSuccess.Contains(p.NO_PESANAN)).ToList();
                                //foreach (var item in listPackinglistinDB)
                                //{
                                //    validContinue = false;
                                //    listError.Add(new listErrorPacking
                                //    {
                                //        error_msg = "Pesanan sudah pernah dibuatkan packing list. [" + item.NO_BUKTI + "]",
                                //        no_bukti_so = item.NO_PESANAN
                                //    });
                                //}

                                //check jika ada error
                                if (!validContinue)
                                {
                                    transaction.Rollback();
                                    return new JsonResult { Data = new { error_packing_list = false, listError, successCount = 0, need_approval = 0 }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                }

                                var newPackinglist = new SOT03A
                                {
                                    TGL = DateTime.Now,
                                    USERNAME = "AUTO_CREATE"
                                };

                                //change by nurul 23/12/2019, perbaikan no bukti
                                //string lastnobuk = context.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(NO_BUKTI), 5, 6), '0') FROM SOT03A WHERE NO_BUKTI LIKE 'PL19%'").First();
                                //var nobuk = "PL" + DateTime.Now.Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastnobuk) + 1).PadLeft(6, '0');
                                var lastBukti = GenerateAutoNumber(context, "PL", "SOT03A", "NO_BUKTI");
                                var nobuk = "PL" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                                //end change by nurul 23/12/2019, perbaikan no bukti


                                newPackinglist.NO_BUKTI = nobuk;

                                //change by nurul 23/12/2019, perbaikan no_bukti
                                //context.SOT03A.Add(newPackinglist);
                                try
                                {
                                    context.SOT03A.Add(newPackinglist);
                                    context.SaveChanges();
                                }
                                catch (Exception ex)
                                {
                                    var tempSI = context.SOT03A.Where(a => a.NO_BUKTI == newPackinglist.NO_BUKTI).Single();
                                    if (tempSI != null)
                                    {
                                        if (tempSI.NO_BUKTI == nobuk)
                                        {
                                            var lastBuktiNew = Convert.ToInt32(lastBukti);
                                            lastBuktiNew++;
                                            nobuk = "PL" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                            newPackinglist.NO_BUKTI = nobuk;
                                            context.SOT03A.Add(newPackinglist);
                                            context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                    }
                                }

                                //nobuk = "PL" + lastRecNum.ToString().PadLeft(6, '0');
                                //newPackinglist.NO_BUKTI = nobuk;
                                //context.SOT03A.Add(newPackinglist);

                                var newpackingdetail = new List<SOT03B>();
                                var newpackingbrgdetail = new List<SOT03C>();

                                var listDetailPesananSiapProses = context.SOT01B.Where(a => listSuccess.Contains(a.NO_BUKTI)).ToList();
                                foreach (var eachSO in listSemuaSO)
                                {
                                    var pesananInDb = context.SOT01A.Where(p => p.RecNum == eachSO.RecNum).Single();
                                    //add by nurul 11/9/2020, validasi untuk qtyN dan gudang blank tidak boleh create faktur 
                                    var listBarangPesananInDb = listDetailPesananSiapProses.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                                    var listQtyNGdNull = listBarangPesananInDb.Where(a => a.QTY_N == 0 && (a.LOKASI == "" || a.LOKASI == null)).ToList();
                                    if (listQtyNGdNull.Count() == 0)
                                    {
                                        //end add by nurul 11/9/2020
                                        var dataVm = new FakturViewModel()
                                        {
                                            Faktur = new SIT01A()
                                        };

                                        //change by nurul 23/12/2019, perbaikan no bukti
                                        //var digitAkhir = "";
                                        //var noOrder = "";

                                        //var listFakturInDb = context.SIT01A.Max(p => p.RecNum);

                                        //if (!listFakturInDb.HasValue)
                                        //{
                                        //    digitAkhir = "000001";
                                        //    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                        //    context.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                                        //}
                                        //else
                                        //{
                                        //    var lastSIRecnum = listFakturInDb.Value;

                                        //    if (lastSIRecnum == 0)
                                        //    {
                                        //        lastSIRecnum = 1;
                                        //    }
                                        //    lastSIRecnum++;

                                        //    digitAkhir = lastSIRecnum.ToString().PadLeft(6, '0');
                                        //    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                        //}
                                        var lastBuktiSI = GenerateAutoNumber(context, "SI", "SIT01A", "NO_BUKTI");
                                        var noOrder = "SI" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiSI) + 1).PadLeft(6, '0');
                                        //end change by nurul 23/12/2019, perbaikan no bukti

                                        var pesanan_bruto = 0d;
                                        var pesanan_netto = 0d;
                                        var pesanan_nilai_ppn = 0d;
                                        var cust = context.ARF01.Single(p => p.CUST == pesananInDb.CUST);
                                        var namacustint = Convert.ToInt32(cust.NAMA);
                                        var marketplace = MoDbContext.Marketplaces.Single(p => p.IdMarket.Value == namacustint).NamaMarket;

                                        var newSIT01A = new SIT01A();
                                        newSIT01A.NO_BUKTI = noOrder;
                                        newSIT01A.NO_F_PAJAK = "-";
                                        newSIT01A.NO_SO = pesananInDb.NO_BUKTI;
                                        newSIT01A.CUST = pesananInDb.CUST;
                                        newSIT01A.NAMAPEMESAN = (pesananInDb.NAMAPEMESAN.Length > 20 ? pesananInDb.NAMAPEMESAN.Substring(0, 17) + "..." : pesananInDb.NAMAPEMESAN);
                                        newSIT01A.PEMESAN = pesananInDb.PEMESAN;
                                        newSIT01A.NAMA_CUST = cust.PERSO;

                                        //dari pesanan
                                        newSIT01A.NO_REF = pesananInDb.NO_REFERENSI;

                                        //newSIT01A.AL = context.ARF01.Single(p => p.CUST == newSIT01A.CUST).AL;
                                        newSIT01A.AL = pesananInDb.ALAMAT_KIRIM;
                                        newSIT01A.AL2 = cust.AL2;
                                        newSIT01A.AL3 = cust.AL3;
                                        //change by nurul 11/10/2019, req pak dani 
                                        newSIT01A.TGL = DateTime.Now;
                                        //newSIT01A.TGL = pesananInDb.TGL.Value;
                                        //end change by nurul 11/10/2019, req pak dani 
                                        newSIT01A.PPN_Bln_Lapor = Convert.ToByte(newSIT01A.TGL.ToString("MM"));
                                        newSIT01A.PPN_Thn_Lapor = Convert.ToByte(newSIT01A.TGL.ToString("yyyy").Substring(2, 2));
                                        newSIT01A.USERNAME = usernameLogin;
                                        newSIT01A.JENIS_RETUR = "-";
                                        newSIT01A.JENIS_FORM = "2";
                                        newSIT01A.STATUS = "1";
                                        newSIT01A.ST_POSTING = "T";
                                        newSIT01A.VLT = "IDR";
                                        newSIT01A.NO_FA_OUTLET = "-";
                                        newSIT01A.NO_LPB = "-";
                                        newSIT01A.GROUP_LIMIT = "-";
                                        newSIT01A.KODE_ANGKUTAN = "-";
                                        newSIT01A.JENIS_MOBIL = "-";
                                        newSIT01A.JTRAN = "SI";
                                        newSIT01A.JENIS = "1";
                                        newSIT01A.NAMA_CUST = "-";
                                        newSIT01A.TUKAR = 1;
                                        newSIT01A.TUKAR_PPN = 1;
                                        newSIT01A.SOPIR = "-";
                                        newSIT01A.KET = "-";
                                        newSIT01A.PPNBM = 0;
                                        newSIT01A.NILAI_PPNBM = 0;
                                        newSIT01A.KODE_SALES = "-";
                                        newSIT01A.KODE_WIL = "-";
                                        newSIT01A.U_MUKA = 0;
                                        newSIT01A.U_MUKA_FA = 0;
                                        newSIT01A.TERM = pesananInDb.TERM;
                                        newSIT01A.TGL_JT_TEMPO = pesananInDb.TGL_JTH_TEMPO;

                                        newSIT01A.PPN = pesananInDb.PPN;

                                        newSIT01A.DISCOUNT = pesananInDb.DISCOUNT;
                                        newSIT01A.NILAI_DISC = pesananInDb.NILAI_DISC;
                                        newSIT01A.MATERAI = pesananInDb.ONGKOS_KIRIM;


                                        newSIT01A.TGLINPUT = DateTime.Now;

                                        //add by nurul 4/3/2020
                                        newSIT01A.PENGIRIM = pesananInDb.EXPEDISI;
                                        newSIT01A.NAMAPENGIRIM = pesananInDb.SHIPMENT;
                                        //end add by nurul 4/3/2020

                                        #region add by calvin 6 juni 2018, agar sit01a field yang penting tidak null
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NILAI_DISC)))
                                        {
                                            newSIT01A.NILAI_DISC = 0;
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_SO)))
                                        {
                                            newSIT01A.NO_SO = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_REF)))
                                        {
                                            newSIT01A.NO_REF = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.DISCOUNT)))
                                        {
                                            newSIT01A.DISCOUNT = 0;
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.CUST_QQ)))
                                        {
                                            newSIT01A.CUST_QQ = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NAMA_CUST_QQ)))
                                        {
                                            newSIT01A.NAMA_CUST_QQ = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.STATUS_LOADING)))
                                        {
                                            newSIT01A.STATUS_LOADING = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_PO_CUST)))
                                        {
                                            newSIT01A.NO_PO_CUST = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.PENGIRIM)))
                                        {
                                            newSIT01A.PENGIRIM = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NAMAPENGIRIM)))
                                        {
                                            newSIT01A.NAMAPENGIRIM = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.ZONA)))
                                        {
                                            newSIT01A.ZONA = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.UCAPAN)))
                                        {
                                            newSIT01A.UCAPAN = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.N_UCAPAN)))
                                        {
                                            newSIT01A.N_UCAPAN = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.PEMESAN)))
                                        {
                                            newSIT01A.PEMESAN = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.SUPP)))
                                        {
                                            newSIT01A.SUPP = "-";
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.KOMISI)))
                                        {
                                            newSIT01A.KOMISI = 0;
                                        }
                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.N_KOMISI)))
                                        {
                                            newSIT01A.N_KOMISI = 0;
                                        }
                                        #endregion

                                        if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.TOTAL_TITIPAN)))
                                        {
                                            newSIT01A.TOTAL_TITIPAN = 0;
                                        }

                                        pesananInDb.STATUS_TRANSAKSI = "03";
                                        if (pesananInDb.status_kirim != "2")
                                        {
                                            pesananInDb.status_kirim = "0";
                                        }
                                        pesananInDb.status_print = "0";

                                        var pesanan = new SOT03B();
                                        pesanan.NO_PESANAN = pesananInDb.NO_BUKTI;
                                        pesanan.TGL_PESANAN = pesananInDb.TGL.Value;
                                        pesanan.PEMBELI = pesananInDb.NAMAPEMESAN;
                                        pesanan.MARKETPLACE = marketplace;
                                        pesanan.NO_BUKTI = newPackinglist.NO_BUKTI;
                                        pesanan.USERNAME = usernameLogin;
                                        pesanan.TGL_INPUT = newPackinglist.TGL;
                                        newpackingdetail.Add(pesanan);

                                        //var listBarangPesananInDb = context.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                                        //var listBarangPesananInDb = listDetailPesananSiapProses.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                                        List<string> listBrg = new List<string>();
                                        var listSIT01B = new List<SIT01B>();
                                        foreach (var pesananDetail in listBarangPesananInDb)
                                        {
                                            var newSIT01B = new SIT01B();
                                            newSIT01B.NO_BUKTI = noOrder;
                                            newSIT01B.USERNAME = usernameLogin;
                                            newSIT01B.CATATAN = "-";
                                            newSIT01B.JENIS_FORM = "2";
                                            newSIT01B.TGLINPUT = DateTime.Now;
                                            #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                                            double nilai_disc_1 = 0d;
                                            double nilai_disc_2 = 0d;
                                            double harga = 0d;
                                            if (Math.Abs(pesananDetail.DISCOUNT) > 0)
                                            {
                                                nilai_disc_1 = (pesananDetail.DISCOUNT * pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                            }
                                            else
                                            {
                                                //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                                                nilai_disc_1 = (pesananDetail.NILAI_DISC_1 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                            }

                                            if (Math.Abs(pesananDetail.DISCOUNT_2) > 0)
                                            {
                                                nilai_disc_2 = (pesananDetail.DISCOUNT * (pesananDetail.H_SATUAN - nilai_disc_1) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                            }
                                            else
                                            {
                                                nilai_disc_2 = (pesananDetail.NILAI_DISC_2 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                            }

                                            harga = pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0) - nilai_disc_1 -
                                                                      nilai_disc_2;
                                            #endregion
                                            newSIT01B.NILAI_DISC = nilai_disc_1 + nilai_disc_2;


                                            newSIT01B.BRG = pesananDetail.BRG;
                                            newSIT01B.SATUAN = pesananDetail.SATUAN;
                                            newSIT01B.H_SATUAN = pesananDetail.H_SATUAN;
                                            newSIT01B.GUDANG = pesananDetail.LOKASI;
                                            newSIT01B.QTY = pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0;

                                        newSIT01B.DISCOUNT = pesananDetail.DISCOUNT;
                                        newSIT01B.DISCOUNT_2 = pesananDetail.DISCOUNT_2;
                                        newSIT01B.NILAI_DISC_1 = nilai_disc_1;
                                        newSIT01B.NILAI_DISC_2 = nilai_disc_2;
                                        newSIT01B.HARGA = harga;
                                        //add by nurul 24/9/2020, brg multi sku 
                                        newSIT01B.BRG_MULTISKU = pesananDetail.BRG_MULTISKU;
                                        //end add by nurul 24/9/2020, brg, multi sku 

                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.QTY_KIRIM)))
                                            {
                                                newSIT01B.QTY_KIRIM = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.QTY_RETUR)))
                                            {
                                                newSIT01B.QTY_RETUR = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_3)))
                                            {
                                                newSIT01B.DISCOUNT_3 = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_4)))
                                            {
                                                newSIT01B.DISCOUNT_4 = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_5)))
                                            {
                                                newSIT01B.DISCOUNT_5 = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_3)))
                                            {
                                                newSIT01B.NILAI_DISC_3 = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_4)))
                                            {
                                                newSIT01B.NILAI_DISC_4 = 0;
                                            }
                                            if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_5)))
                                            {
                                                newSIT01B.NILAI_DISC_5 = 0;
                                            }

                                            listSIT01B.Add(newSIT01B);
                                            listBrg.Add(pesananDetail.BRG);

                                            pesanan_bruto += harga;

                                            var newSot03c = new SOT03C();
                                            newSot03c.NO_BUKTI = newPackinglist.NO_BUKTI;
                                            newSot03c.NO_PESANAN = pesananInDb.NO_BUKTI;
                                            newSot03c.BRG = pesananDetail.BRG;
                                            newSot03c.QTY = Convert.ToInt32(pesananDetail.QTY_N);
                                            newSot03c.USERNAME = usernameLogin;
                                            newSot03c.TGL_INPUT = newPackinglist.TGL;
                                            newpackingbrgdetail.Add(newSot03c);
                                        }
                                        pesanan_nilai_ppn = ((pesanan_bruto - pesananInDb.NILAI_DISC) * pesananInDb.PPN) / 100;
                                        pesanan_netto = pesanan_bruto - pesananInDb.NILAI_DISC + pesanan_nilai_ppn + pesananInDb.ONGKOS_KIRIM;

                                        newSIT01A.BRUTO = pesanan_bruto;
                                        newSIT01A.NILAI_PPN = pesanan_nilai_ppn;
                                        newSIT01A.NETTO = pesanan_netto;


                                        //change by nurul 23/12/2019, perbaikan no_bukti
                                        //context.SIT01A.Add(newSIT01A);
                                        try
                                        {
                                            context.SIT01A.Add(newSIT01A);
                                            context.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            var tempSI = context.SIT01A.Where(a => a.NO_BUKTI == newSIT01A.NO_BUKTI).Single();
                                            if (tempSI != null)
                                            {
                                                if (tempSI.NO_BUKTI == noOrder)
                                                {
                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                    lastBuktiNew++;
                                                    noOrder = "SI" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                    newSIT01A.NO_BUKTI = noOrder;
                                                    context.SIT01A.Add(newSIT01A);
                                                    foreach (var updateDetail in listSIT01B)
                                                    {
                                                        updateDetail.NO_BUKTI = noOrder;
                                                    }
                                                    //listSIT01B.NO_BUKTI = noOrder;
                                                    context.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                            }
                                        }
                                        //end change by nurul 23/12/2019, perbaikan no bukti

                                        context.SIT01B.AddRange(listSIT01B);
                                        context.SaveChanges();

                                        //add by nurul 6/2/2020, tambah update sit01a untuk trigger create art01d
                                        //context.SIT01A.Where(p => p.NO_BUKTI == noOrder && p.JENIS_FORM == "2").Update(p => new SIT01A() { BRUTO = newSIT01A.BRUTO });
#if (DEBUG || Debug_AWS)
                                        Task.Run(() => new StokControllerJob().updateBrutoSit01a("", dbPathEra, usernameLogin, noOrder, newSIT01A.BRUTO).Wait());
#else
                                var sqlStorage = new SqlServerStorage(EDBConnID);
                                var clientJobServer = new BackgroundJobClient(sqlStorage);
                                clientJobServer.Enqueue<StokControllerJob>(x => x.updateBrutoSit01a("", dbPathEra, usernameLogin, noOrder, newSIT01A.BRUTO));
#endif
                                        //end add by nurul 6/2/2020, tambah update sit01a untuk trigger create art01d
                                    }
                                }
                                context.SOT03B.AddRange(newpackingdetail);
                                context.SOT03C.AddRange(newpackingbrgdetail);
                                context.SaveChanges();
                                //var sSQL3 = "update a set status_transaksi='03' ";
                                //sSQL3 += "from sot01a a inner join sit01a b on a.no_bukti=b.no_so inner join sot03b c on a.no_bukti=c.no_pesanan ";
                                //sSQL3 += "where a.status_transaksi='02' and a.recnum in (" + ListRecnum + ")";
                                //context.Database.ExecuteSqlCommand(sSQL3);
                                listRecnumEnd = ListRecnum;
                                transaction.Commit();
                                packingNo = newPackinglist.NO_BUKTI;
                            }
                            catch (Exception ex)
                            {
                                transaction.Rollback();
                                return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                            }
                        }
                        if (listRecnumEnd != "") {
                            var sSQL3 = "update a set status_transaksi='03' ";
                            sSQL3 += "from sot01a a inner join sit01a b on a.no_bukti=b.no_so inner join sot03b c on a.no_bukti=c.no_pesanan ";
                            sSQL3 += "where a.status_transaksi='02' and a.recnum in (" + listRecnumEnd + ")";
                            context.Database.ExecuteSqlCommand(sSQL3);
                        }
                        var sSQL4 = "select count(a.no_bukti)jumlah from sit01a a inner join sot01a b on a.no_so=b.no_bukti where (isnull(a.no_ref,'')='' or isnull(a.no_ref,'')='-') and isnull(b.no_referensi,'')<>'' ";
                        var cekCountSINorefBlank = context.Database.SqlQuery<int>(sSQL4).SingleOrDefault();
                        if(cekCountSINorefBlank > 0)
                        {
                            var sSQL5 = "update a set no_ref=b.no_referensi from sit01a a inner join sot01a b on a.no_so=b.no_bukti where (isnull(a.no_ref,'')='' or isnull(a.no_ref,'')='-') and isnull(b.no_referensi,'')<>''";
                            context.Database.ExecuteSqlCommand(sSQL5);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { error_packing_list = true }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            return new JsonResult { Data = new { error_packing_list = false, listError, successCount = successCount, packingNo = packingNo, need_approval = 0 }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        public class retGenerateFakturFromPesanan
        {
            public bool success { get; set; }
            public string errorMsg { get; set; }
        }
        protected retGenerateFakturFromPesanan GenerateFakturFromPesanan(int recnumSOA)
        {
            var ret = new retGenerateFakturFromPesanan()
            {
                success = false,
                errorMsg = ""
            };

            using (var context = new ErasoftContext(dbSourceEra, dbPathEra))
            {
                using (System.Data.Entity.DbContextTransaction transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        var dataVm = new FakturViewModel()
                        {
                            Faktur = new SIT01A()
                        };
                        var pesananInDb = context.SOT01A.Where(p => p.RecNum == recnumSOA).Single();
                        if (pesananInDb.STATUS_TRANSAKSI != "02")
                        {
                            ret.success = false;
                            ret.errorMsg = "Status pesanan bukan packing.";
                        }
                        else
                        {
                            var cekNoSOExist = context.SIT01A.Where(p => p.NO_SO == pesananInDb.NO_BUKTI).FirstOrDefault();
                            if (cekNoSOExist == null)
                            {
                                var digitAkhir = "";
                                var noOrder = "";

                                var listFakturInDb = context.SIT01A.Max(p => p.RecNum);

                                if (!listFakturInDb.HasValue)
                                {
                                    digitAkhir = "000001";
                                    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                    context.Database.ExecuteSqlCommand("DBCC CHECKIDENT (SIT01A, RESEED, 0)");
                                }
                                else
                                {
                                    var lastRecNum = listFakturInDb.Value;

                                    if (lastRecNum == 0)
                                    {
                                        lastRecNum = 1;
                                    }
                                    lastRecNum++;

                                    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                                    noOrder = $"SI{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                }
                                var pesanan_bruto = 0d;
                                var pesanan_netto = 0d;
                                var pesanan_nilai_ppn = 0d;
                                var cust = context.ARF01.Single(p => p.CUST == pesananInDb.CUST);

                                var newSIT01A = new SIT01A();
                                newSIT01A.NO_BUKTI = noOrder;
                                newSIT01A.NO_F_PAJAK = "-";
                                newSIT01A.NO_SO = pesananInDb.NO_BUKTI;
                                newSIT01A.CUST = pesananInDb.CUST;
                                newSIT01A.NAMAPEMESAN = (pesananInDb.NAMAPEMESAN.Length > 20 ? pesananInDb.NAMAPEMESAN.Substring(0, 17) + "..." : pesananInDb.NAMAPEMESAN);
                                newSIT01A.PEMESAN = pesananInDb.PEMESAN;
                                newSIT01A.NAMA_CUST = cust.PERSO;

                                //dari pesanan
                                newSIT01A.NO_REF = pesananInDb.NO_REFERENSI;

                                //newSIT01A.AL = context.ARF01.Single(p => p.CUST == newSIT01A.CUST).AL;
                                newSIT01A.AL = pesananInDb.ALAMAT_KIRIM;
                                newSIT01A.AL2 = cust.AL2;
                                newSIT01A.AL3 = cust.AL3;
                                //change by nurul 11/10/2019, req pak dani 
                                newSIT01A.TGL = DateTime.Now;
                                //newSIT01A.TGL = pesananInDb.TGL.Value;
                                //end change by nurul 11/10/2019, req pak dani 
                                newSIT01A.PPN_Bln_Lapor = Convert.ToByte(newSIT01A.TGL.ToString("MM"));
                                newSIT01A.PPN_Thn_Lapor = Convert.ToByte(newSIT01A.TGL.ToString("yyyy").Substring(2, 2));
                                newSIT01A.USERNAME = usernameLogin;
                                newSIT01A.JENIS_RETUR = "-";
                                newSIT01A.JENIS_FORM = "2";
                                newSIT01A.STATUS = "1";
                                newSIT01A.ST_POSTING = "T";
                                newSIT01A.VLT = "IDR";
                                newSIT01A.NO_FA_OUTLET = "-";
                                newSIT01A.NO_LPB = "-";
                                newSIT01A.GROUP_LIMIT = "-";
                                newSIT01A.KODE_ANGKUTAN = "-";
                                newSIT01A.JENIS_MOBIL = "-";
                                newSIT01A.JTRAN = "SI";
                                newSIT01A.JENIS = "1";
                                newSIT01A.NAMA_CUST = "-";
                                newSIT01A.TUKAR = 1;
                                newSIT01A.TUKAR_PPN = 1;
                                newSIT01A.SOPIR = "-";
                                newSIT01A.KET = "-";
                                newSIT01A.PPNBM = 0;
                                newSIT01A.NILAI_PPNBM = 0;
                                newSIT01A.KODE_SALES = "-";
                                newSIT01A.KODE_WIL = "-";
                                newSIT01A.U_MUKA = 0;
                                newSIT01A.U_MUKA_FA = 0;
                                newSIT01A.TERM = pesananInDb.TERM;
                                newSIT01A.TGL_JT_TEMPO = pesananInDb.TGL_JTH_TEMPO;

                                newSIT01A.PPN = pesananInDb.PPN;

                                newSIT01A.DISCOUNT = pesananInDb.DISCOUNT;
                                newSIT01A.NILAI_DISC = pesananInDb.NILAI_DISC;
                                newSIT01A.MATERAI = pesananInDb.ONGKOS_KIRIM;


                                newSIT01A.TGLINPUT = DateTime.Now;

                                //add by nurul 4/3/2020
                                newSIT01A.PENGIRIM = pesananInDb.EXPEDISI;
                                newSIT01A.NAMAPENGIRIM = pesananInDb.SHIPMENT;
                                //end add by nurul 4/3/2020

                                #region add by calvin 6 juni 2018, agar sit01a field yang penting tidak null
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NILAI_DISC)))
                                {
                                    newSIT01A.NILAI_DISC = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_SO)))
                                {
                                    newSIT01A.NO_SO = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_REF)))
                                {
                                    newSIT01A.NO_REF = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.DISCOUNT)))
                                {
                                    newSIT01A.DISCOUNT = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.CUST_QQ)))
                                {
                                    newSIT01A.CUST_QQ = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NAMA_CUST_QQ)))
                                {
                                    newSIT01A.NAMA_CUST_QQ = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.STATUS_LOADING)))
                                {
                                    newSIT01A.STATUS_LOADING = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NO_PO_CUST)))
                                {
                                    newSIT01A.NO_PO_CUST = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.PENGIRIM)))
                                {
                                    newSIT01A.PENGIRIM = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.NAMAPENGIRIM)))
                                {
                                    newSIT01A.NAMAPENGIRIM = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.ZONA)))
                                {
                                    newSIT01A.ZONA = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.UCAPAN)))
                                {
                                    newSIT01A.UCAPAN = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.N_UCAPAN)))
                                {
                                    newSIT01A.N_UCAPAN = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.PEMESAN)))
                                {
                                    newSIT01A.PEMESAN = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.SUPP)))
                                {
                                    newSIT01A.SUPP = "-";
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.KOMISI)))
                                {
                                    newSIT01A.KOMISI = 0;
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.N_KOMISI)))
                                {
                                    newSIT01A.N_KOMISI = 0;
                                }
                                #endregion

                                if (string.IsNullOrEmpty(Convert.ToString(newSIT01A.TOTAL_TITIPAN)))
                                {
                                    newSIT01A.TOTAL_TITIPAN = 0;
                                }

                                pesananInDb.STATUS_TRANSAKSI = "03";
                                if (pesananInDb.status_kirim != "2")
                                {
                                    pesananInDb.status_kirim = "0";
                                }
                                pesananInDb.status_print = "0";

                                var listBarangPesananInDb = context.SOT01B.Where(p => p.NO_BUKTI == pesananInDb.NO_BUKTI).ToList();
                                List<string> listBrg = new List<string>();
                                var listSIT01B = new List<SIT01B>();
                                foreach (var pesananDetail in listBarangPesananInDb)
                                {
                                    var newSIT01B = new SIT01B();
                                    newSIT01B.NO_BUKTI = noOrder;
                                    newSIT01B.USERNAME = usernameLogin;
                                    newSIT01B.CATATAN = "-";
                                    newSIT01B.JENIS_FORM = "2";
                                    newSIT01B.TGLINPUT = DateTime.Now;
                                    #region add by calvin 31 okt 2018, hitung ulang sesuai dengan qty_n, bukan qty
                                    double nilai_disc_1 = 0d;
                                    double nilai_disc_2 = 0d;
                                    double harga = 0d;
                                    if (Math.Abs(pesananDetail.DISCOUNT) > 0)
                                    {
                                        nilai_disc_1 = (pesananDetail.DISCOUNT * pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                    }
                                    else
                                    {
                                        //req by pak dani, dibuat proporsional jika discount bukan persen, tapi nilai discount, karena bisa lebih besar daripada harga * qty_n
                                        nilai_disc_1 = (pesananDetail.NILAI_DISC_1 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                    }

                                    if (Math.Abs(pesananDetail.DISCOUNT_2) > 0)
                                    {
                                        nilai_disc_2 = (pesananDetail.DISCOUNT * (pesananDetail.H_SATUAN - nilai_disc_1) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0)) / 100;
                                    }
                                    else
                                    {
                                        nilai_disc_2 = (pesananDetail.NILAI_DISC_2 / pesananDetail.QTY) * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0);
                                    }

                                    harga = pesananDetail.H_SATUAN * (pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0) - nilai_disc_1 -
                                                              nilai_disc_2;
                                    #endregion
                                    newSIT01B.NILAI_DISC = nilai_disc_1 + nilai_disc_2;


                                    newSIT01B.BRG = pesananDetail.BRG;
                                    newSIT01B.SATUAN = pesananDetail.SATUAN;
                                    newSIT01B.H_SATUAN = pesananDetail.H_SATUAN;
                                    newSIT01B.GUDANG = pesananDetail.LOKASI;
                                    newSIT01B.QTY = pesananDetail.QTY_N.HasValue ? pesananDetail.QTY_N.Value : 0;

                                    newSIT01B.DISCOUNT = pesananDetail.DISCOUNT;
                                    newSIT01B.DISCOUNT_2 = pesananDetail.DISCOUNT_2;
                                    newSIT01B.NILAI_DISC_1 = nilai_disc_1;
                                    newSIT01B.NILAI_DISC_2 = nilai_disc_2;
                                    newSIT01B.HARGA = harga;

                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.QTY_KIRIM)))
                                    {
                                        newSIT01B.QTY_KIRIM = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.QTY_RETUR)))
                                    {
                                        newSIT01B.QTY_RETUR = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_3)))
                                    {
                                        newSIT01B.DISCOUNT_3 = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_4)))
                                    {
                                        newSIT01B.DISCOUNT_4 = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.DISCOUNT_5)))
                                    {
                                        newSIT01B.DISCOUNT_5 = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_3)))
                                    {
                                        newSIT01B.NILAI_DISC_3 = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_4)))
                                    {
                                        newSIT01B.NILAI_DISC_4 = 0;
                                    }
                                    if (string.IsNullOrEmpty(Convert.ToString(newSIT01B.NILAI_DISC_5)))
                                    {
                                        newSIT01B.NILAI_DISC_5 = 0;
                                    }

                                    listSIT01B.Add(newSIT01B);
                                    listBrg.Add(pesananDetail.BRG);

                                    pesanan_bruto += harga;
                                }
                                pesanan_nilai_ppn = ((pesanan_bruto - pesananInDb.NILAI_DISC) * pesananInDb.PPN) / 100;
                                pesanan_netto = pesanan_bruto - pesananInDb.NILAI_DISC + pesanan_nilai_ppn + pesananInDb.ONGKOS_KIRIM;

                                newSIT01A.BRUTO = pesanan_bruto;
                                newSIT01A.NILAI_PPN = pesanan_nilai_ppn;
                                newSIT01A.NETTO = pesanan_netto;

                                context.SIT01A.Add(newSIT01A);
                                context.SIT01B.AddRange(listSIT01B);
                                context.SaveChanges();
                                transaction.Commit();

                                ret.success = true;
                            }
                            else
                            {
                                ret.success = false;
                                ret.errorMsg = "Pesanan sudah mempunyai faktur.";
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        ret.success = false;
                        ret.errorMsg = "Internal Server Error";
                        transaction.Rollback();
                    }
                }
            }
            return ret;
        }

        //add by nurul 11/11/2019, upload pembayaran lazada 
        //public ActionResult UploadXcelBayarLazada(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess, string log, string percentDanprogressDownload, string statusLoopSuccessDownload, string filename, string percentDanprogressTemp, string statusLoopSuccessTemp, List<TEMP_UPLOAD_EXCEL_BAYAR> listDetail)
        public ActionResult UploadXcelBayarLazada(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess, string log, string percentDanprogressDownload, string statusLoopSuccessDownload, string filename)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };
            List<LazadaExcelBayarPiutang> recordsLazada = new List<LazadaExcelBayarPiutang>();
            List<int> recnum_record = new List<int>();

            byte[] data = null;
            byte[] dataByte = null;
            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');

            string[] statusDownload = statusLoopSuccessDownload.Split(';');
            string[] progDownload = percentDanprogressDownload.Split(';');

            //string[] statusTemp = statusLoopSuccessTemp.Split(';');
            //string[] progTemp = percentDanprogressTemp.Split(';');

            ret.statusLoop = Convert.ToBoolean(status[0]);
            ret.statusLoopDownload = Convert.ToBoolean(statusDownload[0]);
            //ret.statusLoopTemp = Convert.ToBoolean(statusTemp[0]);
            if (ret.statusLoop == false && ret.statusLoopDownload == false)
            {
                ret.buktiLog = "Log_Upload_Pembayaran_Lazada" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            }
            else
            {
                ret.buktiLog = log;
            }

            if (filename != null && filename != "")
            {
                ret.TipeData = filename;
            }

            //if(listDetail != null && listDetail.Count() > 0)
            //{
            //    ret.list_Detail_ret = listDetail;
            //}
            ret.selesaiProsesDownload = false;
            ret.countAll = countAll;

            try
            {
                var mp = MoDbContext.Marketplaces.ToList();
                ret.statusSuccess = Convert.ToBoolean(status[1]);
                ret.statusSuccessDownload = Convert.ToBoolean(statusDownload[1]);
                //ret.statusSuccessTemp = Convert.ToBoolean(statusTemp[1]);
                ret.sudahSimpanTemp = false;

                if (ret.byteData == null && ret.statusLoop == false)
                {
                    ret.adaError = false;
                    LOG_IMPORT_FAKTUR newLogImportPiutang = new LOG_IMPORT_FAKTUR
                    {
                        CUST = cust_id,
                        UPLOADER = uname,
                        LAST_FAKTUR_UPLOADED = "",
                        UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                        LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7),
                        LOG_FILE = ret.buktiLog,
                    };
                    ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportPiutang);
                    ErasoftDbContext.SaveChanges();

                    if (Request.Files[0] != null && Request.Files[0].ContentLength > 0)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        //dataByte = UploadFileServices.UploadFile(Request.Files[0]);
                        //ret.byteData = dataByte;


                        if (ret.TipeData.Split('.').Last().ToLower() == "csv")
                        {
                            TextReader tr;

                            using (Stream inputStream = Request.Files[0].InputStream)
                            {
                                MemoryStream memoryStream = inputStream as MemoryStream;
                                if (memoryStream == null)
                                {
                                    memoryStream = new MemoryStream();
                                    inputStream.CopyTo(memoryStream);
                                }
                                data = memoryStream.ToArray();
                                tr = new StreamReader(inputStream);
                            }

                            string namaFile = dbPathEra + "_BayarLazada_" + DateTime.Now.ToString("yyyyMMdd_HHmmssffff") + ".csv";
                            System.IO.File.WriteAllBytes(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile), data);
                            using (var sr = new StreamReader(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile)))
                            {
                                CsvReader reader = new CsvReader(sr);
                                reader.Configuration.Delimiter = ",";
                                reader.Configuration.PrepareHeaderForMatch = (header, index) => Regex.Replace(header, @"\s|[().]", string.Empty);
                                var records_excell = reader.GetRecords<LazadaExcelBayarPiutang>();
                                try
                                {
                                    foreach (var dataPiutang in records_excell)
                                    {
                                        var a = new LazadaExcelBayarPiutang
                                        {
                                            TransactionDate = Convert.ToDateTime(dataPiutang.TransactionDate),
                                            TransactionType = Convert.ToString(dataPiutang.TransactionType),
                                            FeeName = Convert.ToString(dataPiutang.FeeName),
                                            TransactionNumber = Convert.ToString(dataPiutang.TransactionNumber),
                                            Details = Convert.ToString(dataPiutang.Details),
                                            SellerSKU = Convert.ToString(dataPiutang.SellerSKU),
                                            LazadaSKU = Convert.ToString(dataPiutang.LazadaSKU),
                                            Amount = Math.Abs(Convert.ToDouble(dataPiutang.Amount)),
                                            VATinAmount = Convert.ToDouble(dataPiutang.VATinAmount),
                                            WHTAmount = Convert.ToDouble(dataPiutang.WHTAmount),
                                            WHTincludedinAmount = Convert.ToString(dataPiutang.WHTincludedinAmount),
                                            Statement = Convert.ToString(dataPiutang.Statement),
                                            PaidStatus = Convert.ToString(dataPiutang.PaidStatus),
                                            OrderNo = Regex.Replace(Convert.ToString(dataPiutang.OrderNo), @"s", ""),
                                            OrderItemNo = Regex.Replace(Convert.ToString(dataPiutang.OrderItemNo), @"s", ""),
                                            OrderItemStatus = Convert.ToString(dataPiutang.OrderItemStatus),
                                            ShippingProvider = Convert.ToString(dataPiutang.ShippingProvider),
                                            ShippingSpeed = Convert.ToString(dataPiutang.ShippingSpeed),
                                            ShipmentType = Convert.ToString(dataPiutang.ShipmentType),
                                            Reference = Regex.Replace(Convert.ToString(dataPiutang.Reference), @"s", ""),
                                            Comment = Convert.ToString(dataPiutang.Comment),
                                            PaymentRefId = Convert.ToString(dataPiutang.PaymentRefId),
                                        };
                                        if (!string.IsNullOrEmpty(a.OrderNo))
                                        {
                                            if (a.OrderNo != "")
                                            {
                                                recordsLazada.Add(a);
                                                ret.sudahSimpanTemp = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    ret.Errors.Add("Format file yang anda upload salah. <br />");
                                    ret.adaError = true;
                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                    {
                                        LOG_FILE = ret.buktiLog,
                                        VARIABLE_1 = ret.nobuk,
                                        VARIABLE_2 = ret.TipeData,
                                        TEXT_1 = "Format file yang anda upload salah. <br />",
                                        TEXT_2 = "",
                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        USERNAME = uname
                                    };
                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                    ErasoftDbContext.SaveChanges();
                                    ret.TidakLanjutProses = true;
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }

                            }
                            System.IO.File.Delete(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile));
                        }
                        else if (ret.TipeData.Split('.').Last().ToLower() == "xlsx" || ret.TipeData.Split('.').Last().ToLower() == "xls")
                        {
                            if (ret.TipeData.Split('.').Last().ToLower() == "xls")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    Workbook workbook = new Workbook();
                                    workbook.LoadFromStream(inputStream);
                                    MemoryStream memoryStream = new MemoryStream();
                                    workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                    data = memoryStream.ToArray();
                                }
                            }
                            else if (ret.TipeData.Split('.').Last().ToLower() == "xlsx")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;
                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }
                                    data = memoryStream.ToArray();
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />");
                                ret.adaError = true;
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                                ret.TidakLanjutProses = true;
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }
                            using (MemoryStream stream = new MemoryStream(data))
                            {
                                using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                                {
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                    {
                                        string cekValid = worksheet.Cells[1, 1].Value == null ? "" : worksheet.Cells[1, 1].Value.ToString();
                                        if (!string.IsNullOrEmpty(cekValid) && cekValid == "Transaction Date")
                                        {
                                            //Columns start from A5, start mapping column
                                            var a = new LazadaExcelBayarPiutang
                                            {
                                                TransactionDate = worksheet.Cells[i, 1].Value == null ? DateTime.Now : Convert.ToDateTime(worksheet.Cells[i, 1].Value),
                                                TransactionType = worksheet.Cells[i, 2].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 2].Value),
                                                FeeName = worksheet.Cells[i, 3].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 3].Value),
                                                TransactionNumber = worksheet.Cells[i, 4].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 4].Value),
                                                Details = worksheet.Cells[i, 5].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 5].Value),
                                                SellerSKU = worksheet.Cells[i, 6].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 6].Value),
                                                LazadaSKU = worksheet.Cells[i, 7].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 7].Value),
                                                Amount = worksheet.Cells[i, 8].Value == null ? 0 : Math.Abs(Convert.ToDouble(worksheet.Cells[i, 8].Value)),
                                                VATinAmount = worksheet.Cells[i, 9].Value == null ? 0 : Convert.ToDouble(worksheet.Cells[i, 9].Value),
                                                WHTAmount = worksheet.Cells[i, 10].Value == null ? 0 : Convert.ToDouble(worksheet.Cells[i, 10].Value),
                                                WHTincludedinAmount = worksheet.Cells[i, 11].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 11].Value),
                                                Statement = worksheet.Cells[i, 12].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 12].Value),
                                                PaidStatus = worksheet.Cells[i, 13].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 13].Value),
                                                OrderNo = worksheet.Cells[i, 14].Value == null ? "" : Regex.Replace(Convert.ToString(worksheet.Cells[i, 14].Value), @"s", ""),
                                                OrderItemNo = worksheet.Cells[i, 15].Value == null ? "" : Regex.Replace(Convert.ToString(worksheet.Cells[i, 15].Value), @"s", ""),
                                                OrderItemStatus = worksheet.Cells[i, 16].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 16].Value),
                                                ShippingProvider = worksheet.Cells[i, 17].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 17].Value),
                                                ShippingSpeed = worksheet.Cells[i, 18].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 18].Value),
                                                ShipmentType = worksheet.Cells[i, 19].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 19].Value),
                                                Reference = worksheet.Cells[i, 20].Value == null ? "" : Regex.Replace(Convert.ToString(worksheet.Cells[i, 20].Value), @"s", ""),
                                                Comment = worksheet.Cells[i, 21].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 21].Value),
                                                PaymentRefId = worksheet.Cells[i, 22].Value == null ? "" : Convert.ToString(worksheet.Cells[i, 22].Value),
                                            };
                                            if (!string.IsNullOrEmpty(a.OrderNo))
                                            {
                                                if (a.OrderNo != "")
                                                {
                                                    //records.Add(a);
                                                    recordsLazada.Add(a);
                                                    ret.sudahSimpanTemp = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File bukan data pembayaran lazada.<br />");
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "File bukan data pembayaran lazada.<br />",
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                            ret.TidakLanjutProses = true;
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }

                        if (recordsLazada.Count() <= 0)
                        {
                            ret.Errors.Add("File " + ret.TipeData + "  tidak ada data pembayaran.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "File " + ret.TipeData + "  tidak ada data pembayaran.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                            ret.TidakLanjutProses = true;
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                else
                {
                    ret.byteData = null;
                    ret.nobuk = nobuk;
                }


                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    if (ret.statusLoop == false)
                    {
                        ret.lastRow.Add(0);
                    }

                    if (ret.statusLoop == true)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        if (log != null)
                        {
                            ret.buktiLog = log;
                        }
                    }

                    using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                    {
                        eraDB.Database.CommandTimeout = 180;
                        var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                        if (customer != null)
                        {
                            List<double> nilaiFaktur = new List<double>();
                            List<double> nilaiRef = new List<double>();
                            List<double> nilaiPot = new List<double>();
                            List<double?> nilaiLebihBayar = new List<double?>();
                            string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;

                            var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                            if (listTemp > 0)
                            {
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses_lanjut = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<ART03B> list_detail = new List<ART03B>();
                                List<string> list_ref = new List<string>();
                                if (recordsLazada.Count() != 0)
                                {
                                    #region create induk
                                    if (ret.statusLoop == false && ret.statusLoopTemp == false)
                                    {
                                        var art03a = new ART03A
                                        {
                                            KET = "-",
                                            USERNAME = "UPLOAD_LAZADA",
                                            TUKAR = 1,
                                            MUKA1 = 0,
                                            MUKA2 = 0,
                                            KONTAN = 0,
                                            VLT = "IDR",
                                            TOTAL_KREDIT_GL = 0,
                                            TOTAL_DEBET_GL = 0,
                                            POSTING = "'",
                                            NCUST = "",
                                            TGLINPUT = DateTime.Now,
                                            TBAYAR = 0,
                                            TPOT = 0,
                                            TGL = Convert.ToDateTime(tgl),
                                            CUST = cust_id,
                                            //add logfile u/ save log name and count record process
                                            log_file = ret.buktiLog
                                        };

                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                                        art03a.BUKTI = noOrder;
                                        ret.nobuk = noOrder;

                                        ret.TBAYAR = art03a.TBAYAR;
                                        ret.TPOT = art03a.TPOT;
                                        ret.TLEBIHBAYAR = Convert.ToDouble(art03a.TLEBIH_BAYAR);

                                        var cekAdaErr = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == noOrder).Select(a => a.LOG_FILE).ToList();
                                        if (cekAdaErr.Count() > 0)
                                        {
                                            var string_log = "";
                                            foreach (var log1 in cekAdaErr)
                                            {
                                                if (string_log != "")
                                                {
                                                    string_log += ",";
                                                }

                                                string_log += "'" + log1 + "'";
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TABLE_LOG_DETAIL where VARIABLE_1 ='" + noOrder + "' and LOG_FILE in (" + string_log + ")");
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from LOG_IMPORT_FAKTUR where LAST_FAKTUR_UPLOADED ='" + noOrder + "'");
                                        }
                                        var cekAdaTemp = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.FirstOrDefault();
                                        if (cekAdaTemp != null)
                                        {
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TEMP_UPLOAD_EXCEL_BAYAR");
                                        }

                                        try
                                        {
                                            eraDB.ART03A.Add(art03a);
                                            eraDB.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                            if (tempSI != null)
                                            {
                                                if (tempSI.BUKTI == noOrder)
                                                {
                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                    lastBuktiNew++;
                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                    art03a.BUKTI = noOrder;
                                                    eraDB.ART03A.Add(art03a);
                                                    eraDB.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = errMsg,
                                                    TEXT_2 = "",
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                                ret.TidakLanjutProses = true;
                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                        ErasoftDbContext.Database.ExecuteSqlCommand("update LOG_IMPORT_FAKTUR set LAST_FAKTUR_UPLOADED = '" + art03a.BUKTI + "' where CUST ='" + cust_id + "' and LOG_FILE ='" + ret.buktiLog + "'");

                                        var detail1 = recordsLazada.GroupBy(a => a.OrderNo)
                                                        .Select(f => new TEMP_UPLOAD_EXCEL_BAYAR
                                                        {
                                                            NAMA_FILE = ret.TipeData,
                                                            CUST = cust_id,
                                                            MARKETPLACE = "LAZADA",
                                                            NOREF = f.FirstOrDefault().OrderNo.Trim(),
                                                            TGL = f.FirstOrDefault().TransactionDate,
                                                            BAYAR = (f.Where(b => b.FeeName.Contains("Item Price Credit")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Lost Claim")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Shipping Fee Voucher")).Sum(b => Convert.ToDouble(b.Amount))),
                                                            POTONGAN = (f.Where(b => b.FeeName.Contains("Payment Fee")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Promotional Charges Vouchers")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Return Shipping Fees")).Sum(b => Convert.ToDouble(b.Amount))),
                                                            NILAI_REF = ((f.Where(b => b.FeeName.Contains("Item Price Credit")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Lost Claim")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Shipping Fee Voucher")).Sum(b => Convert.ToDouble(b.Amount))) - (f.Where(b => b.FeeName.Contains("Payment Fee")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Promotional Charges Vouchers")).Sum(b => Convert.ToDouble(b.Amount)) + f.Where(b => b.FeeName.Contains("Return Shipping Fees")).Sum(b => Convert.ToDouble(b.Amount)))),
                                                            NILAI_LAIN = 0,
                                                            KET = noOrder,
                                                            SUDAH_INPUT = false,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        });
                                        ErasoftDbContext.Database.ExecuteSqlCommand("update ART03A set LOG_FILE = '" + ret.buktiLog + ";" + detail1.Count().ToString() + "' where BUKTI ='" + ret.nobuk + "' and LOG_FILE ='" + ret.buktiLog + "'");

                                        //        ret.TidakLanjutProses = false;
                                        //        ret.statusLoopTemp = true;
                                        //        ret.statusLoop = true;
                                        //        ret.countAllTemp = detail1.Count();
                                        //        ret.list_Detail_ret = detail1.ToList();
                                        //        var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                                        //        serializer.MaxJsonLength = Int32.MaxValue;
                                        //        var result = new ContentResult
                                        //        {
                                        //            Content = serializer.Serialize(ret),
                                        //            ContentType = "application/json"
                                        //        };

                                        //        //return Json(result, JsonRequestBehavior.AllowGet);
                                        //        return result;
                                        //    }
                                        //}
                                        //if (listDetail.Count > 0 && ret.statusSuccessTemp == false)
                                        //{
                                        foreach (var bayar in detail1)
                                        {
                                            TEMP_UPLOAD_EXCEL_BAYAR rec = new TEMP_UPLOAD_EXCEL_BAYAR()
                                            {
                                                NAMA_FILE = bayar.NAMA_FILE,
                                                CUST = bayar.CUST,
                                                MARKETPLACE = bayar.MARKETPLACE,
                                                NOREF = bayar.NOREF,
                                                TGL = bayar.TGL,
                                                BAYAR = bayar.BAYAR,
                                                POTONGAN = bayar.POTONGAN,
                                                NILAI_REF = bayar.NILAI_REF,
                                                NILAI_LAIN = bayar.NILAI_LAIN,
                                                TGL_INPUT = bayar.TGL_INPUT,
                                                SUDAH_INPUT = bayar.SUDAH_INPUT,
                                                USERNAME = bayar.USERNAME,
                                                KET = bayar.KET
                                            };
                                            ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Add(rec);
                                            ErasoftDbContext.SaveChanges();
                                        }

                                        list_ref = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Where(a => a.KET == ret.nobuk && a.NAMA_FILE == ret.TipeData && a.CUST == cust_id).Select(A => A.NOREF).ToList();
                                        if (list_ref.Count() > 0)
                                        {
                                            var string_ref = "";
                                            foreach (var ref1 in list_ref)
                                            {
                                                if (string_ref != "")
                                                {
                                                    string_ref += ",";
                                                }
                                                string_ref += "'" + ref1 + "'";
                                            }

                                            string ssql1 = "UPDATE A SET A.NILAI_LAIN = isnull(B.SISA,0), A.KET2 = B.NO_BUKTI + ';' + CONVERT(NVARCHAR, B.NETTO) + ';' + B.DATABAYAR + ';' + B.BUKTI_BAYAR + ';' + CONVERT(NVARCHAR,B.TGLREF_BAYAR) + ';' + CONVERT(NVARCHAR,B.TGL) ";
                                            ssql1 += "FROM TEMP_UPLOAD_EXCEL_BAYAR AS A LEFT JOIN ( ";
                                            ssql1 += "select a.no_bukti, a.no_ref, a.netto, isnull((isnull(b.NETTO,0) - isnull(b.BAYAR,0) - isnull(b.KREDIT,0) + isnull(b.DEBET,0)),0) sisa, ISNULL(CASE WHEN CONVERT(DATE, D.TGL) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), D.TGL, 103) END, '') AS TGL ";
                                            ssql1 += ",(case when isnull(c.BUKTI,'') <> '' then 'SUDAH ADA' ELSE 'TIDAK ADA' END) DATABAYAR,ISNULL(C.BUKTI,'')BUKTI_BAYAR, ISNULL(CASE WHEN CONVERT(DATE, C.TGL_REF) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), C.TGL_REF, 103) END, '') AS TGLREF_BAYAR ";
                                            ssql1 += "from sit01a a left join art01d b on a.no_bukti = b.faktur LEFT JOIN ART03B C ON A.NO_BUKTI=C.NFAKTUR LEFT JOIN SOT01A D ON A.NO_SO=D.NO_BUKTI WHERE a.CUST= '" + cust_id + "' and a.no_ref in (" + string_ref + ")) ";
                                            ssql1 += "AS B ON A.NOREF = B.no_ref ";
                                            ssql1 += "WHERE A.CUST = '" + cust_id + "' AND A.KET = '" + ret.nobuk + "' and A.NOREF in (" + string_ref + ") ";
                                            ErasoftDbContext.Database.ExecuteSqlCommand(ssql1);
                                        }


                                        //var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                        //data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());

                                        //data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        //ret.countAll = data_proses_lanjut.Count();
                                        //if (data_proses_lanjut.Count() > 0)
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                                        //    ErasoftDbContext.ART03A.Remove(piutangInDb);
                                        //    ErasoftDbContext.SaveChanges();
                                        //    ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                                        //    ret.adaError = true;

                                        //    TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                                        //    {
                                        //        LOG_FILE = ret.buktiLog,
                                        //        VARIABLE_1 = ret.nobuk,
                                        //        VARIABLE_2 = ret.TipeData,
                                        //        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                                        //        TEXT_2 = "",
                                        //        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //        USERNAME = uname
                                        //    };
                                        //    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                                        //    ErasoftDbContext.SaveChanges();

                                        //    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                                        //    if (cekErr > 0)
                                        //    {
                                        //        ret.adaError = true;
                                        //    }
                                        //    ret.TidakLanjutProses = true;
                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                        //}
                                        //ret.TidakLanjutProses = false;
                                        //ret.statusLoop = true;
                                        //return Json(ret, JsonRequestBehavior.AllowGet);
                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        //ret.percentDownload = 10;
                                        ret.statusLoop = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                

                                if (ret.statusLoopDownload == true && ret.statusSuccessDownload == false && ret.selesaiProsesDownload == false)
                                {
                                    var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                    data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());
                                    ret.countAllDownload = data_proses.Count();
                                    progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - 1);
                                    if (Convert.ToInt32(progDownload[1]) == 0)
                                    {
                                        progDownload[1] = "0";
                                    }

                                    if (data_proses.Count() > 0)
                                    {
                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        var tempPercent = Convert.ToInt32(progDownload[0]);
                                        //var cekPer20 = (ret.countAllDownload / 10);
                                        var cekPer10 = (ret.countAllDownload / 4);
                                        var temp40 = Convert.ToInt32(progDownload[1]) + 1000;
                                        data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        ret.countAll = data_proses_lanjut.Count();

                                        var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();

                                        if (data_proses_lanjut.Count() > 0 && data_proses_lanjut.Count() == data_proses.Count())
                                        {
                                            ret.selesaiProsesDownload = true;
                                            ret.statusSuccessDownload = true;
                                            ret.percentDownload = 100;
                                            ret.progressDownload = data_proses.Count();
                                            ret.statusLoopDownload = false;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(progDownload[1]) > 0)
                                            {
                                                progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - data_proses_lanjut.Count());
                                            }
                                            var hitungTotal = cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count();
                                            for (int i = Convert.ToInt32(progDownload[1]); i < (cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count()); i++)
                                            {
                                                var countProcess = data_proses_lanjut.Count() + i;
                                                ret.TidakLanjutProses = false;
                                                ret.statusLoopDownload = true;
                                                ret.progressDownload = countProcess + 1;
                                                ret.percentDownload = ((countProcess + 1) * 100) / ret.countAllDownload;
                                                var a = cekSudahAda.Count();
                                                var b = cekListSIKosong.Count();
                                                var c = cekLunas.Count();
                                                var cek1 = cekListSIKosong.Count() - (i);
                                                int cek2 = Convert.ToInt32(a - (i - b));
                                                var cek3 = Convert.ToInt32(c - (i - (a + b)));
                                                if (cekListSIKosong.Count() - (i) > 0)
                                                {
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekListSIKosong[i] + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = cekListSIKosong[i],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek2 > 0)
                                                {
                                                    var indexAda = (i) - cekListSIKosong.Count();
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekSudahAda[indexAda] + " sudah proses bayar",
                                                            TEXT_2 = cekSudahAda[indexAda],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek3 > 0)
                                                {
                                                    var indexLunas = (i) - (cekListSIKosong.Count() + cekSudahAda.Count());
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekLunas[indexLunas] + " sudah lunas.<br />",
                                                            TEXT_2 = cekLunas[indexLunas],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }

                                                if (cekPer10 > 1000)
                                                {
                                                    if ((ret.progressDownload == temp40) || ret.percentDownload == 100)
                                                    {
                                                        ret.statusSuccessDownload = false;
                                                        if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                        {
                                                            ret.statusSuccessDownload = true;
                                                            ret.selesaiProsesDownload = true;
                                                            ret.statusLoopDownload = false;
                                                        }
                                                        if (tempPercent != ret.percentDownload)
                                                        {
                                                            if (ret.statusSuccessDownload == false)
                                                            {
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (ret.percentDownload == 25 ||
                                                ret.percentDownload == 50 ||
                                                ret.percentDownload == 75 ||
                                                ret.percentDownload == 100)
                                                {
                                                    ret.statusSuccessDownload = false;
                                                    if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                    {
                                                        ret.statusSuccessDownload = true;
                                                        ret.selesaiProsesDownload = true;
                                                        ret.statusLoopDownload = false;
                                                    }
                                                    if (tempPercent != ret.percentDownload)
                                                    {
                                                        if (ret.statusSuccessDownload == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ret.TidakLanjutProses = false;
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                                #endregion
                                if (ret.statusLoop == true)
                                {
                                    var ssql3 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "' and NILAI_LAIN <> 0 and KET2 like '%TIDAK ADA%'";
                                    data_proses_lanjut.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql3).ToList());
                                    ret.countAll = data_proses_lanjut.Count();
                                    prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                                }

                                if (Convert.ToInt32(prog[1]) == 0)
                                {
                                    prog[1] = "0";
                                }

                                #region detail
                                //loop all rows

                                if (data_proses_lanjut.Count > 0)
                                {
                                    var tempPercent = Convert.ToInt32(prog[0]);
                                    var cekPer10 = (ret.countAll / 10);
                                    var temp40 = Convert.ToInt32(prog[1]) + 100;
                                    for (int i = Convert.ToInt32(prog[1]); i < data_proses_lanjut.Count(); i++)
                                    {
                                        ret.statusLoop = true;
                                        ret.progress = i + 1;
                                        ret.percent = ((i + 1) * 100) / ret.countAll;
                                        var getData = data_proses_lanjut[i];
                                        if (getData != null)
                                        {
                                            var current_ref = getData.NOREF;
                                            if (getData.KET2 != null && getData.KET2.Contains(";"))
                                            {
                                                var splitKet = getData.KET2.Split(';');
                                                var ketSI = splitKet[0];
                                                var ketNetto = Convert.ToDouble(splitKet[1]);
                                                var ketDATABAYAR = splitKet[2];
                                                var ketBUKTI_BAYAR = splitKet[3];
                                                var ketTGLREF_BAYAR = splitKet[4];
                                                var ketTGLSO = splitKet[5];
                                                var ketSisa = getData.NILAI_LAIN;

                                                if (!string.IsNullOrEmpty(current_ref))
                                                {
                                                    var noref = current_ref;
                                                    var so = "";
                                                    double nettoSI = 0;

                                                    if (ketSI != "")
                                                    {
                                                        so = ketSI;
                                                        nettoSI = ketNetto;
                                                        var totalSisa = 0d;
                                                        var bayarpiutang = 0d;
                                                        totalSisa = ketSisa;
                                                        bayarpiutang = Convert.ToDouble(getData.NILAI_REF);
                                                        if (totalSisa != 0 && ketDATABAYAR == "TIDAK ADA")
                                                        {
                                                            var art03b = new ART03B
                                                            {
                                                                USERNAME = "UPLOAD_LAZADA",
                                                                POT = 0,
                                                                LEBIH_BAYAR = 0,
                                                                BUKTI = ret.nobuk,
                                                            };

                                                            if (!string.IsNullOrEmpty(Convert.ToString(noref)))
                                                            {
                                                                art03b.NOREF = noref;
                                                            }
                                                            else
                                                            {
                                                                art03b.NOREF = null;
                                                            }

                                                            art03b.NFAKTUR = ketSI;
                                                            art03b.SISA = ketNetto;

                                                            //change by nurul 22/4/2020
                                                            //art03b.TGL_REF = getData.TGL;
                                                            if (ketTGLSO != "" && ketTGLSO != null)
                                                            {
                                                                art03b.TGL_REF = Convert.ToDateTime(ketTGLSO);
                                                            }
                                                            //end change by nurul 22/4/2020

                                                            if (bayarpiutang > 0)
                                                            {
                                                                if (totalSisa >= bayarpiutang)
                                                                {
                                                                    art03b.BAYAR = bayarpiutang;
                                                                    //if (totalSisa - bayarpiutang > 0)
                                                                    //{
                                                                    //    art03b.POT = totalSisa - bayarpiutang;
                                                                    //}
                                                                }
                                                                else if (totalSisa < bayarpiutang)
                                                                {
                                                                    art03b.LEBIH_BAYAR = bayarpiutang - totalSisa;
                                                                    art03b.BAYAR = Convert.ToDouble(bayarpiutang - art03b.LEBIH_BAYAR);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                art03b.BAYAR = 0;
                                                            }

                                                            nilaiFaktur.Add(art03b.SISA);
                                                            nilaiRef.Add(art03b.BAYAR);
                                                            nilaiPot.Add(art03b.POT);
                                                            nilaiLebihBayar.Add(art03b.LEBIH_BAYAR);
                                                            ErasoftDbContext.ART03B.Add(art03b);
                                                            getData.SUDAH_INPUT = true;
                                                            try
                                                            {
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                                ret.adaError = true;
                                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                                {
                                                                    LOG_FILE = ret.buktiLog,
                                                                    VARIABLE_1 = ret.nobuk,
                                                                    VARIABLE_2 = ret.TipeData,
                                                                    TEXT_1 = errMsg,
                                                                    TEXT_2 = noref,
                                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                    USERNAME = uname
                                                                };
                                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                        }
                                                        else if (totalSisa != 0 && ketDATABAYAR == "SUDAH ADA")
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah proses bayar dengan No Bukti " + ketBUKTI_BAYAR + ".<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                        else
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah lunas.<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = noref,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else
                                                {
                                                    ret.adaError = true;
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                        TEXT_2 = current_ref,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                    TEXT_2 = current_ref,
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }

                                        if (cekPer10 > 100)
                                        {
                                            if ((ret.progress == temp40) || ret.percent == 100)
                                            {
                                                ret.statusSuccess = false;
                                                if (ret.percent > 99 && ret.percent <= 101)
                                                {
                                                    ret.statusSuccess = true;
                                                }
                                                if (tempPercent != ret.percent)
                                                {
                                                    if (nilaiRef.Count() > 0)
                                                    {
                                                        ret.TBAYAR = 0;
                                                        for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                        {

                                                            ret.TBAYAR += nilaiRef[ab];
                                                        }
                                                    }
                                                    if (nilaiPot.Count() > 0)
                                                    {
                                                        ret.TPOT = 0;
                                                        for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                        {

                                                            ret.TPOT += nilaiPot[ab];
                                                        }
                                                    }
                                                    if (nilaiLebihBayar.Count() > 0)
                                                    {
                                                        ret.TLEBIHBAYAR = 0;
                                                        for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                        {

                                                            ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                        }
                                                    }
                                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                    {
                                                        try
                                                        {
                                                            ErasoftDbContext.ART03B.AddRange(list_detail);
                                                            var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                            getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                            getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                            if (getheader.TLEBIH_BAYAR == null)
                                                            {
                                                                getheader.TLEBIH_BAYAR = 0;
                                                            }
                                                            getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                            ErasoftDbContext.SaveChanges();
                                                            transaction.Commit();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //transaction.Rollback();
                                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = errMsg,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                            ret.TidakLanjutProses = true;
                                                        }
                                                        if (ret.statusSuccess == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (ret.percent == 10 || ret.percent == 20 ||
                                        ret.percent == 30 || ret.percent == 40 ||
                                        ret.percent == 50 || ret.percent == 60 ||
                                        ret.percent == 70 || ret.percent == 80 ||
                                        ret.percent == 90 || ret.percent == 100)
                                        {
                                            ret.statusSuccess = false;
                                            if (ret.percent > 99 && ret.percent <= 101)
                                            {
                                                ret.statusSuccess = true;
                                            }
                                            if (tempPercent != ret.percent)
                                            {
                                                if (nilaiRef.Count() > 0)
                                                {
                                                    ret.TBAYAR = 0;
                                                    for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                    {

                                                        ret.TBAYAR += nilaiRef[ab];
                                                    }
                                                }
                                                if (nilaiPot.Count() > 0)
                                                {
                                                    ret.TPOT = 0;
                                                    for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                    {

                                                        ret.TPOT += nilaiPot[ab];
                                                    }
                                                }
                                                if (nilaiLebihBayar.Count() > 0)
                                                {
                                                    ret.TLEBIHBAYAR = 0;
                                                    for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                    {

                                                        ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                    }
                                                }
                                                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                {
                                                    try
                                                    {
                                                        ErasoftDbContext.ART03B.AddRange(list_detail);
                                                        var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                        getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                        getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                        if (getheader.TLEBIH_BAYAR == null)
                                                        {
                                                            getheader.TLEBIH_BAYAR = 0;
                                                        }
                                                        getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //transaction.Rollback();
                                                        var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = errMsg,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                        ret.TidakLanjutProses = true;
                                                    }
                                                    if (ret.statusSuccess == false)
                                                    {
                                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                            }
                            else
                            {
                                ret.adaError = true;
                                ret.Errors.Add("Faktur dari marketplace tidak ditemukan.<br />");
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "Faktur dari marketplace tidak ditemukan.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            ret.Errors.Add("Akun marketplace tidak ditemukan.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "Akun marketplace tidak ditemukan.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                {
                    LOG_FILE = ret.buktiLog,
                    VARIABLE_1 = ret.nobuk,
                    VARIABLE_2 = ret.TipeData,
                    TEXT_1 = ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />",
                    TEXT_2 = "",
                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                    USERNAME = uname
                };
                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                ErasoftDbContext.SaveChanges();

                if (ret.nobuk != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                        vm.adaError = ret.adaError;
                        vm.ret = ret;
                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                        //ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        ret.adaError = true;

                        TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                        {
                            LOG_FILE = ret.buktiLog,
                            VARIABLE_1 = ret.nobuk,
                            VARIABLE_2 = ret.TipeData,
                            TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                            TEXT_2 = "",
                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                            USERNAME = uname
                        };
                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                        ErasoftDbContext.SaveChanges();

                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                var getOngkir1 = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
                vm.ListOngkir = getOngkir1;
                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();


            if (ret.nobuk != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                    vm.ret = ret;
                    vm.adaError = ret.adaError;
                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_1 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                    //ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                    ret.TidakLanjutProses = true;
                    ErasoftDbContext.SaveChanges();
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    ret.adaError = true;

                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                    {
                        LOG_FILE = ret.buktiLog,
                        VARIABLE_1 = ret.nobuk,
                        VARIABLE_2 = ret.TipeData,
                        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                        TEXT_2 = "",
                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                        USERNAME = uname
                    };
                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                    ErasoftDbContext.SaveChanges();

                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }

            var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
            vm.ListOngkir = getOngkir;
            return PartialView("DetailBayarPiutangPartial", vm);
        }


        //public ActionResult ShowErrorUploadBayar(string[] listError)
        public ActionResult ShowErrorUploadBayar(string bukti, string logErr)
        {
            var vm = new errorBayarPiutang()
            {
                totalData = 0,
                totalSuccess = 0
            };
            if (bukti != null && bukti != "")
            {
                if (logErr != null)
                {
                    var splitLog = logErr.Split(';');
                    if (splitLog.Count() > 1)
                    {
                        vm.totalData = Convert.ToDouble(splitLog.Last());
                    }
                    else
                    {
                        var cekTempBayar = ErasoftDbContext.Database.SqlQuery<int>("select convert(int,right(LOG_FILE, charindex(';', reverse(LOG_FILE)) - 1)) from ART03A where LOG_FILE LIKE '%" + logErr + "%'").FirstOrDefault();
                        vm.totalData = cekTempBayar;
                    }
                    var logfile = splitLog[0];
                    vm.totalSuccess = ErasoftDbContext.Database.SqlQuery<int>("select count(no) from art03b where bukti='" + bukti + "'").FirstOrDefault();
                    vm.header = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == bukti && a.LOG_FILE == logfile).OrderByDescending(a => a.RECNUM).FirstOrDefault();
                    vm.detail = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.LOG_FILE == vm.header.LOG_FILE && a.VARIABLE_1 == bukti && a.LOG_FILE == logfile).ToList();
                }
                else
                {
                    vm.header = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == bukti).OrderByDescending(a => a.RECNUM).FirstOrDefault();
                    vm.detail = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.LOG_FILE == vm.header.LOG_FILE && a.VARIABLE_1 == bukti).ToList();
                }
            }
            else if (logErr != null && logErr != "")
            {
                var splitLog = logErr.Split(';');
                if (splitLog.Count() > 1)
                {
                    vm.totalData = Convert.ToDouble(splitLog.Last());
                }
                else
                {
                    var cekTempBayar = ErasoftDbContext.Database.SqlQuery<int>("select convert(int,right(LOG_FILE, charindex(';', reverse(LOG_FILE)) - 1)) from ART03A where LOG_FILE LIKE '%" + logErr + "%'").FirstOrDefault();
                    vm.totalData = cekTempBayar;
                }
                var logfile = splitLog[0];
                vm.totalSuccess = ErasoftDbContext.Database.SqlQuery<int>("select count(no) from art03b where bukti='" + bukti + "'").FirstOrDefault();
                vm.header = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LOG_FILE == logfile).OrderByDescending(a => a.RECNUM).FirstOrDefault();
                vm.detail = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.LOG_FILE == vm.header.LOG_FILE && a.LOG_FILE == logfile).ToList();
            }
            return PartialView("ListErrorPembayaranPiutang", vm);
        }
        //end add by nurul 11/11/2019, upload pembayaran lazada 

        public ActionResult UploadXcelBayarTokped()
        {
            BindUploadExcel ret = new BindUploadExcel();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };

            try
            {

                var mp = MoDbContext.Marketplaces.ToList();
                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    var file = Request.Files[file_index];
                    if (file != null && file.ContentLength > 0)
                    {
                        var xxx = file.FileName;
                        var bx = xxx.Substring(xxx.LastIndexOf('.'));
                        byte[] data;
                        ret.lastRow.Add(0);
                        if (bx.ToLower() == ".xls")
                        {
                            using (Stream inputStream = file.InputStream)
                            {
                                Workbook workbook = new Workbook();
                                workbook.LoadFromStream(inputStream);
                                MemoryStream memoryStream = new MemoryStream();
                                workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                data = memoryStream.ToArray();
                            }
                        }
                        else if (bx.ToLower() == ".xlsx")
                        {
                            using (Stream inputStream = file.InputStream)
                            {
                                MemoryStream memoryStream = inputStream as MemoryStream;
                                if (memoryStream == null)
                                {
                                    memoryStream = new MemoryStream();
                                    inputStream.CopyTo(memoryStream);
                                }
                                data = memoryStream.ToArray();
                            }
                        }
                        else
                        {
                            ret.Errors.Add("File " + file.FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.");
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }

                        using (MemoryStream stream = new MemoryStream(data))
                        {
                            using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                            {
                                using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                                {

                                    eraDB.Database.CommandTimeout = 180;
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    //string cust = worksheet.Cells[1, 1].Value == null ? "" : worksheet.Cells[1, 1].Value.ToString();
                                    string cekCol2 = worksheet.Cells[1, 2].Value == null ? "" : worksheet.Cells[1, 2].Value.ToString();
                                    if (!string.IsNullOrEmpty(cekCol2))
                                    {
                                        if (cekCol2 == "Description")
                                        {
                                            var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                                            if (customer != null)
                                            {
                                                List<double> nilaiFaktur = new List<double>();
                                                List<double> nilaiRef = new List<double>();
                                                List<double> nilaiPot = new List<double>();
                                                string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;


                                                var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                                                if (listTemp > 0)
                                                {
                                                    //var tempDetail = new mdlTempBayarTokped() { };
                                                    List<mdlTempBayarTokped> tempDetail = new List<mdlTempBayarTokped>();
                                                    for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                                    {
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 2].Value).Split(' ').First() == "Transaksi" || Convert.ToString(worksheet.Cells[i, 2].Value).Split(' ').First() == "Pemotongan")
                                                            {
                                                                var tempData = new mdlTempBayarTokped() { };
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 1].Value)))
                                                                {
                                                                    tempData.TGL = Convert.ToDateTime(worksheet.Cells[i, 1].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                                {
                                                                    var tempDesc = Convert.ToString(worksheet.Cells[i, 2].Value).Split('-');
                                                                    tempData.KETERANGAN = tempDesc[0];
                                                                    tempData.REF = tempDesc[1].Substring(1);

                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 3].Value)))
                                                                {
                                                                    tempData.NILAI = Convert.ToDouble(worksheet.Cells[i, 3].Value);
                                                                }
                                                                tempDetail.Add(tempData);
                                                            }
                                                        }
                                                    }
                                                    if (ret.lastRow[file_index] == 0)
                                                        ret.lastRow[file_index] = worksheet.Dimension.End.Row;
                                                    if (tempDetail.Count() != 0)
                                                    {
                                                        #region create induk
                                                        var art03a = new ART03A
                                                        {
                                                            KET = "-",
                                                            USERNAME = "UPLOAD_TOKOPEDIA",
                                                            TUKAR = 1,
                                                            MUKA1 = 0,
                                                            MUKA2 = 0,
                                                            KONTAN = 0,
                                                            VLT = "IDR",
                                                            TOTAL_KREDIT_GL = 0,
                                                            TOTAL_DEBET_GL = 0,
                                                            POSTING = "'",
                                                            NCUST = "",
                                                            TGLINPUT = DateTime.Now,
                                                            TBAYAR = 0,
                                                            TPOT = 0,
                                                            TGL = Convert.ToDateTime(tgl),
                                                            CUST = cust_id
                                                        };

                                                        //change by nurul 23/12/2019, perbaikan no bukti
                                                        //var listBayarPiutangInDb = eraDB.ART03A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                                                        //var digitAkhir = "";
                                                        //var noOrder = "";

                                                        //if (listBayarPiutangInDb == null)
                                                        //{
                                                        //    digitAkhir = "000001";
                                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                                        //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ART03A, RESEED, 0)");
                                                        //}
                                                        //else
                                                        //{
                                                        //    var lastRecNum = listBayarPiutangInDb.RecNum;
                                                        //    lastRecNum++;

                                                        //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                                        //}
                                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                                                        //end change by nurul 23/12/2019, perbaikan no bukti

                                                        art03a.BUKTI = noOrder;
                                                        bukti = noOrder;

                                                        //change by nurul 23/12/2019, perbaikan no_bukti
                                                        //eraDB.ART03A.Add(art03a);
                                                        //try
                                                        //{
                                                        //    //save header
                                                        //    eraDB.SaveChanges();
                                                        //}
                                                        //catch (Exception ex)
                                                        //{
                                                        //    var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                        //    ret.Errors.Add(errMsg);
                                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                                        //}
                                                        try
                                                        {
                                                            eraDB.ART03A.Add(art03a);
                                                            eraDB.SaveChanges();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                                            if (tempSI != null)
                                                            {
                                                                if (tempSI.BUKTI == noOrder)
                                                                {
                                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                                    lastBuktiNew++;
                                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                                    art03a.BUKTI = noOrder;
                                                                    eraDB.ART03A.Add(art03a);
                                                                    eraDB.SaveChanges();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                                ret.Errors.Add(errMsg);
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                        //end change by nurul 23/12/2019, perbaikan no bukti
                                                        #endregion

                                                        #region detail
                                                        var detail = tempDetail.GroupBy(a => a.REF)
                                                                        .Select(f => new
                                                                        {
                                                                            Tanggal = f.FirstOrDefault().TGL,
                                                                            Nobuk = f.FirstOrDefault().REF,
                                                                            Potongan = f.Where(b => b.KETERANGAN.Contains("Pemotongan")).Sum(b => b.NILAI),
                                                                            Bayar = f.Where(b => b.KETERANGAN.Contains("Transaksi")).Sum(b => b.NILAI),
                                                                            NRef = (f.Where(b => b.KETERANGAN.Contains("Transaksi")).Sum(b => b.NILAI) - f.Where(b => b.KETERANGAN.Contains("Pemotongan")).Sum(b => b.NILAI))
                                                                        });
                                                        foreach (var bayar in detail)
                                                        {
                                                            var noref = bayar.Nobuk;
                                                            if (!string.IsNullOrEmpty(noref))
                                                            {

                                                                var cekfaktur = eraDB.SIT01A.Where(a => a.NO_REF == noref && a.CUST == cust_id).SingleOrDefault();
                                                                var cekPesanan = eraDB.SOT01A.Where(a => a.NO_REFERENSI == noref && a.CUST == cust_id).SingleOrDefault();
                                                                var so = "";
                                                                double nettoSI = 0;

                                                                if (cekPesanan != null)
                                                                {
                                                                    var cekSIPesanan = eraDB.SIT01A.Where(a => a.NO_SO == cekPesanan.NO_BUKTI && a.CUST == cust_id).SingleOrDefault();
                                                                    if (cekSIPesanan != null)
                                                                    {
                                                                        so = cekSIPesanan.NO_BUKTI;
                                                                        nettoSI = cekSIPesanan.NETTO.Value;
                                                                    }
                                                                }
                                                                if (cekfaktur != null || so != "")
                                                                {
                                                                    var totalSisa = 0d;
                                                                    var bayarpiutang = 0d;
                                                                    var adaBayar = false;
                                                                    if (cekfaktur != null)
                                                                    {
                                                                        var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                                        if (getBayar.Count() > 0)
                                                                        {
                                                                            totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                                    .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                                        }
                                                                        adaBayar = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                                        if (getBayar.Count() > 0)
                                                                        {
                                                                            totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                                        .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                                        }
                                                                        adaBayar = true;
                                                                    }
                                                                    if (!string.IsNullOrEmpty(Convert.ToString(bayar.Bayar)))
                                                                    {
                                                                        //bayarpiutang = bayar.Bayar;
                                                                        bayarpiutang = bayar.NRef;
                                                                    }

                                                                    if (adaBayar == false || (adaBayar == true && totalSisa >= bayarpiutang))
                                                                    {
                                                                        var art03b = new ART03B
                                                                        {
                                                                            USERNAME = "UPLOAD_TOKOPEDIA",
                                                                            POT = 0,
                                                                            BUKTI = art03a.BUKTI,
                                                                        };

                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.Nobuk)))
                                                                        {
                                                                            art03b.NOREF = noref;
                                                                        }
                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.Tanggal)))
                                                                        {
                                                                            art03b.TGL_REF = bayar.Tanggal;
                                                                        }

                                                                        if (cekfaktur != null)
                                                                        {
                                                                            art03b.NFAKTUR = cekfaktur.NO_BUKTI;
                                                                            //art03b.SISA = cekfaktur.NETTO.Value;
                                                                            art03b.SISA = totalSisa;
                                                                        }
                                                                        else if (so != null)
                                                                        {
                                                                            art03b.NFAKTUR = so;
                                                                            //art03b.SISA = nettoSI;
                                                                            art03b.SISA = totalSisa;
                                                                        }

                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.NRef)))
                                                                        {
                                                                            art03b.BAYAR = bayar.NRef;
                                                                        }
                                                                        //change by nurul 26/11/2019, req pak dani & pak richard, yg d input jumlah uang yg diterima aja, tanpa potongan 
                                                                        //if (!string.IsNullOrEmpty(Convert.ToString(bayar.Potongan)))
                                                                        //{
                                                                        //    art03b.POT = bayar.Potongan;
                                                                        //}

                                                                        nilaiFaktur.Add(art03b.SISA);
                                                                        nilaiRef.Add(art03b.BAYAR);
                                                                        nilaiPot.Add(art03b.POT);
                                                                        eraDB.ART03B.Add(art03b);
                                                                        try
                                                                        {
                                                                            eraDB.SaveChanges();
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                                            ret.Errors.Add(errMsg);
                                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //ret.Errors.Add("Faktur dengan No. Ref " + noref + " sudah lunas." + System.Environment.NewLine);
                                                                        ret.Errors.Add("Faktur dengan No. Ref " + noref + " sudah lunas.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //ret.Errors.Add("Faktur dengan No. Ref " + noref + " tidak ditemukan." + System.Environment.NewLine);
                                                                    ret.Errors.Add("Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").");

                                                                }
                                                            }
                                                        }
                                                        #endregion

                                                        if (nilaiRef.Count() > 0)
                                                        {
                                                            for (int x = 0; x < nilaiRef.Count(); x++)
                                                            {
                                                                art03a.TBAYAR += nilaiRef[x];
                                                            }
                                                        }
                                                        if (nilaiPot.Count() > 0)
                                                        {
                                                            for (int x = 0; x < nilaiPot.Count(); x++)
                                                            {
                                                                art03a.TPOT += nilaiPot[x];
                                                            }
                                                        }
                                                        try
                                                        {
                                                            eraDB.SaveChanges();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //ret.Errors.Add("Faktur dari marketplace tidak ditemukan" + System.Environment.NewLine);
                                                    ret.Errors.Add("Faktur dari marketplace tidak ditemukan.");
                                                }
                                            }
                                            else
                                            {
                                                //ret.Errors.Add("File " + file.FileName + ": Akun marketplace tidak ditemukan" + System.Environment.NewLine);
                                                ret.Errors.Add("File " + file.FileName + ": Akun marketplace tidak ditemukan.");
                                            }
                                        }
                                        else
                                        {
                                            //ret.Errors.Add("File " + file.FileName + " bukan excel pembayaran Tokopedia." + System.Environment.NewLine);
                                            ret.Errors.Add("File " + file.FileName + " bukan excel pembayaran Tokopedia.");
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    else
                                    {
                                        ret.Errors.Add("File " + file.FileName + " bukan excel pembayaran Tokopedia.");
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception ex)
            {
                //ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + System.Environment.NewLine);
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message);

                if (bukti != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                        vm.Errors = ret.Errors;
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                        ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        vm.Errors = ret.Errors;
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();


            vm.Errors = ret.Errors;
            if (bukti != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                    vm.Errors = ret.Errors;
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                    ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.SaveChanges();
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    vm.Errors = ret.Errors;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }

            return PartialView("DetailBayarPiutangPartial", vm);
        }
        //end add by nurul 4/11/2019, upload pembayaran tokopedia 

        //end add by nurul 19/5/2020, upload pembayaran versi baru
        public ActionResult UploadXcelBayarTokped1(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess, string log, string percentDanprogressDownload, string statusLoopSuccessDownload, string filename)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };
            List<mdlTempBayarTokped> recordsTokped = new List<mdlTempBayarTokped>();
            List<int> recnum_record = new List<int>();

            byte[] data = null;
            byte[] dataByte = null;
            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');

            string[] statusDownload = statusLoopSuccessDownload.Split(';');
            string[] progDownload = percentDanprogressDownload.Split(';');

            ret.statusLoop = Convert.ToBoolean(status[0]);
            if (ret.statusLoop == false && ret.statusLoopDownload == false)
            {
                ret.buktiLog = "Log_Upload_Pembayaran_Tokopedia" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            }

            ret.statusLoopDownload = Convert.ToBoolean(statusDownload[0]);
            if (filename != null && filename != "")
            {
                ret.TipeData = filename;
            }

            try
            {
                var mp = MoDbContext.Marketplaces.ToList();
                ret.statusSuccess = Convert.ToBoolean(status[1]);
                ret.statusSuccessDownload = Convert.ToBoolean(statusDownload[1]);
                ret.sudahSimpanTemp = false;

                if (ret.byteData == null && ret.statusLoop == false)
                {
                    ret.adaError = false;
                    LOG_IMPORT_FAKTUR newLogImportPiutang = new LOG_IMPORT_FAKTUR
                    {
                        CUST = cust_id,
                        UPLOADER = uname,
                        LAST_FAKTUR_UPLOADED = "",
                        UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                        LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7),
                        LOG_FILE = ret.buktiLog,
                    };
                    ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportPiutang);
                    ErasoftDbContext.SaveChanges();

                    if (Request.Files[0] != null && Request.Files[0].ContentLength > 0)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        //dataByte = UploadFileServices.UploadFile(Request.Files[0]);
                        //ret.byteData = dataByte;

                        if (ret.TipeData.Split('.').Last().ToLower() == "xlsx" || ret.TipeData.Split('.').Last().ToLower() == "xls")
                        {
                            if (ret.TipeData.Split('.').Last().ToLower() == "xls")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    Workbook workbook = new Workbook();
                                    workbook.LoadFromStream(inputStream);
                                    MemoryStream memoryStream = new MemoryStream();
                                    workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                    data = memoryStream.ToArray();
                                }
                            }
                            else if (ret.TipeData.Split('.').Last().ToLower() == "xlsx")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;
                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }
                                    data = memoryStream.ToArray();
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />");
                                ret.adaError = true;
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                                ret.TidakLanjutProses = true;
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }
                            using (MemoryStream stream = new MemoryStream(data))
                            {
                                using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                                {
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    string cekCol2 = worksheet.Cells[1, 2].Value == null ? "" : worksheet.Cells[1, 2].Value.ToString();
                                    if (!string.IsNullOrEmpty(cekCol2))
                                    {
                                        if (cekCol2 == "Description")
                                        {

                                            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                            {
                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                {
                                                    //CHANGE BY NURUL 24/8/2020
                                                    //if (Convert.ToString(worksheet.Cells[i, 2].Value).Split(' ').First() == "Transaksi" || Convert.ToString(worksheet.Cells[i, 2].Value).Split(' ').First() == "Pemotongan")
                                                    //{
                                                    //    var tempData = new mdlTempBayarTokped() { };
                                                    //    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 1].Value)))
                                                    //    {
                                                    //        tempData.TGL = Convert.ToDateTime(worksheet.Cells[i, 1].Value);
                                                    //    }
                                                    //    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                    //    {
                                                    //        //var tempDesc = Convert.ToString(worksheet.Cells[i, 2].Value).Split('-');
                                                    //        var tempDesc = Convert.ToString(worksheet.Cells[i, 2].Value).Split(new string[] { "INV/" }, StringSplitOptions.None);
                                                    //        tempData.KETERANGAN = tempDesc[0];
                                                    //        //tempData.REF = tempDesc[1].Substring[1];
                                                    //        if (tempDesc[1].Contains(" "))
                                                    //        {
                                                    //            var getref = tempDesc[1].Split(' ');
                                                    //            tempData.REF = "INV/" + getref[0];
                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            tempData.REF = "INV/" + tempDesc[1];
                                                    //        }

                                                    //    }
                                                    //    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 3].Value)))
                                                    //    {
                                                    //        tempData.NILAI = Convert.ToDouble(worksheet.Cells[i, 3].Value);
                                                    //    }
                                                    //    recordsTokped.Add(tempData);
                                                    //    ret.sudahSimpanTemp = true;
                                                    //}

                                                    if (Convert.ToString(worksheet.Cells[i, 2].Value).Contains("INV/"))
                                                    {
                                                        var tempData = new mdlTempBayarTokped() { };
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 1].Value)))
                                                        {
                                                            tempData.TGL = Convert.ToDateTime(worksheet.Cells[i, 1].Value);
                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                        {
                                                            var tempDesc = Convert.ToString(worksheet.Cells[i, 2].Value).Split(new string[] { "INV/" }, StringSplitOptions.None);
                                                            var first = tempDesc[0].Split(' ').First();
                                                            if (first.Contains("Transaksi") || first.Contains("Pemotongan"))
                                                            {
                                                                tempData.KETERANGAN = tempDesc[0];
                                                            }
                                                            else
                                                            {
                                                                tempData.KETERANGAN = Convert.ToString(worksheet.Cells[i, 2].Value);
                                                            }
                                                            if (tempDesc[1].Contains(" "))
                                                            {
                                                                var getref = tempDesc[1].Split(' ');
                                                                tempData.REF = "INV/" + getref[0];
                                                            }
                                                            else
                                                            {
                                                                tempData.REF = "INV/" + tempDesc[1];
                                                            }

                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 3].Value)))
                                                        {
                                                            tempData.NILAI = Convert.ToDouble(worksheet.Cells[i, 3].Value);
                                                        }
                                                        recordsTokped.Add(tempData);
                                                        ret.sudahSimpanTemp = true;
                                                    }
                                                    //END CHANGE BY NURUL 24/8/2020
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File bukan data pembayaran Tokopedia.<br />");
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "File bukan data pembayaran Tokopedia.<br />",
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    else
                                    {
                                        ret.Errors.Add("File bukan data pembayaran Tokopedia.<br />");
                                        ret.adaError = true;
                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        {
                                            LOG_FILE = ret.buktiLog,
                                            VARIABLE_1 = ret.nobuk,
                                            VARIABLE_2 = ret.TipeData,
                                            TEXT_1 = "File bukan data pembayaran Tokopedia.<br />",
                                            TEXT_2 = "",
                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                            USERNAME = uname
                                        };
                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        ErasoftDbContext.SaveChanges();
                                        ret.TidakLanjutProses = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }

                                    if (recordsTokped.Count() <= 0)
                                    {
                                        ret.Errors.Add("File " + ret.TipeData + "  tidak ada data pembayaran.<br />");
                                        ret.adaError = true;
                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        {
                                            LOG_FILE = ret.buktiLog,
                                            VARIABLE_1 = ret.nobuk,
                                            VARIABLE_2 = ret.TipeData,
                                            TEXT_1 = "File " + ret.TipeData + "  tidak ada data pembayaran.<br />",
                                            TEXT_2 = "",
                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                            USERNAME = uname
                                        };
                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        ErasoftDbContext.SaveChanges();
                                        ret.TidakLanjutProses = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                            ret.TidakLanjutProses = true;
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                else
                {
                    ret.byteData = null;
                    ret.nobuk = nobuk;
                }


                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    if (ret.statusLoop == false)
                    {
                        ret.lastRow.Add(0);
                    }

                    if (ret.statusLoop == true)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        if (log != null)
                        {
                            ret.buktiLog = log;
                        }
                    }

                    using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                    {
                        eraDB.Database.CommandTimeout = 180;
                        var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                        if (customer != null)
                        {
                            List<double> nilaiFaktur = new List<double>();
                            List<double> nilaiRef = new List<double>();
                            List<double> nilaiPot = new List<double>();
                            List<double?> nilaiLebihBayar = new List<double?>();
                            string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;

                            var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                            if (listTemp > 0)
                            {
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses_lanjut = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<ART03B> list_detail = new List<ART03B>();
                                if (recordsTokped.Count() != 0)
                                {
                                    List<string> list_ref = new List<string>();
                                    #region create induk
                                    if (ret.statusLoop == false)
                                    {
                                        var art03a = new ART03A
                                        {
                                            KET = "-",
                                            USERNAME = "UPLOAD_TOKOPEDIA",
                                            TUKAR = 1,
                                            MUKA1 = 0,
                                            MUKA2 = 0,
                                            KONTAN = 0,
                                            VLT = "IDR",
                                            TOTAL_KREDIT_GL = 0,
                                            TOTAL_DEBET_GL = 0,
                                            POSTING = "'",
                                            NCUST = "",
                                            TGLINPUT = DateTime.Now,
                                            TBAYAR = 0,
                                            TPOT = 0,
                                            TGL = Convert.ToDateTime(tgl),
                                            CUST = cust_id,
                                            //add logfile u/ save log name and count record process
                                            log_file = ret.buktiLog
                                        };

                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                                        art03a.BUKTI = noOrder;
                                        ret.nobuk = noOrder;

                                        ret.TBAYAR = art03a.TBAYAR;
                                        ret.TPOT = art03a.TPOT;
                                        ret.TLEBIHBAYAR = Convert.ToDouble(art03a.TLEBIH_BAYAR);

                                        var cekAdaErr = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == noOrder).Select(a => a.LOG_FILE).ToList();
                                        if (cekAdaErr.Count() > 0)
                                        {
                                            var string_log = "";
                                            foreach (var log1 in cekAdaErr)
                                            {
                                                if (string_log != "")
                                                {
                                                    string_log += ",";
                                                }

                                                string_log += "'" + log1 + "'";
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TABLE_LOG_DETAIL where VARIABLE_1 ='" + noOrder + "' and LOG_FILE in (" + string_log + ")");
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from LOG_IMPORT_FAKTUR where LAST_FAKTUR_UPLOADED ='" + noOrder + "'");
                                        }
                                        var cekAdaTemp = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.FirstOrDefault();
                                        if (cekAdaTemp != null)
                                        {
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TEMP_UPLOAD_EXCEL_BAYAR");
                                        }

                                        try
                                        {
                                            eraDB.ART03A.Add(art03a);
                                            eraDB.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                            if (tempSI != null)
                                            {
                                                if (tempSI.BUKTI == noOrder)
                                                {
                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                    lastBuktiNew++;
                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                    art03a.BUKTI = noOrder;
                                                    eraDB.ART03A.Add(art03a);
                                                    eraDB.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = errMsg,
                                                    TEXT_2 = "",
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                                ret.TidakLanjutProses = true;
                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                        ErasoftDbContext.Database.ExecuteSqlCommand("update LOG_IMPORT_FAKTUR set LAST_FAKTUR_UPLOADED = '" + art03a.BUKTI + "' where CUST ='" + cust_id + "' and LOG_FILE ='" + ret.buktiLog + "'");

                                        var detail1 = recordsTokped.GroupBy(a => a.REF)
                                                        .Select(f => new TEMP_UPLOAD_EXCEL_BAYAR
                                                        {
                                                            NAMA_FILE = ret.TipeData,
                                                            CUST = cust_id,
                                                            MARKETPLACE = "TOKOPEDIA",
                                                            NOREF = f.FirstOrDefault().REF.Trim(),
                                                            TGL = f.FirstOrDefault().TGL,
                                                            BAYAR = f.Where(b => b.KETERANGAN.Contains("Transaksi")).Sum(b => b.NILAI),
                                                            POTONGAN = f.Where(b => b.KETERANGAN.Contains("Pemotongan")).Sum(b => b.NILAI),
                                                            NILAI_REF = (f.Where(b => b.KETERANGAN.Contains("Transaksi")).Sum(b => b.NILAI) - f.Where(b => b.KETERANGAN.Contains("Pemotongan")).Sum(b => b.NILAI)),
                                                            NILAI_LAIN = 0,
                                                            KET = noOrder,
                                                            SUDAH_INPUT = false,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        });

                                        //ADD BY NURUL 24/8/2020
                                        var cekDipotongKarnaResolusi = new List<string>();
                                        var cekKetTidakDiketahui = recordsTokped.Where(a => !a.KETERANGAN.Contains("Transaksi") && !a.KETERANGAN.Contains("Pemotongan")).ToList();
                                        if (cekKetTidakDiketahui.Count() > 0)
                                        {
                                            for (int i = 0; i < cekKetTidakDiketahui.Count(); i++)
                                            {
                                                if (cekKetTidakDiketahui[i].KETERANGAN.Contains("Dipotong karena Solusi dari Resolusi"))
                                                {
                                                    cekDipotongKarnaResolusi.Add(cekKetTidakDiketahui[i].REF);
                                                    var nilai = String.Format(CultureInfo.CreateSpecificCulture("id-id"), "Rp. {0:N}", cekKetTidakDiketahui[i].NILAI);
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Transaksi dengan No. Invoice " + cekKetTidakDiketahui[i].REF + " Dipotong karena Solusi dari Resolusi senilai " + nilai + ".<br />",
                                                        TEXT_2 = cekKetTidakDiketahui[i].REF,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                                else
                                                {
                                                    var nilai = String.Format(CultureInfo.CreateSpecificCulture("id-id"), "Rp. {0:N}", cekKetTidakDiketahui[i].NILAI);
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "Transaksi " + cekKetTidakDiketahui[i].KETERANGAN + " belum ada dalam perhitungan senilai " + nilai + ".<br />",
                                                        TEXT_2 = cekKetTidakDiketahui[i].REF,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                        }                                        
                                        //END ADD BY NURUL 24/8/2020

                                        ErasoftDbContext.Database.ExecuteSqlCommand("update ART03A set LOG_FILE = '" + ret.buktiLog + ";" + detail1.Count().ToString() + "' where BUKTI ='" + ret.nobuk + "' and LOG_FILE ='" + ret.buktiLog + "'");
                                        foreach (var bayar in detail1)
                                        {
                                            //ADD BY NURUL 24/8/2020
                                            if (!cekDipotongKarnaResolusi.Contains(bayar.NOREF))
                                            {
                                            //END ADD BY NURUL 24/8/2020
                                                TEMP_UPLOAD_EXCEL_BAYAR rec = new TEMP_UPLOAD_EXCEL_BAYAR()
                                                {
                                                    NAMA_FILE = bayar.NAMA_FILE,
                                                    CUST = bayar.CUST,
                                                    MARKETPLACE = bayar.MARKETPLACE,
                                                    NOREF = bayar.NOREF,
                                                    TGL = bayar.TGL,
                                                    BAYAR = bayar.BAYAR,
                                                    POTONGAN = bayar.POTONGAN,
                                                    NILAI_REF = bayar.NILAI_REF,
                                                    NILAI_LAIN = bayar.NILAI_LAIN,
                                                    TGL_INPUT = bayar.TGL_INPUT,
                                                    SUDAH_INPUT = bayar.SUDAH_INPUT,
                                                    USERNAME = bayar.USERNAME,
                                                    KET = bayar.KET
                                                };
                                                ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Add(rec);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }

                                        list_ref = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Where(a => a.KET == ret.nobuk && a.NAMA_FILE == ret.TipeData && a.CUST == cust_id).Select(A => A.NOREF).ToList();
                                        if (list_ref.Count() > 0)
                                        {
                                            var string_ref = "";
                                            foreach (var ref1 in list_ref)
                                            {
                                                if (string_ref != "")
                                                {
                                                    string_ref += ",";
                                                }
                                                string_ref += "'" + ref1 + "'";
                                            }

                                            string ssql1 = "UPDATE A SET A.NILAI_LAIN = isnull(B.SISA,0), A.KET2 = B.NO_BUKTI + '|' + CONVERT(NVARCHAR, B.NETTO) + '|' + B.DATABAYAR + '|' + B.BUKTI_BAYAR + '|' + CONVERT(NVARCHAR,B.TGLREF_BAYAR) + '|' + CONVERT(NVARCHAR,B.TGL) + '|' + b.noref_asli  ";
                                            ssql1 += "FROM TEMP_UPLOAD_EXCEL_BAYAR AS A LEFT JOIN ( ";
                                            ssql1 += "select a.no_bukti, substring(a.no_ref,11,30) as no_ref, a.no_ref as noref_asli, a.netto, isnull((isnull(b.NETTO,0) - isnull(b.BAYAR,0) - isnull(b.KREDIT,0) + isnull(b.DEBET,0)),0) sisa, ISNULL(CASE WHEN CONVERT(DATE, D.TGL) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), D.TGL, 103) END, '') AS TGL ";
                                            ssql1 += ",(case when isnull(c.BUKTI,'') <> '' then 'SUDAH ADA' ELSE 'TIDAK ADA' END) DATABAYAR,ISNULL(C.BUKTI,'')BUKTI_BAYAR, ISNULL(CASE WHEN CONVERT(DATE, C.TGL_REF) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), C.TGL_REF, 103) END, '') AS TGLREF_BAYAR ";
                                            ssql1 += "from sit01a a left join art01d b on a.no_bukti = b.faktur LEFT JOIN ART03B C ON A.NO_BUKTI=C.NFAKTUR LEFT JOIN SOT01A D ON A.NO_SO=D.NO_BUKTI WHERE a.CUST= '" + cust_id + "' and substring(a.no_ref,11,30) in (" + string_ref + ")) ";
                                            ssql1 += "AS B ON A.NOREF = B.no_ref ";
                                            ssql1 += "WHERE A.CUST = '" + cust_id + "' AND A.KET = '" + ret.nobuk + "' and A.NOREF in (" + string_ref + ") ";
                                            ErasoftDbContext.Database.ExecuteSqlCommand(ssql1);
                                        }


                                        //var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                        //data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());

                                        //data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        //ret.countAll = data_proses_lanjut.Count();
                                        //if (data_proses_lanjut.Count() > 0)
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                                        //    ErasoftDbContext.ART03A.Remove(piutangInDb);
                                        //    ErasoftDbContext.SaveChanges();
                                        //    ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                                        //    ret.adaError = true;

                                        //    TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                                        //    {
                                        //        LOG_FILE = ret.buktiLog,
                                        //        VARIABLE_1 = ret.nobuk,
                                        //        VARIABLE_2 = ret.TipeData,
                                        //        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                                        //        TEXT_2 = "",
                                        //        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //        USERNAME = uname
                                        //    };
                                        //    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                                        //    ErasoftDbContext.SaveChanges();

                                        //    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                                        //    if (cekErr > 0)
                                        //    {
                                        //        ret.adaError = true;
                                        //    }
                                        //    ret.TidakLanjutProses = true;
                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                        //}
                                        //ret.TidakLanjutProses = false;
                                        //ret.statusLoop = true;
                                        //return Json(ret, JsonRequestBehavior.AllowGet);

                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        //ret.percentDownload = 10;
                                        ret.statusLoop = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                

                                if (ret.statusLoopDownload == true && ret.statusSuccessDownload == false && ret.selesaiProsesDownload == false)
                                {
                                    var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                    data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());
                                    ret.countAllDownload = data_proses.Count();
                                    progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - 1);
                                    if (Convert.ToInt32(progDownload[1]) == 0)
                                    {
                                        progDownload[1] = "0";
                                    }

                                    if (data_proses.Count() > 0)
                                    {
                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        var tempPercent = Convert.ToInt32(progDownload[0]);
                                        //var cekPer20 = (ret.countAllDownload / 10);
                                        var cekPer10 = (ret.countAllDownload / 4);
                                        var temp40 = Convert.ToInt32(progDownload[1]) + 1000;
                                        data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        ret.countAll = data_proses_lanjut.Count();

                                        var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();

                                        if (data_proses_lanjut.Count() > 0 && data_proses_lanjut.Count() == data_proses.Count())
                                        {
                                            ret.selesaiProsesDownload = true;
                                            ret.statusSuccessDownload = true;
                                            ret.percentDownload = 100;
                                            ret.progressDownload = data_proses.Count();
                                            ret.statusLoopDownload = false;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(progDownload[1]) > 0)
                                            {
                                                progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - data_proses_lanjut.Count());
                                            }
                                            var hitungTotal = cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count();
                                            for (int i = Convert.ToInt32(progDownload[1]); i < (cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count()); i++)
                                            {
                                                var countProcess = data_proses_lanjut.Count() + i;
                                                ret.TidakLanjutProses = false;
                                                ret.statusLoopDownload = true;
                                                ret.progressDownload = countProcess + 1;
                                                ret.percentDownload = ((countProcess + 1) * 100) / ret.countAllDownload;
                                                var a = cekSudahAda.Count();
                                                var b = cekListSIKosong.Count();
                                                var c = cekLunas.Count();
                                                var cek1 = cekListSIKosong.Count() - (i);
                                                int cek2 = Convert.ToInt32(a - (i - b));
                                                var cek3 = Convert.ToInt32(c - (i - (a + b)));
                                                if (cekListSIKosong.Count() - (i) > 0)
                                                {
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekListSIKosong[i] + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = cekListSIKosong[i],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek2 > 0)
                                                {
                                                    var indexAda = (i) - cekListSIKosong.Count();
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekSudahAda[indexAda] + " sudah proses bayar",
                                                            TEXT_2 = cekSudahAda[indexAda],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek3 > 0)
                                                {
                                                    var indexLunas = (i) - (cekListSIKosong.Count() + cekSudahAda.Count());
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekLunas[indexLunas] + " sudah lunas.<br />",
                                                            TEXT_2 = cekLunas[indexLunas],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }

                                                if (cekPer10 > 1000)
                                                {
                                                    if ((ret.progressDownload == temp40) || ret.percentDownload == 100)
                                                    {
                                                        ret.statusSuccessDownload = false;
                                                        if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                        {
                                                            ret.statusSuccessDownload = true;
                                                            ret.selesaiProsesDownload = true;
                                                            ret.statusLoopDownload = false;
                                                        }
                                                        if (tempPercent != ret.percentDownload)
                                                        {
                                                            if (ret.statusSuccessDownload == false)
                                                            {
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (ret.percentDownload == 25 ||
                                                ret.percentDownload == 50 ||
                                                ret.percentDownload == 75 ||
                                                ret.percentDownload == 100)
                                                {
                                                    ret.statusSuccessDownload = false;
                                                    if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                    {
                                                        ret.statusSuccessDownload = true;
                                                        ret.selesaiProsesDownload = true;
                                                        ret.statusLoopDownload = false;
                                                    }
                                                    if (tempPercent != ret.percentDownload)
                                                    {
                                                        if (ret.statusSuccessDownload == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ret.TidakLanjutProses = false;
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                                #endregion                                

                                if (ret.statusLoop == true)
                                {
                                    var ssql3 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "' and NILAI_LAIN <> 0 and KET2 like '%TIDAK ADA%'";
                                    data_proses_lanjut.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql3).ToList());
                                    ret.countAll = data_proses_lanjut.Count();
                                    prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                                }

                                if (Convert.ToInt32(prog[1]) == 0)
                                {
                                    prog[1] = "0";
                                }

                                #region detail
                                //loop all rows

                                if (data_proses_lanjut.Count > 0)
                                {
                                    var tempPercent = Convert.ToInt32(prog[0]);
                                    var cekPer10 = (ret.countAll / 10);
                                    var temp40 = Convert.ToInt32(prog[1]) + 100;
                                    for (int i = Convert.ToInt32(prog[1]); i < data_proses_lanjut.Count(); i++)
                                    {
                                        ret.statusLoop = true;
                                        ret.progress = i + 1;
                                        ret.percent = ((i + 1) * 100) / ret.countAll;
                                        var getData = data_proses_lanjut[i];
                                        if (getData != null)
                                        {
                                            var current_ref = getData.NOREF;
                                            if (getData.KET2 != null && getData.KET2.Contains("|"))
                                            {
                                                var splitKet = getData.KET2.Split('|');
                                                var ketSI = splitKet[0];
                                                var ketNetto = Convert.ToDouble(splitKet[1]);
                                                var ketDATABAYAR = splitKet[2];
                                                var ketBUKTI_BAYAR = splitKet[3];
                                                var ketTGLREF_BAYAR = splitKet[4];
                                                var ketTGLSO = splitKet[5];
                                                var ketSisa = getData.NILAI_LAIN;
                                                var norefAsli = splitKet[6];

                                                if (!string.IsNullOrEmpty(norefAsli))
                                                {
                                                    var noref = norefAsli;
                                                    var so = "";
                                                    double nettoSI = 0;

                                                    if (ketSI != "")
                                                    {
                                                        so = ketSI;
                                                        nettoSI = ketNetto;
                                                        var totalSisa = 0d;
                                                        var bayarpiutang = 0d;
                                                        totalSisa = ketSisa;
                                                        bayarpiutang = Convert.ToDouble(getData.NILAI_REF);
                                                        if (totalSisa != 0 && ketDATABAYAR == "TIDAK ADA")
                                                        {
                                                            var art03b = new ART03B
                                                            {
                                                                USERNAME = "UPLOAD_TOKOPEDIA",
                                                                POT = 0,
                                                                LEBIH_BAYAR = 0,
                                                                BUKTI = ret.nobuk,
                                                            };

                                                            if (!string.IsNullOrEmpty(Convert.ToString(noref)))
                                                            {
                                                                art03b.NOREF = noref;
                                                            }
                                                            else
                                                            {
                                                                art03b.NOREF = null;
                                                            }

                                                            art03b.NFAKTUR = ketSI;
                                                            art03b.SISA = ketNetto;

                                                            //change by nurul 22/4/2020
                                                            //art03b.TGL_REF = getData.TGL;
                                                            if (ketTGLSO != "" && ketTGLSO != null)
                                                            {
                                                                art03b.TGL_REF = Convert.ToDateTime(ketTGLSO);
                                                            }
                                                            //end change by nurul 22/4/2020

                                                            if (bayarpiutang > 0)
                                                            {
                                                                if (totalSisa >= bayarpiutang)
                                                                {
                                                                    art03b.BAYAR = bayarpiutang;
                                                                    //if (totalSisa - bayarpiutang > 0)
                                                                    //{
                                                                    //    art03b.POT = totalSisa - bayarpiutang;
                                                                    //}
                                                                }
                                                                else if (totalSisa < bayarpiutang)
                                                                {
                                                                    art03b.LEBIH_BAYAR = bayarpiutang - totalSisa;
                                                                    art03b.BAYAR = Convert.ToDouble(bayarpiutang - art03b.LEBIH_BAYAR);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                art03b.BAYAR = 0;
                                                            }

                                                            nilaiFaktur.Add(art03b.SISA);
                                                            nilaiRef.Add(art03b.BAYAR);
                                                            nilaiPot.Add(art03b.POT);
                                                            nilaiLebihBayar.Add(art03b.LEBIH_BAYAR);
                                                            ErasoftDbContext.ART03B.Add(art03b);
                                                            getData.SUDAH_INPUT = true;
                                                            try
                                                            {
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                                ret.adaError = true;
                                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                                {
                                                                    LOG_FILE = ret.buktiLog,
                                                                    VARIABLE_1 = ret.nobuk,
                                                                    VARIABLE_2 = ret.TipeData,
                                                                    TEXT_1 = errMsg,
                                                                    TEXT_2 = noref,
                                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                    USERNAME = uname
                                                                };
                                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                        }
                                                        else if (totalSisa != 0 && ketDATABAYAR == "SUDAH ADA")
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah proses bayar dengan No Bukti " + ketBUKTI_BAYAR + ".<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                        else
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah lunas.<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = noref,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else
                                                {
                                                    ret.adaError = true;
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                        TEXT_2 = current_ref,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                    TEXT_2 = current_ref,
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }

                                        if (cekPer10 > 100)
                                        {
                                            if ((ret.progress == temp40) || ret.percent == 100)
                                            {
                                                ret.statusSuccess = false;
                                                if (ret.percent > 99 && ret.percent <= 101)
                                                {
                                                    ret.statusSuccess = true;
                                                }
                                                if (tempPercent != ret.percent)
                                                {
                                                    if (nilaiRef.Count() > 0)
                                                    {
                                                        ret.TBAYAR = 0;
                                                        for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                        {

                                                            ret.TBAYAR += nilaiRef[ab];
                                                        }
                                                    }
                                                    if (nilaiPot.Count() > 0)
                                                    {
                                                        ret.TPOT = 0;
                                                        for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                        {

                                                            ret.TPOT += nilaiPot[ab];
                                                        }
                                                    }
                                                    if (nilaiLebihBayar.Count() > 0)
                                                    {
                                                        ret.TLEBIHBAYAR = 0;
                                                        for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                        {

                                                            ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                        }
                                                    }
                                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                    {
                                                        try
                                                        {
                                                            ErasoftDbContext.ART03B.AddRange(list_detail);
                                                            var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                            getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                            getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                            if (getheader.TLEBIH_BAYAR == null)
                                                            {
                                                                getheader.TLEBIH_BAYAR = 0;
                                                            }
                                                            getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                            ErasoftDbContext.SaveChanges();
                                                            transaction.Commit();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //transaction.Rollback();
                                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = errMsg,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                            ret.TidakLanjutProses = true;
                                                        }
                                                        if (ret.statusSuccess == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (ret.percent == 10 || ret.percent == 20 ||
                                        ret.percent == 30 || ret.percent == 40 ||
                                        ret.percent == 50 || ret.percent == 60 ||
                                        ret.percent == 70 || ret.percent == 80 ||
                                        ret.percent == 90 || ret.percent == 100)
                                        {
                                            ret.statusSuccess = false;
                                            if (ret.percent > 99 && ret.percent <= 101)
                                            {
                                                ret.statusSuccess = true;
                                            }
                                            if (tempPercent != ret.percent)
                                            {
                                                if (nilaiRef.Count() > 0)
                                                {
                                                    ret.TBAYAR = 0;
                                                    for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                    {

                                                        ret.TBAYAR += nilaiRef[ab];
                                                    }
                                                }
                                                if (nilaiPot.Count() > 0)
                                                {
                                                    ret.TPOT = 0;
                                                    for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                    {

                                                        ret.TPOT += nilaiPot[ab];
                                                    }
                                                }
                                                if (nilaiLebihBayar.Count() > 0)
                                                {
                                                    ret.TLEBIHBAYAR = 0;
                                                    for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                    {

                                                        ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                    }
                                                }
                                                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                {
                                                    try
                                                    {
                                                        ErasoftDbContext.ART03B.AddRange(list_detail);
                                                        var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                        getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                        getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                        if (getheader.TLEBIH_BAYAR == null)
                                                        {
                                                            getheader.TLEBIH_BAYAR = 0;
                                                        }
                                                        getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //transaction.Rollback();
                                                        var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = errMsg,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                        ret.TidakLanjutProses = true;
                                                    }
                                                    if (ret.statusSuccess == false)
                                                    {
                                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                            }
                            else
                            {
                                ret.adaError = true;
                                ret.Errors.Add("Faktur dari marketplace tidak ditemukan.<br />");
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "Faktur dari marketplace tidak ditemukan.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            ret.Errors.Add("Akun marketplace tidak ditemukan.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "Akun marketplace tidak ditemukan.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                {
                    LOG_FILE = ret.buktiLog,
                    VARIABLE_1 = ret.nobuk,
                    VARIABLE_2 = ret.TipeData,
                    TEXT_1 = ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />",
                    TEXT_2 = "",
                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                    USERNAME = uname
                };
                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                ErasoftDbContext.SaveChanges();

                if (ret.nobuk != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                        vm.adaError = ret.adaError;
                        vm.ret = ret;
                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                        //ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        ret.adaError = true;

                        TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                        {
                            LOG_FILE = ret.buktiLog,
                            VARIABLE_1 = ret.nobuk,
                            VARIABLE_2 = ret.TipeData,
                            TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                            TEXT_2 = "",
                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                            USERNAME = uname
                        };
                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                        ErasoftDbContext.SaveChanges();

                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                var getOngkir1 = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
                vm.ListOngkir = getOngkir1;
                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();


            if (ret.nobuk != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                    vm.ret = ret;
                    vm.adaError = ret.adaError;
                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_1 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                    //ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                    ErasoftDbContext.SaveChanges();
                    ret.TidakLanjutProses = true;
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    ret.adaError = true;

                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                    {
                        LOG_FILE = ret.buktiLog,
                        VARIABLE_1 = ret.nobuk,
                        VARIABLE_2 = ret.TipeData,
                        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                        TEXT_2 = "",
                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                        USERNAME = uname
                    };
                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                    ErasoftDbContext.SaveChanges();

                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }

            var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
            vm.ListOngkir = getOngkir;
            return PartialView("DetailBayarPiutangPartial", vm);
        }
        //end add by nurul 19/5/2020, upload pembayaran versi baru

        //add by nurul 22/11/2019, upload pembayaran bukalapak
        public ActionResult UploadXcelBayarBukalapak()
        {
            BindUploadExcel ret = new BindUploadExcel();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };
            List<mdlTempBayarBukalapak> records = new List<mdlTempBayarBukalapak>();
            try
            {

                var mp = MoDbContext.Marketplaces.ToList();
                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    TextReader tr;
                    var file = Request.Files[file_index];
                    if (file != null && file.ContentLength > 0)
                    {
                        var xxx = file.FileName;
                        var bx = xxx.Substring(xxx.LastIndexOf('.'));
                        byte[] data;
                        ret.lastRow.Add(0);
                        if (bx.ToLower() == ".csv")
                        {
                            using (Stream inputStream = file.InputStream)
                            {
                                MemoryStream memoryStream = inputStream as MemoryStream;
                                if (memoryStream == null)
                                {
                                    memoryStream = new MemoryStream();
                                    inputStream.CopyTo(memoryStream);
                                }
                                data = memoryStream.ToArray();
                                tr = new StreamReader(inputStream);
                            }

                            string namaFile = dbPathEra + "_BayarBukalapak_" + DateTime.Now.ToString("yyyyMMdd_HHmmssffff") + ".csv";
                            System.IO.File.WriteAllBytes(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile), data);
                            using (var sr = new StreamReader(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile)))
                            {
                                CsvReader reader = new CsvReader(sr);
                                reader.Configuration.Delimiter = ",";
                                reader.Configuration.PrepareHeaderForMatch = (header, index) => Regex.Replace(header, @"\s|[().]", string.Empty);
                                var records_excell = reader.GetRecords<mdlTempCSVBayarBukalapak>();
                                try
                                {
                                    foreach (var dataPiutang in records_excell)
                                    {
                                        var a = new mdlTempBayarBukalapak
                                        {
                                            Mutasi = Convert.ToDouble(dataPiutang.Mutasi),
                                            Saldo = Convert.ToDouble(dataPiutang.Saldo),
                                            Keterangan = Convert.ToString(dataPiutang.Keterangan),
                                        };

                                        if (!string.IsNullOrEmpty(Convert.ToString(dataPiutang.Waktu)))
                                        {
                                            var repTgl = Convert.ToString(dataPiutang.Waktu).Replace('.', ':');
                                            var getBulan = repTgl.Split(' ');
                                            var bulan = "";
                                            if (getBulan[1].ToUpper() == "JANUARI")
                                            {
                                                bulan = repTgl.Replace("Januari", "January");
                                            }
                                            else if (getBulan[1].ToUpper() == "FEBRUARI")
                                            {
                                                bulan = repTgl.Replace("Februari", "February");
                                            }
                                            else if (getBulan[1].ToUpper() == "MARET")
                                            {
                                                bulan = repTgl.Replace("Maret", "March");
                                            }
                                            else if (getBulan[1].ToUpper() == "APRIL")
                                            {
                                                bulan = repTgl.Replace("April", "April");
                                            }
                                            else if (getBulan[1].ToUpper() == "MEI")
                                            {
                                                bulan = repTgl.Replace("Mei", "May");
                                            }
                                            else if (getBulan[1].ToUpper() == "JUNI")
                                            {
                                                bulan = repTgl.Replace("Juni", "June");
                                            }
                                            else if (getBulan[1].ToUpper() == "JULI")
                                            {
                                                bulan = repTgl.Replace("Juli", "July");
                                            }
                                            else if (getBulan[1].ToUpper() == "AGUSTUS")
                                            {
                                                bulan = repTgl.Replace("Agustus", "August");
                                            }
                                            else if (getBulan[1].ToUpper() == "SEPTEMBER")
                                            {
                                                bulan = repTgl.Replace("September", "September");
                                            }
                                            else if (getBulan[1].ToUpper() == "OKTOBER")
                                            {
                                                bulan = repTgl.Replace("Oktober", "October");
                                            }
                                            else if (getBulan[1].ToUpper() == "NOVEMBER")
                                            {
                                                bulan = repTgl.Replace("November", "November");
                                            }
                                            else if (getBulan[1].ToUpper() == "DESEMBER")
                                            {
                                                bulan = repTgl.Replace("Desember", "December");
                                            }
                                            a.Waktu = Convert.ToDateTime(bulan);
                                        }
                                        if (!string.IsNullOrEmpty(a.Keterangan) && !string.IsNullOrEmpty(Convert.ToString(a.Mutasi)))
                                        {
                                            if (a.Keterangan != "")
                                            {
                                                if (a.Keterangan.Split(' ').First() == "Remit")
                                                {
                                                    var tempNobuk = a.Keterangan.Split('#');
                                                    a.Bukti = tempNobuk[1];
                                                    records.Add(a);
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    ret.Errors.Add("Format file yang anda upload salah.");
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }

                            }
                            System.IO.File.Delete(Path.Combine(Server.MapPath("~/Content/Uploaded/"), namaFile));
                        }
                        else
                        {
                            if (bx.ToLower() == ".xls")
                            {
                                using (Stream inputStream = file.InputStream)
                                {
                                    Workbook workbook = new Workbook();
                                    workbook.LoadFromStream(inputStream);
                                    MemoryStream memoryStream = new MemoryStream();
                                    workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                    data = memoryStream.ToArray();
                                }
                            }
                            else if (bx.ToLower() == ".xlsx")
                            {
                                using (Stream inputStream = file.InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;
                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }
                                    data = memoryStream.ToArray();
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + file.FileName + " setidaknya harus dalam format '.xls' atau '.xlsx' atau '.csv'.");
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }

                            using (MemoryStream stream = new MemoryStream(data))
                            {
                                using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                                {
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                    {
                                        string cekValid = worksheet.Cells[1, 1].Value == null ? "" : worksheet.Cells[1, 1].Value.ToString();
                                        if (!string.IsNullOrEmpty(cekValid) && cekValid == "Waktu")
                                        {
                                            if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)) && !string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 4].Value)))
                                            {
                                                if (Convert.ToString(worksheet.Cells[i, 4].Value).Split(' ').First() == "Remit")
                                                {
                                                    var tempData = new mdlTempBayarBukalapak() { };
                                                    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 1].Value)))
                                                    {
                                                        var repTgl = Convert.ToString(worksheet.Cells[i, 1].Value).Replace('.', ':');
                                                        var getBulan = repTgl.Split(' ');
                                                        var bulan = "";
                                                        if (getBulan[1].ToUpper() == "JANUARI")
                                                        {
                                                            bulan = repTgl.Replace("Januari", "January");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "FEBRUARI")
                                                        {
                                                            bulan = repTgl.Replace("Februari", "February");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "MARET")
                                                        {
                                                            bulan = repTgl.Replace("Maret", "March");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "APRIL")
                                                        {
                                                            bulan = repTgl.Replace("April", "April");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "MEI")
                                                        {
                                                            bulan = repTgl.Replace("Mei", "May");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "JUNI")
                                                        {
                                                            bulan = repTgl.Replace("Juni", "June");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "JULI")
                                                        {
                                                            bulan = repTgl.Replace("Juli", "July");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "AGUSTUS")
                                                        {
                                                            bulan = repTgl.Replace("Agustus", "August");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "SEPTEMBER")
                                                        {
                                                            bulan = repTgl.Replace("September", "September");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "OKTOBER")
                                                        {
                                                            bulan = repTgl.Replace("Oktober", "October");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "NOVEMBER")
                                                        {
                                                            bulan = repTgl.Replace("November", "November");
                                                        }
                                                        else if (getBulan[1].ToUpper() == "DESEMBER")
                                                        {
                                                            bulan = repTgl.Replace("Desember", "December");
                                                        }
                                                        tempData.Waktu = Convert.ToDateTime(bulan);
                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                    {
                                                        var repmutasi = Convert.ToString(worksheet.Cells[i, 2].Value).Replace('.', ',');
                                                        tempData.Mutasi = Convert.ToDouble(repmutasi);
                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 3].Value)))
                                                    {
                                                        var repsaldo = Convert.ToString(worksheet.Cells[i, 3].Value).Replace('.', ',');
                                                        tempData.Saldo = Convert.ToDouble(repsaldo);
                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 4].Value)))
                                                    {
                                                        var tempDesc = Convert.ToString(worksheet.Cells[i, 4].Value).Split('#');
                                                        tempData.Keterangan = Convert.ToString(worksheet.Cells[i, 4].Value);
                                                        tempData.Bukti = tempDesc[1];
                                                    }
                                                    records.Add(tempData);
                                                }
                                            }
                                            //}
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File " + file.FileName + " bukan data pembayaran Bukalapak.");
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                        }

                        using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                        {
                            eraDB.Database.CommandTimeout = 180;
                            var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                            if (customer != null)
                            {
                                List<double> nilaiFaktur = new List<double>();
                                List<double> nilaiRef = new List<double>();
                                List<double> nilaiPot = new List<double>();
                                string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;

                                var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                                if (listTemp > 0)
                                {
                                    if (records.Count() != 0)
                                    {
                                        #region create induk
                                        var art03a = new ART03A
                                        {
                                            KET = "-",
                                            USERNAME = "UPLOAD_BUKALAPAK",
                                            TUKAR = 1,
                                            MUKA1 = 0,
                                            MUKA2 = 0,
                                            KONTAN = 0,
                                            VLT = "IDR",
                                            TOTAL_KREDIT_GL = 0,
                                            TOTAL_DEBET_GL = 0,
                                            POSTING = "'",
                                            NCUST = "",
                                            TGLINPUT = DateTime.Now,
                                            TBAYAR = 0,
                                            TPOT = 0,
                                            TGL = Convert.ToDateTime(tgl),
                                            CUST = cust_id
                                        };

                                        //change by nurul 23/12/2019, perbaikan no bukti
                                        //var listBayarPiutangInDb = eraDB.ART03A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                                        //var digitAkhir = "";
                                        //var noOrder = "";

                                        //if (listBayarPiutangInDb == null)
                                        //{
                                        //    digitAkhir = "000001";
                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                        //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ART03A, RESEED, 0)");
                                        //}
                                        //else
                                        //{
                                        //    var lastRecNum = listBayarPiutangInDb.RecNum;
                                        //    lastRecNum++;

                                        //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                        //}
                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                                        //end change by nurul 23/12/2019, perbaikan no bukti

                                        art03a.BUKTI = noOrder;
                                        bukti = noOrder;

                                        //change by nurul 23/12/2019, perbaikan no_bukti
                                        //eraDB.ART03A.Add(art03a);
                                        //try
                                        //{
                                        //    //save header
                                        //    eraDB.SaveChanges();
                                        //}
                                        //catch (Exception ex)
                                        //{
                                        //    var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                        //    ret.Errors.Add(errMsg);
                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                        //}
                                        try
                                        {
                                            eraDB.ART03A.Add(art03a);
                                            eraDB.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                            if (tempSI != null)
                                            {
                                                if (tempSI.BUKTI == noOrder)
                                                {
                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                    lastBuktiNew++;
                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                    art03a.BUKTI = noOrder;
                                                    eraDB.ART03A.Add(art03a);
                                                    eraDB.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                ret.Errors.Add(errMsg);
                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                        //end change by nurul 23/12/2019, perbaikan no bukti
                                        #endregion

                                        #region detail
                                        var detail = records.GroupBy(a => a.Bukti)
                                                        .Select(f => new
                                                        {
                                                            Tanggal = f.FirstOrDefault().Waktu,
                                                            Ref = f.FirstOrDefault().Bukti.Trim(),
                                                            Bayar = f.FirstOrDefault().Mutasi
                                                        });
                                        foreach (var bayar in detail)
                                        {
                                            if (!string.IsNullOrWhiteSpace(bayar.Ref))
                                            {
                                                var noref = bayar.Ref;
                                                if (!string.IsNullOrEmpty(noref))
                                                {

                                                    var cekfaktur = eraDB.SIT01A.Where(a => a.NO_REF == noref && a.CUST == cust_id).SingleOrDefault();
                                                    var cekPesanan = eraDB.SOT01A.Where(a => a.NO_REFERENSI == noref && a.CUST == cust_id).SingleOrDefault();
                                                    var so = "";
                                                    double nettoSI = 0;

                                                    if (cekPesanan != null)
                                                    {
                                                        var cekSIPesanan = eraDB.SIT01A.Where(a => a.NO_SO == cekPesanan.NO_BUKTI && a.CUST == cust_id).SingleOrDefault();
                                                        if (cekSIPesanan != null)
                                                        {
                                                            so = cekSIPesanan.NO_BUKTI;
                                                            nettoSI = cekSIPesanan.NETTO.Value;
                                                        }
                                                    }
                                                    if (cekfaktur != null || so != "")
                                                    {
                                                        var totalSisa = 0d;
                                                        var bayarpiutang = 0d;
                                                        var adaBayar = false;
                                                        if (cekfaktur != null)
                                                        {
                                                            var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                            if (getBayar.Count() > 0)
                                                            {
                                                                totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                        .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                            }
                                                            adaBayar = true;
                                                        }
                                                        else
                                                        {
                                                            var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                            if (getBayar.Count() > 0)
                                                            {
                                                                totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                            .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                            }
                                                            adaBayar = true;
                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.Bayar)))
                                                        {
                                                            //total yg dibandingkan dengan sisa = bayar + pot
                                                            bayarpiutang = bayar.Bayar;
                                                        }

                                                        if (adaBayar == false || (adaBayar == true && totalSisa >= bayarpiutang))
                                                        {
                                                            var art03b = new ART03B
                                                            {
                                                                USERNAME = "UPLOAD_BUKALAPAK",
                                                                POT = 0,
                                                                BUKTI = art03a.BUKTI,
                                                            };

                                                            if (!string.IsNullOrEmpty(Convert.ToString(bayar.Ref)))
                                                            {
                                                                art03b.NOREF = noref;
                                                            }
                                                            if (!string.IsNullOrEmpty(Convert.ToString(bayar.Tanggal)))
                                                            {
                                                                art03b.TGL_REF = bayar.Tanggal;
                                                            }

                                                            if (cekfaktur != null)
                                                            {
                                                                art03b.NFAKTUR = cekfaktur.NO_BUKTI;
                                                                art03b.SISA = totalSisa;
                                                            }
                                                            else if (so != null)
                                                            {
                                                                art03b.NFAKTUR = so;
                                                                art03b.SISA = totalSisa;
                                                            }

                                                            if (!string.IsNullOrEmpty(Convert.ToString(bayar.Bayar)))
                                                            {
                                                                art03b.BAYAR = bayar.Bayar;
                                                            }

                                                            nilaiFaktur.Add(art03b.SISA);
                                                            nilaiRef.Add(art03b.BAYAR);
                                                            nilaiPot.Add(art03b.POT);
                                                            eraDB.ART03B.Add(art03b);
                                                            try
                                                            {
                                                                eraDB.SaveChanges();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                                ret.Errors.Add(errMsg);
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ret.Errors.Add("Faktur dengan No. Ref " + noref + " sudah lunas.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.Errors.Add("Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").");

                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        if (nilaiRef.Count() > 0)
                                        {
                                            for (int x = 0; x < nilaiRef.Count(); x++)
                                            {
                                                art03a.TBAYAR += nilaiRef[x];
                                            }
                                        }
                                        if (nilaiPot.Count() > 0)
                                        {
                                            for (int x = 0; x < nilaiPot.Count(); x++)
                                            {
                                                art03a.TPOT += nilaiPot[x];
                                            }
                                        }
                                        try
                                        {
                                            eraDB.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                else
                                {
                                    ret.Errors.Add("Faktur dari marketplace tidak ditemukan.");
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + file.FileName + ": Akun marketplace tidak ditemukan.");
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                //ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + System.Environment.NewLine);
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message);

                if (bukti != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                        vm.Errors = ret.Errors;
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                        ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        vm.Errors = ret.Errors;
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();


            vm.Errors = ret.Errors;
            if (bukti != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                    vm.Errors = ret.Errors;
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                    ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.SaveChanges();
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    vm.Errors = ret.Errors;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }
            return PartialView("DetailBayarPiutangPartial", vm);
        }
        //end add by nurul 22/11/2019, upload pembayaran bukalapak 

        //add by nurul 4/11/2019, upload pembayaran blibli 
        public ActionResult UploadXcelBayarBlibli()
        {
            BindUploadExcel ret = new BindUploadExcel();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };

            try
            {

                var mp = MoDbContext.Marketplaces.ToList();
                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    var file = Request.Files[file_index];
                    if (file != null && file.ContentLength > 0)
                    {
                        var xxx = file.FileName;
                        var bx = xxx.Substring(xxx.LastIndexOf('.'));
                        byte[] data;
                        ret.lastRow.Add(0);
                        if (bx.ToLower() == ".xls")
                        {
                            using (Stream inputStream = file.InputStream)
                            {
                                Workbook workbook = new Workbook();
                                workbook.LoadFromStream(inputStream);
                                MemoryStream memoryStream = new MemoryStream();
                                workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                data = memoryStream.ToArray();
                            }
                        }
                        else if (bx.ToLower() == ".xlsx")
                        {
                            using (Stream inputStream = file.InputStream)
                            {
                                MemoryStream memoryStream = inputStream as MemoryStream;
                                if (memoryStream == null)
                                {
                                    memoryStream = new MemoryStream();
                                    inputStream.CopyTo(memoryStream);
                                }
                                data = memoryStream.ToArray();
                            }
                        }
                        else
                        {
                            ret.Errors.Add("File " + file.FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.");
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }

                        using (MemoryStream stream = new MemoryStream(data))
                        {
                            using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                            {
                                using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                                {

                                    eraDB.Database.CommandTimeout = 180;
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    string cekCol2 = worksheet.Cells[1, 2].Value == null ? "" : worksheet.Cells[1, 2].Value.ToString();
                                    if (!string.IsNullOrEmpty(cekCol2))
                                    {
                                        if (cekCol2 == "Order ID")
                                        {
                                            var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                                            if (customer != null)
                                            {
                                                List<double> nilaiFaktur = new List<double>();
                                                List<double> nilaiRef = new List<double>();
                                                List<double> nilaiPot = new List<double>();
                                                string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;


                                                var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                                                if (listTemp > 0)
                                                {
                                                    List<mdlTempBayarBlibli> tempDetail = new List<mdlTempBayarBlibli>();
                                                    for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                                    {
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 5].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 5].Value).Split(' ').First() == "Sales")
                                                            {
                                                                var tempData = new mdlTempBayarBlibli() { };
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 5].Value)))
                                                                {
                                                                    tempData.KETERANGAN = Convert.ToString(worksheet.Cells[i, 5].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 6].Value)))
                                                                {
                                                                    tempData.TGL = Convert.ToDateTime(worksheet.Cells[i, 6].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                                {
                                                                    tempData.REF = Convert.ToString(worksheet.Cells[i, 2].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 9].Value)))
                                                                {
                                                                    tempData.HARGA = Convert.ToDouble(worksheet.Cells[i, 9].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 11].Value)))
                                                                {
                                                                    tempData.POTONGAN = Convert.ToDouble(worksheet.Cells[i, 11].Value);
                                                                }
                                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 14].Value)))
                                                                {
                                                                    tempData.TOTAL = Convert.ToDouble(worksheet.Cells[i, 14].Value);
                                                                }
                                                                tempDetail.Add(tempData);
                                                            }
                                                        }
                                                    }
                                                    if (ret.lastRow[file_index] == 0)
                                                        ret.lastRow[file_index] = worksheet.Dimension.End.Row;
                                                    if (tempDetail.Count() != 0)
                                                    {
                                                        #region create induk
                                                        var art03a = new ART03A
                                                        {
                                                            KET = "-",
                                                            USERNAME = "UPLOAD_BLIBLI",
                                                            TUKAR = 1,
                                                            MUKA1 = 0,
                                                            MUKA2 = 0,
                                                            KONTAN = 0,
                                                            VLT = "IDR",
                                                            TOTAL_KREDIT_GL = 0,
                                                            TOTAL_DEBET_GL = 0,
                                                            POSTING = "'",
                                                            NCUST = "",
                                                            TGLINPUT = DateTime.Now,
                                                            TBAYAR = 0,
                                                            TPOT = 0,
                                                            TGL = Convert.ToDateTime(tgl),
                                                            CUST = cust_id
                                                        };

                                                        //change by nurul 23/12/2019, perbaikan no bukti
                                                        //var listBayarPiutangInDb = eraDB.ART03A.OrderByDescending(p => p.RecNum).FirstOrDefault();
                                                        //var digitAkhir = "";
                                                        //var noOrder = "";

                                                        //if (listBayarPiutangInDb == null)
                                                        //{
                                                        //    digitAkhir = "000001";
                                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                                        //    ErasoftDbContext.Database.ExecuteSqlCommand("DBCC CHECKIDENT (ART03A, RESEED, 0)");
                                                        //}
                                                        //else
                                                        //{
                                                        //    var lastRecNum = listBayarPiutangInDb.RecNum;
                                                        //    lastRecNum++;

                                                        //    digitAkhir = lastRecNum.ToString().PadLeft(6, '0');
                                                        //    noOrder = $"CR{DateTime.Now.Year.ToString().Substring(2, 2)}{digitAkhir}";
                                                        //}
                                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');
                                                        //end change by nurul 23/12/2019, perbaikan no bukti

                                                        art03a.BUKTI = noOrder;
                                                        bukti = noOrder;

                                                        //change by nurul 23/12/2019, perbaikan no_bukti
                                                        //eraDB.ART03A.Add(art03a);
                                                        //try
                                                        //{
                                                        //    //save header
                                                        //    eraDB.SaveChanges();
                                                        //}
                                                        //catch (Exception ex)
                                                        //{
                                                        //    var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                        //    ret.Errors.Add(errMsg);
                                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                                        //}
                                                        try
                                                        {
                                                            eraDB.ART03A.Add(art03a);
                                                            eraDB.SaveChanges();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                                            if (tempSI != null)
                                                            {
                                                                if (tempSI.BUKTI == noOrder)
                                                                {
                                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                                    lastBuktiNew++;
                                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                                    art03a.BUKTI = noOrder;
                                                                    eraDB.ART03A.Add(art03a);
                                                                    eraDB.SaveChanges();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                                ret.Errors.Add(errMsg);
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                        //end change by nurul 23/12/2019, perbaikan no bukti
                                                        #endregion

                                                        #region detail
                                                        var detail = tempDetail.GroupBy(a => a.REF)
                                                                        .Select(f => new
                                                                        {
                                                                            Tanggal = f.FirstOrDefault().TGL,
                                                                            Nobuk = f.FirstOrDefault().REF,
                                                                            Potongan = f.Sum(b => b.POTONGAN),
                                                                            Bayar = f.Sum(b => b.HARGA),
                                                                            NRef = f.Sum(b => b.TOTAL)
                                                                        });
                                                        foreach (var bayar in detail)
                                                        {
                                                            var noref = bayar.Nobuk;
                                                            if (!string.IsNullOrEmpty(noref))
                                                            {

                                                                var cekfaktur = eraDB.SIT01A.Where(a => a.NO_REF == noref && a.CUST == cust_id).SingleOrDefault();
                                                                var cekPesanan = eraDB.SOT01A.Where(a => a.NO_REFERENSI == noref && a.CUST == cust_id).SingleOrDefault();
                                                                var so = "";
                                                                double nettoSI = 0;

                                                                if (cekPesanan != null)
                                                                {
                                                                    var cekSIPesanan = eraDB.SIT01A.Where(a => a.NO_SO == cekPesanan.NO_BUKTI && a.CUST == cust_id).SingleOrDefault();
                                                                    if (cekSIPesanan != null)
                                                                    {
                                                                        so = cekSIPesanan.NO_BUKTI;
                                                                        nettoSI = cekSIPesanan.NETTO.Value;
                                                                    }
                                                                }
                                                                if (cekfaktur != null || so != "")
                                                                {
                                                                    var totalSisa = 0d;
                                                                    var bayarpiutang = 0d;
                                                                    var adaBayar = false;
                                                                    if (cekfaktur != null)
                                                                    {
                                                                        var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                                        if (getBayar.Count() > 0)
                                                                        {
                                                                            totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == cekfaktur.NO_BUKTI && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                                    .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                                        }
                                                                        adaBayar = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        var getBayar = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0).ToList();
                                                                        if (getBayar.Count() > 0)
                                                                        {
                                                                            totalSisa = ErasoftDbContext.ART01D.Where(p => p.FAKTUR == so && (p.NETTO - p.BAYAR - p.KREDIT + p.DEBET) > 0)
                                                                                        .Sum(p => p.NETTO - p.BAYAR - p.KREDIT + p.DEBET).Value;
                                                                        }
                                                                        adaBayar = true;
                                                                    }
                                                                    if (!string.IsNullOrEmpty(Convert.ToString(bayar.Bayar)))
                                                                    {
                                                                        //bayarpiutang = bayar.NRef + bayar.Potongan;
                                                                        bayarpiutang = bayar.NRef;
                                                                    }

                                                                    if (adaBayar == false || (adaBayar == true && totalSisa >= bayarpiutang))
                                                                    {
                                                                        var art03b = new ART03B
                                                                        {
                                                                            USERNAME = "UPLOAD_BLIBLI",
                                                                            POT = 0,
                                                                            BUKTI = art03a.BUKTI,
                                                                        };

                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.Nobuk)))
                                                                        {
                                                                            art03b.NOREF = noref;
                                                                        }
                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.Tanggal)))
                                                                        {
                                                                            art03b.TGL_REF = bayar.Tanggal;
                                                                        }

                                                                        if (cekfaktur != null)
                                                                        {
                                                                            art03b.NFAKTUR = cekfaktur.NO_BUKTI;
                                                                            //art03b.SISA = cekfaktur.NETTO.Value;
                                                                            art03b.SISA = totalSisa;
                                                                        }
                                                                        else if (so != null)
                                                                        {
                                                                            art03b.NFAKTUR = so;
                                                                            //art03b.SISA = nettoSI;
                                                                            art03b.SISA = totalSisa;
                                                                        }

                                                                        if (!string.IsNullOrEmpty(Convert.ToString(bayar.NRef)))
                                                                        {
                                                                            art03b.BAYAR = bayar.NRef;
                                                                        }
                                                                        //change by nurul 26/11/2019, req pak dani & pak richard, yg d input jumlah uang yg diterima aja, tanpa potongan 
                                                                        //if (!string.IsNullOrEmpty(Convert.ToString(bayar.Potongan)))
                                                                        //{
                                                                        //    art03b.POT = bayar.Potongan;
                                                                        //}

                                                                        nilaiFaktur.Add(art03b.SISA);
                                                                        nilaiRef.Add(art03b.BAYAR);
                                                                        nilaiPot.Add(art03b.POT);
                                                                        eraDB.ART03B.Add(art03b);
                                                                        try
                                                                        {
                                                                            eraDB.SaveChanges();
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                                                                            ret.Errors.Add(errMsg);
                                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        ret.Errors.Add("Faktur dengan No. Ref " + noref + " sudah lunas.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    ret.Errors.Add("Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").");

                                                                }
                                                            }
                                                        }
                                                        #endregion

                                                        if (nilaiRef.Count() > 0)
                                                        {
                                                            for (int x = 0; x < nilaiRef.Count(); x++)
                                                            {
                                                                art03a.TBAYAR += nilaiRef[x];
                                                            }
                                                        }
                                                        if (nilaiPot.Count() > 0)
                                                        {
                                                            for (int x = 0; x < nilaiPot.Count(); x++)
                                                            {
                                                                art03a.TPOT += nilaiPot[x];
                                                            }
                                                        }
                                                        try
                                                        {
                                                            eraDB.SaveChanges();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ret.Errors.Add("Faktur dari marketplace tidak ditemukan.");
                                                }
                                            }
                                            else
                                            {
                                                ret.Errors.Add("File " + file.FileName + ": Akun marketplace tidak ditemukan.");
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File " + file.FileName + " bukan excel pembayaran Blibli.");
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    else
                                    {
                                        ret.Errors.Add("File " + file.FileName + " bukan excel pembayaran Blibli.");
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message);

                if (bukti != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                        vm.Errors = ret.Errors;
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                        ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        vm.Errors = ret.Errors;
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == bukti).Count();


            vm.Errors = ret.Errors;
            if (bukti != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == bukti);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == bukti).ToList();
                    vm.Errors = ret.Errors;
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == bukti);
                    ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.SaveChanges();
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    vm.Errors = ret.Errors;
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }
            return PartialView("DetailBayarPiutangPartial", vm);
        }
        //end add by nurul 4/11/2019, upload pembayaran Blibli 

        //end add by nurul 19/5/2020, upload pembayaran versi baru
        public ActionResult UploadXcelBayarBlibli1(string nobuk, int countAll, string percentDanprogress, string statusLoopSuccess, string log, string percentDanprogressDownload, string statusLoopSuccessDownload, string filename)
        {
            BindUploadExcelBayar ret = new BindUploadExcelBayar();
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            string uname = sessionData.Account.Username;
            if (uname.Length > 20)
                uname = uname.Substring(0, 17) + "...";
            string cust_id = Request["cust"];
            string market = Request["market"];
            string tgl = Request["tgl"];
            ret.Errors = new List<string>();
            ret.cust = new List<string>();
            ret.namaCust = new List<string>();
            ret.lastRow = new List<int>();
            var bukti = "";
            var vm = new BayarPiutangViewModel() { };
            List<mdlTempBayarBlibli> recordsBlibli = new List<mdlTempBayarBlibli>();
            List<int> recnum_record = new List<int>();

            byte[] data = null;
            byte[] dataByte = null;
            string[] status = statusLoopSuccess.Split(';');
            string[] prog = percentDanprogress.Split(';');

            string[] statusDownload = statusLoopSuccessDownload.Split(';');
            string[] progDownload = percentDanprogressDownload.Split(';');

            ret.statusLoop = Convert.ToBoolean(status[0]);
            if (ret.statusLoop == false && ret.statusLoopDownload == false)
            {
                ret.buktiLog = "Log_Upload_Pembayaran_Blibli" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
            }

            ret.statusLoopDownload = Convert.ToBoolean(statusDownload[0]);
            if (filename != null && filename != "")
            {
                ret.TipeData = filename;
            }
            ret.selesaiProsesDownload = false;

            try
            {
                var mp = MoDbContext.Marketplaces.ToList();
                ret.statusSuccess = Convert.ToBoolean(status[1]);
                ret.statusSuccessDownload = Convert.ToBoolean(statusDownload[1]);
                ret.sudahSimpanTemp = false;

                if (ret.byteData == null && ret.statusLoop == false)
                {
                    ret.adaError = false;
                    LOG_IMPORT_FAKTUR newLogImportPiutang = new LOG_IMPORT_FAKTUR
                    {
                        CUST = cust_id,
                        UPLOADER = uname,
                        LAST_FAKTUR_UPLOADED = "",
                        UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                        LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7),
                        LOG_FILE = ret.buktiLog,
                    };
                    ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportPiutang);
                    ErasoftDbContext.SaveChanges();

                    if (Request.Files[0] != null && Request.Files[0].ContentLength > 0)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        //dataByte = UploadFileServices.UploadFile(Request.Files[0]);
                        //ret.byteData = dataByte;

                        if (ret.TipeData.Split('.').Last().ToLower() == "xlsx" || ret.TipeData.Split('.').Last().ToLower() == "xls")
                        {
                            if (ret.TipeData.Split('.').Last().ToLower() == "xls")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    Workbook workbook = new Workbook();
                                    workbook.LoadFromStream(inputStream);
                                    MemoryStream memoryStream = new MemoryStream();
                                    workbook.SaveToStream(memoryStream, FileFormat.Version2013);
                                    data = memoryStream.ToArray();
                                }
                            }
                            else if (ret.TipeData.Split('.').Last().ToLower() == "xlsx")
                            {
                                using (Stream inputStream = Request.Files[0].InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;
                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }
                                    data = memoryStream.ToArray();
                                }
                            }
                            else
                            {
                                ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />");
                                ret.adaError = true;
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                                ret.TidakLanjutProses = true;
                                return Json(ret, JsonRequestBehavior.AllowGet);
                            }
                            using (MemoryStream stream = new MemoryStream(data))
                            {
                                using (OfficeOpenXml.ExcelPackage excelPackage = new OfficeOpenXml.ExcelPackage(stream))
                                {
                                    //loop all worksheets
                                    var worksheet = excelPackage.Workbook.Worksheets[1];
                                    string cekCol2 = worksheet.Cells[1, 2].Value == null ? "" : worksheet.Cells[1, 2].Value.ToString();
                                    string cekCol14 = worksheet.Cells[1, 14].Value == null ? "" : worksheet.Cells[1, 14].Value.ToString();
                                    string cekCol15 = worksheet.Cells[1, 15].Value == null ? "" : worksheet.Cells[1, 15].Value.ToString();
                                    if (!string.IsNullOrEmpty(cekCol2))
                                    {
                                        if (cekCol2 == "Order ID")
                                        {

                                            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                                            {
                                                if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 5].Value)))
                                                {
                                                    if (Convert.ToString(worksheet.Cells[i, 5].Value).Split(' ').First() == "Sales")
                                                    {
                                                        var tempData = new mdlTempBayarBlibli() { };
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 5].Value)))
                                                        {
                                                            tempData.KETERANGAN = Convert.ToString(worksheet.Cells[i, 5].Value);
                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 6].Value)))
                                                        {
                                                            tempData.TGL = Convert.ToDateTime(worksheet.Cells[i, 6].Value);
                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 2].Value)))
                                                        {
                                                            tempData.REF = Convert.ToString(worksheet.Cells[i, 2].Value);
                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 9].Value)))
                                                        {
                                                            tempData.HARGA = Convert.ToDouble(worksheet.Cells[i, 9].Value);
                                                        }
                                                        
                                                        //change by nurul 29/9/2020
                                                        //if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 11].Value)))
                                                        //{
                                                        //    tempData.POTONGAN = Convert.ToDouble(worksheet.Cells[i, 11].Value);
                                                        //}
                                                        var promosi_merchant = 0d;
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 10].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 10].Value) != "-"){
                                                                if (Convert.ToDouble(worksheet.Cells[i, 10].Value) < 0)
                                                                {
                                                                    promosi_merchant = Convert.ToDouble(worksheet.Cells[i, 10].Value) * (-1);
                                                                }
                                                                else
                                                                {
                                                                    promosi_merchant = Convert.ToDouble(worksheet.Cells[i, 10].Value);
                                                                }
                                                            }
                                                        }
                                                        var fee = 0d;
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 11].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 11].Value) != "-")
                                                            {
                                                                if (Convert.ToDouble(worksheet.Cells[i, 11].Value) < 0)
                                                                {
                                                                    fee = Convert.ToDouble(worksheet.Cells[i, 11].Value) * (-1);
                                                                }
                                                                else
                                                                {
                                                                    fee = Convert.ToDouble(worksheet.Cells[i, 11].Value);
                                                                }
                                                            }
                                                        }
                                                        var biaya_tx = 0d;
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 12].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 12].Value) != "-")
                                                            {
                                                                if (Convert.ToDouble(worksheet.Cells[i, 12].Value) < 0)
                                                                {
                                                                    biaya_tx = Convert.ToDouble(worksheet.Cells[i, 12].Value) * (-1);
                                                                }
                                                                else
                                                                {
                                                                    biaya_tx = Convert.ToDouble(worksheet.Cells[i, 12].Value);
                                                                }
                                                            }
                                                        }
                                                        var pph_23 = 0d;
                                                        if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 13].Value)))
                                                        {
                                                            if (Convert.ToString(worksheet.Cells[i, 13].Value) != "-")
                                                            {
                                                                if (Convert.ToDouble(worksheet.Cells[i, 13].Value) < 0)
                                                                {
                                                                    pph_23 = Convert.ToDouble(worksheet.Cells[i, 13].Value) * (-1);
                                                                }
                                                                else
                                                                {
                                                                    pph_23 = Convert.ToDouble(worksheet.Cells[i, 13].Value);
                                                                }
                                                            }
                                                        }
                                                        var biaya_kirim_seller = 0d;
                                                        if (!string.IsNullOrEmpty(cekCol14) && cekCol14 == "Biaya Kirim Seller")
                                                        {
                                                            if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 14].Value)))
                                                            {
                                                                if (Convert.ToString(worksheet.Cells[i, 14].Value) != "-")
                                                                {
                                                                    if (Convert.ToDouble(worksheet.Cells[i, 14].Value) < 0)
                                                                    {
                                                                        biaya_kirim_seller = Convert.ToDouble(worksheet.Cells[i, 14].Value) * (-1);
                                                                    }
                                                                    else
                                                                    {
                                                                        biaya_kirim_seller = Convert.ToDouble(worksheet.Cells[i, 14].Value);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        tempData.POTONGAN = promosi_merchant + fee + biaya_tx + pph_23 + biaya_kirim_seller;
                                                        //end change by nurul 29/9/2020
                                                        if (!string.IsNullOrEmpty(cekCol14) && cekCol14 == "Total")
                                                        {
                                                            if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 14].Value)))
                                                            {
                                                                tempData.TOTAL = Convert.ToDouble(worksheet.Cells[i, 14].Value);
                                                            }
                                                        }
                                                        else if (!string.IsNullOrEmpty(cekCol15) && cekCol15 == "Total")
                                                        {
                                                            if (!string.IsNullOrEmpty(Convert.ToString(worksheet.Cells[i, 15].Value)))
                                                            {
                                                                tempData.TOTAL = Convert.ToDouble(worksheet.Cells[i, 15].Value);
                                                            }
                                                        }
                                                        recordsBlibli.Add(tempData);
                                                        ret.sudahSimpanTemp = true;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ret.Errors.Add("File bukan data pembayaran Blibli.<br />");
                                            ret.adaError = true;
                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                            {
                                                LOG_FILE = ret.buktiLog,
                                                VARIABLE_1 = ret.nobuk,
                                                VARIABLE_2 = ret.TipeData,
                                                TEXT_1 = "File bukan data pembayaran Blibli.<br />",
                                                TEXT_2 = "",
                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                USERNAME = uname
                                            };
                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                            ErasoftDbContext.SaveChanges();
                                            ret.TidakLanjutProses = true;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    else
                                    {
                                        ret.Errors.Add("File bukan data pembayaran Blibli.<br />");
                                        ret.adaError = true;
                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        {
                                            LOG_FILE = ret.buktiLog,
                                            VARIABLE_1 = ret.nobuk,
                                            VARIABLE_2 = ret.TipeData,
                                            TEXT_1 = "File bukan data pembayaran Blibli.<br />",
                                            TEXT_2 = "",
                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                            USERNAME = uname
                                        };
                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        ErasoftDbContext.SaveChanges();
                                        ret.TidakLanjutProses = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }

                                    if(recordsBlibli.Count() <= 0)
                                    {
                                        ret.Errors.Add("File " + ret.TipeData + "  tidak ada data pembayaran.<br />");
                                        ret.adaError = true;
                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        {
                                            LOG_FILE = ret.buktiLog,
                                            VARIABLE_1 = ret.nobuk,
                                            VARIABLE_2 = ret.TipeData,
                                            TEXT_1 = "File " + ret.TipeData + "  tidak ada data pembayaran.<br />",
                                            TEXT_2 = "",
                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                            USERNAME = uname
                                        };
                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        ErasoftDbContext.SaveChanges();
                                        ret.TidakLanjutProses = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ret.Errors.Add("File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />");
                            ret.adaError = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "File " + Request.Files[0].FileName + " setidaknya harus dalam format '.xls' atau '.xlsx'.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                            ret.TidakLanjutProses = true;
                            return Json(ret, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                else
                {
                    ret.byteData = null;
                    ret.nobuk = nobuk;
                }


                for (int file_index = 0; file_index < Request.Files.Count; file_index++)
                {
                    if (ret.statusLoop == false)
                    {
                        ret.lastRow.Add(0);
                    }

                    if (ret.statusLoop == true)
                    {
                        ret.TipeData = Request.Files[0].FileName;
                        if (log != null)
                        {
                            ret.buktiLog = log;
                        }
                    }

                    using (ErasoftContext eraDB = new ErasoftContext(dbSourceEra, dbPathEra))
                    {
                        eraDB.Database.CommandTimeout = 180;
                        var customer = eraDB.ARF01.Where(m => m.CUST == cust_id).FirstOrDefault();
                        if (customer != null)
                        {
                            List<double> nilaiFaktur = new List<double>();
                            List<double> nilaiRef = new List<double>();
                            List<double> nilaiPot = new List<double>();
                            List<double?> nilaiLebihBayar = new List<double?>();
                            string namaMP = mp.Where(m => m.IdMarket.ToString() == customer.NAMA).SingleOrDefault().NamaMarket;

                            var listTemp = eraDB.SIT01A.Where(a => a.NO_REF != null && a.NO_SO != null).Count();
                            if (listTemp > 0)
                            {
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<TEMP_UPLOAD_EXCEL_BAYAR> data_proses_lanjut = new List<TEMP_UPLOAD_EXCEL_BAYAR>();
                                List<ART03B> list_detail = new List<ART03B>();
                                if (recordsBlibli.Count() != 0)
                                {
                                    List<string> list_ref = new List<string>();
                                    #region create induk
                                    if (ret.statusLoop == false)
                                    {
                                        var art03a = new ART03A
                                        {
                                            KET = "-",
                                            USERNAME = "UPLOAD_BLIBLI",
                                            TUKAR = 1,
                                            MUKA1 = 0,
                                            MUKA2 = 0,
                                            KONTAN = 0,
                                            VLT = "IDR",
                                            TOTAL_KREDIT_GL = 0,
                                            TOTAL_DEBET_GL = 0,
                                            POSTING = "'",
                                            NCUST = "",
                                            TGLINPUT = DateTime.Now,
                                            TBAYAR = 0,
                                            TPOT = 0,
                                            TGL = Convert.ToDateTime(tgl),
                                            CUST = cust_id,
                                            //add logfile u/ save log name and count record process
                                            log_file = ret.buktiLog
                                        };

                                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "CR", "ART03A", "BUKTI");
                                        var noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                                        art03a.BUKTI = noOrder;
                                        ret.nobuk = noOrder;

                                        ret.TBAYAR = art03a.TBAYAR;
                                        ret.TPOT = art03a.TPOT;
                                        ret.TLEBIHBAYAR = Convert.ToDouble(art03a.TLEBIH_BAYAR);

                                        var cekAdaErr = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.LAST_FAKTUR_UPLOADED == noOrder).Select(a => a.LOG_FILE).ToList();
                                        if (cekAdaErr.Count() > 0)
                                        {
                                            var string_log = "";
                                            foreach (var log1 in cekAdaErr)
                                            {
                                                if (string_log != "")
                                                {
                                                    string_log += ",";
                                                }

                                                string_log += "'" + log1 + "'";
                                            }
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TABLE_LOG_DETAIL where VARIABLE_1 ='" + noOrder + "' and LOG_FILE in (" + string_log + ")");
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from LOG_IMPORT_FAKTUR where LAST_FAKTUR_UPLOADED ='" + noOrder + "'");
                                        }
                                        var cekAdaTemp = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.FirstOrDefault();
                                        if (cekAdaTemp != null)
                                        {
                                            ErasoftDbContext.Database.ExecuteSqlCommand("delete from TEMP_UPLOAD_EXCEL_BAYAR");
                                        }

                                        try
                                        {
                                            eraDB.ART03A.Add(art03a);
                                            eraDB.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            var tempSI = eraDB.ART03A.Where(a => a.BUKTI == art03a.BUKTI).Single();
                                            if (tempSI != null)
                                            {
                                                if (tempSI.BUKTI == noOrder)
                                                {
                                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                                    lastBuktiNew++;
                                                    noOrder = "CR" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                                    art03a.BUKTI = noOrder;
                                                    eraDB.ART03A.Add(art03a);
                                                    eraDB.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                ret.Errors.Add(errMsg);
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = errMsg,
                                                    TEXT_2 = "",
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                                ret.TidakLanjutProses = true;
                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                        ErasoftDbContext.Database.ExecuteSqlCommand("update LOG_IMPORT_FAKTUR set LAST_FAKTUR_UPLOADED = '" + art03a.BUKTI + "' where CUST ='" + cust_id + "' and LOG_FILE ='" + ret.buktiLog + "'");
                                        //var detail = recordsBlibli.GroupBy(a => a.REF)
                                        //                                .Select(f => new
                                        //                                {
                                        //                                    Tanggal = f.FirstOrDefault().TGL,
                                        //                                    Nobuk = f.FirstOrDefault().REF,
                                        //                                    Potongan = f.Sum(b => b.POTONGAN),
                                        //                                    Bayar = f.Sum(b => b.HARGA),
                                        //                                    NRef = f.Sum(b => b.TOTAL)
                                        //                                });
                                        var detail1 = recordsBlibli.GroupBy(a => a.REF)
                                                        .Select(f => new TEMP_UPLOAD_EXCEL_BAYAR
                                                        {
                                                            NAMA_FILE = ret.TipeData,
                                                            CUST = cust_id,
                                                            MARKETPLACE = "BLIBLI",
                                                            NOREF = f.FirstOrDefault().REF.Trim(),
                                                            TGL = f.FirstOrDefault().TGL,
                                                            BAYAR = f.Sum(b => b.HARGA),
                                                            POTONGAN = f.Sum(b => b.POTONGAN),
                                                            NILAI_REF = f.Sum(b => b.TOTAL),
                                                            NILAI_LAIN = 0,
                                                            KET = noOrder,
                                                            SUDAH_INPUT = false,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        });
                                        ErasoftDbContext.Database.ExecuteSqlCommand("update ART03A set LOG_FILE = '" + ret.buktiLog + ";" + detail1.Count().ToString() + "' where BUKTI ='" + ret.nobuk + "' and LOG_FILE ='" + ret.buktiLog + "'");
                                        foreach (var bayar in detail1)
                                        {
                                            TEMP_UPLOAD_EXCEL_BAYAR rec = new TEMP_UPLOAD_EXCEL_BAYAR()
                                            {
                                                NAMA_FILE = bayar.NAMA_FILE,
                                                CUST = bayar.CUST,
                                                MARKETPLACE = bayar.MARKETPLACE,
                                                NOREF = bayar.NOREF,
                                                TGL = bayar.TGL,
                                                BAYAR = bayar.BAYAR,
                                                POTONGAN = bayar.POTONGAN,
                                                NILAI_REF = bayar.NILAI_REF,
                                                NILAI_LAIN = bayar.NILAI_LAIN,
                                                TGL_INPUT = bayar.TGL_INPUT,
                                                SUDAH_INPUT = bayar.SUDAH_INPUT,
                                                USERNAME = bayar.USERNAME,
                                                KET = bayar.KET
                                            };
                                            ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Add(rec);
                                            ErasoftDbContext.SaveChanges();
                                        }

                                        list_ref = ErasoftDbContext.TEMP_UPLOAD_EXCEL_BAYAR.Where(a => a.KET == ret.nobuk && a.NAMA_FILE == ret.TipeData && a.CUST == cust_id).Select(A => A.NOREF).ToList();
                                        if (list_ref.Count() > 0)
                                        {
                                            var string_ref = "";
                                            foreach (var ref1 in list_ref)
                                            {
                                                if (string_ref != "")
                                                {
                                                    string_ref += ",";
                                                }
                                                string_ref += "'" + ref1 + "'";
                                            }

                                            string ssql1 = "UPDATE A SET A.NILAI_LAIN = isnull(B.SISA,0), A.KET2 = B.NO_BUKTI + ';' + CONVERT(NVARCHAR, B.NETTO) + ';' + B.DATABAYAR + ';' + B.BUKTI_BAYAR + ';' + CONVERT(NVARCHAR,B.TGLREF_BAYAR) + ';' + CONVERT(NVARCHAR,B.TGL) ";
                                            ssql1 += "FROM TEMP_UPLOAD_EXCEL_BAYAR AS A LEFT JOIN ( ";
                                            ssql1 += "select a.no_bukti, a.no_ref, a.netto, isnull((isnull(b.NETTO,0) - isnull(b.BAYAR,0) - isnull(b.KREDIT,0) + isnull(b.DEBET,0)),0) sisa, ISNULL(CASE WHEN CONVERT(DATE, D.TGL) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), D.TGL, 103) END, '') AS TGL ";
                                            ssql1 += ",(case when isnull(c.BUKTI,'') <> '' then 'SUDAH ADA' ELSE 'TIDAK ADA' END) DATABAYAR,ISNULL(C.BUKTI,'')BUKTI_BAYAR, ISNULL(CASE WHEN CONVERT(DATE, C.TGL_REF) = '1900-01-01' THEN '' ELSE CONVERT(CHAR(10), C.TGL_REF, 103) END, '') AS TGLREF_BAYAR ";
                                            ssql1 += "from sit01a a left join art01d b on a.no_bukti = b.faktur LEFT JOIN ART03B C ON A.NO_BUKTI=C.NFAKTUR LEFT JOIN SOT01A D ON A.NO_SO=D.NO_BUKTI WHERE a.CUST= '" + cust_id + "' and a.no_ref in (" + string_ref + ")) ";
                                            ssql1 += "AS B ON A.NOREF = B.no_ref ";
                                            ssql1 += "WHERE A.CUST = '" + cust_id + "' AND A.KET = '" + ret.nobuk + "' and A.NOREF in (" + string_ref + ") ";
                                            ErasoftDbContext.Database.ExecuteSqlCommand(ssql1);
                                        }


                                        //var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                        //data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());

                                        //data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        //ret.countAll = data_proses_lanjut.Count();
                                        //if (data_proses_lanjut.Count() > 0)
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        //    if (cekListSIKosong.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekListSIKosong)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        //    if (cekSudahAda.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekSudahAda)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah proses bayar",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();
                                        //    if (cekLunas.Count() > 0)
                                        //    {
                                        //        foreach (var ref1 in cekLunas)
                                        //        {
                                        //            ret.adaError = true;
                                        //            if (ret.buktiLog != "")
                                        //            {
                                        //                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                        //                {
                                        //                    LOG_FILE = ret.buktiLog,
                                        //                    VARIABLE_1 = ret.nobuk,
                                        //                    VARIABLE_2 = ret.TipeData,
                                        //                    TEXT_1 = "Faktur dengan No. Ref " + ref1 + " sudah lunas.<br />",
                                        //                    TEXT_2 = ref1,
                                        //                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //                    USERNAME = uname
                                        //                };
                                        //                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                        //                ErasoftDbContext.SaveChanges();
                                        //            }
                                        //        }
                                        //    }
                                        //    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                                        //    ErasoftDbContext.ART03A.Remove(piutangInDb);
                                        //    ErasoftDbContext.SaveChanges();
                                        //    ret.Errors.Add("Tidak ada data yang dapat diproses.<br />");
                                        //    ret.adaError = true;

                                        //    TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                                        //    {
                                        //        LOG_FILE = ret.buktiLog,
                                        //        VARIABLE_1 = ret.nobuk,
                                        //        VARIABLE_2 = ret.TipeData,
                                        //        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                                        //        TEXT_2 = "",
                                        //        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                        //        USERNAME = uname
                                        //    };
                                        //    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                                        //    ErasoftDbContext.SaveChanges();

                                        //    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                                        //    if (cekErr > 0)
                                        //    {
                                        //        ret.adaError = true;
                                        //    }
                                        //    ret.TidakLanjutProses = true;
                                        //    return Json(ret, JsonRequestBehavior.AllowGet);
                                        //}
                                        //ret.TidakLanjutProses = false;
                                        //ret.statusLoop = true;
                                        //return Json(ret, JsonRequestBehavior.AllowGet);

                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        //ret.percentDownload = 10;
                                        ret.statusLoop = true;
                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                

                                if (ret.statusLoopDownload == true && ret.statusSuccessDownload == false && ret.selesaiProsesDownload == false)
                                {
                                    var ssql2 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "'";
                                    data_proses.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql2).ToList());
                                    ret.countAllDownload = data_proses.Count();
                                    progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - 1);
                                    if (Convert.ToInt32(progDownload[1]) == 0)
                                    {
                                        progDownload[1] = "0";
                                    }

                                    if (data_proses.Count() > 0)
                                    {
                                        ret.TidakLanjutProses = false;
                                        ret.statusLoopDownload = true;
                                        var tempPercent = Convert.ToInt32(progDownload[0]);
                                        //var cekPer20 = (ret.countAllDownload / 10);
                                        var cekPer10 = (ret.countAllDownload / 4);
                                        var temp40 = Convert.ToInt32(progDownload[1]) + 1000;
                                        data_proses_lanjut.AddRange(data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("TIDAK ADA")).ToList());
                                        ret.countAll = data_proses_lanjut.Count();

                                        var cekListSIKosong = data_proses.Where(a => a.KET2 == null).Select(a => a.NOREF).ToList();
                                        var cekSudahAda = data_proses.Where(a => a.NILAI_LAIN != 0 && a.KET2.Contains("SUDAH ADA")).Select(a => a.NOREF).ToList();
                                        var cekLunas = data_proses.Where(a => a.NILAI_LAIN == 0 && (a.KET2 != null && a.KET2 != "")).Select(a => a.NOREF).ToList();

                                        if (data_proses_lanjut.Count() > 0 && data_proses_lanjut.Count() == data_proses.Count())
                                        {
                                            ret.selesaiProsesDownload = true;
                                            ret.statusSuccessDownload = true;
                                            ret.percentDownload = 100;
                                            ret.progressDownload = data_proses.Count();
                                            ret.statusLoopDownload = false;
                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(progDownload[1]) > 0)
                                            {
                                                progDownload[1] = Convert.ToString(Convert.ToInt32(progDownload[1]) - data_proses_lanjut.Count());
                                            }
                                            var hitungTotal = cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count();
                                            for (int i = Convert.ToInt32(progDownload[1]); i < (cekListSIKosong.Count() + cekSudahAda.Count() + cekLunas.Count()); i++)
                                            {
                                                var countProcess = data_proses_lanjut.Count() + i;
                                                ret.TidakLanjutProses = false;
                                                ret.statusLoopDownload = true;
                                                ret.progressDownload = countProcess + 1;
                                                ret.percentDownload = ((countProcess + 1) * 100) / ret.countAllDownload;
                                                var a = cekSudahAda.Count();
                                                var b = cekListSIKosong.Count();
                                                var c = cekLunas.Count();
                                                var cek1 = cekListSIKosong.Count() - (i);
                                                int cek2 = Convert.ToInt32(a - (i - b));
                                                var cek3 = Convert.ToInt32(c - (i - (a + b)));
                                                if (cekListSIKosong.Count() - (i) > 0)
                                                {
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekListSIKosong[i] + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = cekListSIKosong[i],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek2 > 0)
                                                {
                                                    var indexAda = (i) - cekListSIKosong.Count();
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekSudahAda[indexAda] + " sudah proses bayar",
                                                            TEXT_2 = cekSudahAda[indexAda],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else if (cek3 > 0)
                                                {
                                                    var indexLunas = (i) - (cekListSIKosong.Count() + cekSudahAda.Count());
                                                    ret.adaError = true;
                                                    if (ret.buktiLog != "")
                                                    {
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + cekLunas[indexLunas] + " sudah lunas.<br />",
                                                            TEXT_2 = cekLunas[indexLunas],
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }

                                                if (cekPer10 > 1000)
                                                {
                                                    if ((ret.progressDownload == temp40) || ret.percentDownload == 100)
                                                    {
                                                        ret.statusSuccessDownload = false;
                                                        if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                        {
                                                            ret.statusSuccessDownload = true;
                                                            ret.selesaiProsesDownload = true;
                                                            ret.statusLoopDownload = false;
                                                        }
                                                        if (tempPercent != ret.percentDownload)
                                                        {
                                                            if (ret.statusSuccessDownload == false)
                                                            {
                                                                return Json(ret, JsonRequestBehavior.AllowGet);
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (ret.percentDownload == 25 ||
                                                ret.percentDownload == 50 ||
                                                ret.percentDownload == 75 ||
                                                ret.percentDownload == 100)
                                                {
                                                    ret.statusSuccessDownload = false;
                                                    if (ret.percentDownload > 99 && ret.percentDownload <= 101)
                                                    {
                                                        ret.statusSuccessDownload = true;
                                                        ret.selesaiProsesDownload = true;
                                                        ret.statusLoopDownload = false;
                                                    }
                                                    if (tempPercent != ret.percentDownload)
                                                    {
                                                        if (ret.statusSuccessDownload == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ret.TidakLanjutProses = false;
                                    return Json(ret, JsonRequestBehavior.AllowGet);
                                }
                                #endregion
                                if (ret.statusLoop == true)
                                {
                                    var ssql3 = "select * from TEMP_UPLOAD_EXCEL_BAYAR where ket = '" + ret.nobuk + "' and cust ='" + cust_id + "' and nama_file = '" + ret.TipeData + "' and NILAI_LAIN <> 0 and KET2 like '%TIDAK ADA%'";
                                    data_proses_lanjut.AddRange(ErasoftDbContext.Database.SqlQuery<TEMP_UPLOAD_EXCEL_BAYAR>(ssql3).ToList());
                                    ret.countAll = data_proses_lanjut.Count();
                                    prog[1] = Convert.ToString(Convert.ToInt32(prog[1]) - 1);
                                }

                                if (Convert.ToInt32(prog[1]) == 0)
                                {
                                    prog[1] = "0";
                                }

                                #region detail
                                //loop all rows

                                if (data_proses_lanjut.Count > 0)
                                {
                                    var tempPercent = Convert.ToInt32(prog[0]);
                                    var cekPer10 = (ret.countAll / 10);
                                    var temp40 = Convert.ToInt32(prog[1]) + 100;
                                    for (int i = Convert.ToInt32(prog[1]); i < data_proses_lanjut.Count(); i++)
                                    {
                                        ret.statusLoop = true;
                                        ret.progress = i + 1;
                                        ret.percent = ((i + 1) * 100) / ret.countAll;
                                        var getData = data_proses_lanjut[i];
                                        if (getData != null)
                                        {
                                            var current_ref = getData.NOREF;
                                            if (getData.KET2 != null && getData.KET2.Contains(";"))
                                            {
                                                var splitKet = getData.KET2.Split(';');
                                                var ketSI = splitKet[0];
                                                var ketNetto = Convert.ToDouble(splitKet[1]);
                                                var ketDATABAYAR = splitKet[2];
                                                var ketBUKTI_BAYAR = splitKet[3];
                                                var ketTGLREF_BAYAR = splitKet[4];
                                                var ketTGLSO = splitKet[5];
                                                var ketSisa = getData.NILAI_LAIN;

                                                if (!string.IsNullOrEmpty(current_ref))
                                                {
                                                    var noref = current_ref;
                                                    var so = "";
                                                    double nettoSI = 0;

                                                    if (ketSI != "")
                                                    {
                                                        so = ketSI;
                                                        nettoSI = ketNetto;
                                                        var totalSisa = 0d;
                                                        var bayarpiutang = 0d;
                                                        totalSisa = ketSisa;
                                                        bayarpiutang = Convert.ToDouble(getData.NILAI_REF);
                                                        if (totalSisa != 0 && ketDATABAYAR == "TIDAK ADA")
                                                        {
                                                            var art03b = new ART03B
                                                            {
                                                                USERNAME = "UPLOAD_BLIBLI",
                                                                POT = 0,
                                                                LEBIH_BAYAR = 0,
                                                                BUKTI = ret.nobuk,
                                                            };

                                                            if (!string.IsNullOrEmpty(Convert.ToString(noref)))
                                                            {
                                                                art03b.NOREF = noref;
                                                            }
                                                            else
                                                            {
                                                                art03b.NOREF = null;
                                                            }

                                                            art03b.NFAKTUR = ketSI;
                                                            art03b.SISA = ketNetto;

                                                            //change by nurul 22/4/2020
                                                            //art03b.TGL_REF = getData.TGL;
                                                            if (ketTGLSO != "" && ketTGLSO != null)
                                                            {
                                                                art03b.TGL_REF = Convert.ToDateTime(ketTGLSO);
                                                            }
                                                            //end change by nurul 22/4/2020

                                                            if (bayarpiutang > 0)
                                                            {
                                                                if (totalSisa >= bayarpiutang)
                                                                {
                                                                    art03b.BAYAR = bayarpiutang;
                                                                    //if (totalSisa - bayarpiutang > 0)
                                                                    //{
                                                                    //    art03b.POT = totalSisa - bayarpiutang;
                                                                    //}
                                                                }
                                                                else if (totalSisa < bayarpiutang)
                                                                {
                                                                    art03b.LEBIH_BAYAR = bayarpiutang - totalSisa;
                                                                    art03b.BAYAR = Convert.ToDouble(bayarpiutang - art03b.LEBIH_BAYAR);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                art03b.BAYAR = 0;
                                                            }

                                                            nilaiFaktur.Add(art03b.SISA);
                                                            nilaiRef.Add(art03b.BAYAR);
                                                            nilaiPot.Add(art03b.POT);
                                                            nilaiLebihBayar.Add(art03b.LEBIH_BAYAR);
                                                            ErasoftDbContext.ART03B.Add(art03b);
                                                            getData.SUDAH_INPUT = true;
                                                            try
                                                            {
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                                ret.adaError = true;
                                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                                {
                                                                    LOG_FILE = ret.buktiLog,
                                                                    VARIABLE_1 = ret.nobuk,
                                                                    VARIABLE_2 = ret.TipeData,
                                                                    TEXT_1 = errMsg,
                                                                    TEXT_2 = noref,
                                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                    USERNAME = uname
                                                                };
                                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                                ErasoftDbContext.SaveChanges();
                                                            }
                                                        }
                                                        else if (totalSisa != 0 && ketDATABAYAR == "SUDAH ADA")
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah proses bayar dengan No Bukti " + ketBUKTI_BAYAR + ".<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                        else
                                                        {
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = "Faktur dengan No. Ref " + noref + " sudah lunas.<br />",
                                                                TEXT_2 = noref,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = "Faktur dengan No. Ref " + noref + " tidak ditemukan pada akun " + namaMP + "(" + customer.PERSO + ").<br />",
                                                            TEXT_2 = noref,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                    }
                                                }
                                                else
                                                {
                                                    ret.adaError = true;
                                                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                    {
                                                        LOG_FILE = ret.buktiLog,
                                                        VARIABLE_1 = ret.nobuk,
                                                        VARIABLE_2 = ret.TipeData,
                                                        TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                        TEXT_2 = current_ref,
                                                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                        USERNAME = uname
                                                    };
                                                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                    ErasoftDbContext.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                ret.adaError = true;
                                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                {
                                                    LOG_FILE = ret.buktiLog,
                                                    VARIABLE_1 = ret.nobuk,
                                                    VARIABLE_2 = ret.TipeData,
                                                    TEXT_1 = "No. Ref " + current_ref + " tidak ditemukan.<br />",
                                                    TEXT_2 = current_ref,
                                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                    USERNAME = uname
                                                };
                                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                ErasoftDbContext.SaveChanges();
                                            }
                                        }

                                        if (cekPer10 > 100)
                                        {
                                            if ((ret.progress == temp40) || ret.percent == 100)
                                            {
                                                ret.statusSuccess = false;
                                                if (ret.percent > 99 && ret.percent <= 101)
                                                {
                                                    ret.statusSuccess = true;
                                                }
                                                if (tempPercent != ret.percent)
                                                {
                                                    if (nilaiRef.Count() > 0)
                                                    {
                                                        ret.TBAYAR = 0;
                                                        for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                        {

                                                            ret.TBAYAR += nilaiRef[ab];
                                                        }
                                                    }
                                                    if (nilaiPot.Count() > 0)
                                                    {
                                                        ret.TPOT = 0;
                                                        for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                        {

                                                            ret.TPOT += nilaiPot[ab];
                                                        }
                                                    }
                                                    if (nilaiLebihBayar.Count() > 0)
                                                    {
                                                        ret.TLEBIHBAYAR = 0;
                                                        for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                        {

                                                            ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                        }
                                                    }
                                                    using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                    {
                                                        try
                                                        {
                                                            ErasoftDbContext.ART03B.AddRange(list_detail);
                                                            var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                            getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                            getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                            if (getheader.TLEBIH_BAYAR == null)
                                                            {
                                                                getheader.TLEBIH_BAYAR = 0;
                                                            }
                                                            getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                            ErasoftDbContext.SaveChanges();
                                                            transaction.Commit();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //transaction.Rollback();
                                                            var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                            ret.adaError = true;
                                                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                            {
                                                                LOG_FILE = ret.buktiLog,
                                                                VARIABLE_1 = ret.nobuk,
                                                                VARIABLE_2 = ret.TipeData,
                                                                TEXT_1 = errMsg,
                                                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                                USERNAME = uname
                                                            };
                                                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                            ErasoftDbContext.SaveChanges();
                                                            ret.TidakLanjutProses = true;
                                                        }
                                                        if (ret.statusSuccess == false)
                                                        {
                                                            return Json(ret, JsonRequestBehavior.AllowGet);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (ret.percent == 10 || ret.percent == 20 ||
                                        ret.percent == 30 || ret.percent == 40 ||
                                        ret.percent == 50 || ret.percent == 60 ||
                                        ret.percent == 70 || ret.percent == 80 ||
                                        ret.percent == 90 || ret.percent == 100)
                                        {
                                            ret.statusSuccess = false;
                                            if (ret.percent > 99 && ret.percent <= 101)
                                            {
                                                ret.statusSuccess = true;
                                            }
                                            if (tempPercent != ret.percent)
                                            {
                                                if (nilaiRef.Count() > 0)
                                                {
                                                    ret.TBAYAR = 0;
                                                    for (int ab = 0; ab < nilaiRef.Count(); ab++)
                                                    {

                                                        ret.TBAYAR += nilaiRef[ab];
                                                    }
                                                }
                                                if (nilaiPot.Count() > 0)
                                                {
                                                    ret.TPOT = 0;
                                                    for (int ab = 0; ab < nilaiPot.Count(); ab++)
                                                    {

                                                        ret.TPOT += nilaiPot[ab];
                                                    }
                                                }
                                                if (nilaiLebihBayar.Count() > 0)
                                                {
                                                    ret.TLEBIHBAYAR = 0;
                                                    for (int x = 0; x < nilaiLebihBayar.Count(); x++)
                                                    {

                                                        ret.TLEBIHBAYAR += Convert.ToDouble(nilaiLebihBayar[x]);
                                                    }
                                                }
                                                using (System.Data.Entity.DbContextTransaction transaction = ErasoftDbContext.Database.BeginTransaction())
                                                {
                                                    try
                                                    {
                                                        ErasoftDbContext.ART03B.AddRange(list_detail);
                                                        var getheader = ErasoftDbContext.ART03A.Where(a => a.BUKTI == ret.nobuk).SingleOrDefault();
                                                        getheader.TPOT = getheader.TPOT + ret.TPOT;
                                                        getheader.TBAYAR = getheader.TBAYAR + ret.TBAYAR;
                                                        if (getheader.TLEBIH_BAYAR == null)
                                                        {
                                                            getheader.TLEBIH_BAYAR = 0;
                                                        }
                                                        getheader.TLEBIH_BAYAR = Convert.ToDouble(getheader.TLEBIH_BAYAR) + ret.TLEBIHBAYAR;
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //transaction.Rollback();
                                                        var errMsg = ex.InnerException == null ? ex.Message : ex.InnerException.Message + "<br />";
                                                        ret.adaError = true;
                                                        TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                                        {
                                                            LOG_FILE = ret.buktiLog,
                                                            VARIABLE_1 = ret.nobuk,
                                                            VARIABLE_2 = ret.TipeData,
                                                            TEXT_1 = errMsg,
                                                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                                            USERNAME = uname
                                                        };
                                                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                                        ErasoftDbContext.SaveChanges();
                                                        transaction.Commit();
                                                        ret.TidakLanjutProses = true;
                                                    }
                                                    if (ret.statusSuccess == false)
                                                    {
                                                        return Json(ret, JsonRequestBehavior.AllowGet);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ret.TidakLanjutProses = true;
                                }
                                #endregion

                            }
                            else
                            {
                                ret.adaError = true;
                                ret.TidakLanjutProses = true;
                                ret.Errors.Add("Faktur dari marketplace tidak ditemukan.<br />");
                                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                                {
                                    LOG_FILE = ret.buktiLog,
                                    VARIABLE_1 = ret.nobuk,
                                    VARIABLE_2 = ret.TipeData,
                                    TEXT_1 = "Faktur dari marketplace tidak ditemukan.<br />",
                                    TEXT_2 = "",
                                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                    USERNAME = uname
                                };
                                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                                ErasoftDbContext.SaveChanges();
                            }
                        }
                        else
                        {
                            ret.Errors.Add("Akun marketplace tidak ditemukan.<br />");
                            ret.adaError = true;
                            ret.TidakLanjutProses = true;
                            TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                            {
                                LOG_FILE = ret.buktiLog,
                                VARIABLE_1 = ret.nobuk,
                                VARIABLE_2 = ret.TipeData,
                                TEXT_1 = "Akun marketplace tidak ditemukan.<br />",
                                TEXT_2 = "",
                                TGL_INPUT = DateTime.UtcNow.AddHours(7),
                                USERNAME = uname
                            };
                            ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                            ErasoftDbContext.SaveChanges();
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ret.Errors.Add(ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />");
                ret.adaError = true;
                ret.TidakLanjutProses = true;
                TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                {
                    LOG_FILE = ret.buktiLog,
                    VARIABLE_1 = ret.nobuk,
                    VARIABLE_2 = ret.TipeData,
                    TEXT_1 = ex.InnerException == null ? ex.Message + System.Environment.NewLine : ex.InnerException.Message + "<br />",
                    TEXT_2 = "",
                    TGL_INPUT = DateTime.UtcNow.AddHours(7),
                    USERNAME = uname
                };
                ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                ErasoftDbContext.SaveChanges();

                if (ret.nobuk != "")
                {
                    var cekdetail1 = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();
                    if (cekdetail1 != 0)
                    {
                        vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                        vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                        vm.adaError = ret.adaError;
                        vm.ret = ret;
                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                    }
                    else
                    {
                        var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                        //ErasoftDbContext.ART03A.Remove(piutangInDb);
                        ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                        ErasoftDbContext.SaveChanges();
                        ret.Errors.Add("Tidak ada data yang dapat diproses.");
                        ret.adaError = true;

                        TABLE_LOG_DETAIL logDetail1 = new TABLE_LOG_DETAIL
                        {
                            LOG_FILE = ret.buktiLog,
                            VARIABLE_1 = ret.nobuk,
                            VARIABLE_2 = ret.TipeData,
                            TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                            TEXT_2 = "",
                            TGL_INPUT = DateTime.UtcNow.AddHours(7),
                            USERNAME = uname
                        };
                        ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail1);
                        ErasoftDbContext.SaveChanges();

                        var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                        if (cekErr > 0)
                        {
                            vm.ret.adaError = true;
                        }
                        return Json(ret, JsonRequestBehavior.AllowGet);
                    }

                }

                var getOngkir1 = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
                vm.ListOngkir = getOngkir1;
                return PartialView("DetailBayarPiutangPartial", vm);
            }

            var cekdetail = ErasoftDbContext.ART03B.Where(a => a.BUKTI == ret.nobuk).Count();


            if (ret.nobuk != "")
            {
                if (cekdetail != 0)
                {
                    vm.Piutang = ErasoftDbContext.ART03A.AsNoTracking().Single(p => p.BUKTI == ret.nobuk);
                    vm.ListPiutangDetail = ErasoftDbContext.ART03B.AsNoTracking().Where(pd => pd.BUKTI == ret.nobuk).ToList();
                    vm.ret = ret;
                    vm.adaError = ret.adaError;
                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_1 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                }
                else
                {
                    var piutangInDb = ErasoftDbContext.ART03A.Single(p => p.BUKTI == ret.nobuk);
                    //ErasoftDbContext.ART03A.Remove(piutangInDb);
                    ErasoftDbContext.Database.ExecuteSqlCommand("delete from ART03A where BUKTI ='" + ret.nobuk + "'");
                    ErasoftDbContext.SaveChanges();
                    ret.TidakLanjutProses = true;
                    ret.Errors.Add("Tidak ada data yang dapat diproses.");
                    ret.adaError = true;

                    TABLE_LOG_DETAIL logDetail = new TABLE_LOG_DETAIL
                    {
                        LOG_FILE = ret.buktiLog,
                        VARIABLE_1 = ret.nobuk,
                        VARIABLE_2 = ret.TipeData,
                        TEXT_1 = "Tidak ada data yang dapat diproses.<br />",
                        TEXT_2 = "",
                        TGL_INPUT = DateTime.UtcNow.AddHours(7),
                        USERNAME = uname
                    };
                    ErasoftDbContext.TABLE_LOG_DETAIL.Add(logDetail);
                    ErasoftDbContext.SaveChanges();

                    var cekErr = ErasoftDbContext.TABLE_LOG_DETAIL.Where(a => a.VARIABLE_2 == ret.nobuk).Count();
                    if (cekErr > 0)
                    {
                        vm.ret.adaError = true;
                    }
                    return Json(ret, JsonRequestBehavior.AllowGet);
                }

            }

            var getOngkir = ErasoftDbContext.Database.SqlQuery<tempOngkirFaktur>("select no_bukti as NOBUK_FAKTUR, materai as ONGKIR from sit01a(nolock) where no_bukti in (select NFAKTUR from art03b(nolock) where bukti='" + ret.nobuk + "')").ToList();
            vm.ListOngkir = getOngkir;
            return PartialView("DetailBayarPiutangPartial", vm);
        }
        //end add by nurul 19/5/2020, upload pembayaran versi baru

        //add by nurul 21/11/2019
        public ActionResult findException(string reqId)
        {
            if (reqId != null && reqId != "")
            {
                var ex = ErasoftDbContext.API_LOG_MARKETPLACE.Where(a => a.REQUEST_ID == reqId).SingleOrDefault();
                if (ex != null)
                {
                    return Json(ex.REQUEST_EXCEPTION, JsonRequestBehavior.AllowGet);
                }
            }
            return Json("Gagal mendapatkan pesan error.", JsonRequestBehavior.AllowGet);
        }
        //end add by nurul 21/11/2019

        //add by nurul 20/11/2019
        public ActionResult RefreshTableTransaksiBuyer(string recnum, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            string buyer = "";
            if (recnum != null)
            {
                buyer = recnum;
            }
            string[] getkata = search.Split(' ');
            string sSQLsi = "";
            string sSQLbrg = "";
            string sSQLnama = "";
            string sSQLmarket = "";
            string sSQLreferensi = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLsi += " AND ";
                            sSQLbrg += " AND ";
                            sSQLnama += " AND ";
                            sSQLmarket += " AND ";
                            sSQLreferensi += " AND ";
                        }

                        sSQLsi += " isnull(a.no_bukti,'') like '%" + getkata[i] + "%' ";
                        sSQLbrg += "  ISNULL(b.brg, '') like '%" + getkata[i] + "%' ";
                        sSQLnama += "  (e.nama + ' ' + isnull(e.nama2,'')) like '%" + getkata[i] + "%' ";
                        sSQLmarket += "  (isnull(F.NamaMarket,'') + ' (' + isnull(G.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                        sSQLreferensi += "  A.NO_REF like '%" + getkata[i] + "%' ";
                    }
                }
            }


            string sSQLSelect = "";
            sSQLSelect += "select a.tgl as tgl_si,isnull(a.no_bukti,'') as nobuk_si,ISNULL(b.brg, '') as brg,(e.nama + ' ' + isnull(e.nama2,'')) as nama, isnull(b.qty,0) as qty, (isnull(b.h_satuan,0) * isnull(b.qty,0)) as nilai, isnull(d.qty,0) as qty_retur, (isnull(d.h_satuan,0) * isnull(d.qty,0)) as nilai_retur ";
            sSQLSelect += ",ISNULL(F.NamaMarket,'') AS MARKET, ISNULL(G.PERSO,'') AS PERSO, ISNULL(A.NO_REF,'-') AS NOREF ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(a.no_bukti) AS JUMLAH ";
            string sSQL2 = "";
            string sSQL4 = "from sit01a a inner join sit01b b on a.no_bukti = b.no_bukti and a.jenis_form='2' ";
            sSQL4 += "left join stf02 e on b.brg=e.brg ";
            sSQL4 += "left join sit01a c on a.no_bukti=c.no_ref and c.jenis_form = '3' ";
            sSQL4 += "left join sit01b d on d.no_bukti=c.no_bukti and d.brg=b.brg ";
            sSQL4 += "LEFT JOIN ARF01 G ON A.CUST = G.CUST ";
            sSQL4 += "LEFT JOIN MO.dbo.MARKETPLACE F ON G.NAMA = F.IdMarket ";
            sSQL4 += "where e.type='3' and isnull(a.pemesan,'')='" + buyer + "' and isnull(a.jenis_form,'')='2' and isnull(a.status,'')='1' ";
            sSQL2 += sSQL4;
            sSQLCount += sSQL4;

            if (search != "")
            {
                sSQL2 += "and ( " + sSQLsi + " or " + sSQLbrg + " or " + sSQLnama + "  or " + sSQLmarket + " or " + sSQLreferensi + " ) ";
                sSQLCount += "and ( " + sSQLsi + " or " + sSQLbrg + " or " + sSQLnama + " or " + sSQLmarket + " or " + sSQLreferensi + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount).Single();

            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
                if (pagenumber < 0)
                {
                    pagenumber = 0;
                }
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "order by a.tgl desc,a.no_bukti desc,b.brg asc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listPembeli = ErasoftDbContext.Database.SqlQuery<mdlTransaksiPembeli>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlTransaksiPembeli> pageOrders = new StaticPagedList<mdlTransaksiPembeli>(listPembeli, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableTransaksiBuyerPartial", pageOrders);
        }
        //end add by nurul 20/11/2019

        //add by nurul 23/12/2019, ubah logic buat no bukti 
        public string GenerateAutoNumber(ErasoftContext context, string Prefix, string TableName, string FieldName)
        {
            string ret = "";
            string tahun = DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2);
            string startIndex = (Prefix.Length + 3).ToString();

            //string lastnobuk = context.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(" + FieldName + "), " + startIndex + ", 6), '0') FROM " + TableName + " WHERE " + FieldName + " LIKE '" + Prefix + tahun + "%'").First();
            //var nobuk = Prefix + tahun + Convert.ToString(Convert.ToInt32(lastnobuk) + 1).PadLeft(6, '0');
            ret = context.Database.SqlQuery<string>("SELECT ISNULL(SUBSTRING(MAX(" + FieldName + "), " + startIndex + ", 6), '0') FROM " + TableName + " WHERE " + FieldName + " LIKE '" + Prefix + tahun + "%'").First();
            return ret;
        }
        //end add by nurul 23/12/2019

        //add by fauzi
        public ActionResult JDIDLabelPerPacking(string cust, string bukti, List<string> rows_selected, string label)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();


                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);

                //List<string> orderItemIds = new List<string>();
                List<string> temp_htmlString = new List<string>();
                List<string> temp_base64String = new List<string>();
                List<string> temp_strmsg = new List<string>();
                List<string> temp_strmsg_label = new List<string>();
                
                List<string> temp_printLabel = new List<string>();
                string temp_printLabel_split = "";
                string result_printLabel = "";

                //add by nurul 16/12/2019
                //bool gakketemulagi = false;
                var tempLblTokped = new List<tempLabelTokopedia>();

                //var lastIndexHeader = 0;
                //var lastIndexResi = 0;
                //var lastIndexInvoice = 0;
                //var lastIndexInsurance = 0;
                //var lastIndexAddress = 0;
                //var lastIndexProduct = 0;

                //end add by nurul 16/12/2019

                var listNobuk = "";
                var Valid = false;
                //ADD BY NURUL 24/2/2020
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        Valid = true;
                    }
                    else
                    {
                        return new JsonResult { Data = new { mo_error = "Account link status is expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                var string_detailSO = "";
                foreach (var nobuk in ListStt01a)
                {
                    if (string_detailSO != "")
                    {
                        string_detailSO += ",";
                    }

                    string_detailSO += "'" + nobuk.no_bukti + "'";
                }
                string ssql = "SELECT ORDER_ITEM_ID,NO_BUKTI FROM SOT01B WHERE NO_BUKTI IN (" + string_detailSO + ") ";
                var listDetailSo = ErasoftDbContext.Database.SqlQuery<ORDERITEMSO>(ssql).ToList();
                var hitungDetail = listDetailSo.Count();

                JDIDControllerJob.JDIDAPIDataJob data = new JDIDControllerJob.JDIDAPIDataJob
                {
                    no_cust = marketPlace.CUST,
                    accessToken = marketPlace.TOKEN,
                    appKey = marketPlace.API_KEY,
                    appSecret = marketPlace.API_CLIENT_U,
                    username = marketPlace.USERNAME,
                    email = marketPlace.EMAIL,
                    DatabasePathErasoft = dbPathEra
                };
                foreach (var so in ListStt01a)
                {
                    if (listNobuk != "")
                    {
                        listNobuk += ",";
                    }
                    listNobuk += "'" + so.no_bukti + "'";
                    if (Valid)
                    {
                        var jdidjob = new JDIDControllerJob();

                        var retApi = jdidjob.JD_printLabelJDID(data, so.no_referensi);
                        if (!retApi.Result.ToString().Contains("error"))
                        {
                            
                            #region initial folder
                            string messageErrorLog = "";
                            string filename = "JDID_printlabel_" + so.no_referensi + "_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".pdf";
                            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/PrintLabel/"), filename);
                            #endregion

                            if (!System.IO.File.Exists(path))
                            {
                                System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/PrintLabel/"), ""));
                                FileStream stream = System.IO.File.Create(path);
                                byte[] byteArray = Convert.FromBase64String(retApi.Result.ToString());
                                stream.Write(byteArray, 0, byteArray.Length);
                                stream.Close();
                                temp_printLabel.Add(path);
                                temp_printLabel_split = temp_printLabel_split + path + ";";
                            }

                            var sql = "update SOT01A set status_print = '1' where no_bukti in ('" + so.no_bukti + "')";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sql);
                        }
                        else
                        {
                            var sql = "update SOT01A set status_print = '0' where no_bukti in ('" + so.no_bukti + "')";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sql);
                            temp_strmsg_label.Add(retApi.Result.ToString());
                        }
                    }
                }
                
                if (temp_printLabel.Count() > 0)
                {
                    result_printLabel = MergePDFProcess(temp_printLabel_split, bukti);
                    //return new JsonResult { Data = new { mo_label = temp_printLabel }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    return new JsonResult { Data = new { mo_label = result_printLabel }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                else
                {
                    if (label == "1")
                    {
                        //return new JsonResult { Data = new { mo_label = temp_htmlString }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        //return Json(temp_htmlString, JsonRequestBehavior.AllowGet);
                        return new JsonResult { Data = new { mo_label = temp_strmsg_label }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    else if (label == "2")
                    {
                        return new JsonResult { Data = new { mo_label = temp_strmsg_label }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        //return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                    }

                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            return JsonErrorMessage("This Function is for JD.ID only");
        }
        //end by fauzi

        //add by fauzi function for merge file PDF.


        public string MergePDFProcess(string FileLocation, string no_bukti)
        {
            string result = "";

            if (!string.IsNullOrEmpty(FileLocation))
            {
                string[] dataSplit = FileLocation.Split(';');

                iTextSharp.text.pdf.PdfReader reader = null;
                iTextSharp.text.Document sourceDocument = null;
                iTextSharp.text.pdf.PdfCopy pdfCopyProvider = null;
                iTextSharp.text.pdf.PdfImportedPage importedPage;
                //string outputPdfPath = @"D:/newFile.pdf";
                string filename = "JDID_printlabelresult_" + no_bukti + "_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".pdf";
                var path = Path.Combine(Server.MapPath("~/Content/Uploaded/PrintLabel/"), filename);
                result = path;

                sourceDocument = new iTextSharp.text.Document();
                pdfCopyProvider = new iTextSharp.text.pdf.PdfCopy(sourceDocument, new System.IO.FileStream(path, System.IO.FileMode.Create));

                sourceDocument.Open();

                for (int f = 0; f < dataSplit.Length - 1; f++)
                {
                    int pages = TotalPageCount(dataSplit[f]);

                    reader = new iTextSharp.text.pdf.PdfReader(dataSplit[f]);
                    for (int i = 1; i <= pages; i++)
                    {
                        importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                        pdfCopyProvider.AddPage(importedPage);
                    }

                    reader.Close();
                }

                sourceDocument.Close();
            }


            return result;
        }

        private static int TotalPageCount(string file)
        {
            using (StreamReader sr = new StreamReader(System.IO.File.OpenRead(file)))
            {
                Regex regex = new Regex(@"/Type\s*/Page[^s]");
                MatchCollection matches = regex.Matches(sr.ReadToEnd());

                return matches.Count;
            }
        }
        // end by fauzi for merge pdf //07/09/2020

        //add by fauzi
        public ActionResult ReadyToShipJDIDPerPacking(string cust, string bukti, List<string> rows_selected, string label)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir,A.TRACKING_SHIPMENT as tracking_no, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();


                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);
                
                List<string> temp_base64String = new List<string>();
                List<string> temp_strmsg = new List<string>();
                List<string> temp_strmsg_label = new List<string>();

                List<string> temp_readytoShip = new List<string>();

                var listErrors = new List<PackingListErrors>();

                var listNobuk = "";
                var Valid = false;
                //ADD BY NURUL 24/2/2020
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        Valid = true;
                    }
                    else
                    {
                        return new JsonResult { Data = new { mo_error = "Account link status is expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                var string_detailSO = "";
                foreach (var nobuk in ListStt01a)
                {
                    if (string_detailSO != "")
                    {
                        string_detailSO += ",";
                    }

                    string_detailSO += "'" + nobuk.no_bukti + "'";
                }
                string ssql = "SELECT ORDER_ITEM_ID,NO_BUKTI FROM SOT01B WHERE NO_BUKTI IN (" + string_detailSO + ") ";
                var listDetailSo = ErasoftDbContext.Database.SqlQuery<ORDERITEMSO>(ssql).ToList();
                var hitungDetail = listDetailSo.Count();
                var hitungSuccess = 0;

                JDIDControllerJob.JDIDAPIDataJob data = new JDIDControllerJob.JDIDAPIDataJob
                {
                    no_cust = marketPlace.CUST,
                    accessToken = marketPlace.TOKEN,
                    appKey = marketPlace.API_KEY,
                    appSecret = marketPlace.API_CLIENT_U,
                    username = marketPlace.USERNAME,
                    email = marketPlace.EMAIL,
                    DatabasePathErasoft = dbPathEra
                };
                foreach (var so in ListStt01a)
                {
                    if (listNobuk != "")
                    {
                        listNobuk += ",";
                    }
                    listNobuk += "'" + so.no_bukti + "'";
                    if (Valid)
                    {
                        var jdidjob = new JDIDControllerJob();

                        var retApi = jdidjob.JD_sendGoodJDID(data, so.no_referensi, so.tracking_no);
                        if (!retApi.Result.ToString().ToLower().Contains("error"))
                        {
                            hitungSuccess += 1;
                            var sql = "update SOT01A set status_kirim = '2' where no_bukti in ('" + so.no_bukti + "')";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sql);
                            temp_readytoShip.Add(so.no_referensi);
                        }
                        else
                        {
                            var sql = "update SOT01A set status_kirim = '1' where no_bukti in ('" + so.no_bukti + "')";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sql);
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = so.no_bukti,
                                errorMessage = retApi.Result.ToString()
                            });
                            temp_strmsg_label.Add(retApi.Result.ToString());
                        }
                    }
                }

                if (temp_readytoShip.Count() > 0)
                {
                    return new JsonResult { Data = new { result = temp_readytoShip, successCount = hitungSuccess }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                else
                {
                    return new JsonResult { Data = new { listErrors, result = temp_strmsg_label, successCount = hitungSuccess }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            //return JsonErrorMessage("This Function is for JD.ID only");
        }
        //end by fauzi

        //add by nurul 11/12/2019, cetak label pesanan
        public ActionResult CetakLabelMo(string cust, string bukti, string[] rows_selected, string toko, string tlpToko, string ctkLabel, string alLink, string noLink, string namaLink, string mpLink, string nobukLink, string totalLink, string portLink, string refLink, List<tempBarcodeLazada> data, string ketLink)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                //sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as so_bukti,A.NO_REFERENSI as so_referensi,A.SHIPMENT as kurir,ISNULL(A.TRACKING_SHIPMENT,'') AS no_resi,ISNULL(A.NETTO,0) AS so_netto,ISNULL(A.KOTA,'') AS so_kota,ISNULL(A.PROPINSI,'') AS so_propinsi,ISNULL(A.KODE_POS,'') AS so_pos,ISNULL(A.ALAMAT_KIRIM,'') AS so_alamat,ISNULL(A.ONGKOS_KIRIM,0) AS so_ongkir, ";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as so_bukti,A.NO_REFERENSI as so_referensi,ISNULL(A.SHIPMENT, ISNULL(D.NAMAPENGIRIM, '-')) as kurir,ISNULL(A.TRACKING_SHIPMENT,'') AS no_resi,ISNULL(A.NETTO,0) AS so_netto,ISNULL(A.KOTA,'') AS so_kota,ISNULL(A.PROPINSI,'') AS so_propinsi,ISNULL(A.KODE_POS,'') AS so_pos,ISNULL(A.ALAMAT_KIRIM,'') AS so_alamat,ISNULL(A.ONGKOS_KIRIM,0) AS so_ongkir, ";
                sSQLSelect += "B.PEMBELI as nama_pemesan, 0 as jumlah_item , ";
                sSQLSelect += "ISNULL(D.NO_BUKTI,'') AS si_bukti,ISNULL(D.NETTO,0) AS si_netto, ISNULL(D.TGL,'')AS si_tgl, ";
                sSQLSelect += "ISNULL(H.PERSO,'')AS perso,ISNULL(I.NamaMarket,'')AS namamarket,ISNULL(I.LokasiLogo,'')AS logo, ";
                sSQLSelect += "ISNULL(F.NAMA,ISNULL(J.NAMA,'')) AS namapembeli, ISNULL(F.TLP,ISNULL(J.TLP,''))AS tlppembeli ";
                //add by nurul 26/3/2020
                sSQLSelect += ",ISNULL(A.NO_PO_CUST,'') AS no_job ";
                //end add by nurul 26/3/2020
                //add by nurul 15/5/2020
                sSQLSelect += ",A.KET ";
                //end add by nurul 15/5/2020
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";
                sSQL2 += "LEFT JOIN SIT01A D ON A.NO_BUKTI=D.NO_SO ";
                //sSQL2 += "LEFT JOIN ARF01C F ON D.PEMESAN = F.BUYER_CODE ";
                sSQL2 += "LEFT JOIN (SELECT A.BUYER_CODE,A.NAMA,A.TLP,ISNULL(A.NAMA_KABKOT,ISNULL(C.NAMAKABKOT,''))NAMA_KABKOT,ISNULL(A.NAMA_PROV,ISNULL(B.NAMAPROV,'')) NAMA_PROV,ISNULL(A.KODEPOS,'')KODEPOS,ISNULL(A.AL,'')AL FROM ARF01C A LEFT JOIN MO..PROVINSI B ON A.KODEPROV=B.KODEPROV LEFT JOIN MO..KabupatenKota C ON A.KODEKABKOT=C.KODEKABKOT) F ON D.PEMESAN = F.BUYER_CODE ";
                sSQL2 += "LEFT JOIN ARF01 H ON A.CUST=H.CUST ";
                sSQL2 += "LEFT JOIN MO.dbo.MARKETPLACE I ON H.NAMA=I.IDMARKET ";
                //sSQL2 += "LEFT JOIN ARF01C J ON J.BUYER_CODE = A.PEMESAN ";
                sSQL2 += "LEFT JOIN (SELECT A.BUYER_CODE,A.NAMA,A.TLP,ISNULL(A.NAMA_KABKOT,ISNULL(C.NAMAKABKOT,''))NAMA_KABKOT,ISNULL(A.NAMA_PROV,ISNULL(B.NAMAPROV,'')) NAMA_PROV,ISNULL(A.KODEPOS,'')KODEPOS,ISNULL(A.AL,'')AL FROM ARF01C A LEFT JOIN MO..PROVINSI B ON A.KODEPROV=B.KODEPROV LEFT JOIN MO..KabupatenKota C ON A.KODEKABKOT=C.KODEKABKOT) J ON J.BUYER_CODE = A.PEMESAN ";
                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListSot01a = ErasoftDbContext.Database.SqlQuery<tempLabel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                var namaPT = ErasoftDbContext.SIFSYS.Single(p => p.BLN == 1).NAMA_PT;
                var alamat1 = ErasoftDbContext.SIFSYS.Single(a => a.BLN == 1).ALAMAT_PT;
                var tlp = ErasoftDbContext.SIFSYS_TAMBAHAN.Single().TELEPON;

                var ym = new FakturViewModel()
                {
                    urlAl = alLink,
                    urlTlp = noLink,
                    urlMp = mpLink,
                    urlNobuk = nobukLink,
                    urlTotal = totalLink,
                    urlNama = namaLink,
                    urlLabel = ctkLabel,
                    urlKet = ketLink,
                };

                var listSi = ListSot01a.Select(p => p.si_bukti).ToList();
                var faktur = ErasoftDbContext.SIT01A.Where(a => listSi.Contains(a.NO_BUKTI)).ToList();
                var detailFaktur = ErasoftDbContext.SIT01B.Where(a => listSi.Contains(a.NO_BUKTI)).ToList(); ;

                foreach (var so in ListSot01a)
                {
                    var detailFakturIndb = detailFaktur.Where(a => a.NO_BUKTI == so.si_bukti).ToList();
                    //change by nurul 16/9/2020, barang multi sku 
                    //var listBarangInFakturDetail = detailFakturIndb.Select(p => p.BRG).ToList();
                    var listBarangInFakturDetail = (from p in detailFakturIndb
                                                    select new { BRG_NEW = p.BRG_MULTISKU != "" && p.BRG_MULTISKU != null ? p.BRG_MULTISKU : p.BRG }).Select(a => a.BRG_NEW).ToList();
                    //change by nurul 16/9/2020, barang multi sku 
                    var al_buyer = so.so_alamat + ' ' + so.so_kota + ' ' + so.so_propinsi + ' ' + so.so_pos;
                    var resi = so.no_resi;
                    //add by nurul 26/3/2020
                    var kodeBooking = so.no_job;
                    //if (so.namamarket.ToUpper() == "SHOPEE" || so.namamarket.ToUpper() == "TOKOPEDIA")
                    //{
                    //    if (so.no_job != "")
                    //    {
                    //        resi = so.no_job;
                    //    }
                    //}
                    //add by nurul 26/3/2020
                    var port = "";
                    var ref1 = "";
                    var netto = so.si_netto;
                    var logoKurir = so.kurir;
                    var tgl = DateTime.Now.ToString("dd/MM/yyyy");
                    var ambilRefTokped = so.so_referensi.Split(';');
                    var refNew = "";
                    var ket = "";
                    var ketTokped = new List<tempKetTokped>();
                    if (ambilRefTokped.Count() > 0)
                    {
                        refNew = ambilRefTokped.Last();
                    }

                    //add by nurul 15/5/2020
                    if (so.namamarket.ToUpper() == "SHOPEE" && so.ket != "" && so.ket != "-")
                    {
                        //ket = ErasoftDbContext.Database.SqlQuery<string>("Select ket from sot01a where no_bukti='" + so.so_bukti + "'").SingleOrDefault();
                        ket = so.ket;
                    }

                    if (so.namamarket.ToUpper() == "TOKOPEDIA")
                    {
                        EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in ('" + so.so_bukti + "')");
                        ketTokped = ErasoftDbContext.Database.SqlQuery<tempKetTokped>("Select no_bukti as Nobuk, brg as Brg, Ket_Detail as ketdetail, brg_multisku from sot01b where no_bukti='" + so.so_bukti + "'").ToList();
                    }
                    //add by nurul 15/5/2020

                    if (so.namamarket.ToUpper() == "LAZADA")
                    {
                        if (data.Count() > 0)
                        {
                            resi = data.Single(a => a.referensiApi == so.so_referensi).ResiApi;
                            port = data.Single(a => a.referensiApi == so.so_referensi).PortCodeApi;
                            ref1 = data.Single(a => a.referensiApi == so.so_referensi).referensiApi;
                            netto = Convert.ToDouble(data.Single(a => a.referensiApi == so.so_referensi).HargaApi);
                            logoKurir = data.Single(a => a.referensiApi == so.so_referensi).urlLogoKurirApi;
                            tgl = Convert.ToDateTime(data.Single(a => a.referensiApi == so.so_referensi).tglApi).ToString("dd/MM/yyyy");
                        }
                    }

                    var vm = new CetakLabelViewModel()
                    {
                        NamaToko = so.perso,
                        NamaPerusahaan = namaPT,
                        LogoMarket = so.logo,
                        Faktur = faktur.Where(a => a.NO_BUKTI == so.si_bukti).SingleOrDefault(),
                        namaPembeli = so.namapembeli,
                        tlpPembeli = so.tlppembeli,
                        ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && (a.TYPE == "3" || a.TYPE == "6")).ToList(),
                        ListFakturDetail = detailFaktur.Where(a => a.NO_BUKTI == so.si_bukti).ToList(),
                        AlamatToko = alamat1,
                        TlpToko = tlp,
                        //noRef = so.so_referensi,
                        noRef = refNew,
                        Kurir = so.kurir,
                        Marketplace = so.namamarket,
                        NoResi = resi,
                        alamatPenerima = al_buyer,
                        linktotal = $"Rp {String.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", (netto))}",
                        linktoko = toko,
                        linktlptoko = tlpToko,
                        linkport = portLink,
                        linkref = refLink,
                        isiPort = port,
                        isiRef = ref1,
                        tglKirim = (tgl == null || tgl == "01-01-0001" || tgl == "01/01/0001" ? DateTime.Now.ToString("dd/MM/yyyy") : tgl),
                        logoKurirApi = logoKurir,
                        KdBooking = kodeBooking,

                        //add by nurul 15/5/2020
                        listKetTokped = ketTokped,
                        Ket = ket,
                        //end add by nurul 15/5/2020
                    };

                    ym.ListCetakLabel.Add(vm);
                }

                return View(ym);
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        //end add by nurul 11/12/2019, cetak label pesanan

        //ADD BY NURUL 1/4/2020, PRINT LABEL TOKPED 
        public ActionResult TokopediaLabelPerPacking(string cust, string bukti, List<string> rows_selected, string label)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();


                var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == cust);

                List<string> orderItemIds = new List<string>();
                List<string> temp_htmlString = new List<string>();
                List<string> temp_strmsg = new List<string>();
                List<string> temp_strmsg_label = new List<string>();

                //add by nurul 16/12/2019
                bool gakketemulagi = false;
                var tempLblTokped = new List<tempLabelTokopedia>();

                var lastIndexHeader = 0;
                var lastIndexResi = 0;
                var lastIndexInvoice = 0;
                var lastIndexInsurance = 0;
                var lastIndexAddress = 0;
                var lastIndexProduct = 0;

                //end add by nurul 16/12/2019

                var listNobuk = "";
                var Valid = false;
                //ADD BY NURUL 24/2/2020
                if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                {
                    if (marketPlace.STATUS_API == "1")
                    {
                        Valid = true;
                    }
                    else
                    {
                        return new JsonResult { Data = new { mo_error = "Account link status is expired." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                var string_detailSO = "";
                foreach (var nobuk in ListStt01a)
                {
                    if (string_detailSO != "")
                    {
                        string_detailSO += ",";
                    }

                    string_detailSO += "'" + nobuk.no_bukti + "'";
                }
                string ssql = "SELECT ORDER_ITEM_ID,NO_BUKTI FROM SOT01B WHERE NO_BUKTI IN (" + string_detailSO + ") ";
                var listDetailSo = ErasoftDbContext.Database.SqlQuery<ORDERITEMSO>(ssql).ToList();
                var hitungDetail = listDetailSo.Count();

                TokopediaControllerJob.TokopediaAPIData data = new TokopediaControllerJob.TokopediaAPIData
                {
                    merchant_code = marketPlace.Sort1_Cust, //FSID
                    API_client_password = marketPlace.API_CLIENT_P, //Client Secret
                    API_client_username = marketPlace.API_CLIENT_U, //Client ID
                    API_secret_key = marketPlace.API_KEY, //Shop ID 
                    idmarket = marketPlace.RecNum.Value,
                    DatabasePathErasoft = dbPathEra,
                    username = usernameLogin
                };
                foreach (var so in ListStt01a)
                {
                    if (listNobuk != "")
                    {
                        listNobuk += ",";
                    }
                    listNobuk += "'" + so.no_bukti + "'";
                    if (Valid)
                    {
                        var tokpedApi = new TokopediaControllerJob();
                        var retApi = tokpedApi.PrintLabel(data, so.no_bukti, so.no_referensi);
                        if (retApi.Result.ToString().Contains("Error:"))
                        {
                            var strmsg = "No Bukti " + so.no_bukti + " " + retApi.ToString();
                            temp_strmsg.Add(strmsg);
                        }
                        else if (retApi.Result.ToString().Contains("Halaman Tidak Ditemukan"))
                        {
                            var strmsg = "No Bukti " + so.no_bukti + " tidak ditemukan labelnya.";
                            temp_strmsg.Add(strmsg);
                        }
                        else
                        {
                            var htmlString = retApi.Result;
                            //EDB.ExecuteSQL("sConn", CommandType.Text, "Update SOT01A set status_print = '1' where no_bukti in (''," + so.no_bukti + ")");
                            var sql = "update SOT01A set status_print = '1' where no_bukti in ('" + so.no_bukti + "')";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sql);

                            temp_htmlString.Add(htmlString);
                        }
                    }
                }

                var htmlString_new = "";
                for (int i = 0; i < temp_htmlString.Count; i++)
                {
                    htmlString_new += temp_htmlString[i];
                }

                while (!gakketemulagi)
                {
                    var idxHeader = htmlString_new.IndexOf("<table class=\"header\"", lastIndexHeader);

                    if (idxHeader < 0) { gakketemulagi = true; break; }

                    var idxEndHeader = htmlString_new.IndexOf("</table>", idxHeader);
                    var getHeader = htmlString_new.Substring((idxHeader), (idxEndHeader - (idxHeader)));
                    var header = getHeader + "</table>";

                    lastIndexResi = idxEndHeader;
                    var idxResi = htmlString_new.IndexOf("<img id=\"barcode-printout-1\"", lastIndexResi);
                    var getResi = "";
                    var idxEndResi = idxEndHeader;
                    if (idxResi < (idxEndHeader + 3000) && idxResi > 0)
                    {
                        var idxResi2 = htmlString_new.IndexOf("alt=\"", idxResi);
                        idxEndResi = htmlString_new.IndexOf("\" />", idxResi2);
                        getResi = htmlString_new.Substring((idxResi2 + 5), (idxEndResi - (idxResi2 + 5)));
                    }

                    lastIndexInvoice = idxEndHeader;
                    var idxInvoice = htmlString_new.IndexOf("<table class=\"meta\" cellspacing=\"0\" cellpadding=\"0\">", lastIndexInvoice);
                    var Invoice = "";
                    var idxEndInvoice = idxEndHeader;
                    if (getResi == "")
                    {
                        idxEndInvoice = htmlString_new.IndexOf("</table>", idxInvoice);
                        var getInvoice = htmlString_new.Substring((idxInvoice), (idxEndInvoice - (idxInvoice)));
                        Invoice = getInvoice + "</table>";
                    }
                    else
                    {
                        var idxInvoice2 = htmlString_new.IndexOf("<img", idxInvoice);
                        var getInvoice1 = htmlString_new.Substring((idxInvoice), (idxInvoice2 - (idxInvoice)));
                        var idxInvoice3 = htmlString_new.IndexOf("<div", idxInvoice2);
                        idxEndInvoice = htmlString_new.IndexOf("</table>", idxInvoice3);
                        var getInvoice = htmlString_new.Substring((idxInvoice3), (idxEndInvoice - (idxInvoice3)));
                        Invoice = getInvoice1 + getInvoice + "</table>";
                    }

                    lastIndexInsurance = idxEndInvoice;
                    var idxInsurance = htmlString_new.IndexOf("<table class=\"insurance\"", lastIndexInsurance);
                    var Insurance = "";
                    var idxEndInsurance = idxEndInvoice;
                    if (idxInsurance < (idxEndInvoice + 2000) && idxInsurance > 0)
                    {
                        idxEndInsurance = htmlString_new.IndexOf("</table>", idxInsurance);
                        var getInsurance = htmlString_new.Substring((idxInsurance), (idxEndInsurance - (idxInsurance)));
                        Insurance = getInsurance + "</table>";
                    }

                    lastIndexAddress = idxEndInsurance;
                    var idxAddress = htmlString_new.IndexOf("<table class=\"shipment-address\"", lastIndexAddress);
                    var idxEndAddress = htmlString_new.IndexOf("</table>", idxAddress);
                    var getAddress = htmlString_new.Substring((idxAddress), (idxEndAddress - (idxAddress)));
                    var Address = getAddress + "</table>";

                    lastIndexProduct = idxEndAddress;
                    var idxProduct = htmlString_new.IndexOf("<table class=\"products\"", lastIndexProduct);
                    var idxEndProduct = htmlString_new.IndexOf("</table>", idxProduct);
                    var getProduct = htmlString_new.Substring((idxProduct), (idxEndProduct - (idxProduct)));
                    var Product = getProduct + "</table>";

                    lastIndexHeader = idxEndHeader;
                    lastIndexResi = idxEndResi;
                    lastIndexInvoice = idxEndInvoice;
                    lastIndexInsurance = idxEndInsurance;
                    lastIndexAddress = idxEndAddress;
                    lastIndexProduct = idxEndProduct;

                    tempLblTokped.Add(new tempLabelTokopedia()
                    {
                        Header = header,
                        Resi = getResi,
                        Invoice = Invoice,
                        Insurance = Insurance,
                        Address = Address,
                        Product = Product
                    });
                }


                if (temp_strmsg.Count() > 0 && temp_htmlString.Count > 0)
                {
                    //return new JsonResult { Data = new { mo_error = temp_strmsg, mo_label = temp_htmlString }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    return new JsonResult { Data = new { mo_error = temp_strmsg, mo_label = tempLblTokped }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                else if (temp_strmsg.Count() > 0)
                {
                    return new JsonResult { Data = new { mo_error = temp_strmsg }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                else
                {
                    if (label == "1")
                    {
                        //return new JsonResult { Data = new { mo_label = temp_htmlString }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        //return Json(temp_htmlString, JsonRequestBehavior.AllowGet);
                        return new JsonResult { Data = new { mo_label = tempLblTokped }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                    else if (label == "2")
                    {
                        return new JsonResult { Data = new { mo_label = tempLblTokped }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        //return Json(tempResiLazada, JsonRequestBehavior.AllowGet);
                    }

                }
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            return JsonErrorMessage("This Function is for Lazada only");
        }

        public ActionResult KodeBookingTokpedPerPacking(string cust, string bukti, List<string> rows_selected)
        {
            try
            {
                if (rows_selected != null)
                {
                    if (rows_selected.Count() == 0)
                    {
                        return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    return new JsonResult { Data = new { mo_error = "Mohon pilih pesanan yang mau diproses." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var string_recnum = "";
                foreach (var so_recnum in rows_selected)
                {
                    if (string_recnum != "")
                    {
                        string_recnum += ",";
                    }

                    string_recnum += "'" + so_recnum + "'";
                }

                var listErrors = new List<PackingListErrors>();
                var listSuccess = new List<listSuccessPrintLabel>();
                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST, A.NAMA_CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item ";
                sSQLSelect += ",ISNULL(A.NO_PO_CUST,'') AS no_job ";
                string sSQL2 = "";
                sSQL2 += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') AND A.RECNUM IN (" + string_recnum + ") ";

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var ListStt01a = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
                foreach (var item in ListStt01a)
                {
                    if (string.IsNullOrEmpty(item.no_job))
                    {
                        var marketPlace = ErasoftDbContext.ARF01.Single(p => p.CUST == item.CUST);
                        if (!string.IsNullOrEmpty(marketPlace.STATUS_API))
                        {
                            if (marketPlace.STATUS_API == "1")
                            {
                                TokopediaControllerJob.TokopediaAPIData iden = new TokopediaControllerJob.TokopediaAPIData()
                                {
                                    merchant_code = marketPlace.Sort1_Cust, //FSID
                                    API_client_password = marketPlace.API_CLIENT_P, //Client ID
                                    API_client_username = marketPlace.API_CLIENT_U, //Client Secret
                                    API_secret_key = marketPlace.API_KEY, //Shop ID 
                                    token = marketPlace.TOKEN,
                                    idmarket = marketPlace.RecNum.Value,
                                    DatabasePathErasoft = dbPathEra,
                                    username = usernameLogin
                                };
                                string[] referensi = item.no_referensi.Split(';');
                                if (referensi.Count() > 0)
                                {
                                    //var sqlStorage = new SqlServerStorage(EDBConnID);
                                    //var clientJobServer = new BackgroundJobClient(sqlStorage);
                                    //clientJobServer.Enqueue<TokopediaControllerJob>(x => x.JOBCOD(iden, item.no_bukti, item.no_referensi));
                                    var tokpedAPI = new TokopediaControllerJob();
                                    var kdBooking = tokpedAPI.JOBCOD(iden, item.no_bukti, item.no_referensi);
                                    if (kdBooking.Result.ToString() != "")
                                    {
                                        listSuccess.Add(new listSuccessPrintLabel
                                        {
                                            no_referensi = item.no_bukti
                                        });
                                    }
                                    else
                                    {
                                        listErrors.Add(new PackingListErrors
                                        {
                                            keyname = item.no_bukti,
                                            errorMessage = "Pesanan tidak ditemukan kode bookingnya."
                                        });
                                    }
                                }
                                else
                                {
                                    listErrors.Add(new PackingListErrors
                                    {
                                        keyname = item.no_bukti,
                                        errorMessage = "Pesanan tidak bisa diproses Get Kode Booking."
                                    });
                                }
                            }
                            else
                            {
                                listErrors.Add(new PackingListErrors
                                {
                                    keyname = item.no_bukti,
                                    errorMessage = "Status Link ke Marketplace tidak aktif."
                                });
                            }
                        }
                        else
                        {
                            listErrors.Add(new PackingListErrors
                            {
                                keyname = item.no_bukti,
                                errorMessage = "Status Link ke Marketplace tidak aktif."
                            });
                        }
                    }
                    else
                    {
                        listErrors.Add(new PackingListErrors
                        {
                            keyname = item.no_bukti,
                            errorMessage = "Kode Booking sudah ada."
                        });
                    }
                }

                var successCount = listSuccess.Count();
                return new JsonResult { Data = new { listErrors, listSuccess, successCount = successCount }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //END ADD BY NURUL 1/4/2020, PRINT LABEL TOKPED 

        //add by nurul 29/4/2020
        public ActionResult LihatDetailPesanan(string brgId, int? page, string search = "")
        {
            //var vm = new ViewDetailPesanan() {
            //    totalPesanan = 0
            //};
            //if (brgId != null && brgId != "")
            //{
            //    string sSQL = "";
            //    sSQL += "SELECT A.NO_BUKTI,A.NO_REFERENSI,A.TGL,ISNULL(E.NAMAMARKET,'') AS NAMAMARKET,ISNULL(D.PERSO,'') AS PERSO,A.NAMAPEMESAN,A.SHIPMENT,A.STATUS_TRANSAKSI, B.BRG, QTY = ISNULL(SUM(ISNULL(QTY, 0)), 0) ";
            //    sSQL += "FROM SOT01A A(NOLOCK) INNER JOIN SOT01B B(NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI ";
            //    sSQL += "LEFT JOIN SIT01A C(NOLOCK) ON A.NO_BUKTI = C.NO_SO ";
            //    sSQL += "LEFT JOIN ARF01 D ON A.CUST=D.CUST ";
            //    sSQL += "LEFT JOIN MO..MARKETPLACE E ON D.NAMA=E.IDMARKET ";
            //    sSQL += "WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND ISNULL(C.NO_BUKTI, '') = '' and brg='" + brgId + "' ";
            //    sSQL += "GROUP BY A.NO_BUKTI,A.NO_REFERENSI,A.TGL,E.NAMAMARKET,D.PERSO,A.NAMAPEMESAN,A.SHIPMENT,A.STATUS_TRANSAKSI,B.BRG ";
            //    sSQL += "ORDER BY A.TGL ASC ";
            //    var ex = ErasoftDbContext.Database.SqlQuery<mdlDetailPesanan>(sSQL).ToList();
            //    if (ex.Count() > 0)
            //    {
            //        vm.listDetail = ex;
            //        vm.totalPesanan = ex.Count();
            //    }
            //}
            //return PartialView("ListDetailPesananBarang", vm);


            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["tempBarang"] = brgId;
            bool searchStatus = false;
            if (search.ToUpper() == "BELUM BAYAR")
            {
                search = "0";
                searchStatus = true;
            }
            else if (search.ToUpper() == "SUDAH BAYAR")
            {
                search = "01";
                searchStatus = true;
            }
            else if (search.ToUpper() == "PACKING")
            {
                search = "02";
                searchStatus = true;
            }
            else if (search.ToUpper() == "FAKTUR")
            {
                search = "03";
                searchStatus = true;
            }
            else if (search.ToUpper() == "SELESAI")
            {
                search = "04";
                searchStatus = true;
            }
            else if (search.ToUpper() == "BATAL")
            {
                search = "11";

            }
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLmarket = "";
            string sSQLpembeli = "";
            string sSQLkurir = "";
            string sSQLreferensi = "";
            if (!searchStatus)
            {
                if (getkata.Length > 0)
                {
                    if (search != "" && search != "undefined")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (i > 0)
                            {
                                sSQLkode += " and ";
                                sSQLmarket += " and ";
                                sSQLpembeli += " and ";
                                sSQLkurir += " and ";
                                sSQLreferensi += " and ";
                            }


                            sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                            sSQLmarket += "  (isnull(E.NamaMarket,'') + ' (' + isnull(D.PERSO,'') + ')' ) like '%" + getkata[i] + "%' ";
                            sSQLpembeli += "  A.NAMAPEMESAN like '%" + getkata[i] + "%' ";
                            sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                            sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";

                        }
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT A.NO_BUKTI,A.NO_REFERENSI,A.TGL,ISNULL(E.NAMAMARKET,'') AS NAMAMARKET,ISNULL(D.PERSO,'') AS PERSO,A.NAMAPEMESAN,A.SHIPMENT,A.STATUS_TRANSAKSI, B.BRG, QTY = ISNULL(SUM(ISNULL(QTY, 0)), 0) ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.NO_BUKTI) AS JUMLAH FROM ( ";
            string sSQL2 = "";
            sSQL2 += "FROM SOT01A A(NOLOCK) INNER JOIN SOT01B B(NOLOCK) ON A.NO_BUKTI = B.NO_BUKTI ";
            sSQL2 += "LEFT JOIN SIT01A C(NOLOCK) ON A.NO_BUKTI = C.NO_SO ";
            sSQL2 += "LEFT JOIN ARF01 D(NOLOCK) ON A.CUST=D.CUST ";
            sSQL2 += "LEFT JOIN MO..MARKETPLACE E(NOLOCK) ON D.NAMA=E.IDMARKET ";
            sSQL2 += "WHERE A.STATUS_TRANSAKSI IN ('0', '01', '02', '03', '04') AND ISNULL(C.NO_BUKTI, '') = '' and brg='" + brgId + "' ";
            if (search != "")
            {
                if (searchStatus)
                {
                    sSQL2 += " AND ( A.STATUS_TRANSAKSI = '" + search + "' )";
                }
                else
                {
                    sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLmarket + ") or (" + sSQLpembeli + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
                }
            }
            sSQL2 += "GROUP BY A.NO_BUKTI,A.NO_REFERENSI,A.TGL,E.NAMAMARKET,D.PERSO,A.NAMAPEMESAN,A.SHIPMENT,A.STATUS_TRANSAKSI,B.BRG ";
            var sSQLCount2 = ")A ";
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQLSelect + sSQL2 + sSQLCount2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY A.TGL ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlDetailPesanan>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlDetailPesanan> pageOrders = new StaticPagedList<mdlDetailPesanan>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("ListDetailPesananBarang", pageOrders);
        }

        //add by nurul 13/5/2020
        public ActionResult LihatDetailStok(string brgId, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["tempBarang"] = brgId;
            string[] getkata = search.Split(' ');
            string sSQLkode = "";
            string sSQLNama = "";

            if (getkata.Length > 0)
            {
                if (search != "" && search != "undefined")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLNama += " and ";
                        }


                        sSQLkode += " KODE_GUDANG like '%" + getkata[i] + "%' ";
                        sSQLNama += " NAMA_GUDANG like '%" + getkata[i] + "%' ";

                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT JUMLAH = ISNULL(SUM(QAWAL+(QM1+QM2+QM3+QM4+QM5+QM6+QM7+QM8+QM9+QM10+QM11+QM12)-(QK1+QK2+QK3+QK4+QK5+QK6+QK7+QK8+QK9+QK10+QK11+QK12)),0),KODE_GUDANG, NAMA_GUDANG, KD_HARGA_JUAL, STF08A.BRG ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(KODE_GUDANG) AS JUMLAH FROM ( ";
            string sSQL2 = "";
            sSQL2 += "FROM STF08A (NOLOCK) ";
            sSQL2 += "INNER JOIN STF18 (NOLOCK) ON STF08A.GD=STF18.KODE_GUDANG ";
            sSQL2 += "WHERE STF08A.TAHUN=YEAR(SYSDATETIME()) AND STF18.QOH_SALES=0 and STF08A.BRG='" + brgId + "' ";
            if (search != "")
            {
                sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLNama + ") ) ";
            }
            sSQL2 += "GROUP BY KODE_GUDANG,NAMA_GUDANG, KD_HARGA_JUAL, STF08A.BRG ";
            var sSQLCount2 = ")A ";
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQLSelect + sSQL2 + sSQLCount2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY KODE_GUDANG ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlDetailStok>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlDetailStok> pageOrders = new StaticPagedList<mdlDetailStok>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("ListDetailStokBarang", pageOrders);
        }
        //end add by nurul 13/5/2020


        //add by fauzi 14/07/2020
        public ActionResult LihatDetailHargaBeliTerakhir(string kodebarang, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["tempBarang"] = kodebarang;
            string[] getkata = search.Split(' ');
            string sSQLkodeINV = "";
            string sSQLNama = "";

            if (getkata.Length > 0)
            {
                if (search != "" && search != "undefined")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkodeINV += " and ";
                            sSQLNama += " and ";
                        }


                        sSQLkodeINV += " B.INV like '%" + getkata[i] + "%' ";
                        sSQLNama += " A.NAMA like '%" + getkata[i] + "%' ";

                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT B.TGLINPUT as Tanggal, B.INV as NoBukti, A.NAMA as Supplier, B.QTY as Qty, B.HBELI as Harga, (B.HBELI * B.QTY) AS JumlahGabung ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(B.INV) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM PBT01B B ";
            sSQL2 += "LEFT JOIN PBT01A A ON B.INV = A.INV ";
            sSQL2 += "WHERE B.BRG = '" + kodebarang + "' AND B.INV LIKE 'PB%' AND B.JENISFORM = '1' AND B.TGLINPUT >= DATEADD(MONTH, -3, GETDATE()) ";
            if (search != "")
            {
                sSQL2 += " AND ( (" + sSQLkodeINV + ") or (" + sSQLNama + ") ) ";
            }
            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY B.TGLINPUT DESC  ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var listOrderNew = ErasoftDbContext.Database.SqlQuery<mdlDetailHargaBeli>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();
            var listAverage = ErasoftDbContext.Database.SqlQuery<mdlDetailHargaBeli>(sSQLSelect + sSQL2).ToList();

            double jumlahAll = 0;
            double jumlahQTY = 0;
            foreach (var data in listAverage)
            {
                jumlahAll += data.JumlahGabung;
                jumlahQTY += data.Qty;
            }

            jumlahAll = jumlahAll / jumlahQTY;

            ViewData["jumlahAverage"] = string.Format(CultureInfo.CreateSpecificCulture("id-id"), "{0:N}", jumlahAll);

            IPagedList<mdlDetailHargaBeli> pageOrders = new StaticPagedList<mdlDetailHargaBeli>(listOrderNew, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("ListDetailHargaBeliTerakhir", pageOrders);
        }
        //end add by fauzi 14/07/2020

        //add by nurul 2/6/2020
        public ActionResult CetakLabelTokped(List<tempLabelTokopedia> data)
        {
            try
            {
                if (data.Count() > 0)
                {
                    var ym = new FakturViewModel()
                    {
                        listLabelTokped = data
                    };
                    return View(ym);
                }
                return new JsonResult { Data = new { mo_error = "Tidak ada data. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses pesanan. Mohon hubungi support." }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //end add by nurul 2/6/2020

        //add by nurul 8/6/2020
        public ActionResult ListFakturForReturPopUp(string noCust)
        {
            var vm = new FakturViewModel()
            {
                noCust = noCust,
            };

            return View(vm);
        }

        public ActionResult RefreshFakturForReturPopUp(int? page, string search = "", string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["custParam"] = cust;

            string[] getkata = search.Split(' ');
            string sSQLnofaktur = "";
            string sSQLnoref = "";
            string sSQLPembeli = "";
            string sSQLsisa = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLnofaktur += " AND ";
                            sSQLnoref += " AND ";
                            sSQLPembeli += " AND ";
                            sSQLsisa += " AND ";
                        }

                        sSQLnofaktur += " no_bukti like '%" + getkata[i] + "%' ";
                        sSQLnoref += "  isnull(no_ref,'') like '%" + getkata[i] + "%' ";
                        sSQLPembeli += "  isnull(namapemesan,'') like '%" + getkata[i] + "%' ";
                        sSQLsisa += "  isnull(netto,0) like '%" + getkata[i] + "%' ";

                    }
                }
            }


            string sSQLSelect = "";
            sSQLSelect += "select no_bukti, tgl, no_ref, namapemesan, netto ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(no_bukti) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "from sit01a (nolock) ";
            sSQL2 += "WHERE JENIS_FORM='2' AND CUST = '" + cust + "' AND STATUS IN (0,1) AND NO_BUKTI NOT IN ";
            sSQL2 += "(SELECT DISTINCT NO_REF FROM SIT01A (nolock) WHERE JENIS_FORM='3' AND STATUS IN (0,1)) ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLnofaktur + " or " + sSQLnoref + " or " + sSQLPembeli + " or " + sSQLsisa + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "order by tgl desc, no_bukti desc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<FakturForReturPrompt>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<FakturForReturPrompt> pageOrders = new StaticPagedList<FakturForReturPrompt>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturForReturPopUp", pageOrders);
        }

        public ActionResult ListBrgForReturPopUp(string noFaktur)
        {
            //var sSQL = "select no_urut, a.brg, nama + ' ' + isnull(nama2,'') as nama, qty, gudang from sit01b a inner join stf02 b on a.brg=b.brg where a.no_bukti='" + noFaktur + "' and b.type='3'";
            //var getDetail = ErasoftDbContext.Database.SqlQuery<brgForReturPrompt>(sSQL).ToList();
            //var getDetail = ErasoftDbContext.SIT01B.Where(a => a.NO_BUKTI == noFaktur && a.JENIS_FORM == "2").ToList();
            var vm = new FakturViewModel()
            {
                noFaktur = noFaktur,
                //listGudang = ErasoftDbContext.STF18.ToList()
                //listBarangRetur = getDetail,
            };

            return View(vm);
        }
        public ActionResult RefreshBrgForReturPopUp(string noFaktur)
        {
            var sSQL = "select no_urut as recnum, a.brg, nama + ' ' + isnull(nama2,'') as nama, qty, gudang from sit01b a inner join stf02 b on a.brg=b.brg where a.no_bukti='" + noFaktur + "' and b.type='3'";
            var getDetail = ErasoftDbContext.Database.SqlQuery<brgForReturPrompt>(sSQL).ToList();
            //var getDetail = ErasoftDbContext.SIT01B.Where(a => a.NO_BUKTI == noFaktur && a.JENIS_FORM == "2").ToList();
            var vm = new FakturViewModel()
            {
                noFaktur = noFaktur,
                listBarangRetur = getDetail,
            };

            return PartialView("TableBarangForReturPenj", vm);
        }
        //region retur pembelian 
        public ActionResult ListFakturForReturInvPopUp(string noCust)
        {
            var vm = new InvoiceViewModel()
            {
                noCust = noCust,
            };

            return View(vm);
        }

        public ActionResult RefreshFakturForReturInvPopUp(int? page, string search = "", string cust = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["custParam"] = cust;

            string[] getkata = search.Split(' ');
            string sSQLnofaktur = "";
            string sSQLnama = "";
            string sSQLsisa = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLnofaktur += " AND ";
                            sSQLnama += " AND ";
                            sSQLsisa += " AND ";
                        }

                        sSQLnofaktur += " inv like '%" + getkata[i] + "%' ";
                        sSQLnama += "  nama like '%" + getkata[i] + "%' ";
                        sSQLsisa += "  isnull(netto,0) like '%" + getkata[i] + "%' ";

                    }
                }
            }


            string sSQLSelect = "";
            sSQLSelect += "select inv, tgl, nama, netto ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(inv) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "from pbt01a (nolock) ";
            sSQL2 += "WHERE JENISFORM='1' AND SUPP = '" + cust + "' AND STATUS IN (0,1) AND inv NOT IN ";
            sSQL2 += "(SELECT DISTINCT REF FROM PBT01A (nolock) WHERE JENISFORM='2' AND STATUS IN (0,1)) ";
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLnofaktur + " or " + sSQLnama + " or " + sSQLsisa + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "order by tgl desc, INV desc ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<FakturForReturInvPrompt>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<FakturForReturInvPrompt> pageOrders = new StaticPagedList<FakturForReturInvPrompt>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TableFakturForReturInvPopUp", pageOrders);
        }

        public ActionResult ListBrgForReturInvPopUp(string noFaktur)
        {
            //var sSQL = "select no_urut, a.brg, nama + ' ' + isnull(nama2,'') as nama, qty, gudang from sit01b a inner join stf02 b on a.brg=b.brg where a.no_bukti='" + noFaktur + "' and b.type='3'";
            //var getDetail = ErasoftDbContext.Database.SqlQuery<brgForReturPrompt>(sSQL).ToList();
            //var getDetail = ErasoftDbContext.SIT01B.Where(a => a.NO_BUKTI == noFaktur && a.JENIS_FORM == "2").ToList();
            var vm = new InvoiceViewModel()
            {
                noInv = noFaktur,
                //listGudang = ErasoftDbContext.STF18.ToList()
                //listBarangRetur = getDetail,
            };

            return View(vm);
        }
        public ActionResult RefreshBrgForReturInvPopUp(string noFaktur)
        {
            var sSQL = "select no as recnum, a.brg, nama + ' ' + isnull(nama2,'') as nama, qty, gd from pbt01b a inner join stf02 b on a.brg=b.brg where a.INV='" + noFaktur + "' and b.type='3'";
            var getDetail = ErasoftDbContext.Database.SqlQuery<brgForReturInvPrompt>(sSQL).ToList();
            //var getDetail = ErasoftDbContext.SIT01B.Where(a => a.NO_BUKTI == noFaktur && a.JENIS_FORM == "2").ToList();
            var vm = new InvoiceViewModel()
            {
                noInv = noFaktur,
                listBarangReturInv = getDetail,
            };

            return PartialView("TableBarangForReturInvPenj", vm);
        }

        public ActionResult SaveHeaderReturFaktur(FakturViewModel dataVm)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                    return new JsonResult { Data = new { mo_error = dataVm.Errors }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                var noBukti = "";
                var noRef = dataVm.Faktur.NO_REF;

                if (dataVm.Faktur.RecNum == null)
                {

                    var cekREf = ErasoftDbContext.SIT01A.SingleOrDefault(f => f.NO_REF == dataVm.Faktur.NO_REF);
                    if (cekREf == null)
                    {
                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "RJ", "SIT01A", "NO_BUKTI");
                        var noOrder = "RJ" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                        var fakturInDb = ErasoftDbContext.SIT01A.SingleOrDefault(f => f.NO_BUKTI == dataVm.Faktur.NO_REF);

                        if (fakturInDb != null)
                        {
                            dataVm.Faktur.PEMESAN = fakturInDb.PEMESAN;
                            dataVm.Faktur.NAMAPEMESAN = fakturInDb.NAMAPEMESAN;
                        }

                        var CustInDb = ErasoftDbContext.ARF01.SingleOrDefault(p => p.CUST == dataVm.Faktur.CUST);
                        if (CustInDb != null)
                        {
                            dataVm.Faktur.NAMA_CUST = CustInDb.NAMA;
                            dataVm.Faktur.AL = CustInDb.AL;
                            dataVm.Faktur.AL2 = CustInDb.AL2;
                            dataVm.Faktur.AL3 = CustInDb.AL3;
                        }
                        dataVm.Faktur.NO_BUKTI = noOrder;
                        dataVm.Faktur.NO_F_PAJAK = "";
                        dataVm.Faktur.PPN_Bln_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("MM"));
                        dataVm.Faktur.PPN_Thn_Lapor = Convert.ToByte(dataVm.Faktur.TGL.ToString("yyyy").Substring(2, 2));

                        dataVm.Faktur.TGLINPUT = DateTime.Today;

                        noBukti = noOrder;
                        try
                        {
                            ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                            ErasoftDbContext.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            var tempSI = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == dataVm.Faktur.NO_BUKTI).Single();
                            if (tempSI != null)
                            {
                                if (tempSI.NO_BUKTI == noOrder)
                                {
                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                    lastBuktiNew++;
                                    noOrder = "RJ" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                    dataVm.Faktur.NO_BUKTI = noOrder;
                                    ErasoftDbContext.SIT01A.Add(dataVm.Faktur);
                                    ErasoftDbContext.SaveChanges();
                                }
                            }
                            else
                            {
                                dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                                return new JsonResult { Data = new { mo_error = dataVm.Errors }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                            }
                        }

                    }
                    else
                    {
                        dataVm.Faktur.NO_BUKTI = cekREf.NO_BUKTI;
                        noBukti = cekREf.NO_BUKTI;
                    }
                }
                return new JsonResult { Data = new { mo_success = true, mo_bukti = noBukti, mo_ref = noRef }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                var err = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public ActionResult SaveDetailReturFaktur(string get_selected, string bukti, string noref, string gudang, string get_selected_qty)
        {
            try
            {
                bool returBaru = false;
                var temp_brg = "";
                var rec_qty = new List<string>();
                var rec_detail = new List<string>();
                if (get_selected != null && get_selected != "")
                {
                    rec_detail = get_selected.Split(',').ToList();
                    foreach (var rec in rec_detail)
                    {
                        if (temp_brg != "")
                        {
                            temp_brg += ",";
                        }

                        temp_brg += "'" + rec + "'";
                    }
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Tidak ada barang yang dipilih.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                if (bukti != "" && bukti != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                if (noref != "" && noref != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                var cekExistHeader = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == bukti && a.NO_REF == noref).FirstOrDefault();
                if (cekExistHeader != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                //add by nurul 26/8/2020
                if (get_selected_qty != null && get_selected_qty != "")
                {
                    rec_qty = get_selected_qty.Split(';').ToList();
                    //foreach (var rec in rec_qty)
                    //{
                    //    if (temp_brg != "")
                    //    {
                    //        temp_brg += ",";
                    //    }

                    //    temp_brg += "'" + rec + "'";
                    //}
                    //returBaru = true;
                }
                //end add by nurul 26/8/2020

                if (returBaru)
                {
                    //change proses save detail
                    //object[] spParams = {
                    //        new SqlParameter("@NOBUK", bukti),
                    //        new SqlParameter("@NO_REF", noref),
                    //        new SqlParameter("@REC_DETAIL", temp_brg),
                    //        new SqlParameter("@GD", gudang)
                    //    };

                    //ErasoftDbContext.Database.ExecuteSqlCommand("exec [SP_AUTOLOADRETUR_PENJUALAN] @NOBUK, @NO_REF, @REC_DETAIL, @GD", spParams);


                    //END CHANGE BY NURUL 26/8/2020
                    if (temp_brg.Count() > 0)
                    {
                        //insert detail
                        //CHANGE BY NURUL 26/8/2020
                        //string insertDetail = "INSERT INTO SIT01B (JENIS_FORM,NO_BUKTI,BRG,BRG_CUST,H_SATUAN,SATUAN,QTY,GUDANG,DISCOUNT,NILAI_DISC, ";
                        //insertDetail += "   HARGA,QTY_KIRIM,AUTO_LOAD,USERNAME,TGLINPUT,QTY_RETUR,WRITE_KONFIG,DISCOUNT_2,DISCOUNT_3, ";
                        //insertDetail += "   DISCOUNT_4,DISCOUNT_5,NILAI_DISC_1,NILAI_DISC_2,NILAI_DISC_3,NILAI_DISC_4,NILAI_DISC_5, ";
                        //insertDetail += "   TOTAL_LOT,TOTAL_QTY,TGL_KIRIM,NO_URUT_SO,CATATAN,QTY_BESAR,QTY_KECIL,BRG_SO,TRANS_NO_URUT, ";
                        //insertDetail += "   SATUAN_N,QTY_N,NTITIPAN,DISC_TITIPAN,QOH ";
                        ////ADD BY NURUL 17/9/2020, BRG MULTI SKU 
                        //insertDetail += "   , BRG_MULTISKU ";
                        ////END ADD BY NURUL 17/9/2020, BRG MULTI SKU
                        //insertDetail += "   )";
                        //insertDetail += "SELECT ";
                        //insertDetail += "   3,'" + bukti + "', B.BRG,B.BRG_CUST,B.H_SATUAN,B.SATUAN,B.QTY,'" + gudang + "', ";
                        //insertDetail += "   B.DISCOUNT,B.NILAI_DISC,B.HARGA,B.QTY_KIRIM,B.AUTO_LOAD,B.USERNAME,B.TGLINPUT,B.QTY_RETUR,B.WRITE_KONFIG,B.DISCOUNT_2, ";
                        //insertDetail += "   B.DISCOUNT_3,B.DISCOUNT_4,B.DISCOUNT_5,B.NILAI_DISC_1,B.NILAI_DISC_2,B.NILAI_DISC_3,B.NILAI_DISC_4,B.NILAI_DISC_5,B.TOTAL_LOT, ";
                        //insertDetail += "   B.TOTAL_QTY,B.TGL_KIRIM,B.NO_URUT_SO,B.CATATAN,B.QTY_BESAR,B.QTY_KECIL,B.BRG_SO,B.NO_URUT,B.SATUAN_N,B.QTY_N,B.NTITIPAN,B.DISC_TITIPAN,B.QOH ";
                        ////ADD BY NURUL 17/9/2020, BRG MULTI SKU
                        //insertDetail += "   ,B.BRG_MULTISKU ";
                        ////END ADD BY NURUL 17/9/2020, BRG MULTI SKU 
                        //insertDetail += "FROM SIT01A A LEFT JOIN SIT01B B ON A.NO_BUKTI=B.NO_BUKTI  ";
                        //insertDetail += "WHERE A.NO_BUKTI='" + noref + "' AND B.NO_URUT IN (" + temp_brg + ") ";
                        //ErasoftDbContext.Database.ExecuteSqlCommand(insertDetail);

                        string insertDetail = "INSERT INTO SIT01B (JENIS_FORM,NO_BUKTI,BRG,BRG_CUST,H_SATUAN,SATUAN,QTY,GUDANG,DISCOUNT,NILAI_DISC, ";
                        insertDetail += "   HARGA,QTY_KIRIM,AUTO_LOAD,USERNAME,TGLINPUT,QTY_RETUR,WRITE_KONFIG,DISCOUNT_2,DISCOUNT_3, ";
                        insertDetail += "   DISCOUNT_4,DISCOUNT_5,NILAI_DISC_1,NILAI_DISC_2,NILAI_DISC_3,NILAI_DISC_4,NILAI_DISC_5, ";
                        insertDetail += "   TOTAL_LOT,TOTAL_QTY,TGL_KIRIM,NO_URUT_SO,CATATAN,QTY_BESAR,QTY_KECIL,BRG_SO,TRANS_NO_URUT, ";
                        insertDetail += "   SATUAN_N,QTY_N,NTITIPAN,DISC_TITIPAN,QOH ";
                        //ADD BY NURUL 17/9/2020, BRG MULTI SKU 
                        insertDetail += "   , BRG_MULTISKU ";
                        //END ADD BY NURUL 17/9/2020, BRG MULTI SKU
                        insertDetail += "   ) ";
                        for (int i = 0; i < rec_detail.Count(); i++)
                        {
                            var qtyBrg = Convert.ToDouble(rec_qty[i]);
                            var detail = rec_detail[i];
                            if (rec_detail.Count() > 0)
                            {
                                if (rec_detail[i] == rec_detail.First())
                                {
                                    insertDetail += " ( ";
                                }
                            }
                            insertDetail += "SELECT ";
                            insertDetail += "   '3','" + bukti + "',B.BRG,B.BRG_CUST,B.H_SATUAN,B.SATUAN,'" + qtyBrg + "','" + gudang + "',B.DISCOUNT,B.NILAI_DISC, ";
                            insertDetail += "   ((" + qtyBrg + " * B.H_SATUAN) - (B.NILAI_DISC_1 + B.NILAI_DISC_2)) AS HARGA, ";
                            insertDetail += "   B.QTY_KIRIM,B.AUTO_LOAD,B.USERNAME,B.TGLINPUT,B.QTY_RETUR,B.WRITE_KONFIG,B.DISCOUNT_2, ";
                            insertDetail += "   B.DISCOUNT_3,B.DISCOUNT_4,B.DISCOUNT_5,B.NILAI_DISC_1,B.NILAI_DISC_2,B.NILAI_DISC_3,B.NILAI_DISC_4,B.NILAI_DISC_5,B.TOTAL_LOT, ";
                            insertDetail += "   B.TOTAL_QTY,B.TGL_KIRIM,B.NO_URUT_SO,B.CATATAN,B.QTY_BESAR,B.QTY_KECIL,B.BRG_SO,B.NO_URUT,B.SATUAN_N,B.QTY_N,B.NTITIPAN,B.DISC_TITIPAN,B.QOH ";
                            //ADD BY NURUL 17/9/2020, BRG MULTI SKU
                            insertDetail += "   ,B.BRG_MULTISKU ";
                            //END ADD BY NURUL 17/9/2020, BRG MULTI SKU 
                            insertDetail += "FROM SIT01A A LEFT JOIN SIT01B B ON A.NO_BUKTI=B.NO_BUKTI  ";
                            insertDetail += "WHERE A.NO_BUKTI='" + noref + "' AND B.NO_URUT IN (" + rec_detail[i] + ")  ";
                            if (rec_detail.Count() > 0)
                            {
                                if (rec_detail[i] != rec_detail.Last())
                                {
                                    insertDetail += " union ";
                                }
                                if (rec_detail[i] == rec_detail.Last())
                                {
                                    insertDetail += ")";
                                }
                            }

                        }
                        ErasoftDbContext.Database.ExecuteSqlCommand(insertDetail);
                        //END CHANGE BY NURUL 26/8/2020


                        //update header
                        string updateHeader = "UPDATE A SET ";
                        updateHeader += "A.MATERAI=ISNULL(B.MATERAI,0), ";
                        updateHeader += "A.BRUTO=ISNULL(B.BRUTO,0), ";
                        updateHeader += "A.DISCOUNT=ISNULL(B.DISCOUNT,0), ";
                        updateHeader += "A.NILAI_DISC=ISNULL(B.NILAI_DISC,0), ";
                        updateHeader += "A.PPN=ISNULL(B.PPN,0), ";
                        updateHeader += "A.NILAI_PPN=ISNULL(B.NILAI_PPN,0), ";
                        updateHeader += "A.NETTO=ISNULL(B.NETTO,0) ";
                        updateHeader += "FROM SIT01A A ";
                        updateHeader += "INNER JOIN ( ";
                        updateHeader += "select B.NO_BUKTI,ISNULL(B.MATERAI,0) AS MATERAI, ";
                        updateHeader += "ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.H_SATUAN,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) AS BRUTO, ";
                        updateHeader += "ISNULL(B.DISCOUNT,0) AS DISCOUNT,ISNULL(B.NILAI_DISC,0) AS NILAI_DISC, ISNULL(B.PPN,0) AS PPN,";
                        //updateHeader += "ISNULL(B.NILAI_PPN,0) AS NILAI_PPN, ";
                        //--nppn
                        updateHeader += "ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.H_SATUAN,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NILAI_DISC,0)) * ISNULL(B.PPN,0) /100 ,0) AS NILAI_PPN,";
                        //netto
                        updateHeader += "ISNULL(";
                        updateHeader += "ISNULL(SUM(ISNULL(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.H_SATUAN,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0),0)),0) ";
                        updateHeader += "- ISNULL(B.NILAI_DISC,0) + ISNULL(B.MATERAI,0) ";
                        updateHeader += "+ ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.H_SATUAN,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NILAI_DISC,0)) * ISNULL(B.PPN,0) /100 ,0) ";
                        updateHeader += ",0) AS NETTO FROM SIT01A B INNER JOIN SIT01B C ON C.NO_BUKTI=B.NO_BUKTI ";
                        //updateHeader += "WHERE B.NO_BUKTI='" + noref + "' AND C.NO_URUT in (" + temp_brg + ") ";
                        updateHeader += "WHERE B.NO_BUKTI='" + bukti + "' ";
                        updateHeader += "GROUP BY B.NO_BUKTI, B.MATERAI,B.DISCOUNT,B.NILAI_DISC,B.PPN,B.NILAI_PPN ";
                        updateHeader += ")B ON A.NO_BUKTI=B.NO_BUKTI WHERE A.NO_BUKTI='" + bukti + "'";
                        ErasoftDbContext.Database.ExecuteSqlCommand(updateHeader);



                        ////update header
                        //string updateHeader = "UPDATE A SET ";
                        //updateHeader += "A.BRUTO=ISNULL(B.BRUTO,0), ";
                        //updateHeader += "A.DISC1=ISNULL(B.DISC1,0), ";
                        //updateHeader += "A.NDISC1=ISNULL(B.NDISC1,0), ";
                        //updateHeader += "A.NPPN=ISNULL(B.NPPN, 0), ";
                        //updateHeader += "A.NETTO=ISNULL(B.NETTO,0) ";
                        //updateHeader += "FROM PBT01A A ";
                        //updateHeader += "INNER JOIN ( ";
                        //updateHeader += "select B.INV, ISNULL(B.BIAYA_LAIN,0) AS BIAYA_LAIN, ";
                        //updateHeader += "ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) AS BRUTO, ";
                        //updateHeader += "ISNULL(B.DISC1,0) AS DISC1,ISNULL(B.NDISC1,0) AS NDISC1,ISNULL(B.PPN,0) AS PPN,";
                        ////updateHeader += "ISNULL(B.NPPN,0) AS NPPN, ";
                        ////nppn
                        //updateHeader += "ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NDISC1,0)) * ISNULL(B.PPN,0) /100 ,0) AS NPPN,";
                        ////netto
                        //updateHeader += "ISNULL(";
                        //updateHeader += "ISNULL(SUM(ISNULL(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0),0)),0) ";
                        //updateHeader += "- ISNULL(B.NDISC1,0) + ISNULL(B.BIAYA_LAIN,0) ";
                        //updateHeader += "+ ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NDISC1,0)) * ISNULL(B.PPN,0) /100 ,0) ";
                        //updateHeader += ",0) AS NETTO FROM PBT01A B INNER JOIN PBT01B C ON C.INV=B.INV ";
                        ////updateHeader += "WHERE B.INV='" + noref + "' AND C.NO in (" + temp_brg + ") ";
                        //updateHeader += "WHERE B.INV='" + bukti + "' ";
                        //updateHeader += "GROUP BY B.INV, B.BIAYA_LAIN,B.DISC1,B.NDISC1,B.PPN,B.NPPN  ";
                        //updateHeader += ")B ON A.INV=B.INV WHERE A.INV='" + bukti + "'";
                        //ErasoftDbContext.Database.ExecuteSqlCommand(updateHeader);
                    }

                    //end change proses save detail

                    List<string> listBrg = new List<string>();
                    var detailReturFakturInDb = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == bukti && pd.JENIS_FORM == "3").ToList();
                    foreach (var item in detailReturFakturInDb)
                    {
                        listBrg.Add(item.BRG);
                    }
                    updateStockMarketPlace(listBrg, "[INS_RJ][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
                }
                ModelState.Clear();

                var ListFakturDetail = ErasoftDbContext.SIT01B.AsNoTracking().Where(pd => pd.NO_BUKTI == bukti && pd.JENIS_FORM == "3").ToList();
                var listBarangInFakturDetail = ListFakturDetail.Select(p => p.BRG).ToList();
                var noref_MP = "";
                var ceknoref = ErasoftDbContext.SIT01A.Where(a => a.NO_BUKTI == noref).Select(a => a.NO_REF).SingleOrDefault();
                if (ceknoref != null)
                {
                    var temp = ceknoref.Split(';');
                    noref_MP = temp.Last();
                }
                var vm = new FakturViewModel()
                {
                    Faktur = ErasoftDbContext.SIT01A.AsNoTracking().Single(p => p.NO_BUKTI == bukti && p.JENIS_FORM == "3"),
                    ListFakturDetail = ListFakturDetail,
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInFakturDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                    noRef = noref_MP
                };

                return PartialView("BarangReturPartial", vm);
            }
            catch (Exception ex)
            {
                var err = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        public ActionResult SaveHeaderReturInvoice(InvoiceViewModel dataVm)
        {
            try
            {
                //if (!ModelState.IsValid)
                //{
                //    dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                //    return new JsonResult { Data = new { mo_error = dataVm.Errors }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                //}

                var noBukti = "";
                var noRef = dataVm.Invoice.REF;

                bool returBaru = false;

                if (dataVm.Invoice.RecNum == null)
                {
                    var cekREf = ErasoftDbContext.PBT01A.SingleOrDefault(f => f.REF == dataVm.Invoice.REF);
                    if (cekREf == null)
                    {
                        var lastBukti = GenerateAutoNumber(ErasoftDbContext, "RB", "PBT01A", "INV");
                        var noOrder = "RB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                        var invoiceDetailInDb = ErasoftDbContext.PBT01B.Where(b => b.INV == dataVm.Invoice.REF).ToList();
                        //foreach (var item in invoiceDetailInDb)
                        //{
                        //    var qtyOnHand = GetQOHSTF08A(item.BRG, item.GD);

                        //    if (qtyOnHand - item.QTY < 0)
                        //    {
                        //        var vmError = new InvoiceViewModel()
                        //        {

                        //        };
                        //        vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + item.BRG + " ) di gudang " + item.GD + " sisa ( " + Convert.ToString(qtyOnHand) + " ).");
                        //        //return Json(vmError, JsonRequestBehavior.AllowGet);
                        //        return new JsonResult { Data = new { mo_error = "Tidak bisa retur, Qty untuk barang ( " + item.BRG + " ) di gudang " + item.GD + " sisa ( " + Convert.ToString(qtyOnHand) + " ).", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        //    }
                        //}

                        var returInDb = ErasoftDbContext.PBT01A.SingleOrDefault(f => f.INV == dataVm.Invoice.REF);
                        if (returInDb != null)
                        {
                            dataVm.Invoice.TERM = returInDb.TERM;
                            dataVm.Invoice.TGJT = returInDb.TGJT;
                            dataVm.Invoice.BRUTO = returInDb.BRUTO;
                            dataVm.Invoice.NETTO = returInDb.NETTO;
                            dataVm.Invoice.PPN = returInDb.PPN;
                            dataVm.Invoice.NPPN = returInDb.NPPN;
                            dataVm.Invoice.NDISC1 = returInDb.NDISC1;
                            dataVm.Invoice.BIAYA_LAIN = returInDb.BIAYA_LAIN;
                        }

                        dataVm.Invoice.INV = noOrder;
                        dataVm.Invoice.F_PAJAK = "";
                        dataVm.Invoice.NAMA = ErasoftDbContext.APF01.Single(p => p.SUPP == dataVm.Invoice.SUPP).NAMA;
                        dataVm.Invoice.PPN_Bln_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("MM") ?? "0");
                        dataVm.Invoice.PPN_Thn_Lapor = Convert.ToByte(dataVm.Invoice.TGL?.ToString("yyyy").Substring(2, 2) ?? "0");

                        dataVm.Invoice.TGLINPUT = DateTime.Today;

                        noBukti = noOrder;
                        try
                        {
                            ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                            ErasoftDbContext.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            var tempSI = ErasoftDbContext.PBT01A.Where(a => a.INV == dataVm.Invoice.INV).Single();
                            if (tempSI != null)
                            {
                                if (tempSI.INV == noOrder)
                                {
                                    var lastBuktiNew = Convert.ToInt32(lastBukti);
                                    lastBuktiNew++;
                                    noOrder = "RB" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBuktiNew) + 1).PadLeft(6, '0');
                                    dataVm.Invoice.INV = noOrder;
                                    ErasoftDbContext.PBT01A.Add(dataVm.Invoice);
                                    ErasoftDbContext.SaveChanges();
                                }
                            }
                            else
                            {
                                dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support.");
                                //return Json(dataVm, JsonRequestBehavior.AllowGet);
                                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                            }
                        }
                        returBaru = true;
                    }
                }

                ErasoftDbContext.SaveChanges();
                ModelState.Clear();

                return new JsonResult { Data = new { mo_success = true, mo_bukti = noBukti, mo_ref = noRef }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            catch (Exception ex)
            {
                var err = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }

        //add by nurul 27/8/2020
        public ActionResult validasiQOHReturInvoice(string get_selected, string noref, string gudang, string get_selected_qty)
        {
            var temp_brg = "";
            var rec_detail = new List<string>();
            var rec_qty = new List<string>();
            if (get_selected != null && get_selected != "")
            {
                rec_detail = get_selected.Split(',').ToList();
                foreach (var rec in rec_detail)
                {
                    if (temp_brg != "")
                    {
                        temp_brg += ",";
                    }

                    temp_brg += "'" + rec + "'";
                }
            }
            else
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Tidak ada barang yang dipilih.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            if (get_selected_qty != null && get_selected_qty != "")
            {
                rec_qty = get_selected_qty.Split(';').ToList();
            }
            var invoiceDetailInDb = ErasoftDbContext.PBT01B.Where(b => b.INV == noref).ToList();
            if (invoiceDetailInDb.Count() > 0)
            {
                var vmError = new InvoiceViewModel()
                {

                };
                for (int i = 0; i < rec_detail.Count(); i++)
                {
                    var getbrg = invoiceDetailInDb.Where(a => a.NO.ToString() == rec_detail[i]).FirstOrDefault();
                    var qtyOnHand = GetQOHSTF08A(getbrg.BRG, gudang);

                    var qtyBrg = Convert.ToDouble(rec_qty[i]);
                    if (qtyOnHand - qtyBrg < 0)
                    {
                        vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + getbrg.BRG + " ) di gudang " + gudang + " sisa ( " + Convert.ToString(qtyOnHand) + " )." + System.Environment.NewLine);
                    }
                }

                if (vmError.Errors.Count() > 0)
                {
                    return new JsonResult { Data = new { mo_error = vmError.Errors.ToArray(), mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
            }
            else
            {
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
            return new EmptyResult();
        }
        //end add by nurul 27/8/2020

        public ActionResult SaveDetailReturInvoice(string get_selected, string bukti, string noref, string gudang, string get_selected_qty)
        {
            try
            {
                bool returBaru = false;
                var temp_brg = "";
                var rec_detail = new List<string>();
                var rec_qty = new List<string>();
                if (get_selected != null && get_selected != "")
                {
                    rec_detail = get_selected.Split(',').ToList();
                    foreach (var rec in rec_detail)
                    {
                        if (temp_brg != "")
                        {
                            temp_brg += ",";
                        }

                        temp_brg += "'" + rec + "'";
                    }
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Tidak ada barang yang dipilih.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                if (bukti != "" && bukti != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                if (noref != "" && noref != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }
                var cekExistHeader = ErasoftDbContext.PBT01A.Where(a => a.INV == bukti && a.REF == noref).FirstOrDefault();
                if (cekExistHeader != null)
                {
                    returBaru = true;
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                //add by nurul 26/8/2020
                if (get_selected_qty != null && get_selected_qty != "")
                {
                    rec_qty = get_selected_qty.Split(';').ToList();
                    //foreach (var rec in rec_qty)
                    //{
                    //    if (temp_brg != "")
                    //    {
                    //        temp_brg += ",";
                    //    }

                    //    temp_brg += "'" + rec + "'";
                    //}
                    //returBaru = true;
                }
                //end add by nurul 26/8/2020

                var invoiceDetailInDb = ErasoftDbContext.PBT01B.Where(b => b.INV == noref).ToList();
                if (invoiceDetailInDb.Count() > 0)
                {
                    //foreach (var item in rec_detail)
                    var vmError = new InvoiceViewModel()
                    {

                    };
                    for (int i = 0; i < rec_detail.Count(); i++)
                    {
                        var getbrg = invoiceDetailInDb.Where(a => a.NO.ToString() == rec_detail[i]).FirstOrDefault();
                        var qtyOnHand = GetQOHSTF08A(getbrg.BRG, gudang);

                        //if (qtyOnHand - getbrg.QTY < 0)
                        var qtyBrg = Convert.ToDouble(rec_qty[i]);
                        if (qtyOnHand - qtyBrg < 0)
                        {
                            
                            //vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + getbrg.BRG + " ) di gudang " + getbrg.GD + " sisa ( " + Convert.ToString(qtyOnHand) + " ).");
                            vmError.Errors.Add("Tidak bisa retur, Qty untuk barang ( " + getbrg.BRG + " ) di gudang " + gudang + " sisa ( " + Convert.ToString(qtyOnHand) + " )." + System.Environment.NewLine);
                            //return Json(vmError, JsonRequestBehavior.AllowGet);
                            //string sql1 = "delete from pbt01a where inv='" + bukti + "'";
                            //ErasoftDbContext.Database.ExecuteSqlCommand(sql1);
                            //return new JsonResult { Data = new { mo_error = "Tidak bisa retur, Qty untuk barang ( " + getbrg.BRG + " ) di gudang " + getbrg.GD + " sisa ( " + Convert.ToString(qtyOnHand) + " ).", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                            //return new JsonResult { Data = new { mo_error = "Tidak bisa retur, Qty untuk barang ( " + getbrg.BRG + " ) di gudang " + gudang + " sisa ( " + Convert.ToString(qtyOnHand) + " ).", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                        }
                    }

                    if(vmError.Errors.Count() > 0)
                    {
                        string sql1 = "delete from pbt01a where inv='" + bukti + "'";
                        ErasoftDbContext.Database.ExecuteSqlCommand(sql1);
                        return new JsonResult { Data = new { mo_error = vmError.Errors.ToArray(), mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                    }
                }
                else
                {
                    returBaru = false;
                    return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                }

                if (returBaru)
                {
                    //change proses save detail
                    //    object[] spParams = {
                    //new SqlParameter("@NOBUK",dataVm.Invoice.INV),
                    //new SqlParameter("@NO_REF",dataVm.Invoice.REF)
                    //};

                    //    ErasoftDbContext.Database.ExecuteSqlCommand("exec [SP_AUTOLOADRETUR_PEMBELIAN] @NOBUK, @NO_REF", spParams);

                    if (temp_brg.Count() > 0)
                    {
                        //insert detail
                        //CHANGE BY NURUL 26/8/2020
                        //string insertDetail = "INSERT INTO PBT01B (JENISFORM,INV,PO,BRG,NAMA_BRG,GD,BK,QTY,DISC2,NDISC2,HBELI,THARGA,NOBUK,AUTO_LOAD, ";
                        //insertDetail += "   QTY_RETUR,BIAYA,USERNAME,TGLINPUT,TOTAL_LOT,TOTAL_QTY,DISCOUNT_1,DISCOUNT_2,DISCOUNT_3, ";
                        //insertDetail += "   NILAI_DISC_1,NILAI_DISC_2,NILAI_DISC_3,KET,NO_URUT_PO,PPNBM,NILAI_PPNBM,BRG_ORIGINAL,LKU ";
                        //insertDetail += "   )";
                        //insertDetail += "SELECT ";
                        //insertDetail += "   '2','" + bukti + "',B.PO,B.BRG,B.NAMA_BRG,'" + gudang + "',B.BK,B.QTY,B.DISC2,B.NDISC2,B.HBELI,B.THARGA,B.NOBUK,B.AUTO_LOAD,";
                        //insertDetail += "   B.QTY_RETUR,B.BIAYA,B.USERNAME,B.TGLINPUT,B.TOTAL_LOT,B.TOTAL_QTY,B.DISCOUNT_1,B.DISCOUNT_2,B.DISCOUNT_3, ";
                        //insertDetail += "   B.NILAI_DISC_1,B.NILAI_DISC_2,B.NILAI_DISC_3,B.KET,B.NO,B.PPNBM,B.NILAI_PPNBM,B.BRG_ORIGINAL,B.LKU ";
                        //insertDetail += "FROM PBT01A A LEFT JOIN PBT01B B ON A.INV=B.INV  ";
                        //insertDetail += "WHERE A.INV='" + noref + "' AND B.NO IN (" + temp_brg + ") ";
                        //ErasoftDbContext.Database.ExecuteSqlCommand(insertDetail);
                        string insertDetail = "INSERT INTO PBT01B (JENISFORM,INV,PO,BRG,NAMA_BRG,GD,BK,QTY,DISC2,NDISC2,HBELI,THARGA,NOBUK,AUTO_LOAD, ";
                        insertDetail += "   QTY_RETUR,BIAYA,USERNAME,TGLINPUT,TOTAL_LOT,TOTAL_QTY,DISCOUNT_1,DISCOUNT_2,DISCOUNT_3, ";
                        insertDetail += "   NILAI_DISC_1,NILAI_DISC_2,NILAI_DISC_3,KET,NO_URUT_PO,PPNBM,NILAI_PPNBM,BRG_ORIGINAL,LKU ";
                        insertDetail += "   ) ";
                        for (int i = 0; i < rec_detail.Count(); i++)
                        {
                            var qtyBrg = Convert.ToDouble(rec_qty[i]);
                            var detail = rec_detail[i];
                            if (rec_detail.Count() > 0)
                            {
                                if (rec_detail[i] == rec_detail.First())
                                {
                                    insertDetail += " ( ";
                                }
                            }
                                insertDetail += "SELECT ";
                                insertDetail += "   '2','" + bukti + "',B.PO,B.BRG,B.NAMA_BRG,'" + gudang + "',B.BK,'" + qtyBrg + "',B.DISC2,B.NDISC2,B.HBELI, ";
                                insertDetail += "   ((" + qtyBrg + " * B.HBELI) - (B.NILAI_DISC_1 + B.NILAI_DISC_2)) AS THARGA, ";
                                insertDetail += "   B.NOBUK,B.AUTO_LOAD, ";
                                insertDetail += "   B.QTY_RETUR,B.BIAYA,B.USERNAME,B.TGLINPUT,B.TOTAL_LOT,B.TOTAL_QTY,B.DISCOUNT_1,B.DISCOUNT_2,B.DISCOUNT_3, ";
                                insertDetail += "   B.NILAI_DISC_1,B.NILAI_DISC_2,B.NILAI_DISC_3,B.KET,B.NO,B.PPNBM,B.NILAI_PPNBM,B.BRG_ORIGINAL,B.LKU ";
                                insertDetail += "FROM PBT01A A LEFT JOIN PBT01B B ON A.INV=B.INV  ";
                                insertDetail += "WHERE A.INV='" + noref + "' AND B.NO IN (" + rec_detail[i] + ")  ";
                            if(rec_detail.Count() > 0)
                            {
                                if (rec_detail[i] != rec_detail.Last())
                                {
                                    insertDetail += " union ";
                                }
                                if (rec_detail[i] == rec_detail.Last())
                                {
                                    insertDetail += ")";
                                }
                            }
                            
                        }
                        ErasoftDbContext.Database.ExecuteSqlCommand(insertDetail);
                        //END CHANGE BY NURUL 26/8/2020

                        //update header
                        string updateHeader = "UPDATE A SET ";
                        updateHeader += "A.BRUTO=ISNULL(B.BRUTO,0), ";
                        updateHeader += "A.DISC1=ISNULL(B.DISC1,0), ";
                        updateHeader += "A.NDISC1=ISNULL(B.NDISC1,0), ";
                        updateHeader += "A.NPPN=ISNULL(B.NPPN, 0), ";
                        updateHeader += "A.NETTO=ISNULL(B.NETTO,0) ";
                        updateHeader += "FROM PBT01A A ";
                        updateHeader += "INNER JOIN ( ";
                        updateHeader += "select B.INV, ISNULL(B.BIAYA_LAIN,0) AS BIAYA_LAIN, ";
                        updateHeader += "ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) AS BRUTO, ";
                        updateHeader += "ISNULL(B.DISC1,0) AS DISC1,ISNULL(B.NDISC1,0) AS NDISC1,ISNULL(B.PPN,0) AS PPN,";
                        //updateHeader += "ISNULL(B.NPPN,0) AS NPPN, ";
                        //nppn
                        updateHeader += "ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NDISC1,0)) * ISNULL(B.PPN,0) /100 ,0) AS NPPN,";
                        //netto
                        updateHeader += "ISNULL(";
                        updateHeader += "ISNULL(SUM(ISNULL(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0),0)),0) ";
                        updateHeader += "- ISNULL(B.NDISC1,0) + ISNULL(B.BIAYA_LAIN,0) ";
                        updateHeader += "+ ISNULL( (ISNULL(SUM(ISNULL(ISNULL(C.QTY,0) * ISNULL(C.HBELI,0),0) - ISNULL(ISNULL(C.NILAI_DISC_1,0) + ISNULL(C.NILAI_DISC_2,0),0)),0) - ISNULL(B.NDISC1,0)) * ISNULL(B.PPN,0) /100 ,0) ";
                        updateHeader += ",0) AS NETTO FROM PBT01A B INNER JOIN PBT01B C ON C.INV=B.INV ";
                        //updateHeader += "WHERE B.INV='" + noref + "' AND C.NO in (" + temp_brg + ") ";
                        updateHeader += "WHERE B.INV='" + bukti + "' ";
                        updateHeader += "GROUP BY B.INV, B.BIAYA_LAIN,B.DISC1,B.NDISC1,B.PPN,B.NPPN  ";
                        updateHeader += ")B ON A.INV=B.INV WHERE A.INV='" + bukti + "'";
                        ErasoftDbContext.Database.ExecuteSqlCommand(updateHeader);
                    }

                    //end change proses save detail

                    List<string> listBrg = new List<string>();
                    var detailReturInvoiceInDb = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == bukti && pd.JENISFORM == "2").ToList();
                    foreach (var item in detailReturInvoiceInDb)
                    {
                        listBrg.Add(item.BRG);
                    }
                    updateStockMarketPlace(listBrg, "[INS_RB][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");

                }
                ModelState.Clear();

                //var cek = ErasoftDbContext.PBT01A.AsNoTracking().Single(p => p.INV == bukti && p.JENISFORM == "2");
                //var cek2 = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == bukti && pd.JENISFORM == "2").ToList();
                var ListInvoiceDetail = ErasoftDbContext.PBT01B.AsNoTracking().Where(pd => pd.INV == bukti && pd.JENISFORM == "2").ToList();
                var listBarangInInvoiceDetail = ListInvoiceDetail.Select(p => p.BRG).ToList();
                var vm = new InvoiceViewModel()
                {
                    Invoice = ErasoftDbContext.PBT01A.AsNoTracking().Single(p => p.INV == bukti && p.JENISFORM == "2"),
                    ListInvoiceDetail = ListInvoiceDetail,
                    ListBarang = ErasoftDbContext.STF02.Where(a => listBarangInInvoiceDetail.Contains(a.BRG) && a.TYPE == "3").ToList(),
                };

                return PartialView("BarangReturInvoicePartial", vm);
            }
            catch (Exception ex)
            {
                string sql1 = "delete from pbt01a where inv='" + bukti + "'";
                ErasoftDbContext.Database.ExecuteSqlCommand(sql1);
                var err = ex.InnerException == null ? ex.Message : ex.InnerException.Message;
                return new JsonResult { Data = new { mo_error = "Gagal memproses retur. Mohon hubungi support.", mo_success = false }, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            }
        }
        //end add by nurul 8/6/2020

        //add by nurul 24/7/2020
        public ActionResult refreshTablePackingListPerAkun(string bukti, string cust, string marketplace, string search = "", string filter = "", string filtervalue = "")
        {
            var listData = new tempListPacking()
            {
                BUKTI = bukti,
                CUST = cust
            };
            string viewName = "";
            switch (marketplace)
            {
                case "LAZADA":
                    viewName = "ListDetailPackingListLazada";
                    break;
                //case "BUKALAPAK":
                //    viewName = "PackingListBukalapak";
                //    break;
                //case "ELEVENIA":
                //    viewName = "PackingListElevenia";
                //    break;
                case "TOKOPEDIA":
                    viewName = "ListDetailPackingListTokped";
                    break;
                case "BLIBLI":
                    viewName = "ListDetailPackingListBlibli";
                    break;
                case "SHOPEE":
                    viewName = "ListDetailPackingListShopee";
                    break;
                case "JDID":
                    viewName = "ListDetailPackingListJDID";
                    break;
                case "82CART":
                    viewName = "ListDetailPackingList82cart";
                    break;
                case "SHOPIFY":
                    viewName = "ListDetailPackingListShopify";
                    break;
                default:
                    viewName = "";
                    break;
            }
            if (bukti != null && cust != null)
            {
                string[] getkata = search.Split(' ');
                string sSQLkode = "";
                string sSQLkdbooking = "";
                string sSQLresi = "";
                string sSQLpembeli = "";
                string sSQLkurir = "";
                string sSQLreferensi = "";
                string sSQLjob = "";
                if (getkata.Length > 0)
                {
                    if (search != "")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (i > 0)
                            {
                                sSQLkode += " and ";
                                sSQLkdbooking += " and ";
                                sSQLpembeli += " and ";
                                sSQLresi += " and ";
                                sSQLkurir += " and ";
                                sSQLreferensi += " and ";
                                if (marketplace == "TOKOPEDIA" || marketplace == "SHOPEE")
                                {
                                    sSQLjob += " and ";
                                }
                            }

                            sSQLkode += " A.NO_BUKTI like '%" + getkata[i] + "%' ";
                            sSQLkdbooking += "  isnull(A.NO_PO_CUST,'') like '%" + getkata[i] + "%' ";
                            sSQLpembeli += " B.PEMBELI like '%" + getkata[i] + "%' ";
                            sSQLresi += "  isnull(A.TRACKING_SHIPMENT,'') like '%" + getkata[i] + "%' ";
                            sSQLkurir += "  A.SHIPMENT like '%" + getkata[i] + "%' ";
                            sSQLreferensi += "  A.NO_REFERENSI like '%" + getkata[i] + "%' ";
                            if (marketplace == "TOKOPEDIA" || marketplace == "SHOPEE")
                            {
                                sSQLjob += " A.NO_PO_CUST like '%" + getkata[i] + "%' ";
                            }
                        }
                    }
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT A.CUST,A.NAMA_CUST, A.NO_BUKTI as no_bukti,A.NO_REFERENSI as no_referensi,B.PEMBELI as nama_pemesan,A.SHIPMENT as kurir, 0 as jumlah_item, isnull(A.status_kirim,'') AS status_kirim, isnull(A.TRACKING_SHIPMENT,'') as tracking_no, A.recnum as so_recnum ";
                sSQLSelect += ", A.NO_PO_CUST as no_job, isnull(A.status_print,'') AS status_print ";
                string sSQLCount = "";
                sSQLCount += "SELECT COUNT(A.NO_BUKTI) AS JUMLAH ";
                string sSQL2 = "";
                sSQLSelect += "FROM SOT01A A INNER JOIN SOT03B B ON A.NO_BUKTI = B.NO_PESANAN AND B.NO_BUKTI = '" + bukti + "' AND A.CUST IN ('" + cust + "') ";
                string sSQLTemp = "";
                switch (filter)
                {
                    case "kirim":
                        {
                            sSQLTemp = "WHERE ISNULL(STATUS_KIRIM,'') = '" + filtervalue + "' ";
                        }
                        break;
                    case "print":
                        {
                            sSQLTemp = "WHERE ISNULL(STATUS_PRINT,'0') = '" + filtervalue + "' ";
                        }
                        break;
                    default:
                        {
                            sSQLTemp += "";
                        }
                        break;
                }
                if (search != "")
                {
                    if (sSQLTemp != "")
                    {
                        if (marketplace == "TOKOPEDIA" || marketplace == "SHOPEE")
                        {
                            sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLkdbooking + ") or (" + sSQLpembeli + ") or (" + sSQLresi + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") or (" + sSQLjob + ") ) ";
                        }
                        else
                        {
                            sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLkdbooking + ") or (" + sSQLpembeli + ") or (" + sSQLresi + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
                        }
                    }
                    else
                    {
                        if (marketplace == "TOKOPEDIA" || marketplace == "SHOPEE")
                        {
                            sSQL2 += " WHERE ( (" + sSQLkode + ") or (" + sSQLkdbooking + ") or (" + sSQLpembeli + ") or (" + sSQLresi + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") or (" + sSQLjob + ") ) ";
                        }
                        else
                        {
                            sSQL2 += " WHERE ( (" + sSQLkode + ") or (" + sSQLkdbooking + ") or (" + sSQLpembeli + ") or (" + sSQLresi + ") or (" + sSQLkurir + ") or (" + sSQLreferensi + ") ) ";
                        }
                    }
                }
                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.TGL DESC, A.NO_BUKTI DESC ";

                var listOrder = ErasoftDbContext.Database.SqlQuery<PackingPerMP>(sSQLSelect + sSQL2 + sSQLTemp + sSQLSelect2).ToList();
                listData.listPacking.AddRange(listOrder);
            }
            return PartialView(viewName, listData);
        }

        public ActionResult refreshTablePackingTabPesanan(string bukti, string search = "", string filter = "", string filtervalue = "")
        {
            var listData = new templistDetailPacking()
            {
                nobuk = bukti
            };
            if (bukti != null)
            {
                string[] getkata = search.Split(' ');
                string sSQLkode = "";
                string sSQLmarket = "";
                string sSQLresi = "";
                string sSQLpembeli = "";
                string sSQLreferensi = "";
                if (getkata.Length > 0)
                {
                    if (search != "")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (i > 0)
                            {
                                sSQLkode += " and ";
                                sSQLpembeli += " and ";
                                //sSQLresi += " and ";
                                sSQLreferensi += " and ";
                                sSQLmarket += " and ";
                            }

                            sSQLkode += " A.NO_PESANAN like '%" + getkata[i] + "%' ";
                            sSQLpembeli += " a.PEMBELI like '%" + getkata[i] + "%' ";
                            //sSQLresi += "  isnull(b.TRACKING_SHIPMENT,'') like '%" + getkata[i] + "%' ";
                            sSQLreferensi += "  b.NO_REFERENSI like '%" + getkata[i] + "%' ";
                            sSQLmarket += "  a.MARKETPLACE like '%" + getkata[i] + "%' ";
                        }
                    }
                }

                string sSQLSelect = "";
                sSQLSelect += "select a.RecNum, a.NO_BUKTI, a.PEMBELI, a.TGL_INPUT, a.USERNAME, a.NO_PESANAN, a.TGL_PESANAN, a.MARKETPLACE, ";
                sSQLSelect += "ISNULL(b.STATUS_KIRIM,'0') AS SO_STATUS_KIRIM, ISNULL(b.TRACKING_SHIPMENT,'') AS SO_TRACKING_NUMBER, ISNULL(b.NO_REFERENSI,'') AS NO_REFERENSI, ISNULL(b.STATUS_PRINT,'0') AS STATUS_PRINT, ISNULL(b.TIPE_KIRIM,0) AS BARCODE  ";
                string sSQLCount = "";
                sSQLCount += "SELECT COUNT(A.NO_BUKTI) AS JUMLAH ";
                string sSQL2 = "";
                sSQLSelect += "from sot03b a left join sot01a b on a.no_pesanan=b.no_bukti where a.no_bukti = '" + bukti + "' ";
                string sSQLTemp = "";
                switch (filter)
                {
                    case "kirim":
                        {
                            sSQLTemp = "AND ISNULL(b.STATUS_KIRIM,'0') = '" + filtervalue + "' ";
                        }
                        break;
                    case "print":
                        {
                            sSQLTemp = "AND ISNULL(b.STATUS_PRINT,'0') = '" + filtervalue + "' ";
                        }
                        break;
                    default:
                        {
                            sSQLTemp += "";
                        }
                        break;
                }
                if (search != "")
                {
                    sSQL2 += " AND ( (" + sSQLkode + ") or (" + sSQLpembeli + ") or (" + sSQLmarket + ") or (" + sSQLreferensi + ") ) ";
                }
                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY A.RecNum asc ";

                var listOrder = ErasoftDbContext.Database.SqlQuery<SOT03BDetailPacking>(sSQLSelect + sSQL2 + sSQLTemp + sSQLSelect2).ToList();
                listData.listDetail.AddRange(listOrder);
            }
            return PartialView("ListDetailPackingList", listData);
        }
        //end add by nurul 24/7/2020

        //add by Tri 13 Aug 2020, refresh stok per brg
        public ActionResult UpdateStokPerBarang(string brg)
        {
            List<string> listBrg = new List<string>();

            listBrg.Add(brg);

            updateStockMarketPlace(listBrg, "[UP_STOK][" + DateTime.UtcNow.AddHours(7).ToString("yyyyMMddHHmmss") + "]");

            return JsonErrorMessage("");
        }
        //end add by Tri 13 Aug 2020, refresh stok per brg

        //add by nurul 5/8/2020
        public ActionResult ShowErrorLogPosting(string logErr)
        {
            var vm = new LOG_IMPORT_FAKTUR() { };
            if (logErr != "" && logErr != null)
            {
                AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
                string uname = sessionData.Account.Username;

                var cekLogPosting = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == "POSTING").OrderByDescending(a => a.UPLOAD_DATETIME).FirstOrDefault();
                if (cekLogPosting != null && cekLogPosting.LOG_FILE.Contains(sessionData.Account.DatabasePathErasoft))
                {
                    var logPath = Path.Combine(Server.MapPath("~/Content/Uploaded/LogPosting/"), cekLogPosting.LOG_FILE);
                    if (System.IO.File.Exists(logPath))
                    {
                        System.IO.File.Delete(logPath);
                    }
                }

                string message = "";
                string filename = "Log_Posting_" + sessionData.Account.DatabasePathErasoft + "_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".txt";
                var path = Path.Combine(Server.MapPath("~/Content/Uploaded/LogPosting/"), filename);

                LOG_IMPORT_FAKTUR newLogImportPosting = new LOG_IMPORT_FAKTUR
                {
                    CUST = "POSTING",
                    UPLOADER = uname,
                    //change by nurul 28/11/2019
                    //UPLOAD_DATETIME = DateTime.Now,
                    UPLOAD_DATETIME = DateTime.UtcNow.AddHours(7),
                    //end change by nurul 28/11/2019
                    LOG_FILE = filename,
                    LAST_FAKTUR_UPLOADED = "",
                    LAST_FAKTUR_UPLOADED_DATETIME = DateTime.UtcNow.AddHours(7),
                };
                ErasoftDbContext.LOG_IMPORT_FAKTUR.Add(newLogImportPosting);
                ErasoftDbContext.SaveChanges();

                //bool folderExists = Directory.Exists(Server.MapPath("LogPosting"));
                //if (!folderExists)
                //{
                //    Directory.CreateDirectory(Server.MapPath("LogPosting"));
                //}

                if (!System.IO.File.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/Uploaded/LogPosting/"), ""));
                    var asd = System.IO.File.Create(path);
                    asd.Close();
                }
                StreamWriter tw = new StreamWriter(path);
                message = logErr + System.Environment.NewLine;
                tw.WriteLine(message);
                tw.Close();
                vm = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == "POSTING").OrderByDescending(a => a.UPLOAD_DATETIME).FirstOrDefault();

            }
            return PartialView("PostingView", vm);
        }

        [HttpGet]
        public FileResult DownloadLogPosting(string filename)
        {
            AccountUserViewModel sessionData = System.Web.HttpContext.Current.Session["SessionInfo"] as AccountUserViewModel;
            var path = Path.Combine(Server.MapPath("~/Content/Uploaded/LogPosting/"), filename);

            byte[] data = System.IO.File.ReadAllBytes(path);
            string contentType = MimeMapping.GetMimeMapping(path);
            var cd = new System.Net.Mime.ContentDisposition
            {
                FileName = filename,
                Inline = true,
            };
            //Response.AppendHeader("Content-Disposition", cd.ToString());

            return File(data, contentType, filename);
        }

        public ActionResult ErrorLogPosting()
        {
            var vm = new LOG_IMPORT_FAKTUR()
            {

            };
            vm = ErasoftDbContext.LOG_IMPORT_FAKTUR.Where(a => a.CUST == "POSTING").OrderByDescending(a => a.UPLOAD_DATETIME).FirstOrDefault();
            return PartialView("PostingView", vm);
        }
        //end add by nurul 5/8/2020

        //add by nurul 19/8/2020
        [Route("manage/MultiSKUMenu")]
        public ActionResult MultiSKUMenu()
        {
            var vm = new multiSKUViewModel()
            {
                //ListPiutang = ErasoftDbContext.STF03C.Where(b => b.RANGKA == "1").ToList()
            };

            return View(vm);
        }

        public ActionResult RefreshTableMultiSKU(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                        }

                        sSQLkode += " ( B.BRG_ACUAN like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( (ISNULL(A.NAMA,'') + ' ' + (ISNULL(A.NAMA2, ''))) like '%" + getkata[i] + "%' ) ";
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT B.BRG_ACUAN, B.TGL_EDIT, (ISNULL(A.NAMA,'') + ' ' + (ISNULL(A.NAMA2, ''))) AS NAMA, A.ID AS RECNUM ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02 A ";
            sSQL2 += "INNER JOIN (SELECT BRG_ACUAN, MAX(TGL_EDIT) AS TGL_EDIT FROM STF03C GROUP BY BRG_ACUAN)B ON A.BRG=B.BRG_ACUAN ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY B.TGL_EDIT DESC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListMultiSKU = ErasoftDbContext.Database.SqlQuery<mdlMultiSKU>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlMultiSKU> pageOrders = new StaticPagedList<mdlMultiSKU>(ListMultiSKU, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableMultiSKUPartial", pageOrders);
        }

        public ActionResult EditMultiSKU(string kdBrg)
        {
            try
            {
                var listMultiSKU = ErasoftDbContext.STF03C.Where(b => b.BRG_ACUAN == kdBrg).ToList();
                var getBrgFromlistMultiSKU = listMultiSKU.Select(a => a.BRG).ToList();
                //getBrgFromlistMultiSKU.Add(listMultiSKU.FirstOrDefault().BRG_ACUAN);
                getBrgFromlistMultiSKU.Add(kdBrg);
                var piuVm = new multiSKUViewModel()
                {
                    listMultiSKU = listMultiSKU,
                    Brg_Acuan = kdBrg,
                    multiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == kdBrg).FirstOrDefault(),
                    listDetailSKU = ErasoftDbContext.STF02.Where(a => getBrgFromlistMultiSKU.Contains(a.BRG)).ToList(),
                };

                return PartialView("FormMultiSKUPartial", piuVm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        public ActionResult DeleteMultiSKU(string kdBrg)
        {
            var MultiSKUInDb = ErasoftDbContext.STF03C.Where(b => b.BRG_ACUAN == kdBrg).ToList();

            var vm = new multiSKUViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").ToList()
                Errors = null
            };
            if (MultiSKUInDb.Count() > 0)
            {
                foreach (var item in MultiSKUInDb) {
                    var cekStf02 = ErasoftDbContext.STF02.Where(a => a.BRG == item.BRG && a.TYPE == "6").SingleOrDefault();
                    if(cekStf02.BRG != null)
                    {
                        try
                        {
                            ErasoftDbContext.STF02.Where(p => p.BRG == item.BRG && p.TYPE == "6").Update(p => new STF02() { TYPE = "3", KUBILASI = 0, BRG_NON_OS = "" });
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                var sSQL = "update stf02 set type ='3' and kubilasi='0' and brg_non_os='' where brg= '" + item.BRG + "' and type='6'";
                                ErasoftDbContext.Database.ExecuteSqlCommand(sSQL);
                            }
                            catch (Exception e)
                            {
                                vm.Errors.Add("Terjadi Kesalahan, mohon hubungi support. \n" + e.Message);
                            }
                        }
                    }
                }
                ErasoftDbContext.STF03C.RemoveRange(MultiSKUInDb);
                ErasoftDbContext.SaveChanges();
            }
            
            //return PartialView("TablePiutangPartial", vm);
            return Json(vm, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteDetailMultiSKU(string kdBrg, string Acuan)
        {
            var DetailMultiSKUInDb = ErasoftDbContext.STF03C.Where(b => b.BRG_ACUAN == Acuan && b.BRG == kdBrg).SingleOrDefault();

            var vm = new multiSKUViewModel()
            {
                //ListPiutang = ErasoftDbContext.ART01A.Where(b => b.RANGKA == "1").ToList()
                Errors = null
            };
            if (DetailMultiSKUInDb != null)
            {
                //foreach (var item in DetailMultiSKUInDb)
                //{
                    var cekStf02 = ErasoftDbContext.STF02.Where(a => a.BRG == DetailMultiSKUInDb.BRG && a.TYPE == "6").SingleOrDefault();
                    if (cekStf02.BRG != null)
                    {
                        try
                        {
                            ErasoftDbContext.STF02.Where(p => p.BRG == DetailMultiSKUInDb.BRG && p.TYPE == "6").Update(p => new STF02() { TYPE = "3", KUBILASI = 0, BRG_NON_OS = "" });
                        }
                        catch (Exception ex)
                        {
                            vm.Errors.Add("Terjadi Kesalahan, mohon hubungi support. \n" + ex.Message);
                            var sSQL = "update stf02 set type ='3' and kubilasi='0' and brg_non_os='' where brg= '" + DetailMultiSKUInDb.BRG + "' and type='6'";
                            ErasoftDbContext.Database.ExecuteSqlCommand(sSQL);
                        }
                    }
                //}
                ErasoftDbContext.STF03C.Remove(DetailMultiSKUInDb);
                ErasoftDbContext.SaveChanges();

                var listMultiSKU = ErasoftDbContext.STF03C.Where(b => b.BRG_ACUAN == Acuan).ToList();
                var getBrgFromlistMultiSKU = listMultiSKU.Select(a => a.BRG).ToList();
                //getBrgFromlistMultiSKU.Add(listMultiSKU.FirstOrDefault().BRG_ACUAN);
                getBrgFromlistMultiSKU.Add(Acuan);
                //var piuVm = new multiSKUViewModel()
                //{
                //    listMultiSKU = listMultiSKU,
                //    Brg_Acuan = kdBrg,
                //    multiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == kdBrg).FirstOrDefault(),
                //    listDetailSKU = ErasoftDbContext.STF02.Where(a => getBrgFromlistMultiSKU.Contains(a.BRG)).ToList(),
                //};
                vm.listMultiSKU = listMultiSKU;
                vm.Brg_Acuan = Acuan;
                vm.multiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == Acuan).FirstOrDefault();
                vm.listDetailSKU = ErasoftDbContext.STF02.Where(a => getBrgFromlistMultiSKU.Contains(a.BRG)).ToList();


            }

            //return PartialView("TablePiutangPartial", vm);
            //return Json(vm, JsonRequestBehavior.AllowGet);
            return PartialView("FormMultiSKUPartial", vm);
        }

        public ActionResult RefreshMultiSKUForm()
        {
            try
            {
                //var stokInDb = new STT01A();

                var vm = new multiSKUViewModel()
                {
                    //ListBarangStok = ErasoftDbContext.STT01B.Where(pd => 0 == 1).ToList(),
                    //ListBarang = ErasoftDbContext.STF02.Where(pd => 0 == 1).ToList()
                    //listDetailSKU = ErasoftDbContext.STF02.Where(a => 0 == 1).ToList(),                    
                };

                return PartialView("FormMultiSKUPartial", vm);
            }
            catch (Exception)
            {
                return View("Error");
            }
        }

        [Route("manage/PromptBarangAcuan")]
        public ActionResult PromptBarangAcuan(string id)
        {
            var vm = new PromptBrg()
            {
                id = id
            };

            return View(vm);
        }

        public ActionResult TablePromptBarangAcuanPartial(string id, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;
            ViewData["id"] = id;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                        }

                        sSQLkode += " BRG like '%" + getkata[i] + "%' ";
                        sSQLnama += "  (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' ";
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "SELECT BRG AS KODE, ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'') AS NAMA, HJUAL AS HARGA ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02 ";
            sSQL2 += "WHERE TYPE ='3'";
            if(id !=null && id != "" && id != "undefined" && id == "2")
            {
                sSQL2 += "and brg not in (select distinct isnull(brg_non_os,'') from stf02 where isnull(brg_non_os,'')<> '') ";
            }
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY NAMA ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<PromptBarangViewModel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<PromptBarangViewModel> pageOrders = new StaticPagedList<PromptBarangViewModel>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePromptBarangAcuanPartial", pageOrders);
        }

        [Route("manage/PromptBarangSKU")]
        public ActionResult PromptBarangSKU()
        {
            var vm = new PromptBrg()
            {
            };

            return View(vm);
        }

        public ActionResult TablePromptBarangSKUPartial(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";

            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                        }

                        sSQLkode += " BRG like '%" + getkata[i] + "%' ";
                        sSQLnama += "  (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' ";
                    }
                }
            }
            
            string sSQLSelect = "";
            sSQLSelect += "SELECT BRG AS KODE, ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'') AS NAMA, HJUAL AS HARGA ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "FROM STF02 ";
            sSQL2 += "WHERE TYPE ='3'";
            sSQL2 += "and brg not in (select distinct isnull(brg_non_os,'') from stf02 where isnull(brg_non_os,'')<> '') ";
            
            if (search != "")
            {
                sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY NAMA ASC ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListArf01c = ErasoftDbContext.Database.SqlQuery<PromptBarangViewModel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<PromptBarangViewModel> pageOrders = new StaticPagedList<PromptBarangViewModel>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);
            return PartialView("TablePromptBarangSKUPartial", pageOrders);
        }

        public ActionResult SaveMultiSKU(multiSKUViewModel dataVm)
        {
            if (!ModelState.IsValid)
            {
                dataVm.Errors = ModelState.Values.SelectMany(x => x.Errors).Select(x => x.ErrorMessage).ToList();
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }

            if (dataVm.multiSKU.BRG != null && dataVm.multiSKU.BRG != "")
            {
                //var lastBukti = GenerateAutoNumber(ErasoftDbContext, "IN", "STT01A", "Nobuk");
                //var noStok = "IN" + DateTime.UtcNow.AddHours(7).Year.ToString().Substring(2, 2) + Convert.ToString(Convert.ToInt32(lastBukti) + 1).PadLeft(6, '0');

                //dataVm.multiSKU.BRG = noStok;
                //dataVm.Stok.STATUS_LOADING = "0";
                //dataVm.BarangStok.Nobuk = noStok;
                //dataVm.Stok.TglInput = DateTime.Today;
                //dataVm.Stok.Ket = keterangan;
                if (dataVm.multiSKU.BRG_ACUAN != null && dataVm.multiSKU.BRG_ACUAN != "")
                {
                    var cekBarangAcuan = ErasoftDbContext.STF02.Where(a => a.BRG == dataVm.multiSKU.BRG_ACUAN).SingleOrDefault();
                    if (cekBarangAcuan != null)
                    {
                        var cekBrgMultiSKU = ErasoftDbContext.STF02.Where(a => a.BRG == dataVm.multiSKU.BRG).SingleOrDefault();
                        if (cekBrgMultiSKU != null)
                        {
                            if (cekBrgMultiSKU.TYPE == "3")
                            {
                                try
                                {
                                    var cekBarang = dataVm.multiSKU.BRG;
                                    if (cekBarang == dataVm.multiSKU.BRG_ACUAN)
                                    {
                                        dataVm.Errors.Add("Kode barang acuan tidak boleh sama dengan kode barang multi SKU.");
                                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                                    }
                                    var cekFaktur = ErasoftDbContext.SIT01B.Count(k => k.BRG == cekBarang);
                                    var cekPembelian = ErasoftDbContext.PBT01B.Count(k => k.BRG == cekBarang);
                                    var cekTransaksi = ErasoftDbContext.STT01B.Count(k => k.Kobar == cekBarang);
                                    var cekPesanan = ErasoftDbContext.SOT01B.Count(k => k.BRG == cekBarang);
                                    var cekPromosi = ErasoftDbContext.DETAILPROMOSI.Count(k => k.KODE_BRG == cekBarang);

                                    if (cekFaktur > 0 || cekPembelian > 0 || cekTransaksi > 0 || cekPesanan > 0 || cekPromosi > 0)
                                    {
                                        dataVm.Errors.Add("Barang " + cekBarang + " sudah dipakai di transaksi tidak bisa dijadikan barang multi SKU !");
                                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                                    }

                                    cekBrgMultiSKU.TYPE = "6";
                                    cekBrgMultiSKU.KUBILASI = 1;
                                    cekBrgMultiSKU.BRG_NON_OS = dataVm.multiSKU.BRG_ACUAN;
                                    cekBrgMultiSKU.Tgl_Input = DateTime.Now;
                                    cekBarangAcuan.Tgl_Input = DateTime.Now;
                                    dataVm.multiSKU.USERNAME = usernameLogin;
                                    dataVm.multiSKU.TGL_EDIT = DateTime.Now;
                                    ErasoftDbContext.STF03C.Add(dataVm.multiSKU);
                                    ErasoftDbContext.SaveChanges();
                                }
                                catch (Exception ex)
                                {
                                    dataVm.Errors.Add("Terjadi Kesalahan, mohon hubungi support. \n" + ex.Message);
                                    return Json(dataVm, JsonRequestBehavior.AllowGet);
                                }
                            }
                            else
                            {
                                dataVm.Errors.Add("Barang bukan tipe konfig.");
                                return Json(dataVm, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            dataVm.Errors.Add("Kode barang multi SKU tidak ditemukan.");
                            return Json(dataVm, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        dataVm.Errors.Add("Kode barang acuan tidak ditemukan.");
                        return Json(dataVm, JsonRequestBehavior.AllowGet);
                    }

                    //if (dataVm.BarangStok.No == null)
                    //{
                    //    var vmError = new StokViewModel() { };

                    //    if (dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0 || dataVm.BarangStok.Harga == 0)
                    //    {
                    //        vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
                    //        return Json(vmError, JsonRequestBehavior.AllowGet);
                    //    }

                    //    ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
                    //}
                }
                else
                {
                    dataVm.Errors.Add("Kode barang acuan kosong.");
                    return Json(dataVm, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                dataVm.Errors.Add("Kode barang multi SKU tidak ditemukan.");
                return Json(dataVm, JsonRequestBehavior.AllowGet);
            }
            //else
            //{
            //    var stokInDb = ErasoftDbContext.STT01A.Single(p => p.Nobuk == dataVm.Stok.Nobuk);

            //    stokInDb.Tgl = dataVm.Stok.Tgl;
            //    dataVm.BarangStok.Nobuk = dataVm.Stok.Nobuk;

            //    stokInDb.TglInput = DateTime.Today;
            //    stokInDb.Ket = keterangan;

            //    if (dataVm.BarangStok.No == null)
            //    {
            //        var vmError = new StokViewModel() { };

            //        if (dataVm.BarangStok.Ke_Gd == null || dataVm.BarangStok.Qty == 0 || dataVm.BarangStok.Harga == 0)
            //        {
            //            vmError.Errors.Add("Silahkan isi semua field terlebih dahulu !");
            //            return Json(vmError, JsonRequestBehavior.AllowGet);
            //        }

            //        ErasoftDbContext.STT01B.Add(dataVm.BarangStok);
            //    }
            //}

            ErasoftDbContext.SaveChanges();
            ModelState.Clear();

            var listMultiSKU = ErasoftDbContext.STF03C.Where(b => b.BRG_ACUAN == dataVm.multiSKU.BRG_ACUAN).ToList();
            var getBrgFromlistMultiSKU = listMultiSKU.Select(a => a.BRG).ToList();
            //getBrgFromlistMultiSKU.Add(listMultiSKU.FirstOrDefault().BRG_ACUAN);
            getBrgFromlistMultiSKU.Add(dataVm.multiSKU.BRG_ACUAN);
            var Vm = new multiSKUViewModel()
            {
                listMultiSKU = listMultiSKU,
                Brg_Acuan = dataVm.multiSKU.BRG_ACUAN,
                multiSKU = ErasoftDbContext.STF03C.Where(a => a.BRG_ACUAN == dataVm.multiSKU.BRG_ACUAN).FirstOrDefault(),
                listDetailSKU = ErasoftDbContext.STF02.Where(a => getBrgFromlistMultiSKU.Contains(a.BRG)).ToList(),
            };

            //panggil api marketplace to change stock
            List<string> listBrg = new List<string>();
            listBrg.Add(dataVm.multiSKU.BRG_ACUAN);
            updateStockMarketPlace(listBrg, "[BRG_MULTI][" + DateTime.Now.ToString("yyyyMMddhhmmss") + "]");
            //panggil api marketplace to change stock

            return PartialView("FormMultiSKUPartial", Vm);
        }

        [Route("manage/PromptBarangMultiSKU")]
        public ActionResult PromptBarangMultiSKUInvoice(string id, string kdBrg)
        {
            var vm = new PromptBrg()
            {
                id = id,
                kdBarang = kdBrg
            };

            return View(vm);
        }

        public ActionResult TablePromptBarangMultiSKUInvoicePartial(string kdBrg, int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            //change by nurul 26/9/2019, contain search 
            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            if (kdBrg != "" && kdBrg != null && kdBrg != "undefined")
            {
                if (getkata.Length > 0)
                {
                    if (search != "")
                    {
                        for (int i = 0; i < getkata.Length; i++)
                        {
                            if (i > 0)
                            {
                                sSQLkode += " and ";
                                sSQLnama += " and ";
                            }

                            sSQLkode += " B.BRG like '%" + getkata[i] + "%' ";
                            sSQLnama += "  (isnull(NAMA,'') + ' ' + isnull(NAMA2,'')) like '%" + getkata[i] + "%' ";
                        }
                    }
                }

                string sSQLSelect = "";
                sSQLSelect += "SELECT B.BRG,ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'') AS NAMA,B.ID ";
                string sSQLCount = "";
                sSQLCount += "SELECT COUNT(ID) AS JUMLAH ";
                string sSQL2 = "";
                sSQL2 += "FROM STF03C A INNER JOIN STF02 B ON A.BRG=B.BRG ";
                sSQL2 += "WHERE BRG_ACUAN ='" + kdBrg + "' ";
                if (search != "")
                {
                    sSQL2 += " AND ( " + sSQLkode + " or " + sSQLnama + " ) ";
                }

                var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
                var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
                if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
                {
                    pagenumber = pagenumber - 1;
                }

                string sSQLSelect2 = "";
                sSQLSelect2 += "ORDER BY NAMA ASC ";
                sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
                sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

                var ListArf01c = ErasoftDbContext.Database.SqlQuery<PromptBarangViewModel>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

                IPagedList<PromptBarangViewModel> pageOrders = new StaticPagedList<PromptBarangViewModel>(ListArf01c, pagenumber + 1, 10, totalCount.JUMLAH);

                return PartialView("TablePromptBarangMultiSKUInvoicePartial", pageOrders);
            }
            return Json("Tidak ditemukan data.", JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult getBarangMultiSKUForBarang(string brgId)
        {

            if (brgId != "")
            {
                //string sSQL = "";
                //sSQL += "SELECT B.BRG,ISNULL(NAMA,'') + ' ' + ISNULL(NAMA2,'') AS NAMA,B.ID FROM STF03C A INNER JOIN STF02 B ON A.BRG=B.BRG WHERE BRG_ACUAN ='" + brgId + "' ";

                var listBarang = (from a in ErasoftDbContext.STF03C
                                  join b in ErasoftDbContext.STF02 on a.BRG equals b.BRG
                                  where a.BRG_ACUAN == brgId 
                                  select new { BRG = b.BRG, NAMA = b.NAMA, NAMA2 = b.NAMA2 == null ? "" : b.NAMA2 }).ToList();
                //select new { BRG = b.BRG, NAMA = b.NAMA + ' ' + b.NAMA2 == null ? "" : b.NAMA2 });

                return Json(listBarang, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var listGudang = ErasoftDbContext.STF18.ToList();
                return Json(listGudang, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult getBarangMultiSKU()
        {
            //var listBarang = (from a in ErasoftDbContext.STF03C
            //                  join b in ErasoftDbContext.STF02 on a.BRG equals b.BRG
            //                  where a.BRG_ACUAN == brgId
            //                  select new { BRG = b.BRG, NAMA = b.NAMA, NAMA2 = b.NAMA2 == null ? "" : b.NAMA2 }).ToList();
            var listBarang = (from a in ErasoftDbContext.STF02 
                              where a.TYPE == "6"
                              select new { BRG = a.BRG, NAMA = a.NAMA, NAMA2 = a.NAMA2 == null ? "" : a.NAMA2, BRG_ACUAN = a.BRG_NON_OS }).ToList();
            //select new { BRG = b.BRG, NAMA = b.NAMA + ' ' + b.NAMA2 == null ? "" : b.NAMA2 });

            return Json(listBarang, JsonRequestBehavior.AllowGet);
        }

        public ActionResult RefreshTableMultiSKUDetail(int? page, string search = "")
        {
            int pagenumber = (page ?? 1) - 1;
            ViewData["searchParam"] = search;
            ViewData["LastPage"] = page;

            string[] getkata = search.Split(' ');
            string sSQLnama = "";
            string sSQLkode = "";
            string sSQLnamaMulti = "";
            string sSQLkodeMulti = "";
            if (getkata.Length > 0)
            {
                if (search != "")
                {
                    for (int i = 0; i < getkata.Length; i++)
                    {
                        if (i > 0)
                        {
                            sSQLkode += " and ";
                            sSQLnama += " and ";
                        }

                        sSQLkode += " ( a.BRG_ACUAN like '%" + getkata[i] + "%' ) ";
                        sSQLnama += "  ( (ISNULL(c.NAMA,'') + ' ' + (ISNULL(c.NAMA2, ''))) like '%" + getkata[i] + "%' ) ";
                        sSQLkodeMulti += " ( a.BRG like '%" + getkata[i] + "%' ) ";
                        sSQLnamaMulti += "  ( (ISNULL(b.NAMA,'') + ' ' + (ISNULL(b.NAMA2, ''))) like '%" + getkata[i] + "%' ) ";
                    }
                }
            }

            string sSQLSelect = "";
            sSQLSelect += "select a.brg, (ISNULL(b.NAMA,'') + ' ' + (ISNULL(b.NAMA2, ''))) as nama, a.brg_acuan, (ISNULL(c.NAMA,'') + ' ' + (ISNULL(c.NAMA2, ''))) as nama_acuan ";
            string sSQLCount = "";
            sSQLCount += "SELECT COUNT(A.brg) AS JUMLAH ";
            string sSQL2 = "";
            sSQL2 += "from stf03c a left join stf02 b on a.brg=b.brg left join stf02 c on a.brg_acuan=c.brg ";
            if (search != "")
            {
                sSQL2 += " WHERE ( " + sSQLkode + " or " + sSQLnama + " or " + sSQLkodeMulti + " or " + sSQLnamaMulti + " ) ";
            }

            var minimal_harus_ada_item_untuk_current_page = (page * 10) - 9;
            var totalCount = ErasoftDbContext.Database.SqlQuery<getTotalCount>(sSQLCount + sSQL2).Single();
            if (minimal_harus_ada_item_untuk_current_page > totalCount.JUMLAH)
            {
                pagenumber = pagenumber - 1;
            }

            string sSQLSelect2 = "";
            sSQLSelect2 += "ORDER BY brg_acuan,brg ";
            sSQLSelect2 += "OFFSET " + Convert.ToString(pagenumber * 10) + " ROWS ";
            sSQLSelect2 += "FETCH NEXT 10 ROWS ONLY ";

            var ListMultiSKU = ErasoftDbContext.Database.SqlQuery<mdlMultiSKUDetail>(sSQLSelect + sSQL2 + sSQLSelect2).ToList();

            IPagedList<mdlMultiSKUDetail> pageOrders = new StaticPagedList<mdlMultiSKUDetail>(ListMultiSKU, pagenumber + 1, 10, totalCount.JUMLAH);

            return PartialView("TableMultiSKUDetailPartial", pageOrders);
        }
        //end add by nurul 19/8/2020

        //add by Tri, 24 sept 2020
        public string cekStf02hDuplikat(STF02 dataBarang)
        {
            string kdBrg = dataBarang.BRG;
            if (string.IsNullOrEmpty(kdBrg))
            {
                var brgInDB = ErasoftDbContext.STF02.Where(m => m.ID == dataBarang.ID).FirstOrDefault();
                if(brgInDB == null)
                {
                    return "";
                }
                kdBrg = brgInDB.BRG;
            }
            var sSQL = "select * from ( ";
            sSQL += "select BRG, IDMARKET, count(recnum) JML from stf02h where brg in ( ";
            sSQL += "select brg from stf02 where brg = '" + kdBrg + "' or part = '" + kdBrg + "')  group by brg,idmarket";
            sSQL += ") qry where jml > 1";
            var dsBarang = EDB.GetDataSet("CString", "STF02H", sSQL);
            if(dsBarang.Tables[0].Rows.Count > 0)
            {
                for(int i =0;i < dsBarang.Tables[0].Rows.Count; i++)
                {
                    sSQL = "delete from stf02h where recnum in (select top " + (Convert.ToInt32(dsBarang.Tables[0].Rows[i]["JML"].ToString()) - 1) ;
                    sSQL += " recnum from stf02h where brg = '"+dsBarang.Tables[0].Rows[i]["BRG"].ToString()+ "' and idmarket = " + dsBarang.Tables[0].Rows[i]["IDMARKET"].ToString() + " order by brg_mp)";
                    EDB.ExecuteSQL("CString",CommandType.Text, sSQL);
                }
            }
            return "";
        }
        //end add by Tri, 24 sept 2020
    }
    public class smolSTF02
    {
        public string BRG { get; set; }
        public string NAMA { get; set; }
        public string NAMA2 { get; set; }
        public string STN2 { get; set; }
        public double HJUAL { get; set; }

    }

    public class smolSOT01A
    {
        public string PESANAN { get; set; }
        public string MARKETPLACE { get; set; }
        public string NAMA_MARKET { get; set; }
        public string PEMBELI { get; set; }
        public string NAMA_PEMBELI { get; set; }
        public string ALAMAT { get; set; }
        public string KOTA { get; set; }
        public string PROPINSI { get; set; }
        public string KODE_POS { get; set; }
        public string NAMAKURIR { get; set; }
    }


    public class BlibliBrand
    {
        public object requestId { get; set; }
        public object headers { get; set; }
        public object errorMessage { get; set; }
        public object errorCode { get; set; }
        public bool success { get; set; }
        public List<string> value { get; set; }
    }

    public class BlibliBrandV2
    {
        public BlibliBrandV2Content[] content { get; set; }
        public string errorCode { get; set; }
        public string errorMessage { get; set; }
        public Pagemetadata pageMetaData { get; set; }
        public string requestId { get; set; }
        public bool success { get; set; }
    }

    public class Pagemetadata
    {
        public int pageNumber { get; set; }
        public int pageSize { get; set; }
        public int totalRecords { get; set; }
    }

    public class BlibliBrandV2Content
    {
        public string brandApprovalStatus { get; set; }
        public string brandName { get; set; }
        public string code { get; set; }
        //public string createdBy { get; set; }
        //public long createdDate { get; set; }
        public string id { get; set; }
        public string storeId { get; set; }
        //public string updatedBy { get; set; }
        //public long updatedDate { get; set; }
        //public int version { get; set; }
    }

    public class listKurir
    {
        public string SHIPMENT { get; set; }
    }

    //add by fauzi for 82Cart Get Category from API
    public class E2CartProductCategoryResult
    {
        public string requestid { get; set; }
        public string error { get; set; }
        public E2CartProductCategory[] data { get; set; }
    }

    public class E2CartProductCategory
    {
        public string id_category { get; set; }
        public string category_name { get; set; }
        public string name { get; set; }
        public string id_parent { get; set; }
        public string level_depth { get; set; }
        public string active { get; set; }
        public string date_add { get; set; }
        public string date_upd { get; set; }
        public string position { get; set; }
        public E2CartProductCategory[] child { get; set; }

    }

    public class E2CartManufactureResult
    {
        public string requestid { get; set; }
        public object error { get; set; }
        public E2CartProductManufacture[] data { get; set; }
    }

    public class E2CartProductManufacture
    {
        public string id_manufacturer { get; set; }
        public string name { get; set; }
        public string date_add { get; set; }
        public string date_upd { get; set; }
        public string active { get; set; }
        public string description { get; set; }
        public string short_description { get; set; }
        public string meta_title { get; set; }
        public string meta_description { get; set; }
        public string meta_keywords { get; set; }
    }

    public class E2CartAttributeResult
    {
        public string requestid { get; set; }
        public string error { get; set; }
        public E2CartAttribute[] data { get; set; }
    }

    public class E2CartAttribute
    {
        public string id_attribute_group { get; set; }
        //public string is_color_group { get; set; }
        //public string group_type { get; set; }
        //public string group_position { get; set; }
        public string group_name { get; set; }
        public attribute[] attribute { get; set; }
    }

    public class attribute
    {
        public string id_attribute { get; set; }
        public string color { get; set; }
        //public string attribute_position { get; set; }
        public string attribute_name { get; set; }
    }
    //end by fauzi for 82Cart Get Category from API

    //add by nurul 6/4/2020
    public class tempExcelBayar
    {
        public string NO_BUKTI { get; set; }
        public string NO_REF { get; set; }
        public double NETTO { get; set; }
        public double SISA { get; set; }
        public string DATABAYAR { get; set; }
        public string BUKTI_BAYAR { get; set; }
        public DateTime? TGLREF_BAYAR { get; set; }
    }
    //end add by nurul 6/4/2020
}
