@using MasterOnline.ViewModels
@{
    ViewBag.Title = "Manage Account";
    Layout = "~/Views/Shared/_LayoutManage.cshtml";

    var context = new MoDbContext();
    var dataSession = Session["SessionInfo"] as AccountUserViewModel;

    long accId;
    var username = "";
    if (dataSession?.User != null)
    {
        accId = context.User.Single(u => u.Username == dataSession.User.Username).AccountId;
        username = context.Account.Single(a => a.AccountId == accId).Username;
    }
    else
    {
        username = dataSession?.Account?.Username;
        accId = (dataSession?.Account?.AccountId ?? 0);
    }
}

@section styles {
    <link href="~/Content/build/css/bootstrap-datepicker.min.css" rel="stylesheet" />

    <style>
        .label_waktu {
            margin-bottom: 15px;
        }

        .divider_2 {
            border-bottom: solid 2px #e6e9ed;
            margin: 10px 0;
        }

        .pemisah_info {
            margin: 7px 0;
        }

        .block_subtitle {
            display: inline-block;
            width: 300px;
            font-size: 15px;
        }

        #today_label {
            position: absolute;
            top: 7px;
        }

        .dropdown-menu > li > a {
            font-size: 14px !important;
        }
    </style>
}

<div class="row">
    <div class="col-md-2">
        <b class="hidden-md hidden-lg">Tanggal Hari Ini :</b>
        <b class="hidden-xs hidden-sm" id="today_label">Tanggal Hari Ini :</b>
    </div>
    <div class="col-md-2">
        <div class="input-group date">
            <input type="text" id="TGL" class="form-control" />
            <span class="input-group-addon">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
        </div>
    </div>
    <div class="col-md-2 col-sm-12">
        <div class="dropdown">
            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                <span id="mode">Grafik</span>
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                <li><a onclick="changeMode(0)">Grafik</a></li>
                <li><a onclick="changeMode(1)">Angka</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="row chart-mode">
    <div class="col-md-6" id="chart-jumlah-section">
        <h4>Grafik Berdasarkan Jumlah</h4>
        <canvas id="chart-jumlah" height="200"></canvas>
    </div>
    <div class="col-md-6" id="chart-nilai-section">
        <h4>Grafik Berdasarkan Nilai</h4>
        <canvas id="chart-nilai" height="200"></canvas>
    </div>
</div>
<br/>
<div class="row chart-mode" style="margin-bottom: 20px;">
    <div class="col-md-6" id="chart-jumlah-per-market-section">
        <h4>Grafik Pesanan Per Market Berdasarkan Jumlah</h4>
        <canvas id="chart-jumlah-per-market" height="200"></canvas>
    </div>
    <div class="col-md-6" id="chart-nilai-per-market-section">
        <h4>Grafik Pesanan Per Market Berdasarkan Nilai</h4>
        <canvas id="chart-nilai-per-market" height="200"></canvas>
    </div>
</div>
<div id="dashboard_partial"></div>

@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js" type="text/javascript"></script>
    <script src="~/Content/vendors/moment/min/moment.min.js" type="text/javascript"></script>
    <script src="~/Content/build/js/bootstrap-datepicker.min.js" type="text/javascript"></script>
    <script>
        $(document).ready(function () {
            getTanggal();
            $('#TGL').datepicker('setDate', '0');
            getDashboard();
        });

        function changeMode(tipe) {
            if (tipe === 0) {
                $('#mode').text('Grafik');
                $('.chart-mode').show();
                $('.angka-mode').hide();
            } else {
                $('#mode').text('Angka');
                $('.chart-mode').hide();
                $('.angka-mode').show();
            }
        }

        function getChart() {
            $('#chart-jumlah').remove();
            $('#chart-nilai').remove();
            $('#chart-jumlah-per-market').remove();
            $('#chart-nilai-per-market').remove();
            $('#chart-jumlah-section').append('<canvas id="chart-jumlah" height="200"></canvas>');
            $('#chart-nilai-section').append('<canvas id="chart-nilai" height="200"></canvas>');
            $('#chart-jumlah-per-market-section').append('<canvas id="chart-jumlah-per-market" height="200"></canvas>');
            $('#chart-nilai-per-market-section').append('</canvas><canvas id="chart-nilai-per-market" height="200"></canvas>');

            $.ajax({
                type: "POST",
                url: '/api/chart',
                headers: {
                    'X-API-KEY':'M@STERONLINE4P1K3Y',
                    'Content-Type':'application/json'
                },
                data: JSON.stringify({
                    AccId: @accId,
                    SelDate: $('#TGL').val()
                }),
                contentType: "application/json; charset=UTF-8",
                cache: false,
                success: function (response) {
                    var maxTicksBasic = 10;
                    var arrayData = [
                        response.data.JumlahPesananHariIni, response.data.JumlahFakturHariIni,
                        response.data.JumlahReturHariIni,
                        response.data.JumlahPesananBulanIni, response.data.JumlahFakturBulanIni,
                        response.data.JumlahReturBulanIni
                    ];

                    var max = Math.max.apply(Math, arrayData);

                    if (max > maxTicksBasic) {
                        maxTicksBasic = Math.ceil(max / 10) * 10;
                    }

                    var steppingBasic = (Math.ceil(max / 10) * 10) / 5;

                    var ctx = document.getElementById("chart-jumlah").getContext('2d');
                    var chartJumlah = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ["Pesanan", "Faktur", "Retur"],
                            datasets: [{
                                label: 'Hari Ini',
                                data: [response.data.JumlahPesananHariIni, response.data.JumlahFakturHariIni, response.data.JumlahReturHariIni],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            },
                            {
                                label: 'Bulan Ini',
                                data: [response.data.JumlahPesananBulanIni, response.data.JumlahFakturBulanIni, response.data.JumlahReturBulanIni],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: steppingBasic,
                                        max: maxTicksBasic
                                    }
                                }],

                            }
                        }
                    });
                    
                    var maxTicksValueBasic = 10000;
                    var dividerValueBasic = 10;
                    var arrayDataValueBasic = [
                        response.data.NilaiPesananHariIni,
                        response.data.NilaiFakturHariIni,
                        response.data.NilaiReturHariIni,
                        response.data.NilaiPesananBulanIni,
                        response.data.NilaiFakturBulanIni,
                        response.data.NilaiReturBulanIni
                    ];

                    var maxValueBasic = Math.max.apply(Math, arrayDataValueBasic);

                    if (maxValueBasic > 100 && maxValueBasic <= 1000) {
                        dividerValueBasic = 100;
                    } else if (maxValueBasic > 1000 && maxValueBasic <= 10000) {
                        dividerValueBasic = 1000;
                    } else if (maxValueBasic > 10000 && maxValueBasic <= 100000) {
                        dividerValueBasic = 10000;
                    } else if (maxValueBasic > 100000 && maxValueBasic <= 1000000) {
                        dividerValueBasic = 100000;
                    } else if (maxValueBasic > 1000000 && maxValueBasic <= 10000000) {
                        dividerValueBasic = 1000000;
                    } else if (maxValueBasic > 10000000 && maxValueBasic <= 100000000) {
                        dividerValueBasic = 10000000;
                    } else if (maxValueBasic > 100000000 && maxValueBasic <= 1000000000) {
                        dividerValueBasic = 100000000;
                    } else if (maxValueBasic > 1000000000 && maxValueBasic <= 10000000000) {
                        dividerValueBasic = 1000000000;
                    } else if (maxValueBasic > 10000000000 && maxValueBasic <= 100000000000) {
                        dividerValueBasic = 10000000000;
                    }

                    var roundValueBasic = Math.round(maxValueBasic / dividerValueBasic) * dividerValueBasic;
                    var steppingValueBasic = roundValueBasic / 5;

                    if (maxValueBasic > maxTicksValueBasic) {
                        maxTicksValueBasic = roundValueBasic + dividerValueBasic;
                    }

                    var ctxNilai = document.getElementById("chart-nilai").getContext('2d');
                    var chartNilai = new Chart(ctxNilai, {
                        type: 'bar',
                        showTooltips: false,
                        data: {
                            labels: ["Pesanan", "Faktur", "Retur"],
                            datasets: [{
                                label: 'Hari Ini',
                                data: [response.data.NilaiPesananHariIni, response.data.NilaiFakturHariIni, response.data.NilaiReturHariIni],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            },
                            {
                                label: 'Bulan Ini',
                                data: [response.data.NilaiPesananBulanIni, response.data.NilaiFakturBulanIni, response.data.NilaiReturBulanIni],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: steppingValueBasic,
                                        max: maxTicksValueBasic,
                                        userCallback: function(value, index, values) {
                                            value = value.toString();
                                            value = value.split(/(?=(?:...)*$)/);
                                            value = value.join('.');
                                            return 'Rp ' + value;
                                        }
                                    }
                                }]
                            },
                            tooltips: {
                                callbacks: {
                                    label: (tooltipItem, data) => {
                                        return data.datasets[tooltipItem.datasetIndex].label + ": Rp " + convertToRupiah(tooltipItem.yLabel);
                                    },
                                },
                            }
                        }
                    });

                    var akunMarketPlace = [];
                    var jumlahPesananHariIniPerMarket = [];
                    var jumlahPesananBulanIniPerMarket = [];
                    var nilaiPesananHariIniPerMarket = [];
                    var nilaiPesananBulanIniPerMarket = [];

                    for (var i = 0; i < response.data.ListPesananPerMarketplace.length; i++) {
                        akunMarketPlace.push(response.data.ListPesananPerMarketplace[i].NamaMarket);
                        jumlahPesananHariIniPerMarket.push(response.data.ListPesananPerMarketplace[i].JumlahPesananHariIni);
                        jumlahPesananBulanIniPerMarket.push(response.data.ListPesananPerMarketplace[i].JumlahPesananBulanIni);
                        nilaiPesananHariIniPerMarket.push(convertToAngka(response.data.ListPesananPerMarketplace[i].NilaiPesananHariIni));
                        nilaiPesananBulanIniPerMarket.push(convertToAngka(response.data.ListPesananPerMarketplace[i].NilaiPesananBulanIni));
                    }

                    var maxTicksByMarket = 10;
                    var maxJumlahPesananHariIni = Math.max.apply(Math, jumlahPesananHariIniPerMarket);
                    var maxJumlahPesananBulanIni = Math.max.apply(Math, jumlahPesananBulanIniPerMarket);
                    var dataMaxJumlah = [maxJumlahPesananHariIni, maxJumlahPesananBulanIni];
                    var maxJumlahByMarket = Math.max.apply(Math, dataMaxJumlah);

                    if (maxJumlahByMarket > maxTicksByMarket) {
                        maxTicksByMarket = Math.ceil(maxJumlahByMarket / 10) * 10;
                    }

                    var steppingByMarket = (Math.ceil(maxJumlahByMarket / 10) * 10) / 5;

                    var ctxJumlahPerMarket = document.getElementById("chart-jumlah-per-market").getContext('2d');
                    var chartJumlahPerMarket = new Chart(ctxJumlahPerMarket, {
                        type: 'bar',
                        data: {
                            labels: akunMarketPlace,
                            datasets: [{
                                label: 'Hari Ini',
                                data: jumlahPesananHariIniPerMarket,
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            },
                            {
                                label: 'Bulan Ini',
                                data: jumlahPesananBulanIniPerMarket,
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: steppingByMarket,
                                        max: maxTicksByMarket
                                    }
                                }],

                            }
                        }
                    });

                    var maxTicksValueByMarket = 100000;
                    var dividerValueByMarket = 10;
                    var maxNilaiPesananHariIni = Math.max.apply(Math, nilaiPesananHariIniPerMarket);
                    var maxNilaiPesananBulanIni = Math.max.apply(Math, nilaiPesananBulanIniPerMarket);
                    var dataMaxValueByMarket = [maxNilaiPesananHariIni, maxNilaiPesananBulanIni];
                    var maxValueByMarket = Math.max.apply(Math, dataMaxValueByMarket);

                    if (maxValueByMarket > 100 && maxValueByMarket <= 1000) {
                        dividerValueByMarket = 100;
                    } else if (maxValueByMarket > 1000 && maxValueByMarket <= 10000) {
                        dividerValueByMarket = 1000;
                    } else if (maxValueByMarket > 10000 && maxValueByMarket <= 100000) {
                        dividerValueByMarket = 10000;
                    } else if (maxValueByMarket > 100000 && maxValueByMarket <= 1000000) {
                        dividerValueByMarket = 100000;
                    } else if (maxValueByMarket > 1000000 && maxValueByMarket <= 10000000) {
                        dividerValueByMarket = 1000000;
                    } else if (maxValueByMarket > 10000000 && maxValueByMarket <= 100000000) {
                        dividerValueByMarket = 10000000;
                    } else if (maxValueByMarket > 100000000 && maxValueByMarket <= 1000000000) {
                        dividerValueByMarket = 100000000;
                    } else if (maxValueByMarket > 1000000000 && maxValueByMarket <= 10000000000) {
                        dividerValueByMarket = 1000000000;
                    } else if (maxValueByMarket > 10000000000 && maxValueByMarket <= 100000000000) {
                        dividerValueByMarket = 10000000000;
                    }

                    var roundValueByMarket = Math.round(maxValueByMarket / dividerValueByMarket) * dividerValueByMarket;
                    var steppingValueByMarket = roundValueByMarket / 5;

                    if (maxValueByMarket > maxTicksValueByMarket) {
                        maxTicksValueByMarket = roundValueByMarket + dividerValueByMarket;
                    }

                    var ctxNilaiPerMarket = document.getElementById("chart-nilai-per-market").getContext('2d');
                    var chartNilaiPerMarket = new Chart(ctxNilaiPerMarket, {
                        type: 'bar',
                        showTooltips: false,
                        data: {
                            labels: akunMarketPlace,
                            datasets: [{
                                label: 'Hari Ini',
                                data: nilaiPesananHariIniPerMarket,
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            },
                            {
                                label: 'Bulan Ini',
                                data: nilaiPesananBulanIniPerMarket,
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                ],
                                borderColor: [
                                    'rgba(255,99,132,1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: steppingValueByMarket,
                                        max: maxTicksValueByMarket,
                                        userCallback: function (value, index, values) {
                                            value = value.toString();
                                            value = value.split(/(?=(?:...)*$)/);
                                            value = value.join('.');
                                            return 'Rp ' + value;
                                        }
                                    }
                                }]
                            },
                            tooltips: {
                                callbacks: {
                                    label: (tooltipItem, data) => {
                                        return data.datasets[tooltipItem.datasetIndex].label + ": Rp " + convertToRupiah(tooltipItem.yLabel);
                                    },
                                },
                            }
                        }
                    });
                },
                error: function(errMsg) {
                    console.log(errMsg);
                },
            });
        }

        function convertToRupiah(angka) {
            return $.number(angka, 2, ',', '.');
        }

        function convertToAngka(rupiah) {
            if (rupiah == '') {
                rupiah = '0';
            }
            return parseInt(rupiah.replace(/,.*|[^0-9]/g, ''), 10);
        }

        function getDashboard($selectedDate = '') {
            var $selectedMonth = $selectedDate.substring(3, 5);
            var monthVal = moment(new Date()).locale('id').format("MM");
            var monthName = moment($selectedMonth).locale('id').format("MMMM");

            var link = '@Url.Action("DashboardPartial", "Manage", new { selDate = "replaceDate" })';
            link = link.replace("replaceDate", $selectedDate);

            $.ajax({
                type: "GET",
                url: link,
                beforeSend: function () {
                    $('#loading_spinner').show();
                },
                success: function (response) {
                    $('#dashboard_partial').html(response);

                    if ($selectedDate !== '' && $selectedDate !== moment(new Date()).format("DD/MM/YYYY")) {
                        $('.date_label').text('Tanggal ' + $selectedDate);
                    }

                    if ($selectedMonth !== '' && $selectedMonth !== monthVal) {
                        $('.month_label').text('Bulan ' + monthName);
                    }

                    $('.angka-mode').hide();

                    $('#loading_spinner').hide();
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }

        function getTanggal() {
            $('#TGL').datepicker({
                format: 'dd/mm/yyyy',
                language: 'id'
            }).change(function () {
                getDashboard($(this).val());
                getChart();
                $(this).datepicker('hide');
            });
        }
    </script>
}
