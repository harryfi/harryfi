@model MasterOnline.Models.Account
@{
    ViewBag.Title = "Login";
    var referral = Request.Params["ref"];
}

@section styles
{
    <style>
        html {
            -webkit-text-stroke-width: 0.5pt;
            text-rendering: optimizeLegibility !important;
            -webkit-font-smoothing: antialiased !important;
            -moz-osx-font-smoothing: grayscale !important;
        }
    </style>
}

<div class="loginColumns">
    <div class="row">
        <a href="@Url.Action("Index", "Home", new {@ref = referral})">
            <div class="col-md-12 text-center">
                <img alt="logo" src="~/Content/Images/MO_new_logo.png" width="300">
            </div>
        </a>
    </div>
    <div class="row m-t">
        <div class="col-md-6">
            <p>Untuk keamanan yang lebih terjaga, jangan pernah memberi tahu password anda kepada siapapun.</p><br>
            <p>Selalu ganti password anda secara berkala. Gunakan password yang sulit di tebak. Jangan gunakan nama, tanggal lahir, atau kata yang mudah di tebak.</p><br>
            <p>
                <small>
                    <a href="~/Content/Static/termsandconditions.html#privacy">Kebijakan Privasi</a><!-- react-text: 17 -->&nbsp;&nbsp;&nbsp;<!-- /react-text -->
                    <a href="~/Content/Static/termsandconditions.html#terms">Syarat dan Ketentuan</a><!-- react-text: 19 -->&nbsp;&nbsp;&nbsp;<!-- /react-text -->
                    <a href="~/Content/Static/termsandconditions.html#security">Keamanan</a>
                </small>
            </p>
            <br />
            <div class="row">
                <div class="col-md-8">
                    <small>PT. Erasoft Teknologi Indonesia</small>
                </div>
                <div class="col-md-4 text-right">
                    <small>© 2017-2018</small>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="ibox-content">
                <div>
                    @if (Session["NotAuthorized"] != null && (bool)Session["NotAuthorized"])
                    {
                        <div class="alert alert-danger">
                            Sesi Anda telah habis. Silakan login lagi!
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        Session["NotAuthorized"] = null;
                    }

                    @if (referral == null && ViewData.ModelState.Any(x => x.Value.Errors.Any()))
                    {
                        foreach (var modelError in ViewData.ModelState.SelectMany(x => x.Value.Errors))
                        {
                            <div class="alert alert-danger">
                                @modelError.ErrorMessage
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        }
                    }

                    @using (Html.BeginForm("LoggingIn", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.UserId, new { Value = "xxx" })
                        @Html.HiddenFor(m => m.Username, new { Value = "xxx" })
                        @Html.HiddenFor(m => m.NoHp, new { Value = "xxx" })
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, "Email *", new { @class = "control-label control-label-bold" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @maxlength = 50, required = "required" })
                        </div>
                        <div class="form-group password-section">
                            @Html.LabelFor(m => m.Password, "Password *", new { @class = "control-label control-label-bold" })
                            @Html.TextBoxFor(m => m.Password, new { @class = "form-control", @type = "password", @maxlength = 50, required = "required" })
                        </div>
                        <button id="btn-login" type="submit" class="btn btn-primary full-width m-b">
                            <span>Masuk</span>
                            <i class='fa fa-spinner fa-spin pull-right hide'></i>
                        </button>
                        <button type="button" id="btn-submit-reset-password" class="btn btn-primary full-width m-b">
                            Kirim Password Baru
                        </button>
                    }
                </div>
                <div class="row">
                    <div class="col-md-6">
                        Belum punya akun?
                        <a href="/register">Daftar di sini (Gratis)</a>
                    </div>
                    <div class="col-md-6 text-right" id="lupa-pass-text">
                        Lupa password?
                        <a href="#" id="reset-pass-btn">Reset password di sini</a>
                    </div>
                    <div class="col-md-6 text-right" id="back-login-text">
                        <a href="#" id="back-to-login-btn">Kembali ke Login ></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f3f3f4;
        padding-top: 0;
    }

    .loginColumns, .passwordBox {
        margin: 0 auto;
        padding: 100px 20px 20px;
    }

    .loginColumns {
        max-width: 800px;
    }

    img[alt="logo"] {
        margin-bottom: 45px;
    }

    .ibox-content {
        clear: both;
        padding: 15px 20px 20px;
        border-color: #e7eaec;
        border-image: none;
        border-style: solid solid none;
        border-width: 1px 0;
    }

    .ibox-content, .ibox-title {
        background-color: #fff;
        color: inherit;
    }

    .space-15 {
        margin: 15px 0;
    }

    .m-b {
        margin-bottom: 15px;
    }

    .full-width {
        width: 100% !important;
    }

    .navbar {
        display: none;
    }
</style>

@section scripts
{
    <script type="text/javascript" src="//laz-g-cdn.alicdn.com/sj/securesdk/0.0.3/securesdk_lzd_v1.js" id="J_secure_sdk_v2" data-appkey="101775"></script>
    <script>
        $(document).ready(function () {
            $('#btn-submit-reset-password').hide();
            $('#back-login-text').hide();
            $("#alert-error-section").hide();

            initRequired();

            $('form:first *:input[type!=hidden]:first').focus();

            $('form').submit(function () {
                $('.fa-spin').removeClass('hide');
            });

            $('#reset-pass-btn').click(function () {
                $('.password-section').slideUp(500);
                $('#btn-submit-reset-password').show();
                $('#btn-login').hide();
                $('#back-login-text').show();
                $('#lupa-pass-text').hide();
            });

            $('#back-to-login-btn').click(function () {
                $('.password-section').slideDown(500);
                $('#btn-submit-reset-password').hide();
                $('#btn-login').show();
                $('#back-login-text').hide();
                $('#lupa-pass-text').show();
            });

            $('#btn-submit-reset-password').click(function () {
                var $email = $('#Email').val();

                if ($email === '') {
                    $('#alert-error-section #message').text('Email tidak boleh kosong!');
                    $("#alert-error-section").show();
                    setTimeout(function () {
                        $("#alert-error-section").slideUp(500);
                    }, 2000);

                    return;
                }

                $.ajax({
                    type: "POST",
                    url: '/api/lupapassword',
                    data: JSON.stringify({
                        Email: $email
                    }),
                    headers: {
                        'X-API-KEY': 'M@STERONLINE4P1K3Y',
                        'Content-Type': 'application/json'
                    },
                    contentType: 'application/json; charset=UTF-8',
                    cache: false,
                    beforeSend: function () {
                        $('#loading_spinner').show();
                    },
                    success: function () {
                        alert('Password baru telah dikirim ke email Anda!');
                        $('#loading_spinner').hide();
                    },
                    error: function (xhr) {
                        console.log(xhr);
                        $('#loading_spinner').hide();
                    }
                });
            });
        });

        function isEmptyOrSpaces(str) {
            return str === null || str.match(/^ *$/) !== null;
        }

        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return regex.test(email);
        }

        function initRequired() {
            $('form input[required="required"], form textarea[required="required"]').keydown(function (e) {
                var code = e.keyCode || e.which;
                if (code == '9') {
                    var $this = $(this);
                    var $value = $this.val();

                    if ($value == '' || isEmptyOrSpaces($value)) {
                        $this.closest('.form-group').addClass('has-error');

                        if (!$this.closest('div').find('.text-danger').length) {
                            $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        }
                    } else {
                        $this.closest('.form-group').removeClass('has-error');
                        $this.closest('div').find('.text-danger').remove();
                    }
                }
            }).on('blur change', function () {
                var $this = $(this);
                var $value = $this.val();

                if ($value == '' || isEmptyOrSpaces($value)) {
                    $this.closest('.form-group').addClass('has-error');

                    if (!$this.closest('div').find('.text-danger').length) {
                        $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                    }
                } else {
                    $this.closest('.form-group').removeClass('has-error');
                    $this.closest('div').find('.text-danger').remove();
                }
            });

            $('form select[required="required"]').on('blur change', function () {
                var $this = $(this);
                var $value = $this.find('option:selected').text();

                if ($value == null || $value == 'Harap pilih' || $value == 'Silakan pilih') {
                    $this.parent().parent('.form-group').addClass('has-error');
                    $this.css('border', 'solid 1px #a94442');

                    if (!$this.closest('div').find('.text-danger').length) {
                        $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                    }
                } else {
                    $this.parent().find('.selectize-input').css('border', 'solid 1px #d0d0d0');
                    $this.parent().parent('.form-group').removeClass('has-error');

                    if ($this.closest('div').hasClass('input-group')) {
                        $this.parent().parent().find('.text-danger').remove();
                    } else {
                        $this.closest('div').find('.text-danger').remove();
                    }
                }
            });

            $('form .selectized[required="required"]').on('blur change', function () {
                var $this = $(this);
                var $value = $this.find('option:selected').text();

                if ($value == null || $value == 'Harap pilih' || $value == 'Silakan pilih') {
                    $this.parent().parent('.form-group').addClass('has-error');
                    $this.css('border', 'solid 1px #a94442');

                    if (!$this.closest('div').find('.text-danger').length) {
                        $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                    }
                } else {
                    $this.parent().find('.selectize-input').css('border', 'solid 1px #d0d0d0');
                    $this.parent().parent('.form-group').removeClass('has-error');

                    if ($this.closest('div').hasClass('input-group')) {
                        $this.parent().parent().find('.text-danger').remove();
                    } else {
                        $this.closest('div').find('.text-danger').remove();
                    }
                }
            });

            $("form input[type='number']").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl/cmd+A
                    (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: Ctrl/cmd+C
                    (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: Ctrl/cmd+X
                    (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: Ctrl/cmd+v
                    (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            $("form input[type='email']").keydown(function (e) {
                var code = e.keyCode || e.which;
                if (code == '9') {
                    var $this = $(this);
                    var $value = $this.val();

                    if ($value == '' || isEmptyOrSpaces($value)) {
                        $this.closest('.form-group').addClass('has-error');

                        if (!$this.closest('div').find('.text-danger').length) {
                            $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        }
                    } else {
                        $this.closest('.form-group').removeClass('has-error');
                        $this.closest('div').find('.text-danger').remove();

                        if (!isEmail($value)) {
                            $this.closest('.form-group').addClass('has-error');

                            if (!$this.closest('div').find('.text-danger').length)
                                $this.closest('div').append('<span class="text-danger">Email tidak valid!</span>');
                        } else {
                            $this.closest('.form-group').removeClass('has-error');
                            $this.closest('div').find('.text-danger').remove();
                        }
                    }
                }
            }).on('blur change', function () {
                var $this = $(this);
                var $value = $this.val();

                if ($value == '' || isEmptyOrSpaces($value)) {
                    $this.closest('.form-group').addClass('has-error');

                    if (!$this.closest('div').find('.text-danger').length) {
                        $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                    }
                } else {
                    $this.closest('.form-group').removeClass('has-error');
                    $this.closest('div').find('.text-danger').remove();

                    if (!isEmail($value)) {
                        $this.closest('.form-group').addClass('has-error');

                        if (!$this.closest('div').find('.text-danger').length)
                            $this.closest('div').append('<span class="text-danger">Email tidak valid!</span>');
                    } else {
                        $this.closest('.form-group').removeClass('has-error');
                        $this.closest('div').find('.text-danger').remove();
                    }
                }
            });

            //Otomatis mengikuti attribute maxlength / stringlength
            $("form input[data-val-length-max]").each(function () {
                var $this = $(this);
                var data = $this.data();
                $this.attr("maxlength", data.valLengthMax);
            });

            $('form input[type="text"]').each(function () {
                var $this = $(this);
                var $name = $this.attr('name');

                if ($name != null) {
                    if ($name.indexOf('TLP') !== -1 || $name.indexOf('TELEPON') !== -1) {
                        $this.attr("maxlength", 15);
                    }
                }
            });

            $('form input.limited_number_textbox[type="number"]').each(function () {
                var $this = $(this);
                $this.attr('oninput', 'maxLengthCheck(this)');
            });
        }

        function validateForm() {
            var $isValid = true;

            $('form input[required="required"], form textarea[required="required"]').each(function () {
                var $this = $(this);
                var $value = $this.val();

                if ($value == '' || isEmptyOrSpaces($value)) {
                    $this.closest('.form-group').addClass('has-error');

                    if (!$this.closest('div').find('.text-danger').length) {
                        $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                    }

                    $isValid = false;
                }
            });

            $('form select[required="required"]').each(function () {
                var $this = $(this);
                var $value = $this.find('option:selected').text();

                if ($value == null || $value == 'Harap pilih' || $value == 'Silakan pilih') {
                    $this.parent().parent('.form-group').addClass('has-error');
                    $this.parent().find('.selectize-input').css('border', 'solid 1px #a94442');

                    if (!$this.closest('div').find('.text-danger').length) {
                        if ($this.closest('div').hasClass('input-group')) {
                            $this.parent().parent().append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        } else {
                            $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        }
                    }

                    $isValid = false;
                }
            });

            $('form .selectized').each(function () {
                var $this = $(this);
                var $inputSelectize = $this.parent().find('.item');

                if ($inputSelectize.length == 0) {
                    $this.parent().parent('.form-group').addClass('has-error');
                    $this.parent().find('.selectize-input').css('border', 'solid 1px #a94442');

                    if (!$this.closest('div').find('.text-danger').length) {
                        if ($this.closest('div').hasClass('input-group')) {
                            $this.parent().parent().append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        } else {
                            $this.closest('div').append('<span class="text-danger">Kolom ini tidak boleh kosong!</span>');
                        }
                    }

                    $isValid = false;
                }
            });

            var $errorElement = $('form').find('.has-error');
            if ($errorElement.length) $isValid = false;

            return $isValid;
        }
    </script>
}

